[
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "app.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "debug=True"
    ],
    "file": "app.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app.py"
  },
  {
    "pattern": "mysql\\+mysqlconnector://",
    "matches": [
      "mysql+mysqlconnector://"
    ],
    "file": "app.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "app1.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app1.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app1.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "app2.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app2.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app2.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app3.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app3.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "app4.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app4.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app4.py"
  },
  {
    "pattern": "mysql\\+mysqlconnector://",
    "matches": [
      "mysql+mysqlconnector://"
    ],
    "file": "app4.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app5.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app5.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "app6.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "debug=True"
    ],
    "file": "app6.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app6.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app6.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "app7.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "debug=True"
    ],
    "file": "app7.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app7.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app7.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "app8.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "app8.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "app8.py"
  },
  {
    "pattern": "mysql\\+mysqlconnector://",
    "matches": [
      "mysql+mysqlconnector://"
    ],
    "file": "app8.py"
  },
  {
    "pattern": "mysql\\+mysqlconnector://",
    "matches": [
      "mysql+mysqlconnector://"
    ],
    "file": "app9.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://[^"
    ],
    "file": "check_hardcoded_values.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://[^"
    ],
    "file": "check_hardcoded_values.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\[^"
    ],
    "file": "check_hardcoded_values.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/[^"
    ],
    "file": "check_hardcoded_values.py"
  },
  {
    "pattern": "/Users/[^\"\\']+",
    "matches": [
      "/Users/[^"
    ],
    "file": "check_hardcoded_values.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "check_hardcoded_values.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "check_hardcoded_values.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "check_items.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "check_items.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "check_items.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "check_production_recipes.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "check_production_recipes.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "check_production_recipes.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "check_usage_data.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "clean_and_reload_recipes.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "clean_and_reload_recipes.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "clean_and_reload_recipes.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "create_tables.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "create_tables.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "create_tables.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5000"
    ],
    "file": "create_users_table.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5000/login"
    ],
    "file": "create_users_table.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "admin@gb-app.com",
      "admin@gb-app.com",
      "test@gb-app.com",
      "test@gb-app.com"
    ],
    "file": "create_users_table.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "delete_fg_items.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "delete_fg_items.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "delete_fg_items.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "delete_fg_items_new.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "delete_fg_items_new.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "delete_fg_items_new.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "delete_null_descriptions.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "delete_null_descriptions.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "delete_null_descriptions.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "fix_item_types.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "fix_item_types.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "fix_item_types.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password='password'"
    ],
    "file": "fix_packing_schema.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "insert_recipes_only.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "insert_recipes_only.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "insert_recipes_only.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "migrate_to_exact_schema.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "migrate_to_exact_schema.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "migrate_to_exact_schema.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "revert_recipe_master.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:password@"
    ],
    "file": "run_migration.py"
  },
  {
    "pattern": "mysql\\+mysqlconnector://",
    "matches": [
      "mysql+mysqlconnector://"
    ],
    "file": "run_migration.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5000"
    ],
    "file": "run_tests.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5000/"
    ],
    "file": "run_tests.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@",
      "root:german@"
    ],
    "file": "setup_env.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german",
      "german"
    ],
    "file": "setup_env.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb",
      "gbdb"
    ],
    "file": "setup_env.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5000",
      "localhost:5000"
    ],
    "file": "test_all_modals.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5000",
      "http://localhost:5000/item-master/create"
    ],
    "file": "test_all_modals.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "test_comprehensive.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5000"
    ],
    "file": "test_comprehensive.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5000"
    ],
    "file": "test_comprehensive.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "test_comprehensive.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5000",
      "localhost:5000"
    ],
    "file": "test_item_type_modal.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5000",
      "http://localhost:5000/item-master/create"
    ],
    "file": "test_item_type_modal.py"
  },
  {
    "pattern": "root\\s*:\\s*[^@\\s]+@",
    "matches": [
      "root:german@"
    ],
    "file": "update_usage_report.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german"
    ],
    "file": "update_usage_report.py"
  },
  {
    "pattern": "gbdb",
    "matches": [
      "gbdb"
    ],
    "file": "update_usage_report.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, "
    ],
    "file": "migrations\\env.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\Users\\Sanjay.Khadka\\GB_APP\\GB-APP\\venv\\Scripts\\python.exe\n# Copyright (c) 2005-2012 Stephen John Machin, Lingfo Pty Ltd\n# This script is part of the xlrd package, which is released under a\n# BSD-style licence.\n\nfrom __future__ import print_function\n\ncmd_doc = "
    ],
    "file": "venv\\Scripts\\runxlrd.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "benjamin@python.org"
    ],
    "file": "venv\\Lib\\site-packages\\six.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue46342\n    def final(f):\n        ",
      "https://bugs.python.org/issue38834\n    # The standard library TypedDict in Python 3.9.0/1 does not honour the ",
      "https://bugs.python.org/issue42059\n    # The standard library TypedDict below Python 3.11 does not store runtime\n    # information about optional and required keys when using Required or NotRequired.\n    # Generic TypedDicts are also impossible using typing.TypedDict on Python <3.11.\n    # Aaaand on 3.12 we add __orig_bases__ to TypedDict\n    # to enable better runtime introspection.\n    # On 3.13 we deprecate some odd ways of creating TypedDicts.\n    # Also on 3.13, PEP 705 adds the ReadOnly[] qualifier.\n    # PEP 728 (still pending) makes more changes.\n    TypedDict = typing.TypedDict\n    _TypedDictMeta = typing._TypedDictMeta\n    is_typeddict = typing.is_typeddict\nelse:\n    # 3.10.0 and later\n    _TAKES_MODULE = "
    ],
    "file": "venv\\Lib\\site-packages\\typing_extensions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue9253, argparse\n            # behavior changed incompatibly in py3.3\n            self.parser.error("
    ],
    "file": "venv\\Lib\\site-packages\\alembic\\config.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue23606)"
    ],
    "file": "venv\\Lib\\site-packages\\cffi\\api.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue1574593\n                        else:\n                            res2 = None\n                    #print repr(res2)\n                    return res2\n                if issubclass(BResult, CTypesGenericPtr):\n                    # The only pointers callbacks can return are void*s:\n                    # http://bugs.python.org/issue5710\n                    callback_ctype = ctypes.CFUNCTYPE(\n                        ctypes.c_void_p,\n                        *[BArg._ctype for BArg in BArgs],\n                        use_errno=True)\n                else:\n                    callback_ctype = CTypesFunctionPtr._ctype\n                self._as_ctype_ptr = callback_ctype(callback)\n                self._address = ctypes.cast(self._as_ctype_ptr,\n                                            ctypes.c_void_p).value\n                self._own_callback = init\n\n            @staticmethod\n            def _initialize(ctypes_ptr, value):\n                if value:\n                    raise NotImplementedError("
    ],
    "file": "venv\\Lib\\site-packages\\cffi\\backend_ctypes.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://cffi.readthedocs.io/en/latest/cdef.html#ffi-cdef-limitations "
    ],
    "file": "venv\\Lib\\site-packages\\cffi\\commontypes.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue19542);\n    # we have to use a lock and do it ourselves\n    cache = ffi._typecache\n    with global_lock:\n        res1 = cache.get(key)\n        if res1 is None:\n            cache[key] = res\n            return res\n        else:\n            return res1\n\ndef pointer_cache(ffi, BType):\n    return global_cache("
    ],
    "file": "venv\\Lib\\site-packages\\cffi\\model.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.freedesktop.org/wiki/Software/pkg-config/ integration for cffi\nimport sys, os, subprocess\n\nfrom .error import PkgConfigError\n\n\ndef merge_flags(cfg1, cfg2):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\cffi\\pkgconfig.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue28401)\n\n    On Windows, with CPython <= 3.4, it"
    ],
    "file": "venv\\Lib\\site-packages\\cffi\\setuptools_ext.py"
  },
  {
    "pattern": "german",
    "matches": [
      "German"
    ],
    "file": "venv\\Lib\\site-packages\\charset_normalizer\\constant.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/Ousret/charset_normalizer>.\n:copyright: (c) 2021 by Ahmed TAHRI\n:license: MIT, see LICENSE for more details.\n",
      "https://docs.python.org/3.3/howto/logging.html#configuring-logging-for-a-library\n\nlogging.getLogger("
    ],
    "file": "venv\\Lib\\site-packages\\charset_normalizer\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://click.palletsprojects.com/en/stable/advanced/#callback-evaluation-order\n    "
    ],
    "file": "venv\\Lib\\site-packages\\click\\core.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/inspect.html#the-interpreter-stack\n        del frame\n\n        if f_globals is not None:\n            package_name = f_globals.get("
    ],
    "file": "venv\\Lib\\site-packages\\click\\decorators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue24711\n            if hide_input:\n                echo(None, err=err)\n            raise Abort() from None\n\n    if value_proc is None:\n        value_proc = convert_type(type, default)\n\n    prompt = _build_prompt(\n        text, prompt_suffix, show_default, default, show_choices, type\n    )\n\n    if confirmation_prompt:\n        if confirmation_prompt is True:\n            confirmation_prompt = _(",
      "https://en.wikipedia.org/wiki/ANSI_color and\n    https://gist.github.com/XVilka/8346728 for more information.\n\n    :param text: the string to style with ansi codes.\n    :param fg: if provided this will become the foreground color.\n    :param bg: if provided this will become the background color.\n    :param bold: if provided this will enable or disable bold mode.\n    :param dim: if provided this will enable or disable dim mode.  This is\n                badly supported.\n    :param underline: if provided this will enable or disable underline.\n    :param overline: if provided this will enable or disable overline.\n    :param italic: if provided this will enable or disable italic.\n    :param blink: if provided this will enable or disable blinking.\n    :param reverse: if provided this will enable or disable inverse\n                    rendering (foreground becomes background and the\n                    other way round).\n    :param strikethrough: if provided this will enable or disable\n        striking through text.\n    :param reset: by default a reset-all code is added at the end of the\n                  string which means that styles do not carry over.  This\n                  can be disabled to compose styles.\n\n    .. versionchanged:: 8.0\n        A non-string ``message`` is converted to a string.\n\n    .. versionchanged:: 8.0\n       Added support for 256 and RGB color codes.\n\n    .. versionchanged:: 8.0\n        Added the ``strikethrough``, ``italic``, and ``overline``\n        parameters.\n\n    .. versionchanged:: 7.0\n        Added support for bright colors.\n\n    .. versionadded:: 2.0\n    ",
      "https://click.palletsprojects.com/"
    ],
    "file": "venv\\Lib\\site-packages\\click\\termui.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\Users\\<user>\\AppData\\Roaming\\Foo Bar``\n    Windows (not roaming):\n      ``C:\\Users\\<user>\\AppData\\Local\\Foo Bar``\n\n    .. versionadded:: 2.0\n\n    :param app_name: the application name.  This should be properly capitalized\n                     and can contain whitespace.\n    :param roaming: controls if the folder should be roaming or not on Windows.\n                    Has no effect otherwise.\n    :param force_posix: if this is set to `True` then on any POSIX system the\n                        folder will be stored in the home folder with a leading\n                        dot instead of the XDG config home or darwin"
    ],
    "file": "venv\\Lib\\site-packages\\click\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bitbucket.org/pypy/pypy/issue/1803\n        return self._stream.isatty()\n\n\nclass _FixupStream:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\click\\_compat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://en.wikipedia.org/wiki/ANSI_escape_code\n"
    ],
    "file": "venv\\Lib\\site-packages\\colorama\\ansi.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/12632894/why-doesnt-getattr-work-with-exit\n        # thus, contextlib magic methods are not proxied via __getattr__\n        return self.__wrapped.__enter__(*args, **kwargs)\n\n    def __exit__(self, *args, **kwargs):\n        return self.__wrapped.__exit__(*args, **kwargs)\n\n    def __setstate__(self, state):\n        self.__dict__ = state\n\n    def __getstate__(self):\n        return self.__dict__\n\n    def write(self, text):\n        self.__convertor.write(text)\n\n    def isatty(self):\n        stream = self.__wrapped\n        if "
    ],
    "file": "venv\\Lib\\site-packages\\colorama\\ansitowin32.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.gmarts.org/index.php?go=415>`_\n\n    and\n\n    `The Calendar FAQ: Easter <https://www.tondering.dk/claus/cal/easter.php>`_\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\easter.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.tondering.dk/claus/cal/easter.php>`_\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\easter.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.egenix.com/products/python/mxBase/mxDateTime/>`_ extension.\n    However, notice that this type does *NOT* implement the same algorithm as\n    his work. Do *NOT* expect it to behave like mx.DateTime"
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\relativedelta.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc5545>`_,\nincluding support for caching of results.\n",
      "https://tools.ietf.org/\n            html/rfc5545#section-3.3.10>`_. Therefore, ``until`` and ``count``\n            **must not** occur in the same call to ``rrule``.\n    :param until:\n        If given, this must be a datetime instance specifying the upper-bound\n        limit of the recurrence. The last recurrence in the rule is the greatest\n        datetime that is less than or equal to the value specified in the\n        ``until`` parameter.\n\n        .. note::\n            As of version 2.5.0, the use of the keyword ``until`` in conjunction\n            with ``count`` is deprecated, to make sure ``dateutil`` is fully\n            compliant with `RFC-5545 Sec. 3.3.10 <https://tools.ietf.org/\n            html/rfc5545#section-3.3.10>`_. Therefore, ``until`` and ``count``\n            **must not** occur in the same call to ``rrule``.\n    :param bysetpos:\n        If given, it must be either an integer, or a sequence of integers,\n        positive or negative. Each given integer will specify an occurrence\n        number, corresponding to the nth occurrence of the rule inside the\n        frequency period. For example, a bysetpos of -1 if combined with a\n        MONTHLY frequency, and a byweekday of (MO, TU, WE, TH, FR), will\n        result in the last work day of every month.\n    :param bymonth:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the months to apply the recurrence to.\n    :param bymonthday:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the month days to apply the recurrence to.\n    :param byyearday:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the year days to apply the recurrence to.\n    :param byeaster:\n        If given, it must be either an integer, or a sequence of integers,\n        positive or negative. Each integer will define an offset from the\n        Easter Sunday. Passing the offset 0 to byeaster will yield the Easter\n        Sunday itself. This is an extension to the RFC specification.\n    :param byweekno:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the week numbers to apply the recurrence to. Week numbers\n        have the meaning described in ISO8601, that is, the first week of\n        the year is that containing at least four days of the new year.\n    :param byweekday:\n        If given, it must be either an integer (0 == MO), a sequence of\n        integers, one of the weekday constants (MO, TU, etc), or a sequence\n        of these constants. When given, these variables will define the\n        weekdays where the recurrence will be applied. It",
      "https://tools.ietf.org/html/rfc5545#section-3.3.10\n                #\n                # > If the "
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\rrule.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "3.8.2.4"
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\rrule.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/typeshed/pull/6832.\nStrPath = Union[str, "
    ],
    "file": "venv\\Lib\\site-packages\\dotenv\\main.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.pythonware.com\n# --------------------------------------------------------------------\n# The ElementTree toolkit is\n#\n# Copyright (c) 1999-2008 by Fredrik Lundh\n#\n# By obtaining, using, and/or copying this software and/or its\n# associated documentation, you agree that you have read, understood,\n# and will comply with the following terms and conditions:\n#\n# Permission to use, copy, modify, and distribute this software and\n# its associated documentation for any purpose and without fee is\n# hereby granted, provided that the above copyright notice appears in\n# all copies, and that both that copyright notice and this permission\n# notice appear in supporting documentation, and that the name of\n# Secret Labs AB or the author not be used in advertising or publicity\n# pertaining to distribution of the software without specific, written\n# prior permission.\n#\n# SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\n# TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\n# ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\n# BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\n# DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\n# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\n# OF THIS SOFTWARE.\n# --------------------------------------------------------------------\nimport contextlib\nimport io\n\nimport xml.etree.ElementTree as ET\n\n\ndef current_global_nsmap():\n    return {\n        prefix: uri for uri, prefix in ET._namespace_map.items()\n    }\n\n\nclass IncrementalTree(ET.ElementTree):\n\n    def write(\n        self,\n        file_or_filename,\n        encoding=None,\n        xml_declaration=None,\n        default_namespace=None,\n        method=None,\n        *,\n        short_empty_elements=True,\n        nsmap=None,\n        root_ns_only=False,\n        minimal_ns_only=False,\n    ):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\et_xmlfile\\incremental_tree.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/psf/license for licensing details.\n#\n# ElementTree\n# Copyright (c) 1999-2008 by Fredrik Lundh.  All rights reserved.\n#\n# fredrik@pythonware.com\n# http://www.pythonware.com\n# --------------------------------------------------------------------\n# The ElementTree toolkit is\n#\n# Copyright (c) 1999-2008 by Fredrik Lundh\n#\n# By obtaining, using, and/or copying this software and/or its\n# associated documentation, you agree that you have read, understood,\n# and will comply with the following terms and conditions:\n#\n# Permission to use, copy, modify, and distribute this software and\n# its associated documentation for any purpose and without fee is\n# hereby granted, provided that the above copyright notice appears in\n# all copies, and that both that copyright notice and this permission\n# notice appear in supporting documentation, and that the name of\n# Secret Labs AB or the author not be used in advertising or publicity\n# pertaining to distribution of the software without specific, written\n# prior permission.\n#\n# SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\n# TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\n# ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\n# BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\n# DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\n# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\n# OF THIS SOFTWARE.\n# --------------------------------------------------------------------\nimport contextlib\nimport io\n\nimport xml.etree.ElementTree as ET\n\n\ndef current_global_nsmap():\n    return {\n        prefix: uri for uri, prefix in ET._namespace_map.items()\n    }\n\n\nclass IncrementalTree(ET.ElementTree):\n\n    def write(\n        self,\n        file_or_filename,\n        encoding=None,\n        xml_declaration=None,\n        default_namespace=None,\n        method=None,\n        *,\n        short_empty_elements=True,\n        nsmap=None,\n        root_ns_only=False,\n        minimal_ns_only=False,\n    ):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\et_xmlfile\\incremental_tree.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "fredrik@pythonware.com"
    ],
    "file": "venv\\Lib\\site-packages\\et_xmlfile\\incremental_tree.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://foss.heptapod.net/openpyxl/et_xmlfile"
    ],
    "file": "venv\\Lib\\site-packages\\et_xmlfile\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "charlie.clark@clark-consulting.eu"
    ],
    "file": "venv\\Lib\\site-packages\\et_xmlfile\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com/hello``. When\n        not in an active request, URLs will be external by default, but\n        this requires setting :data:`SERVER_NAME` so Flask knows what\n        domain to use. :data:`APPLICATION_ROOT` and\n        :data:`PREFERRED_URL_SCHEME` should also be configured as\n        needed. This config is only used when not in an active request.\n\n        Functions can be decorated with :meth:`url_defaults` to modify\n        keyword arguments before the URL is built.\n\n        If building fails for some reason, such as an unknown endpoint\n        or incorrect values, the app"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\app.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0",
      "127.0.0.1",
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\app.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "debug=True"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\app.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/2/library/sys.html#sys.exc_info\n        del tb\n\n\ndef find_app_by_string(module: ModuleType, app_name: str) -> Flask:\n    ",
      "https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location.\n    :param load_defaults: Search for and load the default ``.flaskenv`` and\n        ``.env`` files.\n    :return: ``True`` if at least one env var was loaded.\n\n    .. versionchanged:: 3.1\n        Added the ``load_defaults`` parameter. A given path takes precedence\n        over default files.\n\n    .. versionchanged:: 2.0\n        The current directory is not changed to the location of the\n        loaded file.\n\n    .. versionchanged:: 2.0\n        When loading the env files, set the default encoding to UTF-8.\n\n    .. versionchanged:: 1.1.0\n        Returns ``False`` when python-dotenv is not installed, or when\n        the given path isn"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\cli.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\cli.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://img.website.com",
      "http://img.website.com"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\config.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "DEBUG = True"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://flask.palletsprojects.com/blueprints/#templates"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\debughelpers.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\testing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pallets/flask/issues/4095\n# https://github.com/pallets/flask/issues/4295\n# https://github.com/pallets/flask/issues/4297\nErrorHandlerCallable = t.Union[\n    t.Callable[[t.Any], ResponseReturnValue],\n    t.Callable[[t.Any], t.Awaitable[ResponseReturnValue]],\n]\n\nRouteCallable = t.Union[\n    t.Callable[..., ResponseReturnValue],\n    t.Callable[..., t.Awaitable[ResponseReturnValue]],\n]\n"
    ],
    "file": "venv\\Lib\\site-packages\\flask\\typing.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:514"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\config.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:8000",
      "127.0.0.1:8000",
      "127.0.0.1:8000",
      "127.0.0.1:8000",
      "127.0.0.1:8000"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\config.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt\n\n        Example for stunnel config::\n\n            [https]\n            protocol = proxy\n            accept  = 443\n            connect = 80\n            cert = /etc/ssl/certs/stunnel.pem\n            key = /etc/ssl/certs/stunnel.key\n        "
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig\n\n    For more context you can look at the default configuration dictionary for logging,\n    which can be found at ``gunicorn.glogging.CONFIG_DEFAULTS``.\n\n    .. versionadded:: 19.8\n    ",
      "https://docs.python.org/3/library/logging.config.html#logging.config.jsonConfig\n\n    .. versionadded:: 20.0\n    ",
      "https://docs.datadoghq.com/developers/dogstatsd/\nclass DogstatsdTags(Setting):\n    name = ",
      "https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet>`_.\n    OWASP provides details on user-agent compatibility at each security level.\n\n    See the `OpenSSL Cipher List Format Documentation\n    <https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-FORMAT>`_\n    for details on the format of an OpenSSL cipher list.\n    ",
      "https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn.\n\n        Use with care and only if necessary. Deprecated; scheduled for removal in 25.0.0\n\n        .. versionadded:: 20.0.1\n        "
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\config.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/djangoprojects/myproject,/home/python/mylibrary"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\config.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0",
      "127.0.0.1",
      "127.0.0.1",
      "0.0.0.0",
      "127.0.0.1",
      "127.0.0.1",
      "127.0.0.1",
      "127.0.0.1",
      "134.213.44.18",
      "127.0.0.1",
      "134.213.44.18",
      "127.0.0.1",
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\config.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://httpd.apache.org/docs/2.0/logs.html#combined\n        for format details\n        "
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\glogging.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://[%s]:%d"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\sock.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.freedesktop.org/software/systemd/man/sd_notify.html)\n    for a description of the allowable values.\n\n    If the unset_environment parameter is True, sd_notify() will unset\n    the $NOTIFY_SOCKET environment variable before returning (regardless of\n    whether the function call itself succeeded or not). Further calls to\n    sd_notify() will then fail, but the variable is no longer inherited by\n    child processes.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\systemd.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.freedesktop.org/software/systemd/man/sd_listen_fds.html>`_\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\systemd.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.faqs.org/faqs/unix-faq/programmer/faq/ section 1.7\n    ",
      "http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n        # We use temporary dot prefix to workaround this behaviour\n        parts = urllib.parse.urlsplit("
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/2/library/sys.html#sys.exc_info\n        del tb\n\n\ndef import_app(module):\n    parts = module.split("
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\util.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pallets/cachelib>`_\n    -   `python-memcached <https://pypi.org/project/python-memcached/>`_\n\n    (Unfortunately the django cache interface is not compatible because it\n    does not support storing binary data, only text. You can however pass\n    the underlying cache client to the bytecode cache which is available\n    as `django.core.cache.cache._client`.)\n\n    The minimal interface for the client passed to the constructor is this:\n\n    .. class:: MinimalClientInterface\n\n        .. method:: set(key, value[, timeout])\n\n            Stores the bytecode in the cache.  `value` is a string and\n            `timeout` the timeout of the key.  If timeout is not provided\n            a default timeout or no timeout should be assumed, if it"
    ],
    "file": "venv\\Lib\\site-packages\\jinja2\\bccache.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue1692335 Exceptions that take\n        # multiple required arguments have problems with pickling.\n        # Without this, raises TypeError: __init__() missing 1 required\n        # positional argument: "
    ],
    "file": "venv\\Lib\\site-packages\\jinja2\\exceptions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://``, ``https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param value: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param nofollow: Add the ``rel=nofollow`` attribute to links.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior. Defaults to\n        ``env.policies["
    ],
    "file": "venv\\Lib\\site-packages\\jinja2\\filters.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://html.spec.whatwg.org/#attribute-name-state\n_attr_key_re = re.compile(r",
      "https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param value: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param nofollow: Add the ``rel=nofollow`` attribute to links.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior. Defaults to\n        ``env.policies[",
      "https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n\n    .. versionchanged:: 2.8\n       The ``target`` parameter was added.\n    ",
      "https://docs.python.org/library/stdtypes.html\n        #printf-style-string-formatting\n    "
    ],
    "file": "venv\\Lib\\site-packages\\jinja2\\filters.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "address@example.com",
      "copy@example.com"
    ],
    "file": "venv\\Lib\\site-packages\\jinja2\\filters.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://``, ``https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param text: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior.\n\n    .. versionchanged:: 3.0\n        The ``extra_schemes`` parameter was added.\n\n    .. versionchanged:: 3.0\n        Generate ``https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\jinja2\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param text: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior.\n\n    .. versionchanged:: 3.0\n        The ``extra_schemes`` parameter was added.\n\n    .. versionchanged:: 3.0\n        Generate ``https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n    ",
      "https://{middle}"
    ],
    "file": "venv\\Lib\\site-packages\\jinja2\\utils.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "address@example.com",
      "copy@example.com"
    ],
    "file": "venv\\Lib\\site-packages\\jinja2\\utils.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ast.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nfrom mako import util\n\n_cache_plugins = util.PluginLoader("
    ],
    "file": "venv\\Lib\\site-packages\\mako\\cache.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\nfrom argparse import ArgumentParser\nfrom os.path import dirname\nfrom os.path import isfile\nimport sys\n\nfrom mako import exceptions\nfrom mako.lookup import TemplateLookup\nfrom mako.template import Template\n\n\ndef varsplit(var):\n    if "
    ],
    "file": "venv\\Lib\\site-packages\\mako\\cmd.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\codegen.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nimport collections\nfrom importlib import metadata as importlib_metadata\nfrom importlib import util\nimport inspect\nimport sys\n\nwin32 = sys.platform.startswith("
    ],
    "file": "venv\\Lib\\site-packages\\mako\\compat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\exceptions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n\nimport codecs\nfrom html.entities import codepoint2name\nfrom html.entities import name2codepoint\nimport re\nfrom urllib.parse import quote_plus\n\nimport markupsafe\n\nhtml_escape = markupsafe.escape\n\nxml_escapes = {\n    ",
      "http://www.w3.org/TR/2000/REC-xml-20001006#NT-EntityRef\n    __characterrefs = re.compile(\n        r"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\filters.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\lexer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nimport os\nimport posixpath\nimport re\nimport stat\nimport threading\n\nfrom mako import exceptions\nfrom mako import util\nfrom mako.template import Template\n\n\nclass TemplateCollection:\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mako\\lookup.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\parsetree.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\pygen.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\pyparser.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\runtime.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\template.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\nfrom ast import parse\nimport codecs\nimport collections\nimport operator\nimport os\nimport re\nimport timeit\n\nfrom .compat import importlib_metadata_get\n\n\ndef update_wrapper(decorated, fn):\n    decorated.__wrapped__ = fn\n    decorated.__name__ = fn.__name__\n    return decorated\n\n\nclass PluginLoader:\n    def __init__(self, group):\n        self.group = group\n        self.impls = {}\n\n    def load(self, name):\n        if name in self.impls:\n            return self.impls[name]()\n\n        for impl in importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n\n        from mako import exceptions\n\n        raise exceptions.RuntimeException(\n            ",
      "http://docs.python.org/ref/encodings.html\n\n    The ``fp`` argument should be a seekable file object in binary mode.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mako\\util.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\_ast_util.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n\n__version__ = "
    ],
    "file": "venv\\Lib\\site-packages\\mako\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/refman/9.0/en/caching-sha2-pluggable-authentication.html\n\n        :param bool local_infile:\n            enables LOAD LOCAL INFILE; zero disables\n\n        :param bool autocommit:\n            If False (default), autocommit is disabled.\n            If True, autocommit is enabled.\n            If None, autocommit isn",
      "https://opentelemetry.io/docs/specs/semconv/database/sql/\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.close()\n\n    def autocommit(self, on):\n        on = bool(on)\n        if self.get_autocommit() != on:\n            _mysql.connection.autocommit(self, on)\n\n    def cursor(self, cursorclass=None):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\MySQLdb\\connections.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "songofacandy@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\MySQLdb\\release.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0249/\n"
    ],
    "file": "venv\\Lib\\site-packages\\MySQLdb\\_exceptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://hypothesis.readthedocs.io/en/latest/settings.html\n# The first is designed for our own CI runs; the latter also\n# forces determinism and is designed for use via np.test()\nhypothesis.settings.register_profile(\n    name="
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\conftest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://scipy-cookbook.readthedocs.io/items/Ctypes.html\n\nExamples\n--------\nLoad the C library:\n\n>>> _lib = np.ctypeslib.load_library("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\ctypeslib.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html). "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\matlib.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://data-apis.org/array-api/latest/API_specification/inspection.html for\nmore details.\n\n",
      "https://data-apis.org/array-api/latest/API_specification/inspection.html\n    for more details.\n\n    Returns\n    -------\n    info : ModuleType\n        The array API inspection namespace for NumPy.\n\n    Examples\n    --------\n    >>> info = np.__array_namespace_info__()\n    >>> info.default_dtypes()\n    {",
      "https://data-apis.org/array-api/latest/API_specification/generated/array_api.info.capabilities.html\n        for more details.\n\n        See Also\n        --------\n        __array_namespace_info__.default_device,\n        __array_namespace_info__.default_dtypes,\n        __array_namespace_info__.dtypes,\n        __array_namespace_info__.devices\n\n        Returns\n        -------\n        capabilities : dict\n            A dictionary of array API library capabilities.\n\n        Examples\n        --------\n        >>> info = np.__array_namespace_info__()\n        >>> info.capabilities()\n        {"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_array_api_info.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\build-env-19lia66t\\Scripts\\python.exe"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\__config__.py"
  },
  {
    "pattern": "/Users/[^\"\\']+",
    "matches": [
      "/Users/runneradmin/AppData/Local/Temp/cibw-run-065080rt/cp313-win_amd64/build/venv/Lib/site-packages/scipy_openblas64/include",
      "/Users/runneradmin/AppData/Local/Temp/cibw-run-065080rt/cp313-win_amd64/build/venv/Lib/site-packages/scipy_openblas64/lib",
      "/Users/runneradmin/AppData/Local/Temp/cibw-run-065080rt/cp313-win_amd64/build/venv/Lib/site-packages/scipy_openblas64/include",
      "/Users/runneradmin/AppData/Local/Temp/cibw-run-065080rt/cp313-win_amd64/build/venv/Lib/site-packages/scipy_openblas64/lib"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\__config__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org>`_.\n\nWe recommend exploring the docstrings using\n`IPython <https://ipython.org>`_, an advanced Python shell with\nTAB-completion and introspection capabilities.  See below for further\ninstructions.\n\nThe docstring examples assume that `numpy` has been imported as ``np``::\n\n  >>> import numpy as np\n\nCode snippets are indicated by three greater-than signs::\n\n  >>> x = 42\n  >>> x = x + 1\n\nUse the built-in ``help`` function to view a function",
      "https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations",
      "https://github.com/numpy/numpy/issues/8577 and other\n        similar bug reports.\n\n        ",
      "https://numpy.org/devdocs/building/index.html",
      "https://github.com/torvalds/linux/commit/7cf91a98e607c2f935dbcc177d70011e95b8faff\n        "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://openpyxl.readthedocs.io"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\_constants.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "charlie.clark@clark-consulting.eu",
      "openpyxl-users@googlegroups.com"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\_constants.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0685/\n    # > When comparing extra names, tools MUST normalize the names being\n    # > compared using the semantics outlined in PEP 503 for names\n    if key == "
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\markers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/pull/13475#pullrequestreview-1079784515\n    @property  # type: ignore[override]\n    def prereleases(self) -> bool:\n        # If there is an explicit prereleases set for this, then we"
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\specifiers.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.2.3.0"
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\specifiers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/3383#issuecomment-173267692\n    has_ext = ",
      "https://developer.android.com/tools/releases/platforms>`__ to return. Defaults\n        to the current system",
      "https://developer.android.com/ndk/guides/abis>`__,\n        e.g. ``arm64_v8a``. Defaults to the current system"
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\tags.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca\nELF header: https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html\n"
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\_elffile.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://static.docs.arm.com/ihi0044/g/aaelf32.pdf\n    with _parse_elf(executable) as f:\n        return (\n            f is not None\n            and f.capacity == EIClass.C32\n            and f.encoding == EIData.Lsb\n            and f.machine == EMachine.Arm\n            and f.flags & EF_ARM_ABIMASK == EF_ARM_ABI_VER5\n            and f.flags & EF_ARM_ABI_FLOAT_HARD == EF_ARM_ABI_FLOAT_HARD\n        )\n\n\ndef _is_linux_i686(executable: str) -> bool:\n    with _parse_elf(executable) as f:\n        return (\n            f is not None\n            and f.capacity == EIClass.C32\n            and f.encoding == EIData.Lsb\n            and f.machine == EMachine.I386\n        )\n\n\ndef _have_compatible_abi(executable: str, archs: Sequence[str]) -> bool:\n    if ",
      "https://github.com/python/cpython/blob/fcf1d003bf4f0100c/Lib/platform.py#L175-L183\n    try:\n        # Should be a string like ",
      "https://sourceware.org/bugzilla/show_bug.cgi?id=24636\n    #\n    # Build a list of maximum glibc versions so that we can\n    # output the canonical list of all glibc from current_glibc\n    # down to too_old_glibc2, including all intermediary versions.\n    for glibc_major in range(current_glibc.major - 1, 1, -1):\n        glibc_minor = _LAST_GLIBC_MINOR[glibc_major]\n        glibc_max_list.append(_GLibCVersion(glibc_major, glibc_minor))\n    for arch in archs:\n        for glibc_max in glibc_max_list:\n            if glibc_max.major == too_old_glibc2.major:\n                min_minor = too_old_glibc2.minor\n            else:\n                # For other glibc major versions oldest supported is (x, 0).\n                min_minor = -1\n            for glibc_minor in range(glibc_max.minor, min_minor, -1):\n                glibc_version = _GLibCVersion(glibc_max.major, glibc_minor)\n                tag = "
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\_manylinux.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/packaging"
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "donald@stufft.io"
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pytest-dev/pytest/issues/11873\n# Would like to avoid autouse=True, but cannot as of pytest 8.0.0\n@pytest.fixture(autouse=True)\ndef add_doctest_imports(doctest_namespace) -> None:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\conftest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://mypy.readthedocs.io/en/latest/common_issues.html#import-cycles\nif TYPE_CHECKING:\n    import numpy.typing as npt\n\n    from pandas._libs import (\n        NaTType,\n        Period,\n        Timedelta,\n        Timestamp,\n    )\n    from pandas._libs.tslibs import BaseOffset\n\n    from pandas.core.dtypes.dtypes import ExtensionDtype\n\n    from pandas import Interval\n    from pandas.arrays import (\n        DatetimeArray,\n        TimedeltaArray,\n    )\n    from pandas.core.arrays.base import ExtensionArray\n    from pandas.core.frame import DataFrame\n    from pandas.core.generic import NDFrame\n    from pandas.core.groupby.generic import (\n        DataFrameGroupBy,\n        GroupBy,\n        SeriesGroupBy,\n    )\n    from pandas.core.indexes.base import Index\n    from pandas.core.internals import (\n        ArrayManager,\n        BlockManager,\n        SingleArrayManager,\n        SingleBlockManager,\n    )\n    from pandas.core.resample import Resampler\n    from pandas.core.series import Series\n    from pandas.core.window.rolling import BaseWindow\n\n    from pandas.io.formats.format import EngFormatter\n    from pandas.tseries.holiday import AbstractHolidayCalendar\n\n    ScalarLike_co = Union[\n        int,\n        float,\n        complex,\n        str,\n        bytes,\n        np.generic,\n    ]\n\n    # numpy compatible types\n    NumpyValueArrayLike = Union[ScalarLike_co, npt.ArrayLike]\n    # Name ",
      "https://github.com/hauntsaninja/useful_types\n# includes Sequence-like objects but excludes str and bytes\n_T_co = TypeVar(",
      "https://mypy.readthedocs.io/en/stable/generics.html#declaring-decorators\nFuncType = Callable[..., Any]\nF = TypeVar(",
      "https://github.com/python/typing/issues/684#issuecomment-548203158\n# https://bugs.python.org/issue41810\n# Using List[int] here rather than Sequence[int] to disallow tuples.\nScalarIndexer = Union[int, np.integer]\nSequenceIndexer = Union[slice, list[int], np.ndarray]\nPositionalIndexer = Union[ScalarIndexer, SequenceIndexer]\nPositionalIndexerTuple = tuple[PositionalIndexer, PositionalIndexer]\nPositionalIndexer2D = Union[PositionalIndexer, PositionalIndexerTuple]\nif TYPE_CHECKING:\n    TakeIndexer = Union[Sequence[int], Sequence[np.integer], npt.NDArray[np.integer]]\nelse:\n    TakeIndexer = Any\n\n# Shared by functions such as drop and astype\nIgnoreRaise = Literal["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\_typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-versioneer/python-versioneer\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\_version.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/ISO_8601#Week_dates>`_\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pendulum\\date.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/ISO_8601#Week_dates`_\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pendulum\\datetime.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/7498.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\__init__.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "PASSWORD = '28P01'"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\errorcodes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.postgresql.org/docs/current/static/errcodes-appendix.html\n#\n\n\ndef lookup(code, _cache={}):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\errorcodes.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "jdahlin@async.com.br"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\errorcodes.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "daniele.varrazzo@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\errors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0246/\n"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\extensions.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "fog@debian.org"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\extensions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/glossary.html#term-mapping\n    ",
      "https://docs.python.org/library/logging.html\n    ",
      "https://docs.python.org/library/uuid.html\n    .. __: https://www.postgresql.org/docs/current/static/datatype-uuid.html\n    ",
      "https://www.postgresql.org/docs/current/static/queries-values.html\n\n    After the execution of the function the `cursor.rowcount` property will\n    **not** contain a total result.\n\n    While :sql:`INSERT` is an obvious candidate for this function it is\n    possible to use it with other statements, for example::\n\n        >>> cur.execute(\n        ... "
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\extras.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "fog@debian.org"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\extras.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "fog@debian.org"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\pool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html# \\\n        SQL-SYNTAX-IDENTIFIERS\n\n    Example::\n\n        >>> t1 = sql.Identifier("
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\sql.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "daniele.varrazzo@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\sql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/library/datetime.html\n    "
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\tz.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "fog@debian.org"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\tz.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.postgresql.org/docs/current/static/datatype-net-types.html\n    "
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\_ipaddress.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "daniele.varrazzo@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\_ipaddress.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "daniele.varrazzo@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\_json.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "daniele.varrazzo@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\_range.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"secret\""
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://psycopg.org/\n\n.. _PostgreSQL: https://www.postgresql.org/\n.. _Python: https://www.python.org/\n\n:Groups:\n  * `Connections creation`: connect\n  * `Value objects constructors`: Binary, Date, DateFromTicks, Time,\n    TimeFromTicks, Timestamp, TimestampFromTicks\n",
      "https://archives.postgresql.org/psycopg/2011-02/msg00044.php\n\n# Import the DBAPI-2.0 stuff into top-level module.\n\nfrom psycopg2._psycopg import (                     # noqa\n    BINARY, NUMBER, STRING, DATETIME, ROWID,\n\n    Binary, Date, Time, Timestamp,\n    DateFromTicks, TimeFromTicks, TimestampFromTicks,\n\n    Error, Warning, DataError, DatabaseError, ProgrammingError, IntegrityError,\n    InterfaceError, InternalError, NotSupportedError, OperationalError,\n\n    _connect, apilevel, threadsafety, paramstyle,\n    __version__, __libpq_version__,\n)\n\n\n# Register default adapters.\n\nfrom psycopg2 import extensions as _ext\n_ext.register_adapter(tuple, _ext.SQL_IN)\n_ext.register_adapter(type(None), _ext.NoneAdapter)\n\n# Register the Decimal adapter here instead of in the C layer.\n# This way a new class is registered for each sub-interpreter.\n# See ticket #52\nfrom decimal import Decimal                         # noqa\nfrom psycopg2._psycopg import Decimal as Adapter    # noqa\n_ext.register_adapter(Decimal, Adapter)\ndel Decimal, Adapter\n\n\ndef connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "fog@debian.org"
    ],
    "file": "venv\\Lib\\site-packages\\psycopg2\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#------------------------------------------------------------------------------\n\nfrom . import c_ast\n\n\ndef fix_switch_cases(switch_node):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\ast_transforms.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#-----------------------------------------------------------------\n\n\nimport sys\n\ndef _repr(obj):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\c_ast.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#------------------------------------------------------------------------------\nfrom . import c_ast\n\n\nclass CGenerator(object):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\c_generator.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#------------------------------------------------------------------------------\nimport re\n\nfrom .ply import lex\nfrom .ply.lex import TOKEN\n\n\nclass CLexer(object):\n    ",
      "https://github.com/eliben/pycparser/issues/61)\n    #\n    # - \\x was removed from simple_escape, unless it was not followed by a hex digit, to avoid ambiguity with hex_escape.\n    # - hex_escape allows one or more hex characters, but requires that the next character(if any) is not hex\n    # - decimal_escape allows one or more decimal characters, but requires that the next character(if any) is not a decimal\n    # - bad_escape does not allow any decimals (8-9), to avoid conflicting with the permissive decimal_escape.\n    #\n    # Without this change, python"
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\c_lexer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#------------------------------------------------------------------------------\nfrom .ply import yacc\n\nfrom . import c_ast\nfrom .c_lexer import CLexer\nfrom .plyparser import PLYParser, ParseError, parameterized, template\nfrom .ast_transforms import fix_switch_cases, fix_atomic_specifiers\n\n\n@template\nclass CParser(PLYParser):\n    def __init__(\n            self,\n            lex_optimize=True,\n            lexer=CLexer,\n            lextab="
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\c_parser.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "6.7.2.4",
      "6.7.5.3",
      "6.7.5.3"
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\c_parser.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#-----------------------------------------------------------------\n\nimport warnings\n\nclass Coord(object):\n    ",
      "https://github.com/eliben/pycparser/pull/198/ and\n                #      https://github.com/eliben/pycparser/issues/197\n                # for discussion.\n                if method.__doc__ is not None:\n                    _create_param_rules(cls, method)\n                elif not issued_nodoc_warning:\n                    warnings.warn(\n                        "
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\plyparser.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#-----------------------------------------------------------------\nfrom string import Template\n\n\nclass ASTCodeGenerator(object):\n    def __init__(self, cfg_filename=",
      "https://eli.thegreenplace.net/]\n# License: BSD\n#-----------------------------------------------------------------\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\_ast_gen.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#-----------------------------------------------------------------\n\n# Insert "
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\_build_tables.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://eli.thegreenplace.net/]\n# License: BSD\n#-----------------------------------------------------------------\n__all__ = ["
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\__init__.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german",
      "german",
      "german",
      "german"
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\charset.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://dev.mysql.com/doc/internals/en/client-server-protocol.html\n# Error codes:\n# https://dev.mysql.com/doc/refman/5.5/en/error-handling.html\nimport errno\nimport os\nimport socket\nimport struct\nimport sys\nimport traceback\nimport warnings\n\nfrom . import _auth\n\nfrom .charset import charset_by_name, charset_by_id\nfrom .constants import CLIENT, COMMAND, CR, ER, FIELD_TYPE, SERVER_STATUS\nfrom . import converters\nfrom .cursors import Cursor\nfrom .optionfile import Parser\nfrom .protocol import (\n    dump_packet,\n    MysqlPacket,\n    FieldDescriptorPacket,\n    OKPacketWrapper,\n    EOFPacketWrapper,\n    LoadLocalPacketWrapper,\n)\nfrom . import err, VERSION_STRING\n\ntry:\n    import ssl\n\n    SSL_ENABLED = True\nexcept ImportError:\n    ssl = None\n    SSL_ENABLED = False\n\ntry:\n    import getpass\n\n    DEFAULT_USER = getpass.getuser()\n    del getpass\nexcept (ImportError, KeyError):\n    # KeyError occurs when there"
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\connections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/refman/5.5/en/error-handling.html\nimport errno\nimport os\nimport socket\nimport struct\nimport sys\nimport traceback\nimport warnings\n\nfrom . import _auth\n\nfrom .charset import charset_by_name, charset_by_id\nfrom .constants import CLIENT, COMMAND, CR, ER, FIELD_TYPE, SERVER_STATUS\nfrom . import converters\nfrom .cursors import Cursor\nfrom .optionfile import Parser\nfrom .protocol import (\n    dump_packet,\n    MysqlPacket,\n    FieldDescriptorPacket,\n    OKPacketWrapper,\n    EOFPacketWrapper,\n    LoadLocalPacketWrapper,\n)\nfrom . import err, VERSION_STRING\n\ntry:\n    import ssl\n\n    SSL_ENABLED = True\nexcept ImportError:\n    ssl = None\n    SSL_ENABLED = False\n\ntry:\n    import getpass\n\n    DEFAULT_USER = getpass.getuser()\n    del getpass\nexcept (ImportError, KeyError):\n    # KeyError occurs when there",
      "https://dev.mysql.com/doc/internals/en/integer.html#packet-Protocol::LengthEncodedInteger\ndef _lenenc_int(i):\n    if i < 0:\n        raise ValueError(\n            ",
      "https://www.python.org/dev/peps/pep-0249/#connection-objects>`_ in the\n    specification.\n    ",
      "https://github.com/PyMySQL/PyMySQL/issues/939\n            # warnings.warn(",
      "https://github.com/PyMySQL/PyMySQL/issues/939\n            # warnings.warn(\n            #    ",
      "https://www.python.org/dev/peps/pep-0249/#Connection.close>`_\n        in the specification.\n\n        :raise Error: If the connection is already closed.\n        ",
      "https://www.python.org/dev/peps/pep-0249/#commit>`_\n        in the specification.\n        ",
      "https://www.python.org/dev/peps/pep-0249/#rollback>`_\n        in the specification.\n        ",
      "https://github.com/PyMySQL/PyMySQL/issues/1092\n            # - https://github.com/wagtail/wagtail/issues/9477\n            # - https://zenn.dev/methane/articles/2023-mysql-collation (Japanese)\n            self.set_character_set(self.charset, self.collation)\n\n            if self.sql_mode is not None:\n                c = self.cursor()\n                c.execute(",
      "https://dev.mysql.com/doc/internals/en/sending-more-than-16mbyte.html\n            if bytes_to_read < MAX_PACKET_LEN:\n                break\n\n        packet = packet_type(bytes(buff), self.encoding)\n        if packet.is_error_packet():\n            if self._result is not None and self._result.unbuffered_active is True:\n                self._result.unbuffered_active = False\n            packet.raise_for_error()\n        return packet\n\n    def _read_bytes(self, num_bytes):\n        self._sock.settimeout(self._read_timeout)\n        while True:\n            try:\n                data = self._rfile.read(num_bytes)\n                break\n            except OSError as e:\n                if e.errno == errno.EINTR:\n                    continue\n                self._force_close()\n                raise err.OperationalError(\n                    CR.CR_SERVER_LOST,\n                    f",
      "https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::HandshakeResponse\n        if int(self.server_version.split(",
      "https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthSwitchRequest\n            auth_packet.read_uint8()  # 0xfe packet identifier\n            plugin_name = auth_packet.read_string()\n            if (\n                self.server_capabilities & CLIENT.PLUGIN_AUTH\n                and plugin_name is not None\n            ):\n                auth_packet = self._process_auth(plugin_name, auth_packet)\n            else:\n                raise err.OperationalError(",
      "https://dev.mysql.com/doc/internals/en/successful-authentication.html\n            if self._auth_plugin_name == ",
      "https://dev.mysql.com/doc/internals/en/clear-text-authentication.html\n            data = self.password + b",
      "https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake\n            # didn",
      "https://github.com/PyMySQL/PyMySQL/pull/434\n                break\n            if data is not None:\n                if encoding is not None:\n                    data = data.decode(encoding)\n                if DEBUG:\n                    print(",
      "https://github.com/PyMySQL/PyMySQL/issues/488\n                    encoding = conn_encoding  # SELECT CAST(... AS JSON)\n                elif field_type in TEXT_TYPES:\n                    if field.charsetnr == 63:  # binary\n                        # TEXTs with charset=binary means BINARY types.\n                        encoding = None\n                    else:\n                        encoding = conn_encoding\n                else:\n                    # Integers, Dates and Times, and other basic data is encoded in ascii\n                    encoding = "
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\connections.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "c:\\\\my.ini"
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\connections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0249/#cursor-objects>`_ in\n    the specification.\n    ",
      "https://github.com/django/django/blob/0c1518ee429b01c145cf5b34eab01b0b92f8c246/django/db/backends/mysql/features.py#L8\n            return ()\n        end = self.rownumber + (size or self.arraysize)\n        result = self._rows[self.rownumber : end]\n        self.rownumber = min(end, len(self._rows))\n        return result\n\n    def fetchall(self):\n        ",
      "https://github.com/django/django/blob/0c1518ee429b01c145cf5b34eab01b0b92f8c246/django/db/backends/mysql/features.py#L8\n            return ()\n        return rows\n\n    def scroll(self, value, mode="
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\cursors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_err_packet.html\n    # Error packet has optional sqlstate that is 5 bytes and starts with "
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\err.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://dev.mysql.com/doc/internals/en/client-server-protocol.html\n\nfrom .charset import MBLENGTH\nfrom .constants import FIELD_TYPE, SERVER_STATUS\nfrom . import err\n\nimport struct\nimport sys\n\n\nDEBUG = False\n\nNULL_COLUMN = 251\nUNSIGNED_CHAR_COLUMN = 251\nUNSIGNED_SHORT_COLUMN = 252\nUNSIGNED_INT24_COLUMN = 253\nUNSIGNED_INT64_COLUMN = 254\n\n\ndef dump_packet(data):  # pragma: no cover\n    def printable(data):\n        if 32 <= data < 127:\n            return chr(data)\n        return ",
      "http://dev.mysql.com/doc/internals/en/generic-response-packets.html#packet-EOF_Packet\n        # Caution: \\xFE may be LengthEncodedInteger.\n        # If \\xFE is LengthEncodedInteger header, 8bytes followed.\n        return self._data[0] == 0xFE and len(self._data) < 9\n\n    def is_auth_switch_request(self):\n        # http://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthSwitchRequest\n        return self._data[0] == 0xFE\n\n    def is_extra_auth_data(self):\n        # https://dev.mysql.com/doc/internals/en/successful-authentication.html\n        return self._data[0] == 1\n\n    def is_resultset_packet(self):\n        field_count = self._data[0]\n        return 1 <= field_count <= 250\n\n    def is_load_local_packet(self):\n        return self._data[0] == 0xFB\n\n    def is_error_packet(self):\n        return self._data[0] == 0xFF\n\n    def check_error(self):\n        if self.is_error_packet():\n            self.raise_for_error()\n\n    def raise_for_error(self):\n        self.rewind()\n        self.advance(1)  # field_count == error (we already know that)\n        errno = self.read_uint16()\n        if DEBUG:\n            print("
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\protocol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html\n        return self._data[0] == 0 and len(self._data) >= 7\n\n    def is_eof_packet(self):\n        # http://dev.mysql.com/doc/internals/en/generic-response-packets.html#packet-EOF_Packet\n        # Caution: \\xFE may be LengthEncodedInteger.\n        # If \\xFE is LengthEncodedInteger header, 8bytes followed.\n        return self._data[0] == 0xFE and len(self._data) < 9\n\n    def is_auth_switch_request(self):\n        # http://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthSwitchRequest\n        return self._data[0] == 0xFE\n\n    def is_extra_auth_data(self):\n        # https://dev.mysql.com/doc/internals/en/successful-authentication.html\n        return self._data[0] == 1\n\n    def is_resultset_packet(self):\n        field_count = self._data[0]\n        return 1 <= field_count <= 250\n\n    def is_load_local_packet(self):\n        return self._data[0] == 0xFB\n\n    def is_error_packet(self):\n        return self._data[0] == 0xFF\n\n    def check_error(self):\n        if self.is_error_packet():\n            self.raise_for_error()\n\n    def raise_for_error(self):\n        self.rewind()\n        self.advance(1)  # field_count == error (we already know that)\n        errno = self.read_uint16()\n        if DEBUG:\n            print("
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\protocol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/internals/en/secure-password-authentication.html#packet-Authentication::Native41\n\n\ndef scramble_native_password(password, message):\n    ",
      "https://mariadb.com/kb/en/library/connection/#client_ed25519-plugin\n\n_nacl_bindings = False\n\n\ndef _init_nacl():\n    global _nacl_bindings\n    try:\n        from nacl import bindings\n\n        _nacl_bindings = bindings\n    except ImportError:\n        raise RuntimeError(\n            ",
      "https://github.com/mysql/mysql-server/blob/7d10c82196c8e45554f27c00681474a9fb86d137/sql/auth/sha2_password.cc#L939-L945\n    salt = salt[:SCRAMBLE_LENGTH]\n    password_bytes = bytearray(password)\n    # salt = bytearray(salt)  # for PY2 compat.\n    salt_len = len(salt)\n    for i in range(len(password_bytes)):\n        password_bytes[i] ^= salt[i % salt_len]\n    return bytes(password_bytes)\n\n\ndef sha2_rsa_encrypt(password, salt, public_key):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\_auth.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.launchpad.net/bugs/383171 - we avoid using this\n            # unless absolutely necessary to help when a broken version of\n            # pkg_resources is installed.\n            try:\n                from pkg_resources import resource_stream\n            except ImportError:\n                resource_stream = None\n\n            if resource_stream is not None:\n                return resource_stream(__name__, "
    ],
    "file": "venv\\Lib\\site-packages\\pytz\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/pull/6710 for more details."
    ],
    "file": "venv\\Lib\\site-packages\\requests\\adapters.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpbin.org/get"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/3772\n        if not 400 <= r.status_code < 500:\n            self._thread_local.num_401_calls = 1\n            return r\n\n        if self._thread_local.pos is not None:\n            # Rewind the file position indicator of the body to where\n            # it was to resend the request.\n            r.request.body.seek(self._thread_local.pos)\n        s_auth = r.headers.get("
    ],
    "file": "venv\\Lib\\site-packages\\requests\\auth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/3578.\nimport encodings.idna  # noqa: F401\nfrom io import UnsupportedOperation\n\nfrom urllib3.exceptions import (\n    DecodeError,\n    LocationParseError,\n    ProtocolError,\n    ReadTimeoutError,\n    SSLError,\n)\nfrom urllib3.fields import RequestField\nfrom urllib3.filepost import encode_multipart_formdata\nfrom urllib3.util import parse_url\n\nfrom ._internal_utils import to_native_string, unicode_is_ascii\nfrom .auth import HTTPBasicAuth\nfrom .compat import (\n    Callable,\n    JSONDecodeError,\n    Mapping,\n    basestring,\n    builtin_str,\n    chardet,\n    cookielib,\n)\nfrom .compat import json as complexjson\nfrom .compat import urlencode, urlsplit, urlunparse\nfrom .cookies import _copy_cookie_jar, cookiejar_from_dict, get_cookie_header\nfrom .exceptions import (\n    ChunkedEncodingError,\n    ConnectionError,\n    ContentDecodingError,\n    HTTPError,\n    InvalidJSONError,\n    InvalidURL,\n)\nfrom .exceptions import JSONDecodeError as RequestsJSONDecodeError\nfrom .exceptions import MissingSchema\nfrom .exceptions import SSLError as RequestsSSLError\nfrom .exceptions import StreamConsumedError\nfrom .hooks import default_hooks\nfrom .status_codes import codes\nfrom .structures import CaseInsensitiveDict\nfrom .utils import (\n    check_header_validity,\n    get_auth_from_url,\n    guess_filename,\n    guess_json_utf,\n    iter_slices,\n    parse_header_links,\n    requote_uri,\n    stream_decode_response_unicode,\n    super_len,\n    to_key_val_list,\n)\n\n#: The set of HTTP status codes that indicate an automatically\n#: processable redirect.\nREDIRECT_STATI = (\n    codes.moved,  # 301\n    codes.found,  # 302\n    codes.other,  # 303\n    codes.temporary_redirect,  # 307\n    codes.permanent_redirect,  # 308\n)\n\nDEFAULT_REDIRECT_LIMIT = 30\nCONTENT_CHUNK_SIZE = 10 * 1024\nITER_CHUNK_SIZE = 512\n\n\nclass RequestEncodingMixin:\n    @property\n    def path_url(self):\n        ",
      "https://httpbin.org/get",
      "https://httpbin.org/get",
      "https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(",
      "https://{url}?"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\models.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://domain.tld/path/to/resource",
      "http://host.name"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\sessions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/1084\n            if resp.status_code not in (\n                codes.temporary_redirect,\n                codes.permanent_redirect,\n            ):\n                # https://github.com/psf/requests/issues/3490\n                purged_headers = (",
      "https://tools.ietf.org/html/rfc7231#section-6.4.4\n        if response.status_code == codes.see_other and method != ",
      "https://httpbin.org/get",
      "https://httpbin.org/get"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\sessions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://.../back.jpeg>; rel=back;type="
    ],
    "file": "venv\\Lib\\site-packages\\requests\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.ietf.org/rfc/rfc4627.txt since the charset was unset\n        return "
    ],
    "file": "venv\\Lib\\site-packages\\requests\\utils.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\foo\\bar.txt"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\utils.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.1.1",
      "192.168.1.0",
      "192.168.1.1",
      "192.168.100.0",
      "255.255.255.0"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org",
      "https://httpbin.org/post",
      "https://requests.readthedocs.io>.\n\n:copyright: (c) 2017 by Kenneth Reitz.\n:license: Apache 2.0, see LICENSE for more details.\n"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://requests.readthedocs.io"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\__version__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "me@kennethreitz.org"
    ],
    "file": "venv\\Lib\\site-packages\\requests\\__version__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://sqlalche.me/e/{_version_token}/{self.code})",
      "https://sqlalche.me/e/b8d9)"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\exc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\inspection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\log.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "vinay_sajip@yahoo.co.uk"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\log.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\nfrom . import util as _util\nfrom .engine import AdaptedConnection as AdaptedConnection\nfrom .engine import BaseRow as BaseRow\nfrom .engine import BindTyping as BindTyping\nfrom .engine import ChunkedIteratorResult as ChunkedIteratorResult\nfrom .engine import Compiled as Compiled\nfrom .engine import Connection as Connection\nfrom .engine import create_engine as create_engine\nfrom .engine import create_mock_engine as create_mock_engine\nfrom .engine import create_pool_from_url as create_pool_from_url\nfrom .engine import CreateEnginePlugin as CreateEnginePlugin\nfrom .engine import CursorResult as CursorResult\nfrom .engine import Dialect as Dialect\nfrom .engine import Engine as Engine\nfrom .engine import engine_from_config as engine_from_config\nfrom .engine import ExceptionContext as ExceptionContext\nfrom .engine import ExecutionContext as ExecutionContext\nfrom .engine import FrozenResult as FrozenResult\nfrom .engine import Inspector as Inspector\nfrom .engine import IteratorResult as IteratorResult\nfrom .engine import make_url as make_url\nfrom .engine import MappingResult as MappingResult\nfrom .engine import MergedResult as MergedResult\nfrom .engine import NestedTransaction as NestedTransaction\nfrom .engine import Result as Result\nfrom .engine import result_tuple as result_tuple\nfrom .engine import ResultProxy as ResultProxy\nfrom .engine import RootTransaction as RootTransaction\nfrom .engine import Row as Row\nfrom .engine import RowMapping as RowMapping\nfrom .engine import ScalarResult as ScalarResult\nfrom .engine import Transaction as Transaction\nfrom .engine import TwoPhaseTransaction as TwoPhaseTransaction\nfrom .engine import TypeCompiler as TypeCompiler\nfrom .engine import URL as URL\nfrom .inspection import inspect as inspect\nfrom .pool import AssertionPool as AssertionPool\nfrom .pool import AsyncAdaptedQueuePool as AsyncAdaptedQueuePool\nfrom .pool import (\n    FallbackAsyncAdaptedQueuePool as FallbackAsyncAdaptedQueuePool,\n)\nfrom .pool import NullPool as NullPool\nfrom .pool import Pool as Pool\nfrom .pool import PoolProxiedConnection as PoolProxiedConnection\nfrom .pool import PoolResetState as PoolResetState\nfrom .pool import QueuePool as QueuePool\nfrom .pool import SingletonThreadPool as SingletonThreadPool\nfrom .pool import StaticPool as StaticPool\nfrom .schema import BaseDDLElement as BaseDDLElement\nfrom .schema import BLANK_SCHEMA as BLANK_SCHEMA\nfrom .schema import CheckConstraint as CheckConstraint\nfrom .schema import Column as Column\nfrom .schema import ColumnDefault as ColumnDefault\nfrom .schema import Computed as Computed\nfrom .schema import Constraint as Constraint\nfrom .schema import DDL as DDL\nfrom .schema import DDLElement as DDLElement\nfrom .schema import DefaultClause as DefaultClause\nfrom .schema import ExecutableDDLElement as ExecutableDDLElement\nfrom .schema import FetchedValue as FetchedValue\nfrom .schema import ForeignKey as ForeignKey\nfrom .schema import ForeignKeyConstraint as ForeignKeyConstraint\nfrom .schema import Identity as Identity\nfrom .schema import Index as Index\nfrom .schema import insert_sentinel as insert_sentinel\nfrom .schema import MetaData as MetaData\nfrom .schema import PrimaryKeyConstraint as PrimaryKeyConstraint\nfrom .schema import Sequence as Sequence\nfrom .schema import Table as Table\nfrom .schema import UniqueConstraint as UniqueConstraint\nfrom .sql import ColumnExpressionArgument as ColumnExpressionArgument\nfrom .sql import NotNullable as NotNullable\nfrom .sql import Nullable as Nullable\nfrom .sql import SelectLabelStyle as SelectLabelStyle\nfrom .sql.expression import Alias as Alias\nfrom .sql.expression import alias as alias\nfrom .sql.expression import AliasedReturnsRows as AliasedReturnsRows\nfrom .sql.expression import all_ as all_\nfrom .sql.expression import and_ as and_\nfrom .sql.expression import any_ as any_\nfrom .sql.expression import asc as asc\nfrom .sql.expression import between as between\nfrom .sql.expression import BinaryExpression as BinaryExpression\nfrom .sql.expression import bindparam as bindparam\nfrom .sql.expression import BindParameter as BindParameter\nfrom .sql.expression import bitwise_not as bitwise_not\nfrom .sql.expression import BooleanClauseList as BooleanClauseList\nfrom .sql.expression import CacheKey as CacheKey\nfrom .sql.expression import Case as Case\nfrom .sql.expression import case as case\nfrom .sql.expression import Cast as Cast\nfrom .sql.expression import cast as cast\nfrom .sql.expression import ClauseElement as ClauseElement\nfrom .sql.expression import ClauseList as ClauseList\nfrom .sql.expression import collate as collate\nfrom .sql.expression import CollectionAggregate as CollectionAggregate\nfrom .sql.expression import column as column\nfrom .sql.expression import ColumnClause as ColumnClause\nfrom .sql.expression import ColumnCollection as ColumnCollection\nfrom .sql.expression import ColumnElement as ColumnElement\nfrom .sql.expression import ColumnOperators as ColumnOperators\nfrom .sql.expression import CompoundSelect as CompoundSelect\nfrom .sql.expression import CTE as CTE\nfrom .sql.expression import cte as cte\nfrom .sql.expression import custom_op as custom_op\nfrom .sql.expression import Delete as Delete\nfrom .sql.expression import delete as delete\nfrom .sql.expression import desc as desc\nfrom .sql.expression import distinct as distinct\nfrom .sql.expression import except_ as except_\nfrom .sql.expression import except_all as except_all\nfrom .sql.expression import Executable as Executable\nfrom .sql.expression import Exists as Exists\nfrom .sql.expression import exists as exists\nfrom .sql.expression import Extract as Extract\nfrom .sql.expression import extract as extract\nfrom .sql.expression import false as false\nfrom .sql.expression import False_ as False_\nfrom .sql.expression import FromClause as FromClause\nfrom .sql.expression import FromGrouping as FromGrouping\nfrom .sql.expression import func as func\nfrom .sql.expression import funcfilter as funcfilter\nfrom .sql.expression import Function as Function\nfrom .sql.expression import FunctionElement as FunctionElement\nfrom .sql.expression import FunctionFilter as FunctionFilter\nfrom .sql.expression import GenerativeSelect as GenerativeSelect\nfrom .sql.expression import Grouping as Grouping\nfrom .sql.expression import HasCTE as HasCTE\nfrom .sql.expression import HasPrefixes as HasPrefixes\nfrom .sql.expression import HasSuffixes as HasSuffixes\nfrom .sql.expression import Insert as Insert\nfrom .sql.expression import insert as insert\nfrom .sql.expression import intersect as intersect\nfrom .sql.expression import intersect_all as intersect_all\nfrom .sql.expression import Join as Join\nfrom .sql.expression import join as join\nfrom .sql.expression import Label as Label\nfrom .sql.expression import label as label\nfrom .sql.expression import LABEL_STYLE_DEFAULT as LABEL_STYLE_DEFAULT\nfrom .sql.expression import (\n    LABEL_STYLE_DISAMBIGUATE_ONLY as LABEL_STYLE_DISAMBIGUATE_ONLY,\n)\nfrom .sql.expression import LABEL_STYLE_NONE as LABEL_STYLE_NONE\nfrom .sql.expression import (\n    LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL,\n)\nfrom .sql.expression import lambda_stmt as lambda_stmt\nfrom .sql.expression import LambdaElement as LambdaElement\nfrom .sql.expression import Lateral as Lateral\nfrom .sql.expression import lateral as lateral\nfrom .sql.expression import literal as literal\nfrom .sql.expression import literal_column as literal_column\nfrom .sql.expression import modifier as modifier\nfrom .sql.expression import not_ as not_\nfrom .sql.expression import Null as Null\nfrom .sql.expression import null as null\nfrom .sql.expression import nulls_first as nulls_first\nfrom .sql.expression import nulls_last as nulls_last\nfrom .sql.expression import nullsfirst as nullsfirst\nfrom .sql.expression import nullslast as nullslast\nfrom .sql.expression import Operators as Operators\nfrom .sql.expression import or_ as or_\nfrom .sql.expression import outerjoin as outerjoin\nfrom .sql.expression import outparam as outparam\nfrom .sql.expression import Over as Over\nfrom .sql.expression import over as over\nfrom .sql.expression import quoted_name as quoted_name\nfrom .sql.expression import ReleaseSavepointClause as ReleaseSavepointClause\nfrom .sql.expression import ReturnsRows as ReturnsRows\nfrom .sql.expression import (\n    RollbackToSavepointClause as RollbackToSavepointClause,\n)\nfrom .sql.expression import SavepointClause as SavepointClause\nfrom .sql.expression import ScalarSelect as ScalarSelect\nfrom .sql.expression import Select as Select\nfrom .sql.expression import select as select\nfrom .sql.expression import Selectable as Selectable\nfrom .sql.expression import SelectBase as SelectBase\nfrom .sql.expression import SQLColumnExpression as SQLColumnExpression\nfrom .sql.expression import StatementLambdaElement as StatementLambdaElement\nfrom .sql.expression import Subquery as Subquery\nfrom .sql.expression import table as table\nfrom .sql.expression import TableClause as TableClause\nfrom .sql.expression import TableSample as TableSample\nfrom .sql.expression import tablesample as tablesample\nfrom .sql.expression import TableValuedAlias as TableValuedAlias\nfrom .sql.expression import text as text\nfrom .sql.expression import TextAsFrom as TextAsFrom\nfrom .sql.expression import TextClause as TextClause\nfrom .sql.expression import TextualSelect as TextualSelect\nfrom .sql.expression import true as true\nfrom .sql.expression import True_ as True_\nfrom .sql.expression import try_cast as try_cast\nfrom .sql.expression import TryCast as TryCast\nfrom .sql.expression import Tuple as Tuple\nfrom .sql.expression import tuple_ as tuple_\nfrom .sql.expression import type_coerce as type_coerce\nfrom .sql.expression import TypeClause as TypeClause\nfrom .sql.expression import TypeCoerce as TypeCoerce\nfrom .sql.expression import UnaryExpression as UnaryExpression\nfrom .sql.expression import union as union\nfrom .sql.expression import union_all as union_all\nfrom .sql.expression import Update as Update\nfrom .sql.expression import update as update\nfrom .sql.expression import UpdateBase as UpdateBase\nfrom .sql.expression import Values as Values\nfrom .sql.expression import values as values\nfrom .sql.expression import ValuesBase as ValuesBase\nfrom .sql.expression import Visitable as Visitable\nfrom .sql.expression import within_group as within_group\nfrom .sql.expression import WithinGroup as WithinGroup\nfrom .types import ARRAY as ARRAY\nfrom .types import BIGINT as BIGINT\nfrom .types import BigInteger as BigInteger\nfrom .types import BINARY as BINARY\nfrom .types import BLOB as BLOB\nfrom .types import BOOLEAN as BOOLEAN\nfrom .types import Boolean as Boolean\nfrom .types import CHAR as CHAR\nfrom .types import CLOB as CLOB\nfrom .types import DATE as DATE\nfrom .types import Date as Date\nfrom .types import DATETIME as DATETIME\nfrom .types import DateTime as DateTime\nfrom .types import DECIMAL as DECIMAL\nfrom .types import DOUBLE as DOUBLE\nfrom .types import Double as Double\nfrom .types import DOUBLE_PRECISION as DOUBLE_PRECISION\nfrom .types import Enum as Enum\nfrom .types import FLOAT as FLOAT\nfrom .types import Float as Float\nfrom .types import INT as INT\nfrom .types import INTEGER as INTEGER\nfrom .types import Integer as Integer\nfrom .types import Interval as Interval\nfrom .types import JSON as JSON\nfrom .types import LargeBinary as LargeBinary\nfrom .types import NCHAR as NCHAR\nfrom .types import NUMERIC as NUMERIC\nfrom .types import Numeric as Numeric\nfrom .types import NVARCHAR as NVARCHAR\nfrom .types import PickleType as PickleType\nfrom .types import REAL as REAL\nfrom .types import SMALLINT as SMALLINT\nfrom .types import SmallInteger as SmallInteger\nfrom .types import String as String\nfrom .types import TEXT as TEXT\nfrom .types import Text as Text\nfrom .types import TIME as TIME\nfrom .types import Time as Time\nfrom .types import TIMESTAMP as TIMESTAMP\nfrom .types import TupleType as TupleType\nfrom .types import TypeDecorator as TypeDecorator\nfrom .types import Unicode as Unicode\nfrom .types import UnicodeText as UnicodeText\nfrom .types import UUID as UUID\nfrom .types import Uuid as Uuid\nfrom .types import VARBINARY as VARBINARY\nfrom .types import VARCHAR as VARCHAR\n\n__version__ = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/commit/0d4026432591d43185568dd31cef6a034c4b9261\n            # and https://github.com/python/cpython/commit/6fbc61070fda2ffb8889e77e3b24bca4249ab4d1\n            def _tunnel(self) -> None:\n                _MAXLINE = http.client._MAXLINE  # type: ignore[attr-defined]\n                connect = b",
      "https://github.com/python/cpython/commit/23aef575c7629abcd4aaf028ebd226fb41a4b3c8\n            def _tunnel(self) -> None:  # noqa: F811\n                connect = b",
      "https://github.com/urllib3/urllib3/issues/3267.\n        if self.proxy_is_forwarding:\n            self.is_verified = False\n        else:\n            self.is_verified = sock_and_verified.is_verified\n\n        # If there",
      "https://github.com/pyca/pyopenssl/pull/933\n        or ssl_.IS_PYOPENSSL\n        or not ssl_.HAS_NEVER_CHECK_COMMON_NAME\n    ):\n        context.check_hostname = False\n\n    # Try to load OS default certs if none are given. We need to do the hasattr() check\n    # for custom pyOpenSSL SSLContext objects because they don",
      "https://urllib3.readthedocs.io/en/latest/advanced-usage.html"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\connection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://hg.python.org/cpython/file/7aaba721ebc0/Lib/socket.py#l252\n_blocking_errnos = {errno.EAGAIN, errno.EWOULDBLOCK}\n\n\nclass HTTPConnectionPool(ConnectionPool, RequestMethods):\n    ",
      "http://google.com/",
      "http://bugs.python.org/issue28539\n    if host and host.startswith("
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\connectionpool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            # Condition changed later to emit ECONNRESET instead of only EPROTOTYPE.\n            if e.errno != errno.EPROTOTYPE and e.errno != errno.ECONNRESET:\n                raise\n\n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n\n        if not conn.is_closed:\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f",
      "https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n\n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n\n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else",
      "https://github.com/urllib3/urllib3/issues/2791\n        if not conn.is_verified and not conn.proxy_is_verified:\n            warnings.warn(\n                (\n                    f",
      "https://urllib3.readthedocs.io/en/latest/advanced-usage.html"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\connectionpool.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:8080"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\exceptions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http:// or https://",
      "http:// or https://"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\exceptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc2388#section-4.4>`_.\n\n    :param name:\n        The name of the parameter, a string expected to be ASCII only.\n    :param value:\n        The value of the parameter, provided as ``bytes`` or `str``.\n    :returns:\n        An RFC-2231-formatted unicode string.\n\n    .. deprecated:: 2.0.0\n        Will be removed in urllib3 v2.1.0. This is not valid for\n        ``multipart/form-data`` header parameters.\n    ",
      "https://html.spec.whatwg.org/multipage/\n        form-control-infrastructure.html#multipart-form-data\n\n    :param name:\n        The name of the parameter, an ASCII-only ``str``.\n    :param value:\n        The value of the parameter, a ``str`` or UTF-8 encoded\n        ``bytes``.\n    :returns:\n        A string ``name="
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\fields.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:3128"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://google.com/",
      "https://google.com/mail",
      "https://yahoo.com/",
      "https://github.com/urllib3/urllib3/issues/2920",
      "https://localhost:3128/",
      "https://google.com/",
      "https://httpbin.org/",
      "https://httpbin.org/",
      "https://twitter.com/"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue16298) do\n                # not properly close the connection in all cases. There is\n                # no harm in redundantly calling close.\n                self._fp.close()\n                if (\n                    self.enforce_content_length\n                    and self.length_remaining is not None\n                    and self.length_remaining != 0\n                ):\n                    # This is an edge case that httplib failed to cover due\n                    # to concerns of backward compatibility. We"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/pull/2624\n        _zstd_version = tuple(\n            map(int, re.search(r",
      "https://www.rfc-editor.org/rfc/rfc8259#section-8.1>`_.\n\n        To use a custom JSON decoder pass the result of :attr:`HTTPResponse.data` to\n        your custom decoder instead.\n\n        If the body of the HTTP response is not decodable to UTF-8, a\n        `UnicodeDecodeError` will be raised. If the body of the HTTP response is not a\n        valid JSON document, a `json.JSONDecodeError` will be raised.\n\n        Read more :ref:`here <json_content>`.\n\n        :returns: The body of the HTTP response as a Python object.\n        ",
      "https://github.com/urllib3/urllib3/issues/2513#issuecomment-1152559900.\n          * urllib3 injected with pyOpenSSL-backed SSL-support.\n          * CPython < 3.10 only when `amt` does not fit 32-bit int.\n        ",
      "https://github.com/python/cpython/issues/113199\n                self._fp.close()\n\n        if data:\n            self._fp_bytes_read += len(data)\n            if self.length_remaining is not None:\n                self.length_remaining -= len(data)\n        return data\n\n    def read(\n        self,\n        amt: int | None = None,\n        decode_content: bool | None = None,\n        cache_content: bool = False,\n    ) -> bytes:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\response.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "8.4.1.3"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/3020",
      "https://github.com/urllib3/urllib3/issues/2168"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "andrey.petrov@shazow.net"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\__init__.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0",
      "192.0.2.1",
      "192.0.2.1",
      "192.0.2.1"
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\adjustments.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/Pylons/waitress/issues/138,\n# Python on Windows may not define IPPROTO_IPV6 in socket.\nimport socket\nimport sys\nimport warnings\n\n# True if we are running on Windows\nWIN = platform.system() == ",
      "https://github.com/Pylons/waitress. "
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7230#section-3.5 to support\n                # clients sending an extra CR LF after another request when\n                # using HTTP pipelining\n                header_plus = header_plus.lstrip()\n\n                if not header_plus:\n                    self.empty = True\n                    self.completed = True\n                else:\n                    try:\n                        self.parse_header(header_plus)\n                    except ParsingError as e:\n                        self.error = BadRequest(e.args[0])\n                        self.completed = True\n                    except TransferEncodingNotImplemented as e:\n                        self.error = ServerNotImplemented(e.args[0])\n                        self.completed = True\n                    else:\n                        if self.body_rcv is None:\n                            # no content-length header and not a t-e: chunked\n                            # request\n                            self.completed = True\n\n                        if self.content_length > 0:\n                            max_body = self.adj.max_request_body_size\n                            # we won",
      "https://tools.ietf.org/html/rfc7230#section-4 we only support\n                # chunked at this time.\n\n                # Note: the identity transfer-coding was removed in RFC7230:\n                # https://tools.ietf.org/html/rfc7230#appendix-A.2 and is thus\n                # not supported\n\n                if encoding not in {",
      "https://github.com/python/cpython/blob/8c9e9b0cd5b24dfbf1424d1f253d02de80e8f5ef/Lib/urllib/parse.py#L465-L468\n    # and https://github.com/Pylons/waitress/issues/260\n\n    if uri[:2] == b",
      "https://corte.si/posts/code/pathod/pythonservers/index.html\n                raise ParsingError(",
      "https://www.iana.org/assignments/http-methods/http-methods.xhtml and\n    # the request method is case sensitive according to\n    # https://tools.ietf.org/html/rfc7231#section-4.1\n\n    # By disallowing anything but uppercase methods we save poor\n    # unsuspecting souls from sending lowercase HTTP methods to waitress\n    # and having the request complete, while servers like nginx drop the\n    # request onto the floor.\n\n    if method != method.upper():\n        raise ParsingError("
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\parser.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.0.2.1"
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\proxy_headers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.rfc-editor.org/errata_search.php?rfc=7230&eid=4189\n# changes field-content to:\n#\n# field-content  = field-vchar [ 1*( SP / HTAB / field-vchar )\n#                  field-vchar ]\n\nFIELD_VCHAR = "
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\rfc7230.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:8080"
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\runner.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0",
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\runner.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/Pylons/waitress/issues/63\n            map = {}\n        if sockinfo is None:\n            sockinfo = adj.listen[0]\n\n        self.sockinfo = sockinfo\n        self.family = sockinfo[0]\n        self.socktype = sockinfo[1]\n        self.application = application\n        self.adj = adj\n        self.trigger = trigger.trigger(map)\n        if dispatcher is None:\n            dispatcher = ThreadedTaskDispatcher()\n            dispatcher.set_thread_count(self.adj.threads)\n\n        self.task_dispatcher = dispatcher\n        self.asyncore.dispatcher.__init__(self, _sock, map=map)\n        if _sock is None:\n            self.create_socket(self.family, self.socktype)\n            if self.family == socket.AF_INET6:  # pragma: nocover\n                self.socket.setsockopt(IPPROTO_IPV6, IPV6_V6ONLY, 1)\n\n        self.set_reuse_addr()\n\n        if bind_socket:\n            self.bind_server_socket()\n\n        self.effective_host, self.effective_port = self.getsockname()\n        self.server_name = adj.server_name\n        self.active_channels = {}\n        if _start:\n            self.accept_connections()\n\n    def bind_server_socket(self):\n        raise NotImplementedError  # pragma: no cover\n\n    def getsockname(self):\n        raise NotImplementedError  # pragma: no cover\n\n    def accept_connections(self):\n        self.accepting = True\n        self.socket.listen(self.adj.backlog)  # Get around asyncore NT limit\n\n    def add_task(self, task):\n        self.task_dispatcher.add_task(task)\n\n    def readable(self):\n        now = time.time()\n        if now >= self.next_channel_cleanup:\n            self.next_channel_cleanup = now + self.adj.cleanup_interval\n            self.maintenance(now)\n\n        if self.accepting:\n            if (\n                not self.in_connection_overflow\n                and len(self._map) >= self.adj.connection_limit\n            ):\n                self.in_connection_overflow = True\n                self.logger.warning(\n                    "
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\server.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://mail.zope.org/pipermail/zope/2005-July/160433.html\n                # for hideous details.\n                a = socket.socket()\n                a.bind(("
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\trigger.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\trigger.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "rushing@nightmare.com"
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\wasyncore.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://{}:{}"
    ],
    "file": "venv\\Lib\\site-packages\\waitress\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://browsercookielimits.squawky.net/\n\n    .. versionchanged:: 3.1\n        The ``partitioned`` parameter was added.\n\n    .. versionchanged:: 3.0\n        Passing bytes, and the ``charset`` parameter, were removed.\n\n    .. versionchanged:: 2.3.3\n        The ``path`` parameter is ``/`` by default.\n\n    .. versionchanged:: 2.3.1\n        The value allows more characters without quoting.\n\n    .. versionchanged:: 2.3\n        ``localhost`` and other names without a dot are allowed for the domain. A\n        leading dot is ignored.\n\n    .. versionchanged:: 2.3\n        The ``path`` parameter is ``None`` by default.\n\n    .. versionchanged:: 1.0.0\n        The string ``"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\http.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpwg.org/specs/rfc9110.html#abnf.extension>`__.\n\n    This extends :func:`urllib.request.parse_http_list` to remove surrounding quotes\n    from values.\n\n    .. code-block:: python\n\n        parse_list_header(",
      "https://www.rfc-editor.org/rfc/rfc2231#section-3>`__. Only ASCII, UTF-8,\n    and ISO-8859-1 charsets are accepted, otherwise the value remains quoted.\n\n    :param value: The header value to parse.\n\n    .. versionchanged:: 3.0\n        Passing bytes is not supported.\n\n    .. versionchanged:: 3.0\n        The ``cls`` argument is removed.\n\n    .. versionchanged:: 2.3\n        Added support for ``key*=charset",
      "https://httpwg.org/specs/rfc9110.html#parameter\n_parameter_key_re = re.compile(r",
      "https://www.rfc-editor.org/rfc/rfc2231#section-4\n_charset_value_re = re.compile(\n    r",
      "https://www.rfc-editor.org/rfc/rfc2231#section-3\n_continuation_re = re.compile(r",
      "https://httpwg.org/specs/rfc9110.html#parameter>`__. Invalid parts are\n    skipped.\n\n    This handles continuations and charsets as described in\n    `RFC 2231 <https://www.rfc-editor.org/rfc/rfc2231#section-3>`__, although not as\n    strictly as the RFC. Only ASCII, UTF-8, and ISO-8859-1 charsets are accepted,\n    otherwise the value remains quoted.\n\n    Clients may not be consistent in how they handle a quote character within a quoted\n    value. The `HTML Standard <https://html.spec.whatwg.org/#multipart-form-data>`__\n    replaces it with ``%22`` in multipart form data.\n    `RFC 9110 <https://httpwg.org/specs/rfc9110.html#quoted.strings>`__ uses backslash\n    escapes in HTTP headers. Both are decoded to the ``",
      "https://httpwg.org/specs/rfc9110.html#field.accept>`__.\n\n    Returns an :class:`.Accept` instance, which can sort and inspect items based on\n    their quality parameter. When parsing ``Accept-Charset``, ``Accept-Encoding``, or\n    ``Accept-Language``, pass the appropriate :class:`.Accept` subclass.\n\n    :param value: The header value to parse.\n    :param cls: The :class:`.Accept` class to wrap the result in.\n    :return: An instance of ``cls``.\n\n    .. versionchanged:: 2.3\n        Parse according to RFC 9110. Items with invalid ``q`` values are skipped.\n    ",
      "https://url.spec.whatwg.org/#url-path-segment-string\n        # as well as percent for things that are already quoted\n        # excluding semicolon since it"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\http.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpwg.org/specs/rfc7230.html#rfc.section.3.3.1\n                if (\n                    not (\n                        "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\serving.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0",
      "10.253.155.219",
      "127.0.0.1",
      "0.0.0.0",
      "0.0.0.0",
      "127.0.0.1",
      "0.0.0.0",
      "0.0.0.0"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\serving.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:80"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\test.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:3000"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\testapp.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:3000/\n\n    The application displays important information from the WSGI environment,\n    the Python interpreter and the installed libraries.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\testapp.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://fonts.googleapis.com/css?family=Ubuntu);\n\n  body       { font-family: "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\testapp.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://xn--n3h.net/p%C3%A5th?q=%C3%A8ry%DF",
      "http://\\\\u2603.net/p\\\\xe5th?q=\\\\xe8ry%DF",
      "http://\\\\u2603.net/p\\\\xe5th?q=\\\\xe8ry%DF",
      "http://xn--n3h.net/p%C3%A5th?q=%C3%A8ry%DF"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\urls.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://url.spec.whatwg.org/#percent-encoded-bytes\n# always keep all controls, space, and % quoted\n_always_unsafe = bytes((*range(0x21), 0x25, 0x7F)).decode()\n_unquote_fragment = _make_unquote_part(",
      "https://url.spec.whatwg.org/#url-path-segment-string\n    # as well as percent for things that are already quoted\n    path = quote(parts.path, safe=",
      "https://url.spec.whatwg.org/#percent-encoded-bytes\n    return urlencode(items, safe="
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\urls.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cgit.freedesktop.org/xdg/shared-mime-info/tree/freedesktop.org.xml.in\n# https://www.iana.org/assignments/media-types/media-types.xhtml\n# Types listed in the XDG mime info that have a charset in the IANA registration.\n_charset_mimetypes = {\n    "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/gorakhargosh/watchdog/issues/294\n        self.should_reload = True\n        self.log_reload(filename)\n\n    def __enter__(self) -> ReloaderLoop:\n        self.watches: dict[str, t.Any] = {}\n        self.observer.start()\n        return super().__enter__()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):  # type: ignore\n        self.observer.stop()\n        self.observer.join()\n\n    def run(self) -> None:\n        while not self.should_reload:\n            self.run_step()\n            time.sleep(self.interval)\n\n        sys.exit(3)\n\n    def run_step(self) -> None:\n        to_delete = set(self.watches)\n\n        for path in _find_watchdog_paths(self.extra_files, self.exclude_patterns):\n            if path not in self.watches:\n                try:\n                    self.watches[path] = self.observer.schedule(\n                        self.event_handler, path, recursive=True\n                    )\n                except OSError:\n                    # Clear this path from list of watches We don"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\_reloader.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/library#struct_module"
    ],
    "file": "venv\\Lib\\site-packages\\xlrd\\sheet.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/issues/87412\n        # If __iter__ is not overridden, Python uses a fast path for dict(md),\n        # taking the data directly and getting lists of values, rather than\n        # calling __getitem__ and getting only the first value.\n        return super().__iter__()\n\n    def __getitem__(self, key: K) -> V:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py"
  },
  {
    "pattern": "secret\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "SECRET = \"%(secret)s\""
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\tbtools.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pallets/werkzeug/issues/925\n            from subprocess import PIPE\n            from subprocess import Popen\n\n            dump = Popen(\n                ["
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\__init__.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\__init__.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:5001"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\middleware\\http_proxy.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:5001/"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\middleware\\http_proxy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://url.spec.whatwg.org/#url-path-segment-string\n                # as well as percent for things that are already quoted\n                remote_url = quote(remote_path, safe="
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\middleware\\http_proxy.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\middleware\\http_proxy.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/shared/``.  This is pretty useful during development\n    because a standalone media server is not required. Files can also be\n    mounted on the root folder and still continue to use the application because\n    the shared data middleware forwards all unhandled requests to the\n    application, even if the requests are below one of the shared folders.\n\n    If `pkg_resources` is available you can also tell the middleware to serve\n    files from package data::\n\n        app = SharedDataMiddleware(app, {\n            "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\middleware\\shared_data.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://url.spec.whatwg.org/#url-path-segment-string\n        return quote(str(value), safe="
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\converters.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/downloads/\n        >>> urls.match(",
      "http://example.com/downloads/42"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\map.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://url.spec.whatwg.org/#url-path-segment-string\n            new_path = quote(e.path_info, safe="
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\map.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/all/page/1`` they will be\n        redirected to ``http://example.com/all/``.  If `redirect_defaults` is\n        disabled on the `Map` instance this will only affect the URL\n        generation.\n\n    `subdomain`\n        The subdomain rule string for this rule. If not specified the rule\n        only matches for the `default_subdomain` of the map.  If the map is\n        not bound to a subdomain this feature is disabled.\n\n        Can be useful if you want to have user profiles on different subdomains\n        and all subdomains are forwarded to your application::\n\n            url_map = Map([\n                Rule("
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\rules.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://url.spec.whatwg.org/#url-path-segment-string\n                opl.append((False, quote(data, safe="
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\rules.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://kb.example.com/browse/42/",
      "http://kb.example.com/browse/",
      "http://kb.example.com/browse/42/3",
      "http://www.example.com/",
      "http://www.example.com/about"
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7233#section-3.2\n        # A server MUST ignore an If-Range header field received in a request\n        # that does not contain a Range header field.\n        if_range = parse_if_range_header(http_if_range)\n\n    if if_range is not None and if_range.date is not None:\n        modified_since: datetime | None = if_range.date\n    else:\n        modified_since = parse_date(http_if_modified_since)\n\n    if modified_since and last_modified and last_modified <= modified_since:\n        unmodified = True\n\n    if etag:\n        etag, _ = unquote_etag(etag)\n\n        if if_range is not None and if_range.etag is not None:\n            unmodified = parse_etags(if_range.etag).contains(etag)\n        else:\n            if_none_match = parse_etags(http_if_none_match)\n            if if_none_match:\n                # https://tools.ietf.org/html/rfc7232#section-3.2\n                # ",
      "https://tools.ietf.org/html/rfc7232#section-3.1\n            # "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\http.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://browsercookielimits.squawky.net/\n    max_cookie_size = 4093\n\n    # A :class:`Headers` object representing the response headers.\n    headers: Headers\n\n    def __init__(\n        self,\n        status: int | str | HTTPStatus | None = None,\n        headers: t.Mapping[str, str | t.Iterable[str]]\n        | t.Iterable[tuple[str, str]]\n        | None = None,\n        mimetype: str | None = None,\n        content_type: str | None = None,\n    ) -> None:\n        if isinstance(headers, Headers):\n            self.headers = headers\n        elif not headers:\n            self.headers = Headers()\n        else:\n            self.headers = Headers(headers)\n\n        if content_type is None:\n            if mimetype is None and "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://url.spec.whatwg.org/#url-path-segment-string\n    # as well as percent for things that are already quoted\n    url.append(quote(root_path.rstrip("
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com/app/``.\n        "
    ],
    "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.pyopenssl.org\n.. _cryptography: https://cryptography.io\n.. _idna: https://github.com/kjd/idna\n"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\contrib\\pyopenssl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://urllib3.readthedocs.io/en/latest/advanced-usage.html#socks-proxies"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\contrib\\socks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpwg.org/specs/rfc9113.html#n-field-validity)\n\n    `http.client._is_legal_header_name` does not validate the field name according to the\n    HTTP 1.1 spec, so we do that here, in addition to checking for uppercase characters.\n\n    This does not allow for the `:` character in the header name, so should not\n    be used to validate pseudo-headers.\n    ",
      "https://httpwg.org/specs/rfc9113.html#n-field-validity)\n    "
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\http2\\connection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/3290"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\http2\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/pull/611\n        # https://bugs.python.org/issue658327\n        try:\n            sock = socket.socket(socket.AF_INET6)\n            sock.bind((host, 0))\n            has_ipv6 = True\n        except Exception:\n            pass\n\n    if sock:\n        sock.close()\n    return has_ipv6\n\n\nHAS_IPV6 = _has_ipv6("
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\connection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/800\n\n    # So we ignore the following defects:\n    # - StartBoundaryNotFoundDefect:\n    #     The claimed start boundary was never found.\n    # - MultipartInvariantViolationDefect:\n    #     A message claimed to be a multipart but no subparts were found.\n    defects = [\n        defect\n        for defect in headers.defects\n        if not isinstance(\n            defect, (StartBoundaryNotFoundDefect, MultipartInvariantViolationDefect)\n        )\n    ]\n\n    if defects or unparsed_data:\n        raise HeaderParsingError(defects=defects, unparsed_data=unparsed_data)\n\n\ndef is_response_to_head(response: httplib.HTTPResponse) -> bool:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com/",
      "https://example.com/",
      "https://example.com/",
      "https://tools.ietf.org/html/rfc7230#section-3.2.4\n        if re.match(r"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\retry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/2192#issuecomment-821832963\n    https://foss.heptapod.net/pypy/pypy/-/issues/3539\n    ",
      "https://foss.heptapod.net/pypy/pypy/-/issues/3129\n        return pypy_version_info >= (7, 3, 8)  # type: ignore[operator]\n    elif implementation_name == ",
      "https://github.com/urllib3/urllib3/pull/3024\n    is_openssl = openssl_version.startswith(",
      "https://github.com/openssl/openssl/issues/14579\n    # This was released in OpenSSL 1.1.1l+ (>=0x101010cf)\n    is_openssl_issue_14579_fixed = openssl_version_number >= 0x101010CF\n\n    return is_openssl and (\n        is_openssl_issue_14579_fixed\n        or _is_bpo_43522_fixed(implementation_name, version_info, pypy_version_info)\n    )\n\n\nif typing.TYPE_CHECKING:\n    from ssl import VerifyMode\n    from typing import TypedDict\n\n    from .ssltransport import SSLTransport as SSLTransportType\n\n    class _TYPE_PEER_CERT_RET_DICT(TypedDict, total=False):\n        subjectAltName: tuple[tuple[str, str], ...]\n        subject: tuple[tuple[tuple[str, str], ...], ...]\n        serialNumber: str\n\n\n# Mapping from "
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\ssl_.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/3/license.html\n# It is modified to remove commonName support.\n\nfrom __future__ import annotations\n\nimport ipaddress\nimport re\nimport typing\nfrom ipaddress import IPv4Address, IPv6Address\n\nif typing.TYPE_CHECKING:\n    from .ssl_ import _TYPE_PEER_CERT_RET_DICT\n\n__version__ = ",
      "http://tools.ietf.org/html/rfc6125#section-6.4.3\n    "
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\ssl_match_hostname.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "3.5.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\ssl_match_hostname.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n        None will set an infinite timeout for connection attempts.\n\n    :type connect: int, float, or None\n\n    :param read:\n        The maximum amount of time (in seconds) to wait between consecutive\n        read operations for a response from the server. Omitting the parameter\n        will default the read timeout to the system default, probably `the\n        global default timeout in socket.py\n        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n        None will set an infinite timeout.\n\n    :type read: int, float, or None\n\n    .. note::\n\n        Many factors can affect the total amount of time for urllib3 to return\n        an HTTP response.\n\n        For example, Python"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\timeout.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com/",
      "https://example.com/",
      "https://example.com/"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\timeout.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://tools.ietf.org/html/rfc3986#section-5.2.4 for pseudo-code\n    segments = path.split(",
      "http://google.com/mail/"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-hyper/rfc3986\n_PERCENT_RE = re.compile(r",
      "https://google.com/mail/",
      "https://google.com/mail/",
      "https://username:password@host.com:80/path?query#fragment"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\url.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "password@host.com"
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\util\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/WebAssembly/js-promise-integration/blob/main/proposals/js-promise-integration/Overview.md\n*and* you launch pyodide using `pyodide.runPythonAsync`, this will fetch data using the\nJavaScript asynchronous fetch api (wrapped via `pyodide.ffi.call_sync`). In this case\ntimeouts and streaming should just work.\n\nOtherwise, it uses a combination of XMLHttpRequest and a web-worker for streaming.\n\nThis approach has several caveats:\n\nFirstly, you can",
      "https://github.com/koenvo/pyodide-http/issues/22\n",
      "https://stackoverflow.com/a/78524615\n    if _is_node_js():\n        fetch_data["
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\contrib\\emscripten\\fetch.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.rfc-editor.org/rfc/rfc8259#section-8.1>`_.\n\n        To use a custom JSON decoder pass the result of :attr:`HTTPResponse.data` to\n        your custom decoder instead.\n\n        If the body of the HTTP response is not decodable to UTF-8, a\n        `UnicodeDecodeError` will be raised. If the body of the HTTP response is not a\n        valid JSON document, a `json.JSONDecodeError` will be raised.\n\n        Read more :ref:`here <json_content>`.\n\n        :returns: The body of the HTTP response as a Python object.\n        "
    ],
    "file": "venv\\Lib\\site-packages\\urllib3\\contrib\\emscripten\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom .asyncio import AsyncAdapt_dbapi_connection\nfrom .asyncio import AsyncAdapt_dbapi_cursor\nfrom .asyncio import AsyncAdapt_dbapi_ss_cursor\nfrom .asyncio import AsyncAdaptFallback_dbapi_connection\nfrom .pyodbc import PyODBCConnector\nfrom .. import pool\nfrom .. import util\nfrom ..util.concurrency import await_fallback\nfrom ..util.concurrency import await_only\n\nif TYPE_CHECKING:\n    from ..engine.interfaces import ConnectArgsType\n    from ..engine.url import URL\n\n\nclass AsyncAdapt_aioodbc_cursor(AsyncAdapt_dbapi_cursor):\n    __slots__ = ()\n\n    def setinputsizes(self, *inputsizes):\n        # see https://github.com/aio-libs/aioodbc/issues/451\n        return self._cursor._impl.setinputsizes(*inputsizes)\n\n        # how it",
      "https://github.com/aio-libs/aioodbc/issues/448\n        # self._connection.autocommit = value\n\n        self._connection._conn.autocommit = value\n\n    def cursor(self, server_side=False):\n        # aioodbc sets connection=None when closed and just fails with\n        # AttributeError here.  Here we use the same ProgrammingError +\n        # message that pyodbc uses, so it triggers is_disconnect() as well.\n        if self._connection.closed:\n            raise self.dbapi.ProgrammingError(\n                "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\connectors\\aioodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n",
      "https://github.com/aio-libs/aioodbc/issues/451\n        # right now\n\n        return self.await_(self._cursor.setinputsizes(*inputsizes))\n\n    def __iter__(self):\n        while self._rows:\n            yield self._rows.popleft()\n\n    def fetchone(self):\n        if self._rows:\n            return self._rows.popleft()\n        else:\n            return None\n\n    def fetchmany(self, size=None):\n        if size is None:\n            size = self.arraysize\n        rr = self._rows\n        return [rr.popleft() for _ in range(min(size, len(rr)))]\n\n    def fetchall(self):\n        retval = list(self._rows)\n        self._rows.clear()\n        return retval\n\n\nclass AsyncAdapt_dbapi_ss_cursor(AsyncAdapt_dbapi_cursor):\n    __slots__ = ()\n    server_side = True\n\n    def __init__(self, adapt_connection):\n        self._adapt_connection = adapt_connection\n        self._connection = adapt_connection._connection\n        self.await_ = adapt_connection.await_\n\n        cursor = self._connection.cursor()\n\n        self._cursor = self.await_(cursor.__aenter__())\n\n    def close(self):\n        if self._cursor is not None:\n            self.await_(self._cursor.close())\n            self._cursor = None\n\n    def fetchone(self):\n        return self.await_(self._cursor.fetchone())\n\n    def fetchmany(self, size=None):\n        return self.await_(self._cursor.fetchmany(size=size))\n\n    def fetchall(self):\n        return self.await_(self._cursor.fetchall())\n\n    def __iter__(self):\n        iterator = self._cursor.__aiter__()\n        while True:\n            try:\n                yield self.await_(iterator.__anext__())\n            except StopAsyncIteration:\n                break\n\n\nclass AsyncAdapt_dbapi_connection(AdaptedConnection):\n    _cursor_cls = AsyncAdapt_dbapi_cursor\n    _ss_cursor_cls = AsyncAdapt_dbapi_ss_cursor\n\n    await_ = staticmethod(await_only)\n    __slots__ = (",
      "https://github.com/aio-libs/aioodbc/issues/448\n        # self._connection.autocommit = value\n\n        self._connection._conn.autocommit = value\n\n    def cursor(self, server_side=False):\n        if server_side:\n            return self._ss_cursor_cls(self)\n        else:\n            return self._cursor_cls(self)\n\n    def rollback(self):\n        self.await_(self._connection.rollback())\n\n    def commit(self):\n        self.await_(self._connection.commit())\n\n    def close(self):\n        self.await_(self._connection.close())\n\n\nclass AsyncAdaptFallback_dbapi_connection(AsyncAdapt_dbapi_connection):\n    __slots__ = ()\n\n    await_ = staticmethod(await_fallback)\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\connectors\\asyncio.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport re\nfrom types import ModuleType\nimport typing\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\nfrom urllib.parse import unquote_plus\n\nfrom . import Connector\nfrom .. import ExecutionContext\nfrom .. import pool\nfrom .. import util\nfrom ..engine import ConnectArgsType\nfrom ..engine import Connection\nfrom ..engine import interfaces\nfrom ..engine import URL\nfrom ..sql.type_api import TypeEngine\n\nif typing.TYPE_CHECKING:\n    from ..engine.interfaces import IsolationLevel\n\n\nclass PyODBCConnector(Connector):\n    driver = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\connectors\\pyodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\nfrom ..engine.interfaces import Dialect\n\n\nclass Connector(Dialect):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\connectors\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\cyextension\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Iterable\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Union\n\nfrom ..sql import roles\nfrom ..sql.base import ColumnCollection\nfrom ..sql.schema import Column\nfrom ..sql.schema import ColumnCollectionConstraint\nfrom ..sql.schema import Index\n\n\n_OnConflictConstraintT = Union[str, ColumnCollectionConstraint, Index, None]\n_OnConflictIndexElementsT = Optional[\n    Iterable[Union[Column[Any], str, roles.DDLConstraintColumnRole]]\n]\n_OnConflictIndexWhereT = Optional[roles.WhereHavingRole]\n_OnConflictSetT = Optional[\n    Union[Mapping[Any, Any], ColumnCollection[Any, Any]]\n]\n_OnConflictWhereT = Optional[roles.WhereHavingRole]\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\_typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Callable\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TYPE_CHECKING\n\nfrom .. import util\n\nif TYPE_CHECKING:\n    from ..engine.interfaces import Dialect\n\n__all__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n",
      "https://github.com/python/typing/discussions/1095\n\n        @property\n        def pool(self) -> Pool:\n            return self._proxied.pool\n\n        @pool.setter\n        def pool(self, pool: Pool) -> None:\n            self._proxied.pool = pool\n\n        @property\n        def _has_events(self) -> bool:\n            return self._proxied._has_events or self.__dict__.get(\n                "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport abc\nimport typing\nfrom typing import Any\nfrom typing import ClassVar\n\nif typing.TYPE_CHECKING:\n    from .base import Connection\n    from .interfaces import DBAPIConnection\n    from .interfaces import Dialect\n\n\nclass ConnectionCharacteristic(abc.ABC):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\characteristics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport inspect\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Type\nfrom typing import Union\n\nfrom . import base\nfrom . import url as _url\nfrom .interfaces import DBAPIConnection\nfrom .mock import create_mock_engine\nfrom .. import event\nfrom .. import exc\nfrom .. import util\nfrom ..pool import _AdhocProxiedConnection\nfrom ..pool import ConnectionPoolEntry\nfrom ..sql import compiler\nfrom ..util import immutabledict\n\nif typing.TYPE_CHECKING:\n    from .base import Engine\n    from .interfaces import _ExecuteOptions\n    from .interfaces import _ParamStyle\n    from .interfaces import IsolationLevel\n    from .url import URL\n    from ..log import _EchoFlagType\n    from ..pool import _CreatorFnType\n    from ..pool import _CreatorWRecFnType\n    from ..pool import _ResetStyleArgType\n    from ..pool import Pool\n    from ..util.typing import Literal\n\n\n@overload\ndef create_engine(\n    url: Union[str, URL],\n    *,\n    connect_args: Dict[Any, Any] = ...,\n    convert_unicode: bool = ...,\n    creator: Union[_CreatorFnType, _CreatorWRecFnType] = ...,\n    echo: _EchoFlagType = ...,\n    echo_pool: _EchoFlagType = ...,\n    enable_from_linting: bool = ...,\n    execution_options: _ExecuteOptions = ...,\n    future: Literal[True],\n    hide_parameters: bool = ...,\n    implicit_returning: Literal[True] = ...,\n    insertmanyvalues_page_size: int = ...,\n    isolation_level: IsolationLevel = ...,\n    json_deserializer: Callable[..., Any] = ...,\n    json_serializer: Callable[..., Any] = ...,\n    label_length: Optional[int] = ...,\n    logging_name: str = ...,\n    max_identifier_length: Optional[int] = ...,\n    max_overflow: int = ...,\n    module: Optional[Any] = ...,\n    paramstyle: Optional[_ParamStyle] = ...,\n    pool: Optional[Pool] = ...,\n    poolclass: Optional[Type[Pool]] = ...,\n    pool_logging_name: str = ...,\n    pool_pre_ping: bool = ...,\n    pool_size: int = ...,\n    pool_recycle: int = ...,\n    pool_reset_on_return: Optional[_ResetStyleArgType] = ...,\n    pool_timeout: float = ...,\n    pool_use_lifo: bool = ...,\n    plugins: List[str] = ...,\n    query_cache_size: int = ...,\n    use_insertmanyvalues: bool = ...,\n    **kwargs: Any,\n) -> Engine: ...\n\n\n@overload\ndef create_engine(url: Union[str, URL], **kwargs: Any) -> Engine: ...\n\n\n@util.deprecated_params(\n    strategy=(\n        ",
      "https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_\n        to use when rendering bound parameters.  This style defaults to the\n        one recommended by the DBAPI itself, which is retrieved from the\n        ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept\n        more than one paramstyle, and in particular it may be desirable\n        to change a "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\create.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\cursor.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "foo@bar.com",
      "bar@bat.com"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\cursor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import Union\n\nfrom .base import Connection\nfrom .base import Engine\nfrom .interfaces import ConnectionEventsTarget\nfrom .interfaces import DBAPIConnection\nfrom .interfaces import DBAPICursor\nfrom .interfaces import Dialect\nfrom .. import event\nfrom .. import exc\nfrom ..util.typing import Literal\n\nif typing.TYPE_CHECKING:\n    from .interfaces import _CoreMultiExecuteParams\n    from .interfaces import _CoreSingleExecuteParams\n    from .interfaces import _DBAPIAnyExecuteParams\n    from .interfaces import _DBAPIMultiExecuteParams\n    from .interfaces import _DBAPISingleExecuteParams\n    from .interfaces import _ExecuteOptions\n    from .interfaces import ExceptionContext\n    from .interfaces import ExecutionContext\n    from .result import Result\n    from ..pool import ConnectionPoolEntry\n    from ..sql import Executable\n    from ..sql.elements import BindParameter\n\n\nclass ConnectionEvents(event.Events[ConnectionEventsTarget]):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.python.org/dev/peps/pep-0249/#connection-objects>`_\n        - in :pep:`249`\n\n    ",
      "https://www.python.org/dev/peps/pep-0249/#type-objects>`_\n        - in :pep:`249`\n\n    ",
      "https://www.python.org/dev/peps/pep-0249/#cursor-objects>`_\n        - in :pep:`249`\n\n    ",
      "https://www.python.org/dev/peps/pep-0249/#description>`_\n            - in :pep:`249`\n\n\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\interfaces.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom operator import attrgetter\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Optional\nfrom typing import Type\nfrom typing import Union\n\nfrom . import url as _url\nfrom .. import util\n\n\nif typing.TYPE_CHECKING:\n    from .base import Engine\n    from .interfaces import _CoreAnyExecuteParams\n    from .interfaces import CoreExecuteOptionsParameter\n    from .interfaces import Dialect\n    from .url import URL\n    from ..sql.base import Executable\n    from ..sql.ddl import SchemaDropper\n    from ..sql.ddl import SchemaGenerator\n    from ..sql.schema import HasSchemaAttr\n    from ..sql.schema import SchemaItem\n\n\nclass MockConnection:\n    def __init__(self, dialect: Dialect, execute: Callable[..., Any]):\n        self._dialect = dialect\n        self._execute_impl = execute\n\n    engine: Engine = cast(Any, property(lambda s: s))\n    dialect: Dialect = cast(Any, property(attrgetter("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\mock.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\processors.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "gdementen@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\processors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\reflection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\result.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\row.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\strategies.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.ietf.org/rfc/rfc1738.txt>`_, with some exceptions.\n\n    A :class:`_engine.URL` object may also be produced directly, either by\n    using the :func:`.make_url` function with a fully formed URL string, or\n    by using the :meth:`_engine.URL.create` constructor in order\n    to construct a :class:`_engine.URL` programmatically given individual\n    fields. The resulting :class:`.URL` object may be passed directly to\n    :func:`_sa.create_engine` in place of a string argument, which will bypass\n    the usage of :func:`.make_url` within the engine",
      "https://www.ietf.org/rfc/rfc1738.txt>`_, with some exceptions, including\n    that underscores, and not dashes or periods, are accepted within the\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Optional\nfrom typing import TypeVar\n\nfrom .. import exc\nfrom .. import util\nfrom ..util._has_cy import HAS_CYEXTENSION\nfrom ..util.typing import Protocol\nfrom ..util.typing import Self\n\nif typing.TYPE_CHECKING or not HAS_CYEXTENSION:\n    from ._py_util import _distill_params_20 as _distill_params_20\n    from ._py_util import _distill_raw_params as _distill_raw_params\nelse:\n    from sqlalchemy.cyextension.util import (  # noqa: F401\n        _distill_params_20 as _distill_params_20,\n    )\n    from sqlalchemy.cyextension.util import (  # noqa: F401\n        _distill_raw_params as _distill_raw_params,\n    )\n\n_C = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\_py_processors.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "gdementen@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\_py_processors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport operator\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Type\n\nif typing.TYPE_CHECKING:\n    from .result import _KeyType\n    from .result import _ProcessorsType\n    from .result import _RawRowType\n    from .result import _TupleGetterType\n    from .result import ResultMetaData\n\nMD_INDEX = 0  # integer index in cursor.description\n\n\nclass BaseRow:\n    __slots__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\_py_row.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Tuple\n\nfrom .. import exc\n\nif typing.TYPE_CHECKING:\n    from .interfaces import _CoreAnyExecuteParams\n    from .interfaces import _CoreMultiExecuteParams\n    from .interfaces import _DBAPIAnyExecuteParams\n    from .interfaces import _DBAPIMultiExecuteParams\n\n\n_no_tuple: Tuple[Any, ...] = ()\n\n\ndef _distill_params_20(\n    params: Optional[_CoreAnyExecuteParams],\n) -> _CoreMultiExecuteParams:\n    if params is None:\n        return _no_tuple\n    # Assume list is more likely than tuple\n    elif isinstance(params, list) or isinstance(params, tuple):\n        # collections_abc.MutableSequence): # avoid abc.__instancecheck__\n        if params and not isinstance(params[0], (tuple, Mapping)):\n            raise exc.ArgumentError(\n                "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\_py_util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\engine\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\event\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\event\\attr.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\event\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\event\\legacy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\event\\registry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom .api import CANCEL as CANCEL\nfrom .api import contains as contains\nfrom .api import listen as listen\nfrom .api import listens_for as listens_for\nfrom .api import NO_RETVAL as NO_RETVAL\nfrom .api import remove as remove\nfrom .attr import _InstanceLevelDispatch as _InstanceLevelDispatch\nfrom .attr import RefCollection as RefCollection\nfrom .base import _Dispatch as _Dispatch\nfrom .base import _DispatchCommon as _DispatchCommon\nfrom .base import dispatcher as dispatcher\nfrom .base import Events as Events\nfrom .legacy import _legacy_signature as _legacy_signature\nfrom .registry import _EventKey as _EventKey\nfrom .registry import _ListenerFnType as _ListenerFnType\nfrom .registry import EventTarget as EventTarget\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\event\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\associationproxy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nr",
      "https://pypi.org/project/sqlsoup/>`_\nalso tries to solve, that of generating a quick and rudimentary object\nmodel from an existing database on the fly.  By addressing the issue strictly\nat the mapper configuration level, and integrating fully with existing\nDeclarative class techniques, :class:`.AutomapBase` seeks to provide\na well-integrated approach to the issue of expediently auto-generating ad-hoc\nmappings.\n\n.. tip:: The :ref:`automap_toplevel` extension is geared towards a\n   ",
      "https://pypi.org/project/inflect>`_ package::\n\n    import re\n    import inflect\n\n\n    def camelize_classname(base, tablename, table):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\automap.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "foo@bar.com",
      "foo@bar.com"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\automap.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\baked.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nr"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\compiler.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\horizontal_shard.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nr",
      "https://docs.python.org/3/library/functions.html#property>`_.\nIt is important to note that the way both ``@property`` as well as\n:class:`.hybrid_property` work, a **copy of the descriptor is made each time**.\nThat is, each call to ``@radius.expression``, ``@radius.setter`` etc.\nmake a new object entirely.  This allows the attribute to be re-defined in\nsubclasses without issue (see :ref:`hybrid_reuse_subclass` later in this\nsection for how this is used).\n\nHowever, the above approach is not compatible with typing tools such as\nmypy and pyright.  Python",
      "https://github.com/python/typing/discussions/1102>`_, meaning this syntax\nis not available to SQLAlchemy under :pep:`484` compliance.\n\nIn order to produce a reasonable syntax while remaining typing compliant,\nthe :attr:`.hybrid_property.inplace` decorator allows the same\ndecorator to be re-used with different method names, while still producing\na single decorator under one name::\n\n    # correct use which is also accepted by pep-484 tooling\n\n\n    class Interval(Base):\n        # ...\n\n        @hybrid_property\n        def radius(self) -> float:\n            return abs(self.length) / 2\n\n        @radius.inplace.setter\n        def _radius_setter(self, value: float) -> None:\n            # for example only\n            self.length = value * 2\n\n        @radius.inplace.expression\n        @classmethod\n        def _radius_expression(cls) -> ColumnElement[float]:\n            return type_coerce(func.abs(cls.length) / 2, Float)\n\nUsing :attr:`.hybrid_property.inplace` further qualifies the use of the\ndecorator that a new copy should not be made, thereby maintaining the\n``Interval.radius`` name while allowing additional methods\n``Interval._radius_setter`` and ``Interval._radius_expression`` to be\ndifferently named.\n\n\n.. versionadded:: 2.0.4 Added :attr:`.hybrid_property.inplace` to allow\n   less verbose construction of composite :class:`.hybrid_property` objects\n   while not having to use repeated method names.   Additionally allowed the\n   use of ``@classmethod`` within :attr:`.hybrid_property.expression`,\n   :attr:`.hybrid_property.update_expression`, and\n   :attr:`.hybrid_property.comparator` to allow typing tools to identify\n   ``cls`` as a class and not an instance in the method signature.\n\n\nDefining Setters\n----------------\n\nThe :meth:`.hybrid_property.setter` modifier allows the construction of a\ncustom setter method, that can modify values on the object::\n\n    class Interval(Base):\n        # ...\n\n        @hybrid_property\n        def length(self) -> int:\n            return self.end - self.start\n\n        @length.inplace.setter\n        def _length_setter(self, value: int) -> None:\n            self.end = self.start + value\n\nThe ``length(self, value)`` method is now called upon set::\n\n    >>> i1 = Interval(5, 10)\n    >>> i1.length\n    5\n    >>> i1.length = 12\n    >>> i1.end\n    17\n\n.. _hybrid_bulk_update:\n\nAllowing Bulk ORM Update\n------------------------\n\nA hybrid can define a custom ",
      "https://techspot.zzzeek.org/2011/10/21/hybrids-and-value-agnostic-types/>`_\n    - on the techspot.zzzeek.org blog\n\n    `Value Agnostic Types, Part II\n    <https://techspot.zzzeek.org/2011/10/29/value-agnostic-types-part-ii/>`_ -\n    on the techspot.zzzeek.org blog\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\hybrid.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\indexable.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\instrumentation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nr",
      "https://github.com/python/mypy/issues/14858\n\n        @overload\n        def setdefault(\n            self: MutableDict[_KT, Optional[_T]], key: _KT, value: None = None\n        ) -> Optional[_T]: ...\n\n        @overload\n        def setdefault(self, key: _KT, value: _VT) -> _VT: ...\n\n        def setdefault(self, key: _KT, value: object = None) -> object: ...\n\n    else:\n\n        def setdefault(self, *arg):  # noqa: F811\n            result = super().setdefault(*arg)\n            self.changed()\n            return result\n\n    def __delitem__(self, key: _KT) -> None:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\mutable.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\orderinglist.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n",
      "https://docs.python.org/3/library/pickle.html>`_ apply.\n\nUsage is nearly the same as that of the standard Python pickle module::\n\n    from sqlalchemy.ext.serializer import loads, dumps\n\n    metadata = MetaData(bind=some_engine)\n    Session = scoped_session(sessionmaker())\n\n    # ... define mappers\n\n    query = (\n        Session.query(MyClass)\n        .filter(MyClass.somedata == "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\serializer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom .. import util as _sa_util\n\n\n_sa_util.preloaded.import_prefix("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\future\\engine.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\future\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\attributes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://github.com/python/mypy/issues/14027\n            def _eval_condition(obj):\n                return True\n\n            eval_condition = _eval_condition\n\n        return eval_condition\n\n    @classmethod\n    def _do_pre_synchronize_auto(\n        cls,\n        session,\n        statement,\n        params,\n        execution_options,\n        bind_arguments,\n        update_options,\n    ):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\bulk_persistence.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\clsregistry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\collections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport itertools\nfrom typing import Any\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import attributes\nfrom . import interfaces\nfrom . import loading\nfrom .base import _is_aliased_class\nfrom .interfaces import ORMColumnDescription\nfrom .interfaces import ORMColumnsClauseRole\nfrom .path_registry import PathRegistry\nfrom .util import _entity_corresponds_to\nfrom .util import _ORMJoin\nfrom .util import _TraceAdaptRole\nfrom .util import AliasedClass\nfrom .util import Bundle\nfrom .util import ORMAdapter\nfrom .util import ORMStatementAdapter\nfrom .. import exc as sa_exc\nfrom .. import future\nfrom .. import inspect\nfrom .. import sql\nfrom .. import util\nfrom ..sql import coercions\nfrom ..sql import expression\nfrom ..sql import roles\nfrom ..sql import util as sql_util\nfrom ..sql import visitors\nfrom ..sql._typing import _TP\nfrom ..sql._typing import is_dml\nfrom ..sql._typing import is_insert_update\nfrom ..sql._typing import is_select_base\nfrom ..sql.base import _select_iterables\nfrom ..sql.base import CacheableOptions\nfrom ..sql.base import CompileState\nfrom ..sql.base import Executable\nfrom ..sql.base import Generative\nfrom ..sql.base import Options\nfrom ..sql.dml import UpdateBase\nfrom ..sql.elements import GroupedElement\nfrom ..sql.elements import TextClause\nfrom ..sql.selectable import CompoundSelectState\nfrom ..sql.selectable import LABEL_STYLE_DISAMBIGUATE_ONLY\nfrom ..sql.selectable import LABEL_STYLE_NONE\nfrom ..sql.selectable import LABEL_STYLE_TABLENAME_PLUS_COL\nfrom ..sql.selectable import Select\nfrom ..sql.selectable import SelectLabelStyle\nfrom ..sql.selectable import SelectState\nfrom ..sql.selectable import TypedReturnsRows\nfrom ..sql.visitors import InternalTraversal\n\nif TYPE_CHECKING:\n    from ._typing import _InternalEntityType\n    from ._typing import OrmExecuteOptionsParameter\n    from .loading import PostLoad\n    from .mapper import Mapper\n    from .query import Query\n    from .session import _BindArguments\n    from .session import Session\n    from ..engine import Result\n    from ..engine.interfaces import _CoreSingleExecuteParams\n    from ..sql._typing import _ColumnsClauseArgument\n    from ..sql.compiler import SQLCompiler\n    from ..sql.dml import _DMLTableElement\n    from ..sql.elements import ColumnElement\n    from ..sql.selectable import _JoinTargetElement\n    from ..sql.selectable import _LabelConventionCallable\n    from ..sql.selectable import _SetupJoinsElement\n    from ..sql.selectable import ExecutableReturnsRows\n    from ..sql.selectable import SelectBase\n    from ..sql.type_api import TypeEngine\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\context.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://github.com/microsoft/pylance-release/issues/3484\n        __tablename__: Any\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\dependency.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://github.com/python/mypy/issues/4266\n        __hash__ = None  # type: ignore\n\n        prop: RODescriptorReference[Composite[_PT]]\n\n        @util.memoized_property\n        def clauses(self) -> ClauseList:\n            return expression.ClauseList(\n                group=False, *self._comparable_elements\n            )\n\n        def __clause_element__(self) -> CompositeProperty.CompositeBundle[_PT]:\n            return self.expression\n\n        @util.memoized_property\n        def expression(self) -> CompositeProperty.CompositeBundle[_PT]:\n            clauses = self.clauses._annotate(\n                {\n                    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\descriptor_props.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\dynamic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\evaluator.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\exc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nimport weakref\n\nfrom . import util as orm_util\nfrom .. import exc as sa_exc\n\nif TYPE_CHECKING:\n    from ._typing import _IdentityKeyType\n    from .state import InstanceState\n\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\identity.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\instrumentation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\interfaces.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\loading.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport operator\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Generic\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import base\nfrom .collections import collection\nfrom .collections import collection_adapter\nfrom .. import exc as sa_exc\nfrom .. import util\nfrom ..sql import coercions\nfrom ..sql import expression\nfrom ..sql import roles\nfrom ..util.langhelpers import Missing\nfrom ..util.langhelpers import MissingOr\nfrom ..util.typing import Literal\n\nif TYPE_CHECKING:\n    from . import AttributeEventToken\n    from . import Mapper\n    from .collections import CollectionAdapter\n    from ..sql.elements import ColumnElement\n\n_KT = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\mapped_collection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\mapper.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\path_registry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\properties.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.postgresql.org/docs/current/static/queries-with.html>`_.\n        Note that, in this example, the ``included_parts`` cte and the\n        ``incl_alias`` alias of it are Core selectables, which\n        means the columns are accessed via the ``.c.`` attribute.  The\n        ``parts_alias`` object is an :func:`_orm.aliased` instance of the\n        ``Part`` entity, so column-mapped attributes are available\n        directly::\n\n            from sqlalchemy.orm import aliased\n\n\n            class Part(Base):\n                __tablename__ = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "ed@foo.com",
      "ed@bar.com",
      "ed@foo.com",
      "ed@bar.com",
      "foo@bar.com",
      "ed@foo.com",
      "ed@foo.com"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://github.com/python/mypy/issues/4266\n        __hash__ = None  # type: ignore\n\n        def __eq__(self, other: Any) -> ColumnElement[bool]:  # type: ignore[override]  # noqa: E501\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\relationships.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom .session import _S\nfrom .session import Session\nfrom .. import exc as sa_exc\nfrom .. import util\nfrom ..util import create_proxy_methods\nfrom ..util import ScopedRegistry\nfrom ..util import ThreadLocalRegistry\nfrom ..util import warn\nfrom ..util import warn_deprecated\nfrom ..util.typing import Protocol\n\nif TYPE_CHECKING:\n    from ._typing import _EntityType\n    from ._typing import _IdentityKeyType\n    from ._typing import OrmExecuteOptionsParameter\n    from .identity import IdentityMap\n    from .interfaces import ORMOption\n    from .mapper import Mapper\n    from .query import Query\n    from .query import RowReturningQuery\n    from .session import _BindArguments\n    from .session import _EntityBindKey\n    from .session import _PKIdentityArgument\n    from .session import _SessionBind\n    from .session import sessionmaker\n    from .session import SessionTransaction\n    from ..engine import Connection\n    from ..engine import CursorResult\n    from ..engine import Engine\n    from ..engine import Result\n    from ..engine import Row\n    from ..engine import RowMapping\n    from ..engine.interfaces import _CoreAnyExecuteParams\n    from ..engine.interfaces import _CoreSingleExecuteParams\n    from ..engine.interfaces import CoreExecuteOptionsParameter\n    from ..engine.result import ScalarResult\n    from ..sql._typing import _ColumnsClauseArgument\n    from ..sql._typing import _T0\n    from ..sql._typing import _T1\n    from ..sql._typing import _T2\n    from ..sql._typing import _T3\n    from ..sql._typing import _T4\n    from ..sql._typing import _T5\n    from ..sql._typing import _T6\n    from ..sql._typing import _T7\n    from ..sql._typing import _TypedColumnClauseArgument as _TCCA\n    from ..sql.base import Executable\n    from ..sql.dml import UpdateBase\n    from ..sql.elements import ClauseElement\n    from ..sql.roles import TypedColumnsClauseRole\n    from ..sql.selectable import ForUpdateParameter\n    from ..sql.selectable import TypedReturnsRows\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.gevent.org/>`_, which can produce ``Timeout`` exceptions\n        that may mean the underlying connection should be discarded::\n\n            import gevent\n\n            try:\n                sess = Session()\n                sess.add(User())\n                sess.commit()\n            except gevent.Timeout:\n                sess.invalidate()\n                raise\n            except:\n                sess.rollback()\n                raise\n\n        The method additionally does everything that :meth:`_orm.Session.close`\n        does, including that all ORM objects are expunged.\n\n        ",
      "https://github.com/python/typing/discussions/1143\n        return_value = loading.get_from_identity(self, mapper, key, passive)\n        return return_value\n\n    @util.non_memoized_property\n    @contextlib.contextmanager\n    def no_autoflush(self) -> Iterator[Session]:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\state.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategies.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategy_options.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "%@aol.com"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategy_options.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\sync.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport enum\nimport functools\nimport re\nimport types\nimport typing\nfrom typing import AbstractSet\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import FrozenSet\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Match\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\nimport weakref\n\nfrom . import attributes  # noqa\nfrom . import exc\nfrom ._typing import _O\nfrom ._typing import insp_is_aliased_class\nfrom ._typing import insp_is_mapper\nfrom ._typing import prop_is_relationship\nfrom .base import _class_to_mapper as _class_to_mapper\nfrom .base import _MappedAnnotationBase\nfrom .base import _never_set as _never_set  # noqa: F401\nfrom .base import _none_only_set as _none_only_set  # noqa: F401\nfrom .base import _none_set as _none_set  # noqa: F401\nfrom .base import attribute_str as attribute_str  # noqa: F401\nfrom .base import class_mapper as class_mapper\nfrom .base import DynamicMapped\nfrom .base import InspectionAttr as InspectionAttr\nfrom .base import instance_str as instance_str  # noqa: F401\nfrom .base import Mapped\nfrom .base import object_mapper as object_mapper\nfrom .base import object_state as object_state  # noqa: F401\nfrom .base import opt_manager_of_class\nfrom .base import ORMDescriptor\nfrom .base import state_attribute_str as state_attribute_str  # noqa: F401\nfrom .base import state_class_str as state_class_str  # noqa: F401\nfrom .base import state_str as state_str  # noqa: F401\nfrom .base import WriteOnlyMapped\nfrom .interfaces import CriteriaOption\nfrom .interfaces import MapperProperty as MapperProperty\nfrom .interfaces import ORMColumnsClauseRole\nfrom .interfaces import ORMEntityColumnsClauseRole\nfrom .interfaces import ORMFromClauseRole\nfrom .path_registry import PathRegistry as PathRegistry\nfrom .. import event\nfrom .. import exc as sa_exc\nfrom .. import inspection\nfrom .. import sql\nfrom .. import util\nfrom ..engine.result import result_tuple\nfrom ..sql import coercions\nfrom ..sql import expression\nfrom ..sql import lambdas\nfrom ..sql import roles\nfrom ..sql import util as sql_util\nfrom ..sql import visitors\nfrom ..sql._typing import is_selectable\nfrom ..sql.annotation import SupportsCloneAnnotations\nfrom ..sql.base import ColumnCollection\nfrom ..sql.cache_key import HasCacheKey\nfrom ..sql.cache_key import MemoizedHasCacheKey\nfrom ..sql.elements import ColumnElement\nfrom ..sql.elements import KeyedColumnElement\nfrom ..sql.selectable import FromClause\nfrom ..util.langhelpers import MemoizedSlots\nfrom ..util.typing import de_stringify_annotation as _de_stringify_annotation\nfrom ..util.typing import eval_name_only as _eval_name_only\nfrom ..util.typing import fixup_container_fwd_refs\nfrom ..util.typing import get_origin\nfrom ..util.typing import is_origin_of_cls\nfrom ..util.typing import Literal\nfrom ..util.typing import Protocol\n\nif typing.TYPE_CHECKING:\n    from ._typing import _EntityType\n    from ._typing import _IdentityKeyType\n    from ._typing import _InternalEntityType\n    from ._typing import _ORMCOLEXPR\n    from .context import _MapperEntity\n    from .context import ORMCompileState\n    from .mapper import Mapper\n    from .path_registry import AbstractEntityRegistry\n    from .query import Query\n    from .relationships import RelationshipProperty\n    from ..engine import Row\n    from ..engine import RowMapping\n    from ..sql._typing import _CE\n    from ..sql._typing import _ColumnExpressionArgument\n    from ..sql._typing import _EquivalentColumnMap\n    from ..sql._typing import _FromClauseArgument\n    from ..sql._typing import _OnClauseArgument\n    from ..sql._typing import _PropagateAttrsType\n    from ..sql.annotation import _SA\n    from ..sql.base import ReadOnlyColumnCollection\n    from ..sql.elements import BindParameter\n    from ..sql.selectable import _ColumnsClauseElement\n    from ..sql.selectable import Select\n    from ..sql.selectable import Selectable\n    from ..sql.visitors import anon_map\n    from ..util.typing import _AnnotationScanType\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\writeonly.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Collection\nfrom typing import Iterable\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import Union\n\nfrom . import mapperlib as mapperlib\nfrom ._typing import _O\nfrom .descriptor_props import Composite\nfrom .descriptor_props import Synonym\nfrom .interfaces import _AttributeOptions\nfrom .properties import MappedColumn\nfrom .properties import MappedSQLExpression\nfrom .query import AliasOption\nfrom .relationships import _RelationshipArgumentType\nfrom .relationships import _RelationshipDeclared\nfrom .relationships import _RelationshipSecondaryArgument\nfrom .relationships import RelationshipProperty\nfrom .session import Session\nfrom .util import _ORMJoin\nfrom .util import AliasedClass\nfrom .util import AliasedInsp\nfrom .util import LoaderCriteriaOption\nfrom .. import sql\nfrom .. import util\nfrom ..exc import InvalidRequestError\nfrom ..sql._typing import _no_kw\nfrom ..sql.base import _NoArg\nfrom ..sql.base import SchemaEventTarget\nfrom ..sql.schema import _InsertSentinelColumnDefault\nfrom ..sql.schema import SchemaConst\nfrom ..sql.selectable import FromClause\nfrom ..util.typing import Annotated\nfrom ..util.typing import Literal\n\nif TYPE_CHECKING:\n    from ._typing import _EntityType\n    from ._typing import _ORMColumnExprArgument\n    from .descriptor_props import _CC\n    from .descriptor_props import _CompositeAttrType\n    from .interfaces import PropComparator\n    from .mapper import Mapper\n    from .query import Query\n    from .relationships import _LazyLoadArgumentType\n    from .relationships import _ORMColCollectionArgument\n    from .relationships import _ORMOrderByArgument\n    from .relationships import _RelationshipJoinConditionArgument\n    from .relationships import ORMBackrefArgument\n    from .session import _SessionBind\n    from ..sql._typing import _AutoIncrementType\n    from ..sql._typing import _ColumnExpressionArgument\n    from ..sql._typing import _FromClauseArgument\n    from ..sql._typing import _InfoType\n    from ..sql._typing import _OnClauseArgument\n    from ..sql._typing import _TypeEngineArgument\n    from ..sql.elements import ColumnElement\n    from ..sql.schema import _ServerDefaultArgument\n    from ..sql.schema import _ServerOnUpdateArgument\n    from ..sql.selectable import Alias\n    from ..sql.selectable import Subquery\n\n\n_T = typing.TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\_orm_constructors.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "foo@bar.com",
      "foo@bar.com"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\_orm_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport operator\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom ..engine.interfaces import _CoreKnownExecutionOptions\nfrom ..sql import roles\nfrom ..sql._orm_types import DMLStrategyArgument as DMLStrategyArgument\nfrom ..sql._orm_types import (\n    SynchronizeSessionArgument as SynchronizeSessionArgument,\n)\nfrom ..sql._typing import _HasClauseElement\nfrom ..sql.elements import ColumnElement\nfrom ..util.typing import Protocol\nfrom ..util.typing import TypeGuard\n\nif TYPE_CHECKING:\n    from .attributes import AttributeImpl\n    from .attributes import CollectionAttributeImpl\n    from .attributes import HasCollectionAdapter\n    from .attributes import QueryableAttribute\n    from .base import PassiveFlag\n    from .decl_api import registry as _registry_type\n    from .interfaces import InspectionAttr\n    from .interfaces import MapperProperty\n    from .interfaces import ORMOption\n    from .interfaces import UserDefinedOption\n    from .mapper import Mapper\n    from .relationships import RelationshipProperty\n    from .state import InstanceState\n    from .util import AliasedClass\n    from .util import AliasedInsp\n    from ..sql._typing import _CE\n    from ..sql.base import ExecutableOption\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\_typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\orm\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n",
      "https://stackoverflow.com/a/1938096/34549, Windows time.time() may be\n        # within 16 milliseconds accuracy, so unit tests for connection\n        # invalidation need a sleep of at least this long between initial start\n        # time and invalidation for the logic below to work reliably.\n\n        if self.dbapi_connection is None:\n            self.info.clear()\n            self.__connect()\n        elif (\n            self.__pool._recycle > -1\n            and time.time() - self.starttime > self.__pool._recycle\n        ):\n            self.__pool.logger.info(\n                "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Optional\nfrom typing import Type\nfrom typing import Union\n\nfrom .base import ConnectionPoolEntry\nfrom .base import Pool\nfrom .base import PoolProxiedConnection\nfrom .base import PoolResetState\nfrom .. import event\nfrom .. import util\n\nif typing.TYPE_CHECKING:\n    from ..engine import Engine\n    from ..engine.interfaces import DBAPIConnection\n\n\nclass PoolEvents(event.Events[Pool]):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\pool\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\pool\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\annotation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://github.com/python/mypy/issues/14640 will be fixed\n_Self = TypeVar(",
      "https://github.com/python/mypy/issues/4266\n    __hash__ = None  # type: ignore\n\n    def _populate_separate_keys(\n        self, iter_: Iterable[Tuple[_COLKEY, _COL_co]]\n    ) -> None:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport enum\nfrom itertools import zip_longest\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import MutableMapping\nfrom typing import NamedTuple\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Union\n\nfrom .visitors import anon_map\nfrom .visitors import HasTraversalDispatch\nfrom .visitors import HasTraverseInternals\nfrom .visitors import InternalTraversal\nfrom .visitors import prefix_anon_map\nfrom .. import util\nfrom ..inspection import inspect\nfrom ..util import HasMemoized\nfrom ..util.typing import Literal\nfrom ..util.typing import Protocol\n\nif typing.TYPE_CHECKING:\n    from .elements import BindParameter\n    from .elements import ClauseElement\n    from .elements import ColumnElement\n    from .visitors import _TraverseInternalsType\n    from ..engine.interfaces import _CoreSingleExecuteParams\n\n\nclass _CacheKeyTraversalDispatchType(Protocol):\n    def __call__(\n        s, self: HasCacheKey, visitor: _CacheKeyTraversal\n    ) -> _CacheKeyTraversalDispatchTypeReturn: ...\n\n\nclass CacheConst(enum.Enum):\n    NO_CACHE = 0\n\n\nNO_CACHE = CacheConst.NO_CACHE\n\n\n_CacheKeyTraversalType = Union[\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\cache_key.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport collections.abc as collections_abc\nimport numbers\nimport re\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import roles\nfrom . import visitors\nfrom ._typing import is_from_clause\nfrom .base import ExecutableOption\nfrom .base import Options\nfrom .cache_key import HasCacheKey\nfrom .visitors import Visitable\nfrom .. import exc\nfrom .. import inspection\nfrom .. import util\nfrom ..util.typing import Literal\n\nif typing.TYPE_CHECKING:\n    # elements lambdas schema selectable are set by __init__\n    from . import elements\n    from . import lambdas\n    from . import schema\n    from . import selectable\n    from ._typing import _ColumnExpressionArgument\n    from ._typing import _ColumnsClauseArgument\n    from ._typing import _DDLColumnArgument\n    from ._typing import _DMLTableArgument\n    from ._typing import _FromClauseArgument\n    from .dml import _DMLTableElement\n    from .elements import BindParameter\n    from .elements import ClauseElement\n    from .elements import ColumnClause\n    from .elements import ColumnElement\n    from .elements import NamedColumn\n    from .elements import SQLCoreOperations\n    from .elements import TextClause\n    from .schema import Column\n    from .selectable import _ColumnsClauseElement\n    from .selectable import _JoinTargetProtocol\n    from .selectable import FromClause\n    from .selectable import HasCTE\n    from .selectable import SelectBase\n    from .selectable import Subquery\n    from .visitors import _TraverseCallableType\n\n_SR = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\coercions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://github.com/python/mypy/issues/14027\n                autoinc_getter = _autoinc_getter\n\n        else:\n            lastrowid_processor = None\n\n        row_fn = result.result_tuple([col.key for col in table.primary_key])\n\n        def get(lastrowid, parameters):\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\crud.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://docs.sqlalchemy.org/en/\n            # latest/core/defaults.html\n            # #associating-a-sequence-as-the-server-side-\n            # default), so have to be dropped after the table is dropped.\n            for column in table.columns:\n                if (\n                    column.default is not None\n                    and column.default not in _ignore_sequences\n                ):\n                    self.traverse_single(column.default)\n\n    def visit_foreign_key_constraint(self, constraint):\n        if not self.dialect.supports_alter:\n            return\n        with self.with_ddl_events(constraint):\n            DropConstraint(constraint)._invoke_with(self.connection)\n\n    def visit_sequence(self, sequence, drop_ok=False):\n        if not drop_ok and not self._can_drop_sequence(sequence):\n            return\n        with self.with_ddl_events(sequence):\n            DropSequence(sequence)._invoke_with(self.connection)\n\n\ndef sort_tables(\n    tables: Iterable[TableClause],\n    skip_fn: Optional[Callable[[ForeignKeyConstraint], bool]] = None,\n    extra_dependencies: Optional[\n        typing_Sequence[Tuple[TableClause, TableClause]]\n    ] = None,\n) -> List[Table]:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\default_comparator.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\dml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://docs.python.org/3/reference/datamodel.html#object.__hash__\n        def __hash__(self) -> int: ...\n\n        def __eq__(self, other: Any) -> ColumnElement[bool]:  # type: ignore[override]  # noqa: E501\n            ...\n\n        def __ne__(self, other: Any) -> ColumnElement[bool]:  # type: ignore[override]  # noqa: E501\n            ...\n\n        def is_distinct_from(self, other: Any) -> ColumnElement[bool]: ...\n\n        def is_not_distinct_from(self, other: Any) -> ColumnElement[bool]: ...\n\n        def __gt__(self, other: Any) -> ColumnElement[bool]: ...\n\n        def __ge__(self, other: Any) -> ColumnElement[bool]: ...\n\n        def __neg__(self) -> UnaryExpression[_T_co]: ...\n\n        def __contains__(self, other: Any) -> ColumnElement[bool]: ...\n\n        def __getitem__(self, index: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __lshift__(self: _SQO[int], other: Any) -> ColumnElement[int]: ...\n\n        @overload\n        def __lshift__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __lshift__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rshift__(self: _SQO[int], other: Any) -> ColumnElement[int]: ...\n\n        @overload\n        def __rshift__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rshift__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def concat(self: _SQO[str], other: Any) -> ColumnElement[str]: ...\n\n        @overload\n        def concat(self, other: Any) -> ColumnElement[Any]: ...\n\n        def concat(self, other: Any) -> ColumnElement[Any]: ...\n\n        def like(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def ilike(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def bitwise_xor(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def bitwise_or(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def bitwise_and(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def bitwise_not(self) -> UnaryExpression[_T_co]: ...\n\n        def bitwise_lshift(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def bitwise_rshift(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def in_(\n            self,\n            other: Union[\n                Iterable[Any], BindParameter[Any], roles.InElementRole\n            ],\n        ) -> BinaryExpression[bool]: ...\n\n        def not_in(\n            self,\n            other: Union[\n                Iterable[Any], BindParameter[Any], roles.InElementRole\n            ],\n        ) -> BinaryExpression[bool]: ...\n\n        def notin_(\n            self,\n            other: Union[\n                Iterable[Any], BindParameter[Any], roles.InElementRole\n            ],\n        ) -> BinaryExpression[bool]: ...\n\n        def not_like(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def notlike(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def not_ilike(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def notilike(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def is_(self, other: Any) -> BinaryExpression[bool]: ...\n\n        def is_not(self, other: Any) -> BinaryExpression[bool]: ...\n\n        def isnot(self, other: Any) -> BinaryExpression[bool]: ...\n\n        def startswith(\n            self,\n            other: Any,\n            escape: Optional[str] = None,\n            autoescape: bool = False,\n        ) -> ColumnElement[bool]: ...\n\n        def istartswith(\n            self,\n            other: Any,\n            escape: Optional[str] = None,\n            autoescape: bool = False,\n        ) -> ColumnElement[bool]: ...\n\n        def endswith(\n            self,\n            other: Any,\n            escape: Optional[str] = None,\n            autoescape: bool = False,\n        ) -> ColumnElement[bool]: ...\n\n        def iendswith(\n            self,\n            other: Any,\n            escape: Optional[str] = None,\n            autoescape: bool = False,\n        ) -> ColumnElement[bool]: ...\n\n        def contains(self, other: Any, **kw: Any) -> ColumnElement[bool]: ...\n\n        def icontains(self, other: Any, **kw: Any) -> ColumnElement[bool]: ...\n\n        def match(self, other: Any, **kwargs: Any) -> ColumnElement[bool]: ...\n\n        def regexp_match(\n            self, pattern: Any, flags: Optional[str] = None\n        ) -> ColumnElement[bool]: ...\n\n        def regexp_replace(\n            self, pattern: Any, replacement: Any, flags: Optional[str] = None\n        ) -> ColumnElement[str]: ...\n\n        def desc(self) -> UnaryExpression[_T_co]: ...\n\n        def asc(self) -> UnaryExpression[_T_co]: ...\n\n        def nulls_first(self) -> UnaryExpression[_T_co]: ...\n\n        def nullsfirst(self) -> UnaryExpression[_T_co]: ...\n\n        def nulls_last(self) -> UnaryExpression[_T_co]: ...\n\n        def nullslast(self) -> UnaryExpression[_T_co]: ...\n\n        def collate(self, collation: str) -> CollationClause: ...\n\n        def between(\n            self, cleft: Any, cright: Any, symmetric: bool = False\n        ) -> BinaryExpression[bool]: ...\n\n        def distinct(self: _SQO[_T_co]) -> UnaryExpression[_T_co]: ...\n\n        def any_(self) -> CollectionAggregate[Any]: ...\n\n        def all_(self) -> CollectionAggregate[Any]: ...\n\n        # numeric overloads.  These need more tweaking\n        # in particular they all need to have a variant for Optiona[_T]\n        # because Optional only applies to the data side, not the expression\n        # side\n\n        @overload\n        def __add__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __add__(\n            self: _SQO[str],\n            other: Any,\n        ) -> ColumnElement[str]: ...\n\n        @overload\n        def __add__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __add__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __radd__(self: _SQO[_NMT], other: Any) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __radd__(self: _SQO[str], other: Any) -> ColumnElement[str]: ...\n\n        def __radd__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __sub__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __sub__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __sub__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rsub__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __rsub__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rsub__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __mul__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __mul__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __mul__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rmul__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __rmul__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rmul__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __mod__(self: _SQO[_NMT], other: Any) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __mod__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __mod__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rmod__(self: _SQO[_NMT], other: Any) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __rmod__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rmod__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __truediv__(\n            self: _SQO[int], other: Any\n        ) -> ColumnElement[_NUMERIC]: ...\n\n        @overload\n        def __truediv__(self: _SQO[_NT], other: Any) -> ColumnElement[_NT]: ...\n\n        @overload\n        def __truediv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __truediv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rtruediv__(\n            self: _SQO[_NMT], other: Any\n        ) -> ColumnElement[_NUMERIC]: ...\n\n        @overload\n        def __rtruediv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rtruediv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __floordiv__(\n            self: _SQO[_NMT], other: Any\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __floordiv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __floordiv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rfloordiv__(\n            self: _SQO[_NMT], other: Any\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __rfloordiv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rfloordiv__(self, other: Any) -> ColumnElement[Any]: ...\n\n\nclass SQLColumnExpression(\n    SQLCoreOperations[_T_co], roles.ExpressionElementRole[_T_co], TypingOnly\n):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import TYPE_CHECKING\n\nfrom .base import SchemaEventTarget\nfrom .. import event\n\nif TYPE_CHECKING:\n    from .schema import Column\n    from .schema import Constraint\n    from .schema import SchemaItem\n    from .schema import Table\n    from ..engine.base import Connection\n    from ..engine.interfaces import ReflectedColumn\n    from ..engine.reflection import Inspector\n\n\nclass DDLEvents(event.Events[SchemaEventTarget]):\n    ",
      "https://alembic.sqlalchemy.org>`_.\n\n\n    **Attachment Events**\n\n    Attachment events are provided to customize\n    behavior whenever a child schema element is associated\n    with a parent, such as when a :class:`_schema.Column` is associated\n    with its :class:`_schema.Table`, when a\n    :class:`_schema.ForeignKeyConstraint`\n    is associated with a :class:`_schema.Table`, etc.  These events include\n    :meth:`.DDLEvents.before_parent_attach` and\n    :meth:`.DDLEvents.after_parent_attach`.\n\n    **Reflection Events**\n\n    The :meth:`.DDLEvents.column_reflect` event is used to intercept\n    and modify the in-Python definition of database columns when\n    :term:`reflection` of database tables proceeds.\n\n    **Use with Generic DDL**\n\n    DDL events integrate closely with the\n    :class:`.DDL` class and the :class:`.ExecutableDDLElement` hierarchy\n    of DDL clause constructs, which are themselves appropriate\n    as listener callables::\n\n        from sqlalchemy import DDL\n\n        event.listen(\n            some_table,\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\expression.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n",
      "https://peps.python.org/pep-0484/#generics>`_,\n    meaning that type checkers and IDEs can be instructed on the types to\n    expect in a :class:`_engine.Result` for this function. See\n    :class:`.GenericFunction` for an example of how this is done.\n\n    .. seealso::\n\n        :ref:`tutorial_functions` - in the :ref:`unified_tutorial`\n\n        :class:`.Function` - named SQL function.\n\n        :data:`.func` - namespace which produces registered or ad-hoc\n        :class:`.Function` instances.\n\n        :class:`.GenericFunction` - allows creation of registered function\n        types.\n\n    ",
      "https://peps.python.org/pep-0484/#generics>`_ can be passed\n    and should match the type seen in a :class:`_engine.Result`. For example::\n\n        class as_utc(GenericFunction[datetime.datetime]):\n            type = DateTime()\n            inherit_cache = True\n\n    The above indicates that the following expression returns a ``datetime``\n    object::\n\n        connection.scalar(select(func.as_utc()))\n\n    .. versionadded:: 1.3.13  The :class:`.quoted_name` construct is now\n       recognized for quoting when used with the "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\functions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport collections.abc as collections_abc\nimport inspect\nimport itertools\nimport operator\nimport threading\nimport types\nfrom types import CodeType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import List\nfrom typing import MutableMapping\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\nimport weakref\n\nfrom . import cache_key as _cache_key\nfrom . import coercions\nfrom . import elements\nfrom . import roles\nfrom . import schema\nfrom . import visitors\nfrom .base import _clone\nfrom .base import Executable\nfrom .base import Options\nfrom .cache_key import CacheConst\nfrom .operators import ColumnOperators\nfrom .. import exc\nfrom .. import inspection\nfrom .. import util\nfrom ..util.typing import Literal\n\n\nif TYPE_CHECKING:\n    from .elements import BindParameter\n    from .elements import ClauseElement\n    from .roles import SQLRole\n    from .visitors import _CloneCallableType\n\n_LambdaCacheType = MutableMapping[\n    Tuple[Any, ...], Union["
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\lambdas.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\naming.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n# This module is part of SQLAlchemy and is released under\n# the MIT License: https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://docs.python.org/3/reference/datamodel.html#object.__hash__\n    if TYPE_CHECKING:\n\n        def __hash__(self) -> int: ...\n\n    else:\n        __hash__ = Operators.__hash__\n\n    def __eq__(self, other: Any) -> ColumnOperators:  # type: ignore[override]\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\operators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Generic\nfrom typing import Optional\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nfrom .. import util\nfrom ..util.typing import Literal\n\nif TYPE_CHECKING:\n    from ._typing import _PropagateAttrsType\n    from .elements import Label\n    from .selectable import _SelectIterable\n    from .selectable import FromClause\n    from .selectable import Subquery\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\roles.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.python.org/dev/peps/pep-0249/#lastrowid\n              <https://www.python.org/dev/peps/pep-0249/#lastrowid>`_)\n            * PostgreSQL, SQL Server, Oracle Database - use RETURNING or an equivalent\n              construct when rendering an INSERT statement, and then retrieving\n              the newly generated primary key values after execution\n            * PostgreSQL, Oracle Database for :class:`_schema.Table` objects that\n              set :paramref:`_schema.Table.implicit_returning` to False -\n              for a :class:`.Sequence` only, the :class:`.Sequence` is invoked\n              explicitly before the INSERT statement takes place so that the\n              newly generated primary key value is available to the client\n            * SQL Server for :class:`_schema.Table` objects that\n              set :paramref:`_schema.Table.implicit_returning` to False -\n              the ``SELECT scope_identity()`` construct is used after the\n              INSERT statement is invoked to retrieve the newly generated\n              primary key value.\n            * Third-party dialects - consult those dialects",
      "https://www.postgresql.org/docs/current/static/ddl-constraints.html\n                raise exc.ArgumentError(\n                    ",
      "https://github.com/python/mypy/issues/17093\n    @overload\n    def reflect(\n        self,\n        bind: Engine,\n        schema: Optional[str] = ...,\n        views: bool = ...,\n        only: Union[\n            _typing_Sequence[str], Callable[[str, MetaData], bool], None\n        ] = ...,\n        extend_existing: bool = ...,\n        autoload_replace: bool = ...,\n        resolve_fks: bool = ...,\n        **dialect_kwargs: Any,\n    ) -> None: ...\n\n    @overload\n    def reflect(\n        self,\n        bind: Connection,\n        schema: Optional[str] = ...,\n        views: bool = ...,\n        only: Union[\n            _typing_Sequence[str], Callable[[str, MetaData], bool], None\n        ] = ...,\n        extend_existing: bool = ...,\n        autoload_replace: bool = ...,\n        resolve_fks: bool = ...,\n        **dialect_kwargs: Any,\n    ) -> None: ...\n\n    @util.preload_module("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.postgresql.org/docs/current/static/queries-with.html,\n        as well as additional examples.\n\n        Example 1, non recursive::\n\n            from sqlalchemy import (\n                Table,\n                Column,\n                String,\n                Integer,\n                MetaData,\n                select,\n                func,\n            )\n\n            metadata = MetaData()\n\n            orders = Table(\n                "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\selectable.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://www.postgresql.org/docs/current/static/functions-datetime.html.\n\n        return {\n            operators.add: {Interval: self.__class__},\n            operators.sub: {Interval: self.__class__, DateTime: Interval},\n        }\n\n\nclass Date(_RenderISO8601NoT, HasExpressionLookup, TypeEngine[dt.date]):\n    ",
      "https://www.postgresql.org/docs/current/static/functions-datetime.html.\n\n        return {\n            operators.add: {\n                Integer: self.__class__,\n                Interval: DateTime,\n                Time: DateTime,\n            },\n            operators.sub: {\n                # date - integer = date\n                Integer: self.__class__,\n                # date - date = integer.\n                Date: Integer,\n                Interval: DateTime,\n                # date - datetime = interval,\n                # this one is not in the PG docs\n                # but works\n                DateTime: Interval,\n            },\n        }\n\n\nclass Time(_RenderISO8601NoT, HasExpressionLookup, TypeEngine[dt.time]):\n    ",
      "https://www.postgresql.org/docs/current/static/functions-datetime.html.\n\n        return {\n            operators.add: {Date: DateTime, Interval: self.__class__},\n            operators.sub: {Time: Interval, Interval: self.__class__},\n        }\n\n    def literal_processor(self, dialect):\n        return self._literal_processor_time(dialect)\n\n\nclass _Binary(TypeEngine[bytes]):\n    ",
      "https://www.postgresql.org/docs/current/static/functions-datetime.html.\n\n        return {\n            operators.add: {\n                Date: DateTime,\n                Interval: self.__class__,\n                DateTime: DateTime,\n                Time: Time,\n            },\n            operators.sub: {Interval: self.__class__},\n            operators.mul: {Numeric: self.__class__},\n            operators.truediv: {Numeric: self.__class__},\n        }\n\n    @util.ro_non_memoized_property\n    def _type_affinity(self) -> Type[Interval]:\n        return Interval\n\n\nclass Interval(Emulated, _AbstractInterval, TypeDecorator[dt.timedelta]):\n    ",
      "https://docs.python.org/3/library/uuid.html>`_\n    module::\n\n        import uuid\n\n        from sqlalchemy import Uuid\n        from sqlalchemy import Table, Column, MetaData, String\n\n\n        metadata_obj = MetaData()\n\n        t = Table(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\sqltypes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nfrom collections import deque\nimport collections.abc as collections_abc\nimport itertools\nfrom itertools import zip_longest\nimport operator\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Deque\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Type\n\nfrom . import operators\nfrom .cache_key import HasCacheKey\nfrom .visitors import _TraverseInternalsType\nfrom .visitors import anon_map\nfrom .visitors import ExternallyTraversible\nfrom .visitors import HasTraversalDispatch\nfrom .visitors import HasTraverseInternals\nfrom .. import util\nfrom ..util import langhelpers\nfrom ..util.typing import Self\n\n\nSKIP_TRAVERSE = util.symbol("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\traversals.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\type_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom .dml import Delete\nfrom .dml import Insert\nfrom .dml import Update\n\nif TYPE_CHECKING:\n    from ._typing import _DMLTableArgument\n\n\ndef insert(table: _DMLTableArgument) -> Insert:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\_dml_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple as typing_Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import coercions\nfrom . import roles\nfrom .base import _NoArg\nfrom .coercions import _document_text_coercion\nfrom .elements import BindParameter\nfrom .elements import BooleanClauseList\nfrom .elements import Case\nfrom .elements import Cast\nfrom .elements import CollationClause\nfrom .elements import CollectionAggregate\nfrom .elements import ColumnClause\nfrom .elements import ColumnElement\nfrom .elements import Extract\nfrom .elements import False_\nfrom .elements import FunctionFilter\nfrom .elements import Label\nfrom .elements import Null\nfrom .elements import Over\nfrom .elements import TextClause\nfrom .elements import True_\nfrom .elements import TryCast\nfrom .elements import Tuple\nfrom .elements import TypeCoerce\nfrom .elements import UnaryExpression\nfrom .elements import WithinGroup\nfrom .functions import FunctionElement\nfrom ..util.typing import Literal\n\nif typing.TYPE_CHECKING:\n    from ._typing import _ByArgument\n    from ._typing import _ColumnExpressionArgument\n    from ._typing import _ColumnExpressionOrLiteralArgument\n    from ._typing import _ColumnExpressionOrStrLabelArgument\n    from ._typing import _TypeEngineArgument\n    from .elements import BinaryExpression\n    from .selectable import FromClause\n    from .type_api import TypeEngine\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\_elements_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\_orm_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Tuple\nfrom typing import Union\n\nfrom ..util.typing import Literal\n\nif typing.TYPE_CHECKING:\n    from .cache_key import CacheConst\n\n\nclass prefix_anon_map(Dict[str, str]):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\_py_util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import coercions\nfrom . import roles\nfrom ._typing import _ColumnsClauseArgument\nfrom ._typing import _no_kw\nfrom .elements import ColumnClause\nfrom .selectable import Alias\nfrom .selectable import CompoundSelect\nfrom .selectable import Exists\nfrom .selectable import FromClause\nfrom .selectable import Join\nfrom .selectable import Lateral\nfrom .selectable import LateralFromClause\nfrom .selectable import NamedFromClause\nfrom .selectable import Select\nfrom .selectable import TableClause\nfrom .selectable import TableSample\nfrom .selectable import Values\n\nif TYPE_CHECKING:\n    from ._typing import _FromClauseArgument\n    from ._typing import _OnClauseArgument\n    from ._typing import _SelectStatementForCompoundArgument\n    from ._typing import _T0\n    from ._typing import _T1\n    from ._typing import _T2\n    from ._typing import _T3\n    from ._typing import _T4\n    from ._typing import _T5\n    from ._typing import _T6\n    from ._typing import _T7\n    from ._typing import _T8\n    from ._typing import _T9\n    from ._typing import _TypedColumnClauseArgument as _TCCA\n    from .functions import Function\n    from .selectable import CTE\n    from .selectable import HasCTE\n    from .selectable import ScalarSelect\n    from .selectable import SelectBase\n\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\_selectable_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport operator\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Mapping\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import roles\nfrom .. import exc\nfrom .. import util\nfrom ..inspection import Inspectable\nfrom ..util.typing import Literal\nfrom ..util.typing import Protocol\nfrom ..util.typing import TypeAlias\n\nif TYPE_CHECKING:\n    from datetime import date\n    from datetime import datetime\n    from datetime import time\n    from datetime import timedelta\n    from decimal import Decimal\n    from uuid import UUID\n\n    from .base import Executable\n    from .compiler import Compiled\n    from .compiler import DDLCompiler\n    from .compiler import SQLCompiler\n    from .dml import UpdateBase\n    from .dml import ValuesBase\n    from .elements import ClauseElement\n    from .elements import ColumnElement\n    from .elements import KeyedColumnElement\n    from .elements import quoted_name\n    from .elements import SQLCoreOperations\n    from .elements import TextClause\n    from .lambdas import LambdaElement\n    from .roles import FromClauseRole\n    from .schema import Column\n    from .selectable import Alias\n    from .selectable import CTE\n    from .selectable import FromClause\n    from .selectable import Join\n    from .selectable import NamedFromClause\n    from .selectable import ReturnsRows\n    from .selectable import Select\n    from .selectable import Selectable\n    from .selectable import SelectBase\n    from .selectable import Subquery\n    from .selectable import TableClause\n    from .sqltypes import TableValueType\n    from .sqltypes import TupleType\n    from .type_api import TypeEngine\n    from ..engine import Dialect\n    from ..util.typing import TypeGuard\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\_typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom typing import Any\nfrom typing import TYPE_CHECKING\n\nfrom ._typing import ColumnExpressionArgument as ColumnExpressionArgument\nfrom ._typing import NotNullable as NotNullable\nfrom ._typing import Nullable as Nullable\nfrom .base import Executable as Executable\nfrom .compiler import COLLECT_CARTESIAN_PRODUCTS as COLLECT_CARTESIAN_PRODUCTS\nfrom .compiler import FROM_LINTING as FROM_LINTING\nfrom .compiler import NO_LINTING as NO_LINTING\nfrom .compiler import WARN_LINTING as WARN_LINTING\nfrom .ddl import BaseDDLElement as BaseDDLElement\nfrom .ddl import DDL as DDL\nfrom .ddl import DDLElement as DDLElement\nfrom .ddl import ExecutableDDLElement as ExecutableDDLElement\nfrom .expression import Alias as Alias\nfrom .expression import alias as alias\nfrom .expression import all_ as all_\nfrom .expression import and_ as and_\nfrom .expression import any_ as any_\nfrom .expression import asc as asc\nfrom .expression import between as between\nfrom .expression import bindparam as bindparam\nfrom .expression import case as case\nfrom .expression import cast as cast\nfrom .expression import ClauseElement as ClauseElement\nfrom .expression import collate as collate\nfrom .expression import column as column\nfrom .expression import ColumnCollection as ColumnCollection\nfrom .expression import ColumnElement as ColumnElement\nfrom .expression import CompoundSelect as CompoundSelect\nfrom .expression import cte as cte\nfrom .expression import Delete as Delete\nfrom .expression import delete as delete\nfrom .expression import desc as desc\nfrom .expression import distinct as distinct\nfrom .expression import except_ as except_\nfrom .expression import except_all as except_all\nfrom .expression import exists as exists\nfrom .expression import extract as extract\nfrom .expression import false as false\nfrom .expression import False_ as False_\nfrom .expression import FromClause as FromClause\nfrom .expression import func as func\nfrom .expression import funcfilter as funcfilter\nfrom .expression import Insert as Insert\nfrom .expression import insert as insert\nfrom .expression import intersect as intersect\nfrom .expression import intersect_all as intersect_all\nfrom .expression import Join as Join\nfrom .expression import join as join\nfrom .expression import label as label\nfrom .expression import LABEL_STYLE_DEFAULT as LABEL_STYLE_DEFAULT\nfrom .expression import (\n    LABEL_STYLE_DISAMBIGUATE_ONLY as LABEL_STYLE_DISAMBIGUATE_ONLY,\n)\nfrom .expression import LABEL_STYLE_NONE as LABEL_STYLE_NONE\nfrom .expression import (\n    LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL,\n)\nfrom .expression import lambda_stmt as lambda_stmt\nfrom .expression import LambdaElement as LambdaElement\nfrom .expression import lateral as lateral\nfrom .expression import literal as literal\nfrom .expression import literal_column as literal_column\nfrom .expression import modifier as modifier\nfrom .expression import not_ as not_\nfrom .expression import null as null\nfrom .expression import nulls_first as nulls_first\nfrom .expression import nulls_last as nulls_last\nfrom .expression import nullsfirst as nullsfirst\nfrom .expression import nullslast as nullslast\nfrom .expression import or_ as or_\nfrom .expression import outerjoin as outerjoin\nfrom .expression import outparam as outparam\nfrom .expression import over as over\nfrom .expression import quoted_name as quoted_name\nfrom .expression import Select as Select\nfrom .expression import select as select\nfrom .expression import Selectable as Selectable\nfrom .expression import SelectLabelStyle as SelectLabelStyle\nfrom .expression import SQLColumnExpression as SQLColumnExpression\nfrom .expression import StatementLambdaElement as StatementLambdaElement\nfrom .expression import Subquery as Subquery\nfrom .expression import table as table\nfrom .expression import TableClause as TableClause\nfrom .expression import TableSample as TableSample\nfrom .expression import tablesample as tablesample\nfrom .expression import text as text\nfrom .expression import true as true\nfrom .expression import True_ as True_\nfrom .expression import try_cast as try_cast\nfrom .expression import tuple_ as tuple_\nfrom .expression import type_coerce as type_coerce\nfrom .expression import union as union\nfrom .expression import union_all as union_all\nfrom .expression import Update as Update\nfrom .expression import update as update\nfrom .expression import Values as Values\nfrom .expression import values as values\nfrom .expression import within_group as within_group\nfrom .visitors import ClauseVisitor as ClauseVisitor\n\n\ndef __go(lcls: Any) -> None:\n    from .. import util as _sa_util\n\n    from . import base\n    from . import coercions\n    from . import elements\n    from . import lambdas\n    from . import selectable\n    from . import schema\n    from . import traversals\n    from . import type_api\n\n    if not TYPE_CHECKING:\n        base.coercions = elements.coercions = coercions\n        base.elements = elements\n        base.type_api = type_api\n        coercions.elements = elements\n        coercions.lambdas = lambdas\n        coercions.schema = schema\n        coercions.selectable = selectable\n\n    from .annotation import _prepare_annotations\n    from .annotation import Annotated\n    from .elements import AnnotatedColumnElement\n    from .elements import ClauseList\n    from .selectable import AnnotatedFromClause\n\n    _prepare_annotations(ColumnElement, AnnotatedColumnElement)\n    _prepare_annotations(FromClause, AnnotatedFromClause)\n    _prepare_annotations(ClauseList, Annotated)\n\n    _sa_util.preloaded.import_prefix("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\sql\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nimport contextlib\nfrom copy import copy\nfrom itertools import filterfalse\nimport re\nimport sys\nimport warnings\n\nfrom . import assertsql\nfrom . import config\nfrom . import engines\nfrom . import mock\nfrom .exclusions import db_spec\nfrom .util import fail\nfrom .. import exc as sa_exc\nfrom .. import schema\nfrom .. import sql\nfrom .. import types as sqltypes\nfrom .. import util\nfrom ..engine import default\nfrom ..engine import url\nfrom ..sql.selectable import LABEL_STYLE_TABLENAME_PLUS_COL\nfrom ..util import decorator\n\n\ndef expect_warnings(*messages, **kw):\n    ",
      "https://github.com/python-greenlet/greenlet/issues/242\n    del ec\n\n    # assert outside the block so it works for AssertionError too !\n    assert success, "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\assertions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport collections\nimport contextlib\nimport itertools\nimport re\n\nfrom .. import event\nfrom ..engine import url\nfrom ..engine.default import DefaultDialect\nfrom ..schema import BaseDDLElement\n\n\nclass AssertRule:\n    is_consumed = False\n    errormessage = None\n    consume_statement = True\n\n    def process_statement(self, execute_observed):\n        pass\n\n    def no_more_statements(self):\n        assert False, (\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\assertsql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n# functions and wrappers to run tests, fixtures, provisioning and\n# setup/teardown in an asyncio event loop, conditionally based on the\n# current DB driver being used for a test.\n\n# note that SQLAlchemy"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\asyncio.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nfrom argparse import Namespace\nimport collections\nimport inspect\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Iterable\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import mock\nfrom . import requirements as _requirements\nfrom .util import fail\nfrom .. import util\n\n# default requirements; this is replaced by plugin_base when pytest\n# is run\nrequirements = _requirements.SuiteRequirements()\n\ndb = None\ndb_url = None\ndb_opts = None\nfile_config = None\ntest_schema = None\ntest_schema_2 = None\nany_async = False\n_current = None\nident = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport collections\nimport re\nimport typing\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Optional\nimport warnings\nimport weakref\n\nfrom . import config\nfrom .util import decorator\nfrom .util import gc_collect\nfrom .. import event\nfrom .. import pool\nfrom ..util import await_only\nfrom ..util.typing import Literal\n\n\nif typing.TYPE_CHECKING:\n    from ..engine import Engine\n    from ..engine.url import URL\n    from ..ext.asyncio import AsyncEngine\n\n\nclass ConnectionKiller:\n    def __init__(self):\n        self.proxy_refs = weakref.WeakKeyDictionary()\n        self.testing_engines = collections.defaultdict(set)\n        self.dbapi_connections = set()\n\n    def add_pool(self, pool):\n        event.listen(pool, "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\engines.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport sqlalchemy as sa\nfrom .. import exc as sa_exc\nfrom ..orm.writeonly import WriteOnlyCollection\n\n_repr_stack = set()\n\n\nclass BasicEntity:\n    def __init__(self, **kw):\n        for key, value in kw.items():\n            setattr(self, key, value)\n\n    def __repr__(self):\n        if id(self) in _repr_stack:\n            return object.__repr__(self)\n        _repr_stack.add(id(self))\n        try:\n            return "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\entities.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport contextlib\nimport operator\nimport re\nimport sys\n\nfrom . import config\nfrom .. import util\nfrom ..util import decorator\nfrom ..util.compat import inspect_getfullargspec\n\n\ndef skip_if(predicate, reason=None):\n    rule = compound()\n    pred = _as_predicate(predicate, reason)\n    rule.skips.add(pred)\n    return rule\n\n\ndef fails_if(predicate, reason=None):\n    rule = compound()\n    pred = _as_predicate(predicate, reason)\n    rule.fails.add(pred)\n    return rule\n\n\nclass compound:\n    def __init__(self):\n        self.fails = set()\n        self.skips = set()\n\n    def __add__(self, other):\n        return self.add(other)\n\n    def as_skips(self):\n        rule = compound()\n        rule.skips.update(self.skips)\n        rule.skips.update(self.fails)\n        return rule\n\n    def add(self, *others):\n        copy = compound()\n        copy.fails.update(self.fails)\n        copy.skips.update(self.skips)\n\n        for other in others:\n            copy.fails.update(other.fails)\n            copy.skips.update(other.skips)\n        return copy\n\n    def not_(self):\n        copy = compound()\n        copy.fails.update(NotPredicate(fail) for fail in self.fails)\n        copy.skips.update(NotPredicate(skip) for skip in self.skips)\n        return copy\n\n    @property\n    def enabled(self):\n        return self.enabled_for_config(config._current)\n\n    def enabled_for_config(self, config):\n        for predicate in self.skips.union(self.fails):\n            if predicate(config):\n                return False\n        else:\n            return True\n\n    def matching_config_reasons(self, config):\n        return [\n            predicate._as_string(config)\n            for predicate in self.skips.union(self.fails)\n            if predicate(config)\n        ]\n\n    def _extend(self, other):\n        self.skips.update(other.skips)\n        self.fails.update(other.fails)\n\n    def __call__(self, fn):\n        if hasattr(fn, "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\exclusions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\pickleable.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\profiling.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport collections\nimport logging\n\nfrom . import config\nfrom . import engines\nfrom . import util\nfrom .. import exc\nfrom .. import inspect\nfrom ..engine import url as sa_url\nfrom ..sql import ddl\nfrom ..sql import schema\n\n\nlog = logging.getLogger(__name__)\n\nFOLLOWER_IDENT = None\n\n\nclass register:\n    def __init__(self, decorator=None):\n        self.fns = {}\n        self.decorator = decorator\n\n    @classmethod\n    def init(cls, fn):\n        return register().for_db("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\requirements.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport sys\n\nfrom . import config\nfrom . import exclusions\nfrom .. import event\nfrom .. import schema\nfrom .. import types as sqltypes\nfrom ..orm import mapped_column as _orm_mapped_column\nfrom ..util import OrderedDict\n\n__all__ = ["
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nfrom collections import deque\nimport contextlib\nimport decimal\nimport gc\nfrom itertools import chain\nimport random\nimport sys\nfrom sys import getsizeof\nimport time\nimport types\nfrom typing import Any\n\nfrom . import config\nfrom . import mock\nfrom .. import inspect\nfrom ..engine import Connection\nfrom ..schema import Column\nfrom ..schema import DropConstraint\nfrom ..schema import DropTable\nfrom ..schema import ForeignKeyConstraint\nfrom ..schema import MetaData\nfrom ..schema import Table\nfrom ..sql import schema\nfrom ..sql.sqltypes import Integer\nfrom ..util import decorator\nfrom ..util import defaultdict\nfrom ..util import has_refcount_gc\nfrom ..util import inspect_getfullargspec\n\n\nif not has_refcount_gc:\n\n    def non_refcount_gc_collect(*args):\n        gc.collect()\n        gc.collect()\n\n    gc_collect = lazy_gc = non_refcount_gc_collect\nelse:\n    # assume CPython - straight gc.collect, lazy_gc() is a pass\n    gc_collect = gc.collect\n\n    def lazy_gc():\n        pass\n\n\ndef picklers():\n    picklers = set()\n    import pickle\n\n    picklers.add(pickle)\n\n    # yes, this thing needs this much testing\n    for pickle_ in picklers:\n        for protocol in range(-2, pickle.HIGHEST_PROTOCOL + 1):\n            yield pickle_.loads, lambda d: pickle_.dumps(d, protocol)\n\n\ndef random_choices(population, k=1):\n    return random.choices(population, k=k)\n\n\ndef round_decimal(value, prec):\n    if isinstance(value, float):\n        return round(value, prec)\n\n    # can also use shift() here but that is 2.6 only\n    return (value * decimal.Decimal(",
      "https://code.activestate.com/recipes/577504/\n\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport warnings\n\nfrom . import assertions\nfrom .. import exc\nfrom .. import exc as sa_exc\nfrom ..exc import SATestSuiteWarning\nfrom ..util.langhelpers import _warnings_warn\n\n\ndef warn_test_suite(message):\n    _warnings_warn(message, category=SATestSuiteWarning)\n\n\ndef setup_filters():\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\warnings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom unittest import mock\n\nfrom . import config\nfrom .assertions import assert_raises\nfrom .assertions import assert_raises_context_ok\nfrom .assertions import assert_raises_message\nfrom .assertions import assert_raises_message_context_ok\nfrom .assertions import assert_warns\nfrom .assertions import assert_warns_message\nfrom .assertions import AssertsCompiledSQL\nfrom .assertions import AssertsExecutionResults\nfrom .assertions import ComparesIndexes\nfrom .assertions import ComparesTables\nfrom .assertions import emits_warning\nfrom .assertions import emits_warning_on\nfrom .assertions import eq_\nfrom .assertions import eq_ignore_whitespace\nfrom .assertions import eq_regex\nfrom .assertions import expect_deprecated\nfrom .assertions import expect_deprecated_20\nfrom .assertions import expect_raises\nfrom .assertions import expect_raises_message\nfrom .assertions import expect_warnings\nfrom .assertions import in_\nfrom .assertions import int_within_variance\nfrom .assertions import is_\nfrom .assertions import is_false\nfrom .assertions import is_instance_of\nfrom .assertions import is_none\nfrom .assertions import is_not\nfrom .assertions import is_not_\nfrom .assertions import is_not_none\nfrom .assertions import is_true\nfrom .assertions import le_\nfrom .assertions import ne_\nfrom .assertions import not_in\nfrom .assertions import not_in_\nfrom .assertions import startswith_\nfrom .assertions import uses_deprecated\nfrom .config import add_to_marker\nfrom .config import async_test\nfrom .config import combinations\nfrom .config import combinations_list\nfrom .config import db\nfrom .config import fixture\nfrom .config import requirements as requires\nfrom .config import skip_test\nfrom .config import Variation\nfrom .config import variation\nfrom .config import variation_fixture\nfrom .exclusions import _is_excluded\nfrom .exclusions import _server_version\nfrom .exclusions import against as _against\nfrom .exclusions import db_spec\nfrom .exclusions import exclude\nfrom .exclusions import fails\nfrom .exclusions import fails_if\nfrom .exclusions import fails_on\nfrom .exclusions import fails_on_everything_except\nfrom .exclusions import future\nfrom .exclusions import only_if\nfrom .exclusions import only_on\nfrom .exclusions import skip\nfrom .exclusions import skip_if\nfrom .schema import eq_clause_element\nfrom .schema import eq_type_affinity\nfrom .util import adict\nfrom .util import fail\nfrom .util import flag_combinations\nfrom .util import force_drop_names\nfrom .util import lambda_combinations\nfrom .util import metadata_fixture\nfrom .util import provide_metadata\nfrom .util import resolve_lambda\nfrom .util import rowset\nfrom .util import run_as_contextmanager\nfrom .util import skip_if_timeout\nfrom .util import teardown_events\nfrom .warnings import assert_warnings\nfrom .warnings import warn_test_suite\n\n\ndef against(*queries):\n    return _against(config._current, *queries)\n\n\ncrashes = skip\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://github.com/python/cpython/pull/8895"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport asyncio  # noqa\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Coroutine\nfrom typing import TypeVar\n\nhave_greenlet = False\ngreenlet_error = None\ntry:\n    import greenlet  # type: ignore[import-untyped,unused-ignore]  # noqa: F401,E501\nexcept ImportError as e:\n    greenlet_error = str(e)\n    pass\nelse:\n    have_greenlet = True\n    from ._concurrency_py3k import await_only as await_only\n    from ._concurrency_py3k import await_fallback as await_fallback\n    from ._concurrency_py3k import in_greenlet as in_greenlet\n    from ._concurrency_py3k import greenlet_spawn as greenlet_spawn\n    from ._concurrency_py3k import is_exit_exception as is_exit_exception\n    from ._concurrency_py3k import AsyncAdaptedLock as AsyncAdaptedLock\n    from ._concurrency_py3k import _Runner\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\concurrency.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://mypy.readthedocs.io/en/stable/generics.html#declaring-decorators\n_F = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\deprecations.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://docs.python.org/3/howto/annotations.html#annotations-howto\n        if isinstance(obj, type):\n            ann = obj.__dict__.get(",
      "https://docs.python.org/3/library/inspect.html\n        # The flags are specific to CPython, and may not be defined in other\n        # Python implementations. Furthermore, the flags are an implementation\n        # detail, and can be removed or deprecated in future Python releases.\n        spec = compat.inspect_getfullargspec(fn)\n        return spec[0], bool(spec[2])\n    else:\n        # use fn.__code__ plus flags to reduce method call overhead\n        co = fn.__code__\n        nargs = co.co_argcount\n        return (\n            list(co.co_varnames[:nargs]),\n            bool(co.co_flags & co_varkeywords),\n        )\n\n\n@overload\ndef get_cls_kwargs(\n    cls: type,\n    *,\n    _set: Optional[Set[str]] = None,\n    raiseerr: Literal[True] = ...,\n) -> Set[str]: ...\n\n\n@overload\ndef get_cls_kwargs(\n    cls: type, *, _set: Optional[Set[str]] = None, raiseerr: bool = False\n) -> Optional[Set[str]]: ...\n\n\ndef get_cls_kwargs(\n    cls: type, *, _set: Optional[Set[str]] = None, raiseerr: bool = False\n) -> Optional[Set[str]]:\n    r",
      "https://github.com/python/mypy/issues/12440\nif TYPE_CHECKING:\n    # allow memoized and non-memoized to be freely mixed by having them\n    # be the same class\n    memoized_property = generic_fn_descriptor\n    non_memoized_property = generic_fn_descriptor\n\n    # for read only situations, mypy only sees @property as read only.\n    # read only is needed when a subtype specializes the return type\n    # of a property, meaning assignment needs to be disallowed\n    ro_memoized_property = property\n    ro_non_memoized_property = property\n\nelse:\n    memoized_property = ro_memoized_property = _memoized_property\n    non_memoized_property = ro_non_memoized_property = _non_memoized_property\n\n\ndef memoized_instancemethod(fn: _F) -> _F:\n    ",
      "https://github.com/python/cpython/issues/99304"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://bugs.python.org/issue38884, these modules\n    are added to the system module cache by importing them after the packages\n    has finished initialization.\n\n    A global instance is provided under the name :attr:`.preloaded`. Use\n    the function :func:`.preload_module` to register modules to load and\n    :meth:`.import_prefix` to load all the modules that start with the\n    given path.\n\n    While the modules are loaded in the global module cache, it"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\preloaded.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\queue.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\tool_support.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://neopythonic.blogspot.com/2009/01/detecting-cycles-in-directed-graph.html\n\n    edges: DefaultDict[_T, Set[_T]] = util.defaultdict(set)\n    for parent, child in tuples:\n        edges[parent].add(child)\n    nodes_to_test = set(edges)\n\n    output = set()\n\n    # we"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\topological.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport builtins\nfrom collections import deque\nimport collections.abc as collections_abc\nimport re\nimport sys\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import ForwardRef\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Mapping\nfrom typing import NewType\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import compat\n\nif True:  # zimports removes the tailing comments\n    from typing_extensions import Annotated as Annotated  # 3.8\n    from typing_extensions import Concatenate as Concatenate  # 3.10\n    from typing_extensions import (\n        dataclass_transform as dataclass_transform,  # 3.11,\n    )\n    from typing_extensions import Final as Final  # 3.8\n    from typing_extensions import final as final  # 3.8\n    from typing_extensions import get_args as get_args  # 3.10\n    from typing_extensions import get_origin as get_origin  # 3.10\n    from typing_extensions import Literal as Literal  # 3.8\n    from typing_extensions import NotRequired as NotRequired  # 3.11\n    from typing_extensions import ParamSpec as ParamSpec  # 3.10\n    from typing_extensions import Protocol as Protocol  # 3.8\n    from typing_extensions import SupportsIndex as SupportsIndex  # 3.8\n    from typing_extensions import TypeAlias as TypeAlias  # 3.10\n    from typing_extensions import TypedDict as TypedDict  # 3.8\n    from typing_extensions import TypeGuard as TypeGuard  # 3.10\n    from typing_extensions import Self as Self  # 3.11\n    from typing_extensions import TypeAliasType as TypeAliasType  # 3.12\n    from typing_extensions import Never as Never  # 3.11\n\n_T = TypeVar(",
      "https://github.com/microsoft/pyright/issues/3025\n_LiteralStar = Literal["
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://gist.github.com/zzzeek/89de958cf0803d148e74861bd682ebae\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\_collections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport asyncio\nfrom contextvars import Context\nimport sys\nimport typing\nfrom typing import Any\nfrom typing import Awaitable\nfrom typing import Callable\nfrom typing import Coroutine\nfrom typing import Optional\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom .langhelpers import memoized_property\nfrom .. import exc\nfrom ..util import py311\nfrom ..util.typing import Literal\nfrom ..util.typing import Protocol\nfrom ..util.typing import Self\nfrom ..util.typing import TypeGuard\n\n_T = TypeVar(",
      "https://github.com/python-greenlet/greenlet/pull/198\n_has_gr_context = hasattr(getcurrent(), ",
      "https://gist.github.com/snaury/202bf4f22c41ca34e56297bae5f33fef\n# Issue for context: https://github.com/python-greenlet/greenlet/issues/173\n\n\nclass _AsyncIoGreenlet(greenlet):\n    dead: bool\n\n    __sqlalchemy_greenlet_provider__ = True\n\n    def __init__(self, fn: Callable[..., Any], driver: greenlet):\n        greenlet.__init__(self, fn, driver)\n        if _has_gr_context:\n            self.gr_context = driver.gr_context\n\n\n_T_co = TypeVar(",
      "https://docs.python.org/3/reference/datamodel.html#coroutine.close\n\n    if iscoroutine(awaitable):\n        awaitable.close()\n\n\ndef in_greenlet() -> bool:\n    current = getcurrent()\n    return getattr(current, "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\_concurrency_py3k.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport os\nimport typing\n\n\ndef _import_cy_extensions():\n    # all cython extension extension modules are treated as optional by the\n    # setup, so to ensure that all are compiled, all should be imported here\n    from ..cyextension import collections\n    from ..cyextension import immutabledict\n    from ..cyextension import processors\n    from ..cyextension import resultproxy\n    from ..cyextension import util\n\n    return (collections, immutabledict, processors, resultproxy, util)\n\n\n_CYEXTENSION_MSG: str\nif not typing.TYPE_CHECKING:\n    if os.environ.get("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\_has_cy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nfrom itertools import filterfalse\nfrom typing import AbstractSet\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Collection\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Mapping\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom ..util.typing import Self\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\_py_collections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\nfrom collections import defaultdict as defaultdict\nfrom functools import partial as partial\nfrom functools import update_wrapper as update_wrapper\nfrom typing import TYPE_CHECKING\n\nfrom . import preloaded as preloaded\nfrom ._collections import coerce_generator_arg as coerce_generator_arg\nfrom ._collections import coerce_to_immutabledict as coerce_to_immutabledict\nfrom ._collections import column_dict as column_dict\nfrom ._collections import column_set as column_set\nfrom ._collections import EMPTY_DICT as EMPTY_DICT\nfrom ._collections import EMPTY_SET as EMPTY_SET\nfrom ._collections import FacadeDict as FacadeDict\nfrom ._collections import flatten_iterator as flatten_iterator\nfrom ._collections import has_dupes as has_dupes\nfrom ._collections import has_intersection as has_intersection\nfrom ._collections import IdentitySet as IdentitySet\nfrom ._collections import immutabledict as immutabledict\nfrom ._collections import LRUCache as LRUCache\nfrom ._collections import merge_lists_w_ordering as merge_lists_w_ordering\nfrom ._collections import NONE_SET as NONE_SET\nfrom ._collections import ordered_column_set as ordered_column_set\nfrom ._collections import OrderedDict as OrderedDict\nfrom ._collections import OrderedIdentitySet as OrderedIdentitySet\nfrom ._collections import OrderedProperties as OrderedProperties\nfrom ._collections import OrderedSet as OrderedSet\nfrom ._collections import PopulateDict as PopulateDict\nfrom ._collections import Properties as Properties\nfrom ._collections import ReadOnlyContainer as ReadOnlyContainer\nfrom ._collections import ReadOnlyProperties as ReadOnlyProperties\nfrom ._collections import ScopedRegistry as ScopedRegistry\nfrom ._collections import sort_dictionary as sort_dictionary\nfrom ._collections import ThreadLocalRegistry as ThreadLocalRegistry\nfrom ._collections import to_column_set as to_column_set\nfrom ._collections import to_list as to_list\nfrom ._collections import to_set as to_set\nfrom ._collections import unique_list as unique_list\nfrom ._collections import UniqueAppender as UniqueAppender\nfrom ._collections import update_copy as update_copy\nfrom ._collections import WeakPopulateDict as WeakPopulateDict\nfrom ._collections import WeakSequence as WeakSequence\nfrom .compat import anext_ as anext_\nfrom .compat import arm as arm\nfrom .compat import b as b\nfrom .compat import b64decode as b64decode\nfrom .compat import b64encode as b64encode\nfrom .compat import cmp as cmp\nfrom .compat import cpython as cpython\nfrom .compat import dataclass_fields as dataclass_fields\nfrom .compat import decode_backslashreplace as decode_backslashreplace\nfrom .compat import dottedgetter as dottedgetter\nfrom .compat import has_refcount_gc as has_refcount_gc\nfrom .compat import inspect_getfullargspec as inspect_getfullargspec\nfrom .compat import is64bit as is64bit\nfrom .compat import local_dataclass_fields as local_dataclass_fields\nfrom .compat import osx as osx\nfrom .compat import py310 as py310\nfrom .compat import py311 as py311\nfrom .compat import py312 as py312\nfrom .compat import py313 as py313\nfrom .compat import py38 as py38\nfrom .compat import py39 as py39\nfrom .compat import pypy as pypy\nfrom .compat import win32 as win32\nfrom .concurrency import await_fallback as await_fallback\nfrom .concurrency import await_only as await_only\nfrom .concurrency import greenlet_spawn as greenlet_spawn\nfrom .concurrency import is_exit_exception as is_exit_exception\nfrom .deprecations import became_legacy_20 as became_legacy_20\nfrom .deprecations import deprecated as deprecated\nfrom .deprecations import deprecated_cls as deprecated_cls\nfrom .deprecations import deprecated_params as deprecated_params\nfrom .deprecations import moved_20 as moved_20\nfrom .deprecations import warn_deprecated as warn_deprecated\nfrom .langhelpers import add_parameter_text as add_parameter_text\nfrom .langhelpers import as_interface as as_interface\nfrom .langhelpers import asbool as asbool\nfrom .langhelpers import asint as asint\nfrom .langhelpers import assert_arg_type as assert_arg_type\nfrom .langhelpers import attrsetter as attrsetter\nfrom .langhelpers import bool_or_str as bool_or_str\nfrom .langhelpers import chop_traceback as chop_traceback\nfrom .langhelpers import class_hierarchy as class_hierarchy\nfrom .langhelpers import classproperty as classproperty\nfrom .langhelpers import clsname_as_plain_name as clsname_as_plain_name\nfrom .langhelpers import coerce_kw_type as coerce_kw_type\nfrom .langhelpers import constructor_copy as constructor_copy\nfrom .langhelpers import constructor_key as constructor_key\nfrom .langhelpers import counter as counter\nfrom .langhelpers import create_proxy_methods as create_proxy_methods\nfrom .langhelpers import decode_slice as decode_slice\nfrom .langhelpers import decorator as decorator\nfrom .langhelpers import dictlike_iteritems as dictlike_iteritems\nfrom .langhelpers import duck_type_collection as duck_type_collection\nfrom .langhelpers import ellipses_string as ellipses_string\nfrom .langhelpers import EnsureKWArg as EnsureKWArg\nfrom .langhelpers import FastIntFlag as FastIntFlag\nfrom .langhelpers import format_argspec_init as format_argspec_init\nfrom .langhelpers import format_argspec_plus as format_argspec_plus\nfrom .langhelpers import generic_fn_descriptor as generic_fn_descriptor\nfrom .langhelpers import generic_repr as generic_repr\nfrom .langhelpers import get_annotations as get_annotations\nfrom .langhelpers import get_callable_argspec as get_callable_argspec\nfrom .langhelpers import get_cls_kwargs as get_cls_kwargs\nfrom .langhelpers import get_func_kwargs as get_func_kwargs\nfrom .langhelpers import getargspec_init as getargspec_init\nfrom .langhelpers import has_compiled_ext as has_compiled_ext\nfrom .langhelpers import HasMemoized as HasMemoized\nfrom .langhelpers import (\n    HasMemoized_ro_memoized_attribute as HasMemoized_ro_memoized_attribute,\n)\nfrom .langhelpers import hybridmethod as hybridmethod\nfrom .langhelpers import hybridproperty as hybridproperty\nfrom .langhelpers import inject_docstring_text as inject_docstring_text\nfrom .langhelpers import iterate_attributes as iterate_attributes\nfrom .langhelpers import map_bits as map_bits\nfrom .langhelpers import md5_hex as md5_hex\nfrom .langhelpers import memoized_instancemethod as memoized_instancemethod\nfrom .langhelpers import memoized_property as memoized_property\nfrom .langhelpers import MemoizedSlots as MemoizedSlots\nfrom .langhelpers import method_is_overridden as method_is_overridden\nfrom .langhelpers import methods_equivalent as methods_equivalent\nfrom .langhelpers import (\n    monkeypatch_proxied_specials as monkeypatch_proxied_specials,\n)\nfrom .langhelpers import non_memoized_property as non_memoized_property\nfrom .langhelpers import NoneType as NoneType\nfrom .langhelpers import only_once as only_once\nfrom .langhelpers import (\n    parse_user_argument_for_enum as parse_user_argument_for_enum,\n)\nfrom .langhelpers import PluginLoader as PluginLoader\nfrom .langhelpers import portable_instancemethod as portable_instancemethod\nfrom .langhelpers import quoted_token_parser as quoted_token_parser\nfrom .langhelpers import ro_memoized_property as ro_memoized_property\nfrom .langhelpers import ro_non_memoized_property as ro_non_memoized_property\nfrom .langhelpers import rw_hybridproperty as rw_hybridproperty\nfrom .langhelpers import safe_reraise as safe_reraise\nfrom .langhelpers import set_creation_order as set_creation_order\nfrom .langhelpers import string_or_unprintable as string_or_unprintable\nfrom .langhelpers import symbol as symbol\nfrom .langhelpers import TypingOnly as TypingOnly\nfrom .langhelpers import (\n    unbound_method_to_callable as unbound_method_to_callable,\n)\nfrom .langhelpers import walk_subclasses as walk_subclasses\nfrom .langhelpers import warn as warn\nfrom .langhelpers import warn_exception as warn_exception\nfrom .langhelpers import warn_limited as warn_limited\nfrom .langhelpers import wrap_callable as wrap_callable\nfrom .preloaded import preload_module as preload_module\nfrom .typing import is_non_string_iterable as is_non_string_iterable\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\util\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport sqlalchemy as sa\nfrom .. import assertions\nfrom .. import config\nfrom ..assertions import eq_\nfrom ..util import drop_all_tables_from_metadata\nfrom ... import Column\nfrom ... import func\nfrom ... import Integer\nfrom ... import select\nfrom ... import Table\nfrom ...orm import DeclarativeBase\nfrom ...orm import MappedAsDataclass\nfrom ...orm import registry\n\n\n@config.mark_base_test_class()\nclass TestBase:\n    # A sequence of requirement names matching testing.requires decorators\n    __requires__ = ()\n\n    # A sequence of dialect names to exclude from the test class.\n    __unsupported_on__ = ()\n\n    # If present, test class is only runnable for the *single* specified\n    # dialect.  If you need multiple, use __unsupported_on__ and invert.\n    __only_on__ = None\n\n    # A sequence of no-arg callables. If any are True, the entire testcase is\n    # skipped.\n    __skip_if__ = None\n\n    # if True, the testing reaper will not attempt to touch connection\n    # state after a test is completed and before the outer teardown\n    # starts\n    __leave_connections_for_teardown__ = False\n\n    def assert_(self, val, msg=None):\n        assert val, msg\n\n    @config.fixture()\n    def nocache(self):\n        _cache = config.db._compiled_cache\n        config.db._compiled_cache = None\n        yield\n        config.db._compiled_cache = _cache\n\n    @config.fixture()\n    def connection_no_trans(self):\n        eng = getattr(self, "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport inspect\nimport os\nfrom pathlib import Path\nimport re\nimport shutil\nimport sys\nimport tempfile\n\nfrom .base import TestBase\nfrom .. import config\nfrom ..assertions import eq_\nfrom ... import util\n\n\n@config.add_to_marker.mypy\nclass MypyTest(TestBase):\n    __requires__ = (",
      "https://github.com/python/mypy/blob/304997bfb85200fb521ac727ee0ce3e6085e5278/mypy/options.py#L363  # noqa: E501\n\n                        # skip first character which could be capitalized\n                        # ",
      "https://github.com/python/mypy/blob/304997bfb85200fb521ac727ee0ce3e6085e5278/mypy/options.py#L368  # noqa: E501\n                        expected_msg = re.sub(\n                            r"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\mypy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nfrom typing import Any\n\nimport sqlalchemy as sa\nfrom .base import TestBase\nfrom .sql import TablesTest\nfrom .. import assertions\nfrom .. import config\nfrom .. import schema\nfrom ..entities import BasicEntity\nfrom ..entities import ComparableEntity\nfrom ..util import adict\nfrom ... import orm\nfrom ...orm import DeclarativeBase\nfrom ...orm import events as orm_events\nfrom ...orm import registry\n\n\nclass ORMTest(TestBase):\n    @config.fixture\n    def fixture_session(self):\n        return fixture_session()\n\n\nclass MappedTest(ORMTest, TablesTest, assertions.AssertsExecutionResults):\n    # "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\orm.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nimport itertools\nimport random\nimport re\nimport sys\n\nimport sqlalchemy as sa\nfrom .base import TestBase\nfrom .. import config\nfrom .. import mock\nfrom ..assertions import eq_\nfrom ..assertions import ne_\nfrom ..util import adict\nfrom ..util import drop_all_tables_from_metadata\nfrom ... import event\nfrom ... import util\nfrom ...schema import sort_tables_and_constraints\nfrom ...sql import visitors\nfrom ...sql.elements import ClauseElement\n\n\nclass TablesTest(TestBase):\n    # "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\sql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom .base import FutureEngineMixin as FutureEngineMixin\nfrom .base import TestBase as TestBase\nfrom .mypy import MypyTest as MypyTest\nfrom .orm import after_test as after_test\nfrom .orm import close_all_sessions as close_all_sessions\nfrom .orm import DeclarativeMappedTest as DeclarativeMappedTest\nfrom .orm import fixture_session as fixture_session\nfrom .orm import MappedTest as MappedTest\nfrom .orm import ORMTest as ORMTest\nfrom .orm import RemoveORMEventsGlobally as RemoveORMEventsGlobally\nfrom .orm import (\n    stop_test_class_inside_fixtures as stop_test_class_inside_fixtures,\n)\nfrom .sql import CacheKeyFixture as CacheKeyFixture\nfrom .sql import (\n    ComputedReflectionFixtureTest as ComputedReflectionFixtureTest,\n)\nfrom .sql import insertmanyvalues_fixture as insertmanyvalues_fixture\nfrom .sql import NoCache as NoCache\nfrom .sql import RemovesEvents as RemovesEvents\nfrom .sql import TablesTest as TablesTest\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\bootstrap.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport abc\nfrom argparse import Namespace\nimport configparser\nimport logging\nimport os\nfrom pathlib import Path\nimport re\nimport sys\nfrom typing import Any\n\nfrom sqlalchemy.testing import asyncio\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\plugin_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport argparse\nimport collections\nfrom functools import update_wrapper\nimport inspect\nimport itertools\nimport operator\nimport os\nimport re\nimport sys\nfrom typing import TYPE_CHECKING\nimport uuid\n\nimport pytest\n\ntry:\n    # installed by bootstrap.py\n    if not TYPE_CHECKING:\n        import sqla_plugin_base as plugin_base\nexcept ImportError:\n    # assume we",
      "https://github.com/pytest-dev/pytest/issues/9343\n    global _current_class, _current_report\n\n    if _current_class is not None and (\n        # last test or a new class\n        nextitem is None\n        or nextitem.getparent(pytest.Class) is not _current_class\n    ):\n        _current_class = None\n\n        try:\n            asyncio._maybe_async_provisioning(\n                plugin_base.stop_test_class_outside_fixtures, item.cls\n            )\n        except Exception as e:\n            # in case of an exception during teardown attach the original\n            # error to the exception message, otherwise it will get lost\n            if _current_report.failed:\n                if not e.args:\n                    e.args = (\n                        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\pytestplugin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import ForeignKey\nfrom ... import Integer\nfrom ... import select\nfrom ... import String\nfrom ... import testing\n\n\nclass CTETest(fixtures.TablesTest):\n    __backend__ = True\n    __requires__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_cte.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport random\n\nfrom . import testing\nfrom .. import config\nfrom .. import fixtures\nfrom .. import util\nfrom ..assertions import eq_\nfrom ..assertions import is_false\nfrom ..assertions import is_true\nfrom ..config import requirements\nfrom ..schema import Table\nfrom ... import CheckConstraint\nfrom ... import Column\nfrom ... import ForeignKeyConstraint\nfrom ... import Index\nfrom ... import inspect\nfrom ... import Integer\nfrom ... import schema\nfrom ... import String\nfrom ... import UniqueConstraint\n\n\nclass TableDDLTest(fixtures.TestBase):\n    __backend__ = True\n\n    def _simple_fixture(self, schema=None):\n        return Table(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_ddl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import Integer\nfrom ... import select\nfrom ... import testing\nfrom ... import union\n\n\nclass DeprecatedCompoundSelectTest(fixtures.TablesTest):\n    __backend__ = True\n\n    @classmethod\n    def define_tables(cls, metadata):\n        Table(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_deprecations.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport importlib\n\nfrom . import testing\nfrom .. import assert_raises\nfrom .. import config\nfrom .. import engines\nfrom .. import eq_\nfrom .. import fixtures\nfrom .. import is_not_none\nfrom .. import is_true\nfrom .. import ne_\nfrom .. import provide_metadata\nfrom ..assertions import expect_raises\nfrom ..assertions import expect_raises_message\nfrom ..config import requirements\nfrom ..provision import set_default_schema_on_connection\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import bindparam\nfrom ... import dialects\nfrom ... import event\nfrom ... import exc\nfrom ... import Integer\nfrom ... import literal_column\nfrom ... import select\nfrom ... import String\nfrom ...sql.compiler import Compiled\nfrom ...util import inspect_getfullargspec\n\n\nclass PingTest(fixtures.TestBase):\n    __backend__ = True\n\n    def test_do_ping(self):\n        with testing.db.connect() as conn:\n            is_true(\n                testing.db.dialect.do_ping(conn.connection.dbapi_connection)\n            )\n\n\nclass ArgSignatureTest(fixtures.TestBase):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_dialect.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom decimal import Decimal\nimport uuid\n\nfrom . import testing\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..config import requirements\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import Double\nfrom ... import Float\nfrom ... import Identity\nfrom ... import Integer\nfrom ... import literal\nfrom ... import literal_column\nfrom ... import Numeric\nfrom ... import select\nfrom ... import String\nfrom ...types import LargeBinary\nfrom ...types import UUID\nfrom ...types import Uuid\n\n\nclass LastrowidTest(fixtures.TablesTest):\n    run_deletes = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_insert.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport contextlib\nimport operator\nimport re\n\nimport sqlalchemy as sa\nfrom .. import config\nfrom .. import engines\nfrom .. import eq_\nfrom .. import expect_raises\nfrom .. import expect_raises_message\nfrom .. import expect_warnings\nfrom .. import fixtures\nfrom .. import is_\nfrom ..provision import get_temp_table_name\nfrom ..provision import temp_table_keyword_args\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import event\nfrom ... import ForeignKey\nfrom ... import func\nfrom ... import Identity\nfrom ... import inspect\nfrom ... import Integer\nfrom ... import MetaData\nfrom ... import String\nfrom ... import testing\nfrom ... import types as sql_types\nfrom ...engine import Inspector\nfrom ...engine import ObjectKind\nfrom ...engine import ObjectScope\nfrom ...exc import NoSuchTableError\nfrom ...exc import UnreflectableTableError\nfrom ...schema import DDL\nfrom ...schema import Index\nfrom ...sql.elements import quoted_name\nfrom ...sql.schema import BLANK_SCHEMA\nfrom ...testing import ComparesIndexes\nfrom ...testing import ComparesTables\nfrom ...testing import is_false\nfrom ...testing import is_true\nfrom ...testing import mock\n\n\nmetadata, users = None, None\n\n\nclass OneConnectionTablesTest(fixtures.TablesTest):\n    @classmethod\n    def setup_bind(cls):\n        # TODO: when temp tables are subject to server reset,\n        # this will also have to disable that server reset from\n        # happening\n        if config.requirements.independent_connections.enabled:\n            from sqlalchemy import pool\n\n            return engines.testing_engine(\n                options=dict(poolclass=pool.StaticPool, scope=",
      "https://www.arbinada.com/en/node/1645\n            sa.UniqueConstraint("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_reflection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport datetime\nimport re\n\nfrom .. import engines\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..config import requirements\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import DateTime\nfrom ... import func\nfrom ... import Integer\nfrom ... import select\nfrom ... import sql\nfrom ... import String\nfrom ... import testing\nfrom ... import text\n\n\nclass RowFetchTest(fixtures.TablesTest):\n    __backend__ = True\n\n    @classmethod\n    def define_tables(cls, metadata):\n        Table(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_results.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom sqlalchemy import bindparam\nfrom sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import select\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import testing\nfrom sqlalchemy import text\nfrom sqlalchemy.testing import eq_\nfrom sqlalchemy.testing import fixtures\n\n\nclass RowCountTest(fixtures.TablesTest):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_rowcount.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport collections.abc as collections_abc\nimport itertools\n\nfrom .. import AssertsCompiledSQL\nfrom .. import AssertsExecutionResults\nfrom .. import config\nfrom .. import fixtures\nfrom ..assertions import assert_raises\nfrom ..assertions import eq_\nfrom ..assertions import in_\nfrom ..assertsql import CursorSQL\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import bindparam\nfrom ... import case\nfrom ... import column\nfrom ... import Computed\nfrom ... import exists\nfrom ... import false\nfrom ... import ForeignKey\nfrom ... import func\nfrom ... import Identity\nfrom ... import Integer\nfrom ... import literal\nfrom ... import literal_column\nfrom ... import null\nfrom ... import select\nfrom ... import String\nfrom ... import table\nfrom ... import testing\nfrom ... import text\nfrom ... import true\nfrom ... import tuple_\nfrom ... import TupleType\nfrom ... import union\nfrom ... import values\nfrom ...exc import DatabaseError\nfrom ...exc import ProgrammingError\n\n\nclass CollateTest(fixtures.TablesTest):\n    __backend__ = True\n\n    @classmethod\n    def define_tables(cls, metadata):\n        Table(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_select.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .. import config\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..assertions import is_true\nfrom ..config import requirements\nfrom ..provision import normalize_sequence\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import inspect\nfrom ... import Integer\nfrom ... import MetaData\nfrom ... import Sequence\nfrom ... import String\nfrom ... import testing\n\n\nclass SequenceTest(fixtures.TablesTest):\n    __requires__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_sequence.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport datetime\nimport decimal\nimport json\nimport re\nimport uuid\n\nfrom .. import config\nfrom .. import engines\nfrom .. import fixtures\nfrom .. import mock\nfrom ..assertions import eq_\nfrom ..assertions import is_\nfrom ..assertions import ne_\nfrom ..config import requirements\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import and_\nfrom ... import ARRAY\nfrom ... import BigInteger\nfrom ... import bindparam\nfrom ... import Boolean\nfrom ... import case\nfrom ... import cast\nfrom ... import Date\nfrom ... import DateTime\nfrom ... import Enum\nfrom ... import Float\nfrom ... import Integer\nfrom ... import Interval\nfrom ... import JSON\nfrom ... import literal\nfrom ... import literal_column\nfrom ... import MetaData\nfrom ... import null\nfrom ... import Numeric\nfrom ... import select\nfrom ... import String\nfrom ... import testing\nfrom ... import Text\nfrom ... import Time\nfrom ... import TIMESTAMP\nfrom ... import type_coerce\nfrom ... import TypeDecorator\nfrom ... import Unicode\nfrom ... import UnicodeText\nfrom ... import UUID\nfrom ... import Uuid\nfrom ...orm import declarative_base\nfrom ...orm import Session\nfrom ...sql import sqltypes\nfrom ...sql.sqltypes import LargeBinary\nfrom ...sql.sqltypes import PickleType\n\n\nclass _LiteralRoundTripFixture:\n    supports_whereclause = True\n\n    @testing.fixture\n    def literal_round_trip(self, metadata, connection):\n        ",
      "https://bugs.python.org/issue16535\n\n            # inserting as strings to avoid a new fixture around the\n            # dialect which would have idiosyncrasies for different\n            # backends.\n\n            class DecimalEncoder(json.JSONEncoder):\n                def default(self, o):\n                    if isinstance(o, decimal.Decimal):\n                        return str(o)\n                    return super().default(o)\n\n            json_data = json.dumps(data_element, cls=DecimalEncoder)\n\n            # take the quotes out.  yup, there is *literally* no other\n            # way to get Python"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom sqlalchemy import desc\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import testing\nfrom sqlalchemy.testing import eq_\nfrom sqlalchemy.testing import fixtures\nfrom sqlalchemy.testing.schema import Column\nfrom sqlalchemy.testing.schema import Table\n\n\nclass UnicodeSchemaTest(fixtures.TablesTest):\n    __requires__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_unicode_ddl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import Integer\nfrom ... import String\nfrom ... import testing\n\n\nclass SimpleUpdateDeleteTest(fixtures.TablesTest):\n    run_deletes = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_update_delete.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom .test_cte import *  # noqa\nfrom .test_ddl import *  # noqa\nfrom .test_deprecations import *  # noqa\nfrom .test_dialect import *  # noqa\nfrom .test_insert import *  # noqa\nfrom .test_reflection import *  # noqa\nfrom .test_results import *  # noqa\nfrom .test_rowcount import *  # noqa\nfrom .test_select import *  # noqa\nfrom .test_sequence import *  # noqa\nfrom .test_types import *  # noqa\nfrom .test_unicode_ddl import *  # noqa\nfrom .test_update_delete import *  # noqa\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport abc\nimport functools\nfrom typing import Any\nfrom typing import AsyncGenerator\nfrom typing import AsyncIterator\nfrom typing import Awaitable\nfrom typing import Callable\nfrom typing import ClassVar\nfrom typing import Dict\nfrom typing import Generator\nfrom typing import Generic\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import TypeVar\nimport weakref\n\nfrom . import exc as async_exc\nfrom ... import util\nfrom ...util.typing import Literal\nfrom ...util.typing import Self\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport asyncio\nimport contextlib\nfrom typing import Any\nfrom typing import AsyncIterator\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Generator\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import exc as async_exc\nfrom .base import asyncstartablecontext\nfrom .base import GeneratorStartableContext\nfrom .base import ProxyComparable\nfrom .base import StartableContext\nfrom .result import _ensure_sync_result\nfrom .result import AsyncResult\nfrom .result import AsyncScalarResult\nfrom ... import exc\nfrom ... import inspection\nfrom ... import util\nfrom ...engine import Connection\nfrom ...engine import create_engine as _create_engine\nfrom ...engine import create_pool_from_url as _create_pool_from_url\nfrom ...engine import Engine\nfrom ...engine.base import NestedTransaction\nfrom ...engine.base import Transaction\nfrom ...exc import ArgumentError\nfrom ...util.concurrency import greenlet_spawn\nfrom ...util.typing import Concatenate\nfrom ...util.typing import ParamSpec\n\nif TYPE_CHECKING:\n    from ...engine.cursor import CursorResult\n    from ...engine.interfaces import _CoreAnyExecuteParams\n    from ...engine.interfaces import _CoreSingleExecuteParams\n    from ...engine.interfaces import _DBAPIAnyExecuteParams\n    from ...engine.interfaces import _ExecuteOptions\n    from ...engine.interfaces import CompiledCacheType\n    from ...engine.interfaces import CoreExecuteOptionsParameter\n    from ...engine.interfaces import Dialect\n    from ...engine.interfaces import IsolationLevel\n    from ...engine.interfaces import SchemaTranslateMapType\n    from ...engine.result import ScalarResult\n    from ...engine.url import URL\n    from ...pool import Pool\n    from ...pool import PoolProxiedConnection\n    from ...sql._typing import _InfoType\n    from ...sql.base import Executable\n    from ...sql.selectable import TypedReturnsRows\n\n_P = ParamSpec("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\engine.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom ... import exc\n\n\nclass AsyncMethodRequired(exc.InvalidRequestError):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\exc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport operator\nfrom typing import Any\nfrom typing import AsyncIterator\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nfrom . import exc as async_exc\nfrom ... import util\nfrom ...engine import Result\nfrom ...engine.result import _NO_ROW\nfrom ...engine.result import _R\nfrom ...engine.result import _WithKeys\nfrom ...engine.result import FilterResult\nfrom ...engine.result import FrozenResult\nfrom ...engine.result import ResultMetaData\nfrom ...engine.row import Row\nfrom ...engine.row import RowMapping\nfrom ...sql.base import _generative\nfrom ...util.concurrency import greenlet_spawn\nfrom ...util.typing import Literal\nfrom ...util.typing import Self\n\nif TYPE_CHECKING:\n    from ...engine import CursorResult\n    from ...engine.result import _KeyIndexType\n    from ...engine.result import _UniqueFilterType\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\result.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom .session import _AS\nfrom .session import async_sessionmaker\nfrom .session import AsyncSession\nfrom ... import exc as sa_exc\nfrom ... import util\nfrom ...orm.session import Session\nfrom ...util import create_proxy_methods\nfrom ...util import ScopedRegistry\nfrom ...util import warn\nfrom ...util import warn_deprecated\n\nif TYPE_CHECKING:\n    from .engine import AsyncConnection\n    from .result import AsyncResult\n    from .result import AsyncScalarResult\n    from .session import AsyncSessionTransaction\n    from ...engine import Connection\n    from ...engine import CursorResult\n    from ...engine import Engine\n    from ...engine import Result\n    from ...engine import Row\n    from ...engine import RowMapping\n    from ...engine.interfaces import _CoreAnyExecuteParams\n    from ...engine.interfaces import CoreExecuteOptionsParameter\n    from ...engine.result import ScalarResult\n    from ...orm._typing import _IdentityKeyType\n    from ...orm._typing import _O\n    from ...orm._typing import OrmExecuteOptionsParameter\n    from ...orm.interfaces import ORMOption\n    from ...orm.session import _BindArguments\n    from ...orm.session import _EntityBindKey\n    from ...orm.session import _PKIdentityArgument\n    from ...orm.session import _SessionBind\n    from ...sql.base import Executable\n    from ...sql.dml import UpdateBase\n    from ...sql.elements import ClauseElement\n    from ...sql.selectable import ForUpdateParameter\n    from ...sql.selectable import TypedReturnsRows\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\scoping.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport asyncio\nfrom typing import Any\nfrom typing import Awaitable\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import engine\nfrom .base import ReversibleProxy\nfrom .base import StartableContext\nfrom .result import _ensure_sync_result\nfrom .result import AsyncResult\nfrom .result import AsyncScalarResult\nfrom ... import util\nfrom ...orm import close_all_sessions as _sync_close_all_sessions\nfrom ...orm import object_session\nfrom ...orm import Session\nfrom ...orm import SessionTransaction\nfrom ...orm import state as _instance_state\nfrom ...util.concurrency import greenlet_spawn\nfrom ...util.typing import Concatenate\nfrom ...util.typing import ParamSpec\n\n\nif TYPE_CHECKING:\n    from .engine import AsyncConnection\n    from .engine import AsyncEngine\n    from ...engine import Connection\n    from ...engine import CursorResult\n    from ...engine import Engine\n    from ...engine import Result\n    from ...engine import Row\n    from ...engine import RowMapping\n    from ...engine import ScalarResult\n    from ...engine.interfaces import _CoreAnyExecuteParams\n    from ...engine.interfaces import CoreExecuteOptionsParameter\n    from ...event import dispatcher\n    from ...orm._typing import _IdentityKeyType\n    from ...orm._typing import _O\n    from ...orm._typing import OrmExecuteOptionsParameter\n    from ...orm.identity import IdentityMap\n    from ...orm.interfaces import ORMOption\n    from ...orm.session import _BindArguments\n    from ...orm.session import _EntityBindKey\n    from ...orm.session import _PKIdentityArgument\n    from ...orm.session import _SessionBind\n    from ...orm.session import _SessionBindKey\n    from ...sql._typing import _InfoType\n    from ...sql.base import Executable\n    from ...sql.dml import UpdateBase\n    from ...sql.elements import ClauseElement\n    from ...sql.selectable import ForUpdateParameter\n    from ...sql.selectable import TypedReturnsRows\n\n_AsyncSessionBind = Union["
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\session.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom .engine import async_engine_from_config as async_engine_from_config\nfrom .engine import AsyncConnection as AsyncConnection\nfrom .engine import AsyncEngine as AsyncEngine\nfrom .engine import AsyncTransaction as AsyncTransaction\nfrom .engine import create_async_engine as create_async_engine\nfrom .engine import create_async_pool_from_url as create_async_pool_from_url\nfrom .result import AsyncMappingResult as AsyncMappingResult\nfrom .result import AsyncResult as AsyncResult\nfrom .result import AsyncScalarResult as AsyncScalarResult\nfrom .result import AsyncTupleResult as AsyncTupleResult\nfrom .scoping import async_scoped_session as async_scoped_session\nfrom .session import async_object_session as async_object_session\nfrom .session import async_session as async_session\nfrom .session import async_sessionmaker as async_sessionmaker\nfrom .session import AsyncAttrs as AsyncAttrs\nfrom .session import AsyncSession as AsyncSession\nfrom .session import AsyncSessionTransaction as AsyncSessionTransaction\nfrom .session import close_all_sessions as close_all_sessions\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\declarative\\extensions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom .extensions import AbstractConcreteBase\nfrom .extensions import ConcreteBase\nfrom .extensions import DeferredReflection\nfrom ... import util\nfrom ...orm.decl_api import as_declarative as _as_declarative\nfrom ...orm.decl_api import declarative_base as _declarative_base\nfrom ...orm.decl_api import DeclarativeMeta\nfrom ...orm.decl_api import declared_attr\nfrom ...orm.decl_api import has_inherited_table as _has_inherited_table\nfrom ...orm.decl_api import synonym_for as _synonym_for\n\n\n@util.moved_20(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\declarative\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\nfrom typing import Union\n\nfrom mypy.nodes import ARG_NAMED_OPT\nfrom mypy.nodes import Argument\nfrom mypy.nodes import AssignmentStmt\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import ClassDef\nfrom mypy.nodes import MDEF\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import RefExpr\nfrom mypy.nodes import StrExpr\nfrom mypy.nodes import SymbolTableNode\nfrom mypy.nodes import TempNode\nfrom mypy.nodes import TypeInfo\nfrom mypy.nodes import Var\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.plugins.common import add_method_to_class\nfrom mypy.types import AnyType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import NoneTyp\nfrom mypy.types import ProperType\nfrom mypy.types import TypeOfAny\nfrom mypy.types import UnboundType\nfrom mypy.types import UnionType\n\nfrom . import infer\nfrom . import util\nfrom .names import expr_to_mapped_constructor\nfrom .names import NAMED_TYPE_SQLA_MAPPED\n\n\ndef apply_mypy_mapped_attr(\n    cls: ClassDef,\n    api: SemanticAnalyzerPluginInterface,\n    item: Union[NameExpr, StrExpr],\n    attributes: List[util.SQLAlchemyAttribute],\n) -> None:\n    if isinstance(item, NameExpr):\n        name = item.name\n    elif isinstance(item, StrExpr):\n        name = item.value\n    else:\n        return None\n\n    for stmt in cls.defs.body:\n        if (\n            isinstance(stmt, AssignmentStmt)\n            and isinstance(stmt.lvalues[0], NameExpr)\n            and stmt.lvalues[0].name == name\n        ):\n            break\n    else:\n        util.fail(api, f"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\apply.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\nfrom typing import Union\n\nfrom mypy.nodes import AssignmentStmt\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import ClassDef\nfrom mypy.nodes import Decorator\nfrom mypy.nodes import LambdaExpr\nfrom mypy.nodes import ListExpr\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import PlaceholderNode\nfrom mypy.nodes import RefExpr\nfrom mypy.nodes import StrExpr\nfrom mypy.nodes import SymbolNode\nfrom mypy.nodes import SymbolTableNode\nfrom mypy.nodes import TempNode\nfrom mypy.nodes import TypeInfo\nfrom mypy.nodes import Var\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.types import AnyType\nfrom mypy.types import CallableType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import NoneType\nfrom mypy.types import ProperType\nfrom mypy.types import Type\nfrom mypy.types import TypeOfAny\nfrom mypy.types import UnboundType\nfrom mypy.types import UnionType\n\nfrom . import apply\nfrom . import infer\nfrom . import names\nfrom . import util\n\n\ndef scan_declarative_assignments_and_apply_types(\n    cls: ClassDef,\n    api: SemanticAnalyzerPluginInterface,\n    is_mixin_scan: bool = False,\n) -> Optional[List[util.SQLAlchemyAttribute]]:\n    info = util.info_for_cls(cls, api)\n\n    if info is None:\n        # this can occur during cached passes\n        return None\n    elif cls.fullname.startswith("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\decl_class.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Optional\nfrom typing import Sequence\n\nfrom mypy.maptype import map_instance_to_supertype\nfrom mypy.nodes import AssignmentStmt\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import Expression\nfrom mypy.nodes import FuncDef\nfrom mypy.nodes import LambdaExpr\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import RefExpr\nfrom mypy.nodes import StrExpr\nfrom mypy.nodes import TypeInfo\nfrom mypy.nodes import Var\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.subtypes import is_subtype\nfrom mypy.types import AnyType\nfrom mypy.types import CallableType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import NoneType\nfrom mypy.types import ProperType\nfrom mypy.types import TypeOfAny\nfrom mypy.types import UnionType\n\nfrom . import names\nfrom . import util\n\n\ndef infer_type_from_right_hand_nameexpr(\n    api: SemanticAnalyzerPluginInterface,\n    stmt: AssignmentStmt,\n    node: Var,\n    left_hand_explicit_type: Optional[ProperType],\n    infer_from_right_side: RefExpr,\n) -> Optional[ProperType]:\n    type_id = names.type_id_for_callee(infer_from_right_side)\n    if type_id is None:\n        return None\n    elif type_id is names.MAPPED:\n        python_type_for_type = _infer_type_from_mapped(\n            api, stmt, node, left_hand_explicit_type, infer_from_right_side\n        )\n    elif type_id is names.COLUMN:\n        python_type_for_type = _infer_type_from_decl_column(\n            api, stmt, node, left_hand_explicit_type\n        )\n    elif type_id is names.RELATIONSHIP:\n        python_type_for_type = _infer_type_from_relationship(\n            api, stmt, node, left_hand_explicit_type\n        )\n    elif type_id is names.COLUMN_PROPERTY:\n        python_type_for_type = _infer_type_from_decl_column_property(\n            api, stmt, node, left_hand_explicit_type\n        )\n    elif type_id is names.SYNONYM_PROPERTY:\n        python_type_for_type = infer_type_from_left_hand_type_only(\n            api, node, left_hand_explicit_type\n        )\n    elif type_id is names.COMPOSITE_PROPERTY:\n        python_type_for_type = _infer_type_from_decl_composite_property(\n            api, stmt, node, left_hand_explicit_type\n        )\n    else:\n        return None\n\n    return python_type_for_type\n\n\ndef _infer_type_from_relationship(\n    api: SemanticAnalyzerPluginInterface,\n    stmt: AssignmentStmt,\n    node: Var,\n    left_hand_explicit_type: Optional[ProperType],\n) -> Optional[ProperType]:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\infer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Union\n\nfrom mypy.nodes import ARG_POS\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import ClassDef\nfrom mypy.nodes import Decorator\nfrom mypy.nodes import Expression\nfrom mypy.nodes import FuncDef\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import OverloadedFuncDef\nfrom mypy.nodes import SymbolNode\nfrom mypy.nodes import TypeAlias\nfrom mypy.nodes import TypeInfo\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.types import CallableType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import UnboundType\n\nfrom ... import util\n\nCOLUMN: int = util.symbol("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\names.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\plugin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport re\nfrom typing import Any\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import Type as TypingType\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom mypy import version\nfrom mypy.messages import format_type as _mypy_format_type\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import ClassDef\nfrom mypy.nodes import CLASSDEF_NO_INFO\nfrom mypy.nodes import Context\nfrom mypy.nodes import Expression\nfrom mypy.nodes import FuncDef\nfrom mypy.nodes import IfStmt\nfrom mypy.nodes import JsonDict\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import Statement\nfrom mypy.nodes import SymbolTableNode\nfrom mypy.nodes import TypeAlias\nfrom mypy.nodes import TypeInfo\nfrom mypy.options import Options\nfrom mypy.plugin import ClassDefContext\nfrom mypy.plugin import DynamicClassDefContext\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.plugins.common import deserialize_and_fixup_type\nfrom mypy.typeops import map_type_from_supertype\nfrom mypy.types import CallableType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import NoneType\nfrom mypy.types import Type\nfrom mypy.types import TypeVarType\nfrom mypy.types import UnboundType\nfrom mypy.types import UnionType\n\n_vers = tuple(\n    [int(x) for x in version.__version__.split("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nr",
      "https://pypi.org/project/aioodbc/\n\n\nSupport for the SQL Server database in asyncio style, using the aioodbc\ndriver which itself is a thread-wrapper around pyodbc.\n\n.. versionadded:: 2.0.23  Added the mssql+aioodbc dialect which builds\n   on top of the pyodbc and general aio* dialect architecture.\n\nUsing a special asyncio mediation layer, the aioodbc dialect is usable\nas the backend for the :ref:`SQLAlchemy asyncio <asyncio_toplevel>`\nextension package.\n\nMost behaviors and caveats for this driver are the same as that of the\npyodbc dialect used on SQL Server; see :ref:`mssql_pyodbc` for general\nbackground.\n\nThis dialect should normally be used only with the\n:func:`_asyncio.create_async_engine` engine creation function; connection\nstyles are otherwise equivalent to those documented in the pyodbc section::\n\n    from sqlalchemy.ext.asyncio import create_async_engine\n\n    engine = create_async_engine(\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\aioodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n",
      "https://technet.microsoft.com/en-us/library/ms187993.aspx>`_,\nthe ``NTEXT``, ``TEXT`` and ``IMAGE`` datatypes are to be removed from SQL\nServer in a future release.   SQLAlchemy normally relates these types to the\n:class:`.UnicodeText`, :class:`_expression.TextClause` and\n:class:`.LargeBinary` datatypes.\n\nIn order to accommodate this change, a new flag ``deprecate_large_types``\nis added to the dialect, which will be automatically set based on detection\nof the server version in use, if not otherwise set by the user.  The\nbehavior of this flag is as follows:\n\n* When this flag is ``True``, the :class:`.UnicodeText`,\n  :class:`_expression.TextClause` and\n  :class:`.LargeBinary` datatypes, when used to render DDL, will render the\n  types ``NVARCHAR(max)``, ``VARCHAR(max)``, and ``VARBINARY(max)``,\n  respectively.  This is a new behavior as of the addition of this flag.\n\n* When this flag is ``False``, the :class:`.UnicodeText`,\n  :class:`_expression.TextClause` and\n  :class:`.LargeBinary` datatypes, when used to render DDL, will render the\n  types ``NTEXT``, ``TEXT``, and ``IMAGE``,\n  respectively.  This is the long-standing behavior of these types.\n\n* The flag begins with the value ``None``, before a database connection is\n  established.   If the dialect is used to render DDL without the flag being\n  set, it is interpreted the same as ``False``.\n\n* On first connection, the dialect detects if SQL Server version 2012 or\n  greater is in use; if the flag is still at ``None``, it sets it to ``True``\n  or ``False`` based on whether 2012 or greater is detected.\n\n* The flag can be set to either ``True`` or ``False`` when the dialect\n  is created, typically via :func:`_sa.create_engine`::\n\n        eng = create_engine(\n            ",
      "https://msdn.microsoft.com/en-us/library/ms175095.aspx.\n\n",
      "https://sqlserverbuilds.blogspot.com/\nMS_2017_VERSION = (14,)\nMS_2016_VERSION = (13,)\nMS_2014_VERSION = (12,)\nMS_2012_VERSION = (11,)\nMS_2008_VERSION = (10,)\nMS_2005_VERSION = (9,)\nMS_2000_VERSION = (8,)\n\nRESERVED_WORDS = {\n    ",
      "https://github.com/mkleehammer/pyodbc/wiki/Tips-and-Tricks-by-Database-Platform#time-columns\n                pass TIME value as string\n                ",
      "https://stackoverflow.com/a/30403242/34549\n                    value = int(codecs.encode(value, ",
      "https://stackoverflow.com/questions/8311959/\n        # specifying-schema-for-temporary-tables\n\n        try:\n            return connection.execute(\n                sql.text(\n                    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import cast\nfrom ... import Column\nfrom ... import MetaData\nfrom ... import Table\nfrom ...ext.compiler import compiles\nfrom ...sql import expression\nfrom ...types import Boolean\nfrom ...types import Integer\nfrom ...types import Numeric\nfrom ...types import NVARCHAR\nfrom ...types import String\nfrom ...types import TypeDecorator\nfrom ...types import Unicode\n\n\nischema = MetaData()\n\n\nclass CoerceUnicode(TypeDecorator):\n    impl = Unicode\n    cache_ok = True\n\n    def bind_expression(self, bindvalue):\n        return _cast_on_2005(bindvalue)\n\n\nclass _cast_on_2005(expression.ColumnElement):\n    def __init__(self, bindvalue):\n        self.bindvalue = bindvalue\n\n\n@compiles(_cast_on_2005)\ndef _compile(element, compiler, **kw):\n    from . import base\n\n    if (\n        compiler.dialect.server_version_info is None\n        or compiler.dialect.server_version_info < base.MS_2005_VERSION\n    ):\n        return compiler.process(element.bindvalue, **kw)\n    else:\n        return compiler.process(cast(element.bindvalue, Unicode), **kw)\n\n\nschemata = Table(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\information_schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import types as sqltypes\n\n# technically, all the dialect-specific datatypes that don"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom sqlalchemy import inspect\nfrom sqlalchemy import Integer\nfrom ... import create_engine\nfrom ... import exc\nfrom ...schema import Column\nfrom ...schema import DropConstraint\nfrom ...schema import ForeignKeyConstraint\nfrom ...schema import MetaData\nfrom ...schema import Table\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_all_schema_objects_pre_tables\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import generate_driver_url\nfrom ...testing.provision import get_temp_table_name\nfrom ...testing.provision import log\nfrom ...testing.provision import normalize_sequence\nfrom ...testing.provision import post_configure_engine\nfrom ...testing.provision import run_reap_dbs\nfrom ...testing.provision import temp_table_keyword_args\n\n\n@post_configure_engine.for_db("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://www.freetds.org/>`_.\n\n.. versionchanged:: 2.0.5\n\n    pymssql was restored to SQLAlchemy"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\pymssql.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"tiger\"",
      "password=\"tiger\"",
      "password=\"tiger\""
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\pyodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/pyodbc/\n\nConnecting to PyODBC\n--------------------\n\nThe URL here is to be translated to PyODBC connection strings, as\ndetailed in `ConnectionStrings <https://code.google.com/p/pyodbc/wiki/ConnectionStrings>`_.\n\nDSN Connections\n^^^^^^^^^^^^^^^\n\nA DSN connection in ODBC means that a pre-existing ODBC datasource is\nconfigured on the client machine.   The application then specifies the name\nof this datasource, which encompasses details such as the specific ODBC driver\nin use as well as the network address of the database.   Assuming a datasource\nis configured on the client, a basic DSN-based connection looks like::\n\n    engine = create_engine(",
      "https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases>`_,\nusing the parameter ``odbc_connect``.  A :class:`_sa.engine.URL` object\ncan help make this easier::\n\n    from sqlalchemy.engine import URL\n\n    connection_string = ",
      "https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash>`_.\n\nAfter getting an engine, the credentials need to be sent to ``pyodbc.connect``\neach time a connection is requested. One way to do this is to set up an event\nlistener on the engine that adds the credential token to the dialect",
      "https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token>`_.\n\nThe following code snippet will create an engine that connects to an Azure SQL\ndatabase using Azure credentials::\n\n    import struct\n    from sqlalchemy import create_engine, event\n    from sqlalchemy.engine.url import URL\n    from azure import identity\n\n    # Connection option for access tokens, as defined in msodbcsql.h\n    SQL_COPT_SS_ACCESS_TOKEN = 1256\n    TOKEN_URL = ",
      "https://database.windows.net/",
      "https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token>`_,\n    stating that a connection string when using an access token must not contain\n    ``UID``, ``PWD``, ``Authentication`` or ``Trusted_Connection`` parameters.\n\n.. _azure_synapse_ignore_no_transaction_on_rollback:\n\nAvoiding transaction-related exceptions on Azure Synapse Analytics\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAzure Synapse Analytics has a significant difference in its transaction\nhandling compared to plain SQL Server; in some cases an error within a Synapse\ntransaction can cause it to be arbitrarily terminated on the server side, which\nthen causes the DBAPI ``.rollback()`` method (as well as ``.commit()``) to\nfail. The issue prevents the usual DBAPI contract of allowing ``.rollback()``\nto pass silently if no transaction is present as the driver does not expect\nthis condition. The symptom of this failure is an exception with a message\nresembling ",
      "https://github.com/mkleehammer/pyodbc/issues/835>`_.\n\nStarting with ODBC Driver 18 for SQL Server we can override the legacy\nbehavior and pass long strings as varchar(max)/nvarchar(max) using the\n``LongAsMax=Yes`` connection string parameter::\n\n    connection_url = sa.engine.URL.create(\n        ",
      "https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling>`_ by\ndefault, which means connections will be longer lived than they are within\nSQLAlchemy itself.  As SQLAlchemy has its own pooling behavior, it is often\npreferable to disable this behavior.  This behavior can only be disabled\nglobally at the PyODBC module level, **before** any connections are made::\n\n    import pyodbc\n\n    pyodbc.pooling = False\n\n    # don",
      "https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling>`_ -\n    in the PyODBC documentation.\n\nDriver / Unicode Support\n-------------------------\n\nPyODBC works best with Microsoft ODBC drivers, particularly in the area\nof Unicode support on both Python 2 and Python 3.\n\nUsing the FreeTDS ODBC drivers on Linux or OSX with PyODBC is **not**\nrecommended; there have been historically many Unicode-related issues\nin this area, including before Microsoft offered ODBC drivers for Linux\nand OSX.   Now that Microsoft offers drivers for all platforms, for\nPyODBC support these are recommended.  FreeTDS remains relevant for\nnon-ODBC drivers such as pymssql where it works very well.\n\n\nRowcount Support\n----------------\n\nPrevious limitations with the SQLAlchemy ORM",
      "https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany>`_\n    - on github\n\n.. _mssql_pyodbc_setinputsizes:\n\nSetinputsizes Support\n-----------------------\n\nAs of version 2.0, the pyodbc ``cursor.setinputsizes()`` method is used for\nall statement executions, except for ``cursor.executemany()`` calls when\nfast_executemany=True where it is not supported (assuming\n:ref:`insertmanyvalues <engine_insertmanyvalues>` is kept enabled,\n",
      "https://msdn.microsoft.com/en-us/library/ms190315.aspx\n\n        Background on why we attempt to embed ",
      "https://code.google.com/p/pyodbc/wiki/FAQs#How_do_I_retrieve_autogenerated/identity_values?\n\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\pyodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom . import aioodbc  # noqa\nfrom . import base  # noqa\nfrom . import pymssql  # noqa\nfrom . import pyodbc  # noqa\nfrom .base import BIGINT\nfrom .base import BINARY\nfrom .base import BIT\nfrom .base import CHAR\nfrom .base import DATE\nfrom .base import DATETIME\nfrom .base import DATETIME2\nfrom .base import DATETIMEOFFSET\nfrom .base import DECIMAL\nfrom .base import DOUBLE_PRECISION\nfrom .base import FLOAT\nfrom .base import IMAGE\nfrom .base import INTEGER\nfrom .base import JSON\nfrom .base import MONEY\nfrom .base import NCHAR\nfrom .base import NTEXT\nfrom .base import NUMERIC\nfrom .base import NVARCHAR\nfrom .base import REAL\nfrom .base import ROWVERSION\nfrom .base import SMALLDATETIME\nfrom .base import SMALLINT\nfrom .base import SMALLMONEY\nfrom .base import SQL_VARIANT\nfrom .base import TEXT\nfrom .base import TIME\nfrom .base import TIMESTAMP\nfrom .base import TINYINT\nfrom .base import UNIQUEIDENTIFIER\nfrom .base import VARBINARY\nfrom .base import VARCHAR\nfrom .base import XML\nfrom ...sql import try_cast\n\n\nbase.dialect = dialect = pyodbc.dialect\n\n\n__all__ = (\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://github.com/aio-libs/aiomysql\n\nThe aiomysql dialect is SQLAlchemy",
      "https://github.com/aio-libs/aiomysql/issues/543\n        self._cursor = self.await_(cursor.__aenter__())\n        self._rows = deque()\n\n    @property\n    def description(self):\n        return self._cursor.description\n\n    @property\n    def rowcount(self):\n        return self._cursor.rowcount\n\n    @property\n    def arraysize(self):\n        return self._cursor.arraysize\n\n    @arraysize.setter\n    def arraysize(self, value):\n        self._cursor.arraysize = value\n\n    @property\n    def lastrowid(self):\n        return self._cursor.lastrowid\n\n    def close(self):\n        # note we aren"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\aiomysql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://github.com/long2ice/asyncmy\n\nUsing a special asyncio mediation layer, the asyncmy dialect is usable\nas the backend for the :ref:`SQLAlchemy asyncio <asyncio_toplevel>`\nextension package.\n\nThis dialect should normally be used only with the\n:func:`_asyncio.create_async_engine` engine creation function::\n\n    from sqlalchemy.ext.asyncio import create_async_engine\n\n    engine = create_async_engine(\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\asyncmy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html>`_ - \\\n    in the MySQL documentation\n\n.. _mysql_binary_introducer:\n\nDealing with Binary Data Warnings and Unicode\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMySQL versions 5.6, 5.7 and later (not MariaDB at the time of this writing) now\nemit a warning when attempting to pass binary data to the database, while a\ncharacter set encoding is also in place, when the binary data itself is not\nvalid for that encoding:\n\n.. sourcecode:: text\n\n    default.py:509: Warning: (1300, ",
      "https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html>`_ - on the MySQL website\n\n\nANSI Quoting Style\n------------------\n\nMySQL / MariaDB feature two varieties of identifier ",
      "https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html>`_  for\nboth Servers and Clients. To change the ``sql_mode`` for a given application, a\ndeveloper can leverage SQLAlchemy",
      "https://dev.mysql.com/doc/refman/5.0/en/create-index.html>`_ - MySQL documentation\n\nIndex Types\n~~~~~~~~~~~~~\n\nSome MySQL storage engines permit you to specify an index type when creating\nan index or primary key constraint. SQLAlchemy provides this feature via the\n``mysql_using`` parameter on :class:`.Index`::\n\n    Index(\n        ",
      "https://dev.mysql.com/doc/refman/5.0/en/create-index.html\n\nhttps://dev.mysql.com/doc/refman/5.0/en/create-table.html\n\nIndex Parsers\n~~~~~~~~~~~~~\n\nCREATE FULLTEXT INDEX in MySQL also supports a ",
      "https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html\n#sysvar_explicit_defaults_for_timestamp>`_ which disables the above behavior,\nand in MySQL 8 this flag defaults to true, meaning in order to get a MySQL\n",
      "https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html\n#sysvar_explicit_defaults_for_timestamp>`_ configuration flag introduced in\nMySQL 5.6.  With this server setting enabled, TIMESTAMP columns behave like\nany other datatype on the MySQL side with regards to defaults and nullability.\n\nHowever, to accommodate the vast majority of MySQL databases that do not\nspecify this new flag, SQLAlchemy emits the ",
      "https://dev.mysql.com/doc/refman/5.0/en/select.html\n            if limit_clause is None:\n                # TODO: remove ??\n                # hardwire the upper limit.  Currently\n                # needed consistent with the usage of the upper\n                # bound as part of MySQL",
      "https://docs.sqlalchemy.org/en/latest/dialects/mysql.html#mysql_timestamp_null  # noqa\n        elif column.nullable and is_timestamp:\n            colspec.append(",
      "https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html  # noqa: E501\n            # there are a lot of codes that *may* pop up here at some point\n            # but we continue to be fairly conservative.  We include:\n            # 1146: Table ",
      "https://mariadb.com/kb/en/mariadb-1045-release-notes/\n            return self.server_version_info >= (10, 4, 5)\n        else:\n            # ref https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-17.html#mysqld-8-0-17-feature  # noqa\n            return self.server_version_info >= (8, 0, 17)\n\n    @property\n    def _support_default_function(self):\n        if not self.server_version_info:\n            return False\n        elif self.is_mariadb:\n            # ref https://mariadb.com/kb/en/mariadb-1021-release-notes/\n            return self.server_version_info >= (10, 2, 1)\n        else:\n            # ref https://dev.mysql.com/doc/refman/8.0/en/data-type-defaults.html # noqa\n            return self.server_version_info >= (8, 0, 13)\n\n    @property\n    def _is_mariadb(self):\n        return self.is_mariadb\n\n    @property\n    def _is_mysql(self):\n        return not self.is_mariadb\n\n    @property\n    def _is_mariadb_102(self):\n        return self.is_mariadb and self._mariadb_normalized_version_info > (\n            10,\n            2,\n        )\n\n    @reflection.cache\n    def get_schema_names(self, connection, **kw):\n        rp = connection.exec_driver_sql(",
      "https://bugs.mysql.com/bug.php?id=88718\n        # issue #4344 for SQLAlchemy\n\n        # table name also for MySQL 8.0\n        # https://bugs.mysql.com/bug.php?id=96365\n        # issue #4751 for SQLAlchemy\n\n        # for lower_case_table_names=2, information_schema.columns\n        # preserves the original table/schema casing, but SHOW CREATE\n        # TABLE does not.   this problem is not in lower_case_table_names=1,\n        # but use case-insensitive matching for these two modes in any case.\n\n        if self._casing in (1, 2):\n\n            def lower(s):\n                return s.lower()\n\n        else:\n            # if on case sensitive, there can be two tables referenced\n            # with the same name different casing, so we need to use\n            # case-sensitive matching.\n            def lower(s):\n                return s\n\n        default_schema_name = connection.dialect.default_schema_name\n\n        # NOTE: using (table_schema, table_name, lower(column_name)) in (...)\n        # is very slow since mysql does not seem able to properly use indexse.\n        # Unpack the where condition instead.\n        schema_by_table_by_column = defaultdict(lambda: defaultdict(list))\n        for rec in fkeys:\n            sch = lower(rec[",
      "https://dev.mysql.com/doc/refman/en/identifier-case-sensitivity.html\n\n        setting = self._fetch_setting(connection, "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://github.com/nakagami/CyMySQL\n\n.. note::\n\n    The CyMySQL dialect is **not tested as part of SQLAlchemy"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\cymysql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\n\nfrom ... import exc\nfrom ... import util\nfrom ...sql._typing import _DMLTableArgument\nfrom ...sql.base import _exclusive_against\nfrom ...sql.base import _generative\nfrom ...sql.base import ColumnCollection\nfrom ...sql.base import ReadOnlyColumnCollection\nfrom ...sql.dml import Insert as StandardInsert\nfrom ...sql.elements import ClauseElement\nfrom ...sql.elements import KeyedColumnElement\nfrom ...sql.expression import alias\nfrom ...sql.selectable import NamedFromClause\nfrom ...util.typing import Self\n\n\n__all__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\dml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport re\n\nfrom .types import _StringType\nfrom ... import exc\nfrom ... import sql\nfrom ... import util\nfrom ...sql import sqltypes\n\n\nclass ENUM(sqltypes.NativeForEmulated, sqltypes.Enum, _StringType):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\enumerated.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom ... import exc\nfrom ... import util\nfrom ...sql import coercions\nfrom ...sql import elements\nfrom ...sql import operators\nfrom ...sql import roles\nfrom ...sql.base import _generative\nfrom ...sql.base import Generative\nfrom ...util.typing import Self\n\n\nclass match(Generative, elements.BinaryExpression):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\expression.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import types as sqltypes\n\n\nclass JSON(sqltypes.JSON):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom .base import MariaDBIdentifierPreparer\nfrom .base import MySQLDialect\nfrom .base import MySQLTypeCompiler\nfrom ...sql import sqltypes\n\n\nclass INET4(sqltypes.TypeEngine[str]):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mariadb.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://pypi.org/project/mariadb/\n\nDriver Status\n-------------\n\nMariaDB Connector/Python enables Python programs to access MariaDB and MySQL\ndatabases using an API which is compliant with the Python DB API 2.0 (PEP-249).\nIt is written in C and uses MariaDB Connector/C client library for client server\ncommunication.\n\nNote that the default driver for a ``mariadb://`` connection URI continues to\nbe ``mysqldb``. ``mariadb+mariadbconnector://`` is required to use this driver.\n\n.. mariadb: https://github.com/mariadb-corporation/mariadb-connector-python\n\n",
      "https://jira.mariadb.org/browse/CONPY-270.  When that issue is fixed,\n    # this type can be removed.\n    def result_processor(self, dialect, coltype):\n        if self.as_uuid:\n\n            def process(value):\n                if value is not None:\n                    if hasattr(value, "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mariadbconnector.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://pypi.org/project/mysql-connector-python/\n\n.. note::\n\n    The MySQL Connector/Python DBAPI has had many issues since its release,\n    some of which may remain unresolved, and the mysqlconnector dialect is\n    **not tested as part of SQLAlchemy"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqlconnector.py"
  },
  {
    "pattern": "mysql\\+mysqlconnector://",
    "matches": [
      "mysql+mysqlconnector://"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqlconnector.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"passwd\""
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://pypi.org/project/mysqlclient/\n\nDriver Status\n-------------\n\nThe mysqlclient DBAPI is a maintained fork of the\n`MySQL-Python <https://sourceforge.net/projects/mysql-python>`_ DBAPI\nthat is no longer maintained.  `mysqlclient`_ supports Python 2 and Python 3\nand is very stable.\n\n.. _mysqlclient: https://github.com/PyMySQL/mysqlclient-python\n\n.. _mysqldb_unicode:\n\nUnicode\n-------\n\nPlease see :ref:`mysql_unicode` for current recommendations on unicode\nhandling.\n\n.. _mysqldb_ssl:\n\nSSL Connections\n----------------\n\nThe mysqlclient and PyMySQL DBAPIs accept an additional dictionary under the\nkey ",
      "https://github.com/farcepest/MySQLdb1/commit/cd44524fef63bd3fcb71947392326e9742d520e8\n        # specific issue w/ the utf8mb4_bin collation and unicode returns\n\n        collation = connection.exec_driver_sql(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/gord/client-ssl/ca.pem",
      "/home/gord/client-ssl/client-cert.pem",
      "/home/gord/client-ssl/client-key.pem",
      "/home/gord/client-ssl/ca.pem",
      "/home/gord/client-ssl/client-cert.pem",
      "/home/gord/client-ssl/client-key.pem"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.134",
      "192.168.0.134"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import exc\nfrom ...testing.provision import configure_follower\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import generate_driver_url\nfrom ...testing.provision import temp_table_keyword_args\nfrom ...testing.provision import upsert\n\n\n@generate_driver_url.for_db("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://pymysql.readthedocs.io/\n\nUnicode\n-------\n\nPlease see :ref:`mysql_unicode` for current recommendations on unicode\nhandling.\n\n.. _pymysql_ssl:\n\nSSL Connections\n------------------\n\nThe PyMySQL DBAPI accepts the same SSL arguments as that of MySQLdb,\ndescribed at :ref:`mysqldb_ssl`.   See that section for additional examples.\n\nIf the server uses an automatically-generated certificate that is self-signed\nor does not match the host name (as seen from the client), it may also be\nnecessary to indicate ``ssl_check_hostname=false`` in PyMySQL::\n\n    connection_uri = (\n        ",
      "https://github.com/PyMySQL/mysqlclient/discussions/651#discussioncomment-7308971\n        for background.\n\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pymysql.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/gord/client-ssl/ca.pem",
      "/home/gord/client-ssl/client-cert.pem",
      "/home/gord/client-ssl/client-key.pem"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pymysql.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.134"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pymysql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://pypi.org/project/pyodbc/\n\n.. note::\n\n    The PyODBC for MySQL dialect is **not tested as part of\n    SQLAlchemy",
      "https://github.com/mkleehammer/pyodbc/wiki/Unicode\n            pyodbc_SQL_CHAR = 1  # pyodbc.SQL_CHAR\n            pyodbc_SQL_WCHAR = -8  # pyodbc.SQL_WCHAR\n            conn.setdecoding(pyodbc_SQL_CHAR, encoding="
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pyodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport re\n\nfrom .enumerated import ENUM\nfrom .enumerated import SET\nfrom .types import DATETIME\nfrom .types import TIME\nfrom .types import TIMESTAMP\nfrom ... import log\nfrom ... import types as sqltypes\nfrom ... import util\n\n\nclass ReflectedState:\n    ",
      "https://forums.mysql.com/read.php?20,567102,567111#msg-567111\n        # It means if the MySQL version >= \\d+, execute what"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\reflection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n# generated using:\n# https://gist.github.com/kkirsche/4f31f2153ed7a3248be1ec44ca6ddbc9\n#\n# https://mariadb.com/kb/en/reserved-words/\n# includes: Reserved Words, Oracle Mode (separate set unioned)\n# excludes: Exceptions, Function Names\n# mypy: ignore-errors\n\nRESERVED_WORDS_MARIADB = {\n    ",
      "https://dev.mysql.com/doc/refman/8.3/en/keywords.html\n# https://dev.mysql.com/doc/refman/8.0/en/keywords.html\n# https://dev.mysql.com/doc/refman/5.7/en/keywords.html\n# https://dev.mysql.com/doc/refman/5.6/en/keywords.html\n# includes: MySQL x.0 Keywords and Reserved Words\n# excludes: MySQL x.0 New Keywords and Reserved Words,\n#       MySQL x.0 Removed Keywords and Reserved Words\nRESERVED_WORDS_MYSQL = {\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\reserved_words.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport datetime\n\nfrom ... import exc\nfrom ... import util\nfrom ...sql import sqltypes\n\n\nclass _NumericType:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom . import aiomysql  # noqa\nfrom . import asyncmy  # noqa\nfrom . import base  # noqa\nfrom . import cymysql  # noqa\nfrom . import mariadbconnector  # noqa\nfrom . import mysqlconnector  # noqa\nfrom . import mysqldb  # noqa\nfrom . import pymysql  # noqa\nfrom . import pyodbc  # noqa\nfrom .base import BIGINT\nfrom .base import BINARY\nfrom .base import BIT\nfrom .base import BLOB\nfrom .base import BOOLEAN\nfrom .base import CHAR\nfrom .base import DATE\nfrom .base import DATETIME\nfrom .base import DECIMAL\nfrom .base import DOUBLE\nfrom .base import ENUM\nfrom .base import FLOAT\nfrom .base import INTEGER\nfrom .base import JSON\nfrom .base import LONGBLOB\nfrom .base import LONGTEXT\nfrom .base import MEDIUMBLOB\nfrom .base import MEDIUMINT\nfrom .base import MEDIUMTEXT\nfrom .base import NCHAR\nfrom .base import NUMERIC\nfrom .base import NVARCHAR\nfrom .base import REAL\nfrom .base import SET\nfrom .base import SMALLINT\nfrom .base import TEXT\nfrom .base import TIME\nfrom .base import TIMESTAMP\nfrom .base import TINYBLOB\nfrom .base import TINYINT\nfrom .base import TINYTEXT\nfrom .base import VARBINARY\nfrom .base import VARCHAR\nfrom .base import YEAR\nfrom .dml import Insert\nfrom .dml import insert\nfrom .expression import match\nfrom .mariadb import INET4\nfrom .mariadb import INET6\n\n# default dialect\nbase.dialect = dialect = mysqldb.dialect\n\n__all__ = (\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\__init__.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:1521",
      "localhost:1521",
      "localhost:1521"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://blogs.oracle.com/oraclemagazine/on-rownum-and-limiting-results .\n\n* the ",
      "https://web.archive.org/web/20090317041251/https://asktom.oracle.com/tkyte/update_cascade/index.html\n\nWhen using the SQLAlchemy ORM, the ORM has limited ability to manually issue\ncascading updates - specify ForeignKey objects using the\n",
      "https://www.oracletutorial.com/oracle-basics/oracle-float/\n                estimated_binary_precision = int(precision / 0.30103)\n                raise exc.ArgumentError(\n                    ",
      "https://docs.oracle.com/database/121/SQLRF/queries006.htm#SQLRF52354\n                # ",
      "https://blogs.oracle.com/oraclemagazine/\\\n                # on-rownum-and-limiting-results\n\n                orig_select = select\n                select = select._generate()\n                select._oracle_visit = True\n\n                # add expressions to accommodate FOR UPDATE OF\n                for_update = select._for_update_arg\n                if for_update is not None and for_update.of:\n                    for_update = for_update._clone()\n                    for_update._copy_internals()\n\n                    for elem in for_update.of:\n                        if not select.selected_columns.contains_column(elem):\n                            select = select.add_columns(elem)\n\n                # Wrap the middle select and add the hint\n                inner_subquery = select.alias()\n                limitselect = sql.select(\n                    *[\n                        c\n                        for c in inner_subquery.c\n                        if orig_select.selected_columns.corresponding_column(c)\n                        is not None\n                    ]\n                )\n\n                if (\n                    limit_clause is not None\n                    and self.dialect.optimize_limits\n                    and select._simple_int_clause(limit_clause)\n                ):\n                    limitselect = limitselect.prefix_with(\n                        expression.text(\n                            ",
      "https://web.archive.org/web/20090317041251/https://asktom.oracle.com/tkyte/update_cascade/index.html\n        if constraint.onupdate is not None:\n            util.warn(\n                ",
      "https://docs.oracle.com/cd/A87860_01/doc/index.htm\n\n        # so does Oracle8:\n        # https://docs.oracle.com/cd/A64702_01/doc/index.htm\n\n        if self._is_oracle_8:\n            self.colspecs = self.colspecs.copy()\n            self.colspecs.pop(sqltypes.Interval)\n            self.use_ansi = False\n\n        self.supports_identity_columns = self.server_version_info >= (12,)\n        self._supports_offset_fetch = (\n            self.enable_offset_fetch and self.server_version_info >= (12,)\n        )\n\n    def _get_effective_compat_server_version_info(self, connection):\n        # dialect does not need compat levels below 12.2, so don",
      "https://docs.oracle.com/cd/B14117_01/server.101/b10758/sqlqr06.htm\n                if precision == 126:\n                    # The DOUBLE PRECISION datatype is a floating-point\n                    # number with binary precision 126.\n                    coltype = DOUBLE_PRECISION()\n                elif precision == 63:\n                    # The REAL datatype is a floating-point number with a\n                    # binary precision of 63, or 18 decimal.\n                    coltype = REAL()\n                else:\n                    # non standard precision\n                    coltype = FLOAT(binary_precision=precision)\n\n            elif coltype in ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\base.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"tiger\"",
      "password=\"tiger\""
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\cx_oracle.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://oracle.github.io/python-cx_Oracle/\n\nDescription\n-----------\n\ncx_Oracle was the original driver for Oracle Database. It was superseded by\npython-oracledb which should be used instead.\n\nDSN vs. Hostname connections\n-----------------------------\n\ncx_Oracle provides several methods of indicating the target database.  The\ndialect translates from a series of different URL forms.\n\nHostname Connections with Easy Connect Syntax\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGiven a hostname, port and service name of the target database, for example\nfrom Oracle Database",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#autonomousdb>`_.\n\nSID Connections\n^^^^^^^^^^^^^^^\n\nTo use Oracle Database",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/ha.html#application-continuity-ac>`_.\n\nNote that the pool creation parameters ``threaded``, ``encoding`` and\n``nencoding`` were deprecated in later cx_Oracle releases.\n\nUsing Oracle Database Resident Connection Pooling (DRCP)\n--------------------------------------------------------\n\nWhen using Oracle Database",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#database-resident-connection-pooling-drcp>`_.\n\nThis can be achieved by wrapping ``pool.acquire()``::\n\n    import cx_Oracle\n    from sqlalchemy import create_engine\n    from sqlalchemy.pool import NullPool\n\n    pool = cx_Oracle.SessionPool(\n        user=",
      "https://www.oracle.com/database/technologies/faq-nls-lang.html>`_ environment\nvariable.  Older versions of cx_Oracle use this environment variable as the\nsource of its encoding configuration.  The format of this variable is\nTerritory_Country.CharacterSet; a typical value would be\n``AMERICAN_AMERICA.AL32UTF8``.  cx_Oracle version 8 and later use the character\nset ",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/globalization.html#globalization>`_.\n\n.. seealso::\n\n    `Characters Sets and National Language Support (NLS) <https://cx-oracle.readthedocs.io/en/latest/user_guide/globalization.html#globalization>`_\n    - in the cx_Oracle documentation.\n\n\nUnicode-specific Column datatypes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Core expression language handles unicode data by use of the\n:class:`.Unicode` and :class:`.UnicodeText` datatypes.  These types correspond\nto the VARCHAR2 and CLOB Oracle Database datatypes by default.  When using\nthese datatypes with Unicode data, it is expected that the database is\nconfigured with a Unicode-aware character set, as well as that the ``NLS_LANG``\nenvironment variable is set appropriately (this applies to older versions of\ncx_Oracle), so that the VARCHAR2 and CLOB datatypes can accommodate the data.\n\nIn the case that Oracle Database is not configured with a Unicode character\nset, the two options are to use the :class:`_types.NCHAR` and\n:class:`_oracle.NCLOB` datatypes explicitly, or to pass the flag\n``use_nchar_for_unicode=True`` to :func:`_sa.create_engine`, which will cause\nthe SQLAlchemy dialect to use NCHAR/NCLOB for the :class:`.Unicode` /\n:class:`.UnicodeText` datatypes instead of VARCHAR/CLOB.\n\n.. versionchanged:: 1.3 The :class:`.Unicode` and :class:`.UnicodeText`\n   datatypes now correspond to the ``VARCHAR2`` and ``CLOB`` Oracle Database\n   datatypes unless the ``use_nchar_for_unicode=True`` is passed to the dialect\n   when :func:`_sa.create_engine` is called.\n\n\n.. _cx_oracle_unicode_encoding_errors:\n\nEncoding Errors\n^^^^^^^^^^^^^^^\n\nFor the unusual case that data in Oracle Database is present with a broken\nencoding, the dialect accepts a parameter ``encoding_errors`` which will be\npassed to Unicode decoding functions in order to affect how decoding errors are\nhandled.  The value is ultimately consumed by the Python `decode\n<https://docs.python.org/3/library/stdtypes.html#bytes.decode>`_ function, and\nis passed both via cx_Oracle",
      "https://cx-oracle.readthedocs.io/en/latest/api_manual/module.html#database-types.\nNote that in some cases, significant performance degradation can occur when\nusing these types vs. not, in particular when specifying ``cx_Oracle.CLOB``.\n\nOn the SQLAlchemy side, the :meth:`.DialectEvents.do_setinputsizes` event can\nbe used both for runtime visibility (e.g. logging) of the setinputsizes step as\nwell as to fully control how ``setinputsizes()`` is used on a per-statement\nbasis.\n\n.. versionadded:: 1.2.9 Added :meth:`.DialectEvents.setinputsizes`\n\n\nExample 1 - logging all setinputsizes calls\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following example illustrates how to log the intermediary values from a\nSQLAlchemy perspective before they are converted to the raw ``setinputsizes()``\nparameter dictionary.  The keys of the dictionary are :class:`.BindParameter`\nobjects which have a ``.key`` and a ``.type`` attribute::\n\n    from sqlalchemy import create_engine, event\n\n    engine = create_engine(",
      "https://github.com/oracle/python-cx_Oracle/issues/596#issuecomment-999243649\n_CX_ORACLE_MAGIC_LOB_SIZE = 131072\n\n\nclass _OracleInteger(sqltypes.Integer):\n    def get_dbapi_type(self, dbapi):\n        # see https://github.com/oracle/python-cx_Oracle/issues/\n        # 208#issuecomment-409715955\n        return int\n\n    def _cx_oracle_var(self, dialect, cursor, arraysize=None):\n        cx_Oracle = dialect.dbapi\n        return cursor.var(\n            cx_Oracle.STRING,\n            255,\n            arraysize=arraysize if arraysize is not None else cursor.arraysize,\n            outconverter=int,\n        )\n\n    def _cx_oracle_outputtypehandler(self, dialect):\n        def handler(cursor, name, default_type, size, precision, scale):\n            return self._cx_oracle_var(dialect, cursor)\n\n        return handler\n\n\nclass _OracleNumeric(sqltypes.Numeric):\n    is_number = False\n\n    def bind_processor(self, dialect):\n        if self.scale == 0:\n            return None\n        elif self.asdecimal:\n            processor = processors.to_decimal_processor_factory(\n                decimal.Decimal, self._effective_decimal_return_scale\n            )\n\n            def process(value):\n                if isinstance(value, (int, float)):\n                    return processor(value)\n                elif value is not None and value.is_infinite():\n                    return float(value)\n                else:\n                    return value\n\n            return process\n        else:\n            return processors.to_float\n\n    def result_processor(self, dialect, coltype):\n        return None\n\n    def _cx_oracle_outputtypehandler(self, dialect):\n        cx_Oracle = dialect.dbapi\n\n        def handler(cursor, name, default_type, size, precision, scale):\n            outconverter = None\n\n            if precision:\n                if self.asdecimal:\n                    if default_type == cx_Oracle.NATIVE_FLOAT:\n                        # receiving float and doing Decimal after the fact\n                        # allows for float(",
      "https://stackoverflow.com/questions/10711204/how-to-check-isoloation-level\n\n        # how to decode xid cols from v$transaction to match\n        # https://asktom.oracle.com/pls/apex/f?p=100:11:0::::P11_QUESTION_ID:9532779900346079444\n\n        # Oracle tuple comparison without using IN:\n        # https://www.sql-workbench.eu/comparison/tuple_comparison.html\n\n        with dbapi_connection.cursor() as cursor:\n            # this is the only way to ensure a transaction is started without\n            # actually running DML.   There"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\cx_oracle.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .types import DATE\nfrom .types import LONG\nfrom .types import NUMBER\nfrom .types import RAW\nfrom .types import VARCHAR2\nfrom ... import Column\nfrom ... import MetaData\nfrom ... import Table\nfrom ... import table\nfrom ...sql.sqltypes import CHAR\n\n# constants\nDB_LINK_PLACEHOLDER = ",
      "https://docs.oracle.com/en/database/oracle/oracle-database/21/refrn/ALL_DB_LINKS.html\n# original note:\n# using user_db_links here since all_db_links appears\n# to have more restricted permissions.\n# https://docs.oracle.com/cd/B28359_01/server.111/b28310/ds_admin005.htm\n# will need to hear from more users if we are doing\n# the right thing here.  See [ticket:2619]\nall_db_links = Table(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\dictionary.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"tiger\"",
      "password=\"tiger\"",
      "password=\"tiger\""
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\oracledb.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:1521",
      "localhost:1521",
      "localhost:1521",
      "localhost:1521",
      "localhost:1521"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\oracledb.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://oracle.github.io/python-oracledb/\n\nDescription\n-----------\n\nPython-oracledb is the Oracle Database driver for Python. It features a default\n",
      "https://python-oracledb.readthedocs.io/en/latest/api_manual/module.html#oracledb.init_oracle_client>`_\nexplicitly, or pass the parameter ``thick_mode=True`` to\n:func:`_sa.create_engine`. To pass custom arguments to\n``init_oracle_client()``, like the ``lib_dir`` path, a dict may be passed, for\nexample::\n\n    engine = sa.create_engine(\n        ",
      "https://python-oracledb.readthedocs.io/en/latest/user_guide/initialization.html#enabling-python-oracledb-thick-mode>`_\n\nConnecting to Oracle Database\n-----------------------------\n\npython-oracledb provides several methods of indicating the target database.\nThe dialect translates from a series of different URL forms.\n\nGiven the hostname, port and service name of the target database, you can\nconnect in SQLAlchemy using the ``service_name`` query string parameter::\n\n    engine = create_engine(\n        ",
      "https://python-oracledb.readthedocs.io/en/latest/user_guide/connection_handling.html#oracle-net-services-connection-strings>`_.\n\nFor example to use an `Easy Connect string\n<https://download.oracle.com/ocomdocs/global/Oracle-Net-Easy-Connect-Plus.pdf>`_\nwith a timeout to prevent connection establishment from hanging if the network\ntransport to the database cannot be establishd in 30 seconds, and also setting\na keep-alive time of 60 seconds to stop idle network connections from being\nterminated by a firewall::\n\n    e = create_engine(\n        ",
      "https://www.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-B0437826-43C1-49EC-A94D-B650B6A4A6EE>`_.\n\nThe general syntax is similar to:\n\n.. sourcecode:: text\n\n    [[protocol:]//]host[:port][/[service_name]][?parameter_name=value{&parameter_name=value}]\n\nNote that although the SQLAlchemy URL syntax ``hostname:port/dbname`` looks\nlike Oracle",
      "https://python-oracledb.readthedocs.io/en/latest/api_manual/module.html#oracledb.connect>`_\ncan be passed in ``connect_args``.  For example::\n\n    e = create_engine(\n        ",
      "https://python-oracledb.readthedocs.io/en/latest/user_guide/connection_handling.html#tns-aliases-for-connection-strings>`_\nof ``myalias`` as below:\n\n.. sourcecode:: text\n\n    myalias =\n      (DESCRIPTION =\n        (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.example.com)(PORT = 1521))\n        (CONNECT_DATA =\n          (SERVER = DEDICATED)\n          (SERVICE_NAME = orclpdb1)\n        )\n      )\n\nThe python-oracledb dialect connects to this database service when ``myalias`` is the\nhostname portion of the URL, without specifying a port, database name or\n``service_name``::\n\n    engine = create_engine(",
      "https://python-oracledb.readthedocs.io/en/latest/user_guide/connection_handling.html#connecting-to-oracle-cloud-autonomous-databases>`_. In\nsummary, Thick mode users should configure file locations and set the wallet\npath in ``sqlnet.ora`` appropriately::\n\n    e = create_engine(\n        ",
      "https://python-oracledb.readthedocs.io/en/latest/user_guide/connection_handling.html#database-resident-connection-pooling-drcp>`_.\n\nTo take advantage of python-oracledb",
      "https://python-oracledb.readthedocs.io/en/latest/api_manual/module.html#oracledb.create_pool>`_\nfor the arguments that can be used when creating a connection pool.\n\n.. _drcp:\n\nUsing Oracle Database Resident Connection Pooling (DRCP)\n--------------------------------------------------------\n\nWhen using Oracle Database",
      "https://python-oracledb.readthedocs.io/en/latest/user_guide/connection_handling.html#database-resident-connection-pooling-drcp>`_.\nFor example::\n\n    import oracledb\n    from sqlalchemy import create_engine\n    from sqlalchemy import text\n    from sqlalchemy.pool import NullPool\n\n    # Uncomment to use the optional python-oracledb Thick mode.\n    # Review the python-oracledb doc for the appropriate parameters\n    # oracledb.init_oracle_client(<your parameters>)\n\n    pool = oracledb.create_pool(\n        user=",
      "https://docs.python.org/3/library/stdtypes.html#bytes.decode>`_ function, and\nis passed both via python-oracledb",
      "https://python-oracledb.readthedocs.io/en/latest/api_manual/module.html#database-types>`_\nNote that in some cases, significant performance degradation can occur when\nusing these types vs. not.\n\nOn the SQLAlchemy side, the :meth:`.DialectEvents.do_setinputsizes` event can\nbe used both for runtime visibility (e.g. logging) of the setinputsizes step as\nwell as to fully control how ``setinputsizes()`` is used on a per-statement\nbasis.\n\n.. versionadded:: 1.2.9 Added :meth:`.DialectEvents.setinputsizes`\n\n\nExample 1 - logging all setinputsizes calls\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following example illustrates how to log the intermediary values from a\nSQLAlchemy perspective before they are converted to the raw ``setinputsizes()``\nparameter dictionary.  The keys of the dictionary are :class:`.BindParameter`\nobjects which have a ``.key`` and a ``.type`` attribute::\n\n    from sqlalchemy import create_engine, event\n\n    engine = create_engine(\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\oracledb.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"xe\""
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import create_engine\nfrom ... import exc\nfrom ... import inspect\nfrom ...engine import url as sa_url\nfrom ...testing.provision import configure_follower\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_all_schema_objects_post_tables\nfrom ...testing.provision import drop_all_schema_objects_pre_tables\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import follower_url_from_main\nfrom ...testing.provision import log\nfrom ...testing.provision import post_configure_engine\nfrom ...testing.provision import run_reap_dbs\nfrom ...testing.provision import set_default_schema_on_connection\nfrom ...testing.provision import stop_test_class_outside_fixtures\nfrom ...testing.provision import temp_table_keyword_args\nfrom ...testing.provision import update_db_opts\n\n\n@create_db.for_db(",
      "https://github.com/oracle/python-cx_Oracle/issues/519\n\n    for cx_oracle_conn in _all_conns:\n        try:\n            sc = cx_oracle_conn.stmtcachesize\n        except db.dialect.dbapi.InterfaceError:\n            # connection closed\n            pass\n        else:\n            cx_oracle_conn.stmtcachesize = 0\n            cx_oracle_conn.stmtcachesize = sc\n    _all_conns.clear()\n\n\ndef _purge_recyclebin(eng, schema=None):\n    with eng.begin() as conn:\n        if schema is None:\n            # run magic command to get rid of identity sequences\n            # https://floo.bar/2019/11/29/drop-the-underlying-sequence-of-an-identity-column/  # noqa: E501\n            conn.exec_driver_sql(",
      "https://community.oracle.com/tech/developers/discussion/2255402/how-to-clear-dba-recyclebin-for-a-particular-user  # noqa: E501\n            for owner, object_name, type_ in conn.exec_driver_sql(\n                ",
      "https://github.com/oracle/python-cx_Oracle/issues/530\n        # invalidate oracle connections that had 2pc set up\n        if "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nimport datetime as dt\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TYPE_CHECKING\n\nfrom ... import exc\nfrom ...sql import sqltypes\nfrom ...types import NVARCHAR\nfrom ...types import VARCHAR\n\nif TYPE_CHECKING:\n    from ...engine.interfaces import Dialect\n    from ...sql.type_api import _LiteralProcessorType\n\n\nclass RAW(sqltypes._Binary):\n    __visit_name__ = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom types import ModuleType\n\nfrom . import base  # noqa\nfrom . import cx_oracle  # noqa\nfrom . import oracledb  # noqa\nfrom .base import BFILE\nfrom .base import BINARY_DOUBLE\nfrom .base import BINARY_FLOAT\nfrom .base import BLOB\nfrom .base import CHAR\nfrom .base import CLOB\nfrom .base import DATE\nfrom .base import DOUBLE_PRECISION\nfrom .base import FLOAT\nfrom .base import INTERVAL\nfrom .base import LONG\nfrom .base import NCHAR\nfrom .base import NCLOB\nfrom .base import NUMBER\nfrom .base import NVARCHAR\nfrom .base import NVARCHAR2\nfrom .base import RAW\nfrom .base import REAL\nfrom .base import ROWID\nfrom .base import TIMESTAMP\nfrom .base import VARCHAR\nfrom .base import VARCHAR2\n\n# Alias oracledb also as oracledb_async\noracledb_async = type(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport re\nfrom typing import Any\nfrom typing import Optional\nfrom typing import TypeVar\n\nfrom .operators import CONTAINED_BY\nfrom .operators import CONTAINS\nfrom .operators import OVERLAP\nfrom ... import types as sqltypes\nfrom ... import util\nfrom ...sql import expression\nfrom ...sql import operators\nfrom ...sql._typing import _TypeEngineArgument\n\n\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\array.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://magicstack.github.io/asyncpg/\n\nThe asyncpg dialect is SQLAlchemy",
      "https://github.com/MagicStack/asyncpg/issues/837\n\n   https://github.com/sqlalchemy/sqlalchemy/issues/6467\n\n.. warning:: When using PGBouncer, to prevent a buildup of useless prepared statements in\n   your application, it",
      "https://www.postgresql.org/docs/current/sql-discard.html>`_\n   when returning connections.  The DISCARD command is used to release resources held by the db connection,\n   including prepared statements. Without proper setup, prepared statements can\n   accumulate quickly and cause performance issues.\n\nDisabling the PostgreSQL JIT to improve ENUM datatype handling\n---------------------------------------------------------------\n\nAsyncpg has an `issue <https://github.com/MagicStack/asyncpg/issues/727>`_ when\nusing PostgreSQL ENUM datatypes, where upon the creation of new database\nconnections, an expensive query may be emitted in order to retrieve metadata\nregarding custom types which has been shown to negatively affect performance.\nTo mitigate this issue, the PostgreSQL ",
      "https://github.com/MagicStack/asyncpg/issues/727\n\n",
      "https://github.com/MagicStack/asyncpg/issues/623 for\n        notes on JSON/JSONB implementation.\n\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\asyncpg.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH>`_\nvariable ``search_path``, which in modern PostgreSQL versions defaults to this:\n\n.. sourcecode:: sql\n\n    test=> show search_path;\n    search_path\n    -----------------\n    ",
      "https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH>`_\n    - on the PostgreSQL website.\n\nINSERT/UPDATE...RETURNING\n-------------------------\n\nThe dialect supports PG 8.2",
      "https://www.postgresql.org/docs/current/static/sql-insert.html#SQL-ON-CONFLICT>`_\n    - in the PostgreSQL documentation.\n\nSpecifying the Target\n^^^^^^^^^^^^^^^^^^^^^\n\nBoth methods supply the ",
      "https://www.postgresql.org/docs/current/textsearch-controls.html>`_ - in the PostgreSQL documentation\n\n\nFROM ONLY ...\n-------------\n\nThe dialect supports PostgreSQL",
      "https://www.postgresql.org/docs/current/interactive/indexes-opclass.html).\nThe :class:`.Index` construct allows these to be specified via the\n``postgresql_ops`` keyword argument::\n\n    Index(\n        ",
      "https://www.postgresql.org/docs/current/static/indexes-types.html). These can be\nspecified on :class:`.Index` using the ``postgresql_using`` keyword argument::\n\n    Index(",
      "https://www.postgresql.org/docs/current/static/sql-createtable.html>`_ -\n    in the PostgreSQL documentation.\n\n.. _postgresql_constraint_options:\n\nPostgreSQL Constraint Options\n-----------------------------\n\nThe following option(s) are supported by the PostgreSQL dialect in conjunction\nwith selected constraint constructs:\n\n* ``NOT VALID``:  This option applies towards CHECK and FOREIGN KEY constraints\n  when the constraint is being added to an existing table via ALTER TABLE,\n  and has the effect that existing rows are not scanned during the ALTER\n  operation against the constraint being added.\n\n  When using a SQL migration tool such as `Alembic <https://alembic.sqlalchemy.org>`_\n  that renders ALTER TABLE constructs, the ``postgresql_not_valid`` argument\n  may be specified as an additional keyword argument within the operation\n  that creates the constraint, as in the following Alembic example::\n\n        def update():\n            op.create_foreign_key(\n                ",
      "https://www.postgresql.org/docs/current/static/sql-altertable.html>`_ -\n      in the PostgreSQL documentation.\n\n.. _postgresql_table_valued_overview:\n\nTable values, Table and Column valued functions, Row and Tuple objects\n-----------------------------------------------------------------------\n\nPostgreSQL makes great use of modern SQL forms such as table-valued functions,\ntables and rows as values.   These constructs are commonly used as part\nof PostgreSQL",
      "https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS>`_\n\n    `PostgreSQL Row Constructor Comparison\n    <https://www.postgresql.org/docs/current/functions-comparisons.html#ROW-WISE-COMPARISON>`_\n\nTable Types passed to Functions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPostgreSQL supports passing a table as an argument to a function, which is\nknown as a ",
      "https://www.postgresql.org/docs/9.3/static/release-9-2.html#AEN116689\n        self.supports_smallserial = self.server_version_info >= (9, 2)\n\n        self._set_backslash_escapes(connection)\n\n        self._supports_drop_index_concurrently = self.server_version_info >= (\n            9,\n            2,\n        )\n        self.supports_identity_columns = self.server_version_info >= (10,)\n\n    def get_isolation_level_values(self, dbapi_conn):\n        # note the generic dialect doesn",
      "https://stackoverflow.com/questions/3523028/\n                    # valid-characters-of-a-hostname\n                    host_port_match = re.match(\n                        r",
      "https://www.postgresql.org/docs/current/static/sql-createtable.html\n        return re.compile(\n            r"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "a@b.com",
      "%@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\n\nfrom . import ext\nfrom .._typing import _OnConflictConstraintT\nfrom .._typing import _OnConflictIndexElementsT\nfrom .._typing import _OnConflictIndexWhereT\nfrom .._typing import _OnConflictSetT\nfrom .._typing import _OnConflictWhereT\nfrom ... import util\nfrom ...sql import coercions\nfrom ...sql import roles\nfrom ...sql import schema\nfrom ...sql._typing import _DMLTableArgument\nfrom ...sql.base import _exclusive_against\nfrom ...sql.base import _generative\nfrom ...sql.base import ColumnCollection\nfrom ...sql.base import ReadOnlyColumnCollection\nfrom ...sql.dml import Insert as StandardInsert\nfrom ...sql.elements import ClauseElement\nfrom ...sql.elements import ColumnElement\nfrom ...sql.elements import KeyedColumnElement\nfrom ...sql.elements import TextClause\nfrom ...sql.expression import alias\nfrom ...util.typing import Self\n\n\n__all__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\dml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nfrom . import types\nfrom .array import ARRAY\nfrom ...sql import coercions\nfrom ...sql import elements\nfrom ...sql import expression\nfrom ...sql import functions\nfrom ...sql import roles\nfrom ...sql import schema\nfrom ...sql.schema import ColumnCollectionConstraint\nfrom ...sql.sqltypes import TEXT\nfrom ...sql.visitors import InternalTraversal\n\n_T = TypeVar(",
      "https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE\n\n    ",
      "https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE\n        if len(args) < 2:\n            # invalid args; don"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\ext.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport re\n\nfrom .array import ARRAY\nfrom .operators import CONTAINED_BY\nfrom .operators import CONTAINS\nfrom .operators import GETITEM\nfrom .operators import HAS_ALL\nfrom .operators import HAS_ANY\nfrom .operators import HAS_KEY\nfrom ... import types as sqltypes\nfrom ...sql import functions as sqlfunc\n\n\n__all__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\hstore.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom .array import ARRAY\nfrom .array import array as _pg_array\nfrom .operators import ASTEXT\nfrom .operators import CONTAINED_BY\nfrom .operators import CONTAINS\nfrom .operators import DELETE_PATH\nfrom .operators import HAS_ALL\nfrom .operators import HAS_ANY\nfrom .operators import HAS_KEY\nfrom .operators import JSONPATH_ASTEXT\nfrom .operators import PATH_EXISTS\nfrom .operators import PATH_MATCH\nfrom ... import types as sqltypes\nfrom ...sql import cast\n\n__all__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import Union\n\nfrom ... import schema\nfrom ... import util\nfrom ...sql import coercions\nfrom ...sql import elements\nfrom ...sql import roles\nfrom ...sql import sqltypes\nfrom ...sql import type_api\nfrom ...sql.base import _NoArg\nfrom ...sql.ddl import InvokeCreateDDLBase\nfrom ...sql.ddl import InvokeDropDDLBase\n\nif TYPE_CHECKING:\n    from ...sql._typing import _TypeEngineArgument\n\n\nclass NamedType(sqltypes.TypeEngine):\n    ",
      "https://www.postgresql.org/docs/current/sql-createdomain.html\n\n    .. versionadded:: 2.0\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\named_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom ...sql import operators\n\n\n_getitem_precedence = operators._PRECEDENCE[operators.json_getitem_op]\n_eq_precedence = operators._PRECEDENCE[operators.eq]\n\n# JSON + JSONB\nASTEXT = operators.custom_op(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\operators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/pg8000/\n\n.. versionchanged:: 1.4  The pg8000 dialect has been updated for version\n   1.16.6 and higher, and is again part of SQLAlchemy"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\pg8000.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.199",
      "192.168.0.199"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\pg8000.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .array import ARRAY\nfrom .types import OID\nfrom .types import REGCLASS\nfrom ... import Column\nfrom ... import func\nfrom ... import MetaData\nfrom ... import Table\nfrom ...types import BigInteger\nfrom ...types import Boolean\nfrom ...types import CHAR\nfrom ...types import Float\nfrom ...types import Integer\nfrom ...types import SmallInteger\nfrom ...types import String\nfrom ...types import Text\nfrom ...types import TypeDecorator\n\n\n# types\nclass NAME(TypeDecorator):\n    impl = String(64, collation="
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\pg_catalog.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport time\n\nfrom ... import exc\nfrom ... import inspect\nfrom ... import text\nfrom ...testing import warn_test_suite\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_all_schema_objects_post_tables\nfrom ...testing.provision import drop_all_schema_objects_pre_tables\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import log\nfrom ...testing.provision import post_configure_engine\nfrom ...testing.provision import prepare_for_drop_tables\nfrom ...testing.provision import set_default_schema_on_connection\nfrom ...testing.provision import temp_table_keyword_args\nfrom ...testing.provision import upsert\n\n\n@create_db.for_db("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/psycopg/\n\n``psycopg`` is the package and module name for version 3 of the ``psycopg``\ndatabase driver, formerly known as ``psycopg2``.  This driver is different\nenough from its ``psycopg2`` predecessor that SQLAlchemy supports it\nvia a totally separate dialect; support for ``psycopg2`` is expected to remain\nfor as long as that package continues to function for modern Python versions,\nand also remains the default dialect for the ``postgresql://`` dialect\nseries.\n\nThe SQLAlchemy ``psycopg`` dialect provides both a sync and an async\nimplementation under the same dialect name. The proper version is\nselected depending on how the engine is created:\n\n* calling :func:`_sa.create_engine` with ``postgresql+psycopg://...`` will\n  automatically select the sync version, e.g.::\n\n    from sqlalchemy import create_engine\n\n    sync_engine = create_engine(\n        ",
      "https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors>`_\n\n",
      "https://github.com/psycopg/psycopg/issues/83\n        cargs, cparams = super().create_connect_args(url)\n\n        if self._psycopg_adapters_map:\n            cparams["
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/psycopg2/\n\n.. _psycopg2_toplevel:\n\npsycopg2 Connect Arguments\n--------------------------\n\nKeyword arguments that are specific to the SQLAlchemy psycopg2 dialect\nmay be passed to :func:`_sa.create_engine()`, and include the following:\n\n\n* ``isolation_level``: This option, available for all PostgreSQL dialects,\n  includes the ``AUTOCOMMIT`` isolation level when using the psycopg2\n  dialect.   This option sets the **default** isolation level for the\n  connection that is set immediately upon connection to the database before\n  the connection is pooled.  This option is generally superseded by the more\n  modern :paramref:`_engine.Connection.execution_options.isolation_level`\n  execution option, detailed at :ref:`dbapi_autocommit`.\n\n  .. seealso::\n\n    :ref:`psycopg2_isolation_level`\n\n    :ref:`dbapi_autocommit`\n\n\n* ``client_encoding``: sets the client encoding in a libpq-agnostic way,\n  using psycopg2",
      "https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS>`_\n\n.. _psycopg2_multi_host:\n\nSpecifying multiple fallback hosts\n-----------------------------------\n\npsycopg2 supports multiple connection points in the connection string.\nWhen the ``host`` parameter is used multiple times in the query section of\nthe URL, SQLAlchemy will create a single string of the host and port\ninformation provided to make the connections.  Tokens may consist of\n``host::port`` or just ``host``; in the latter case, the default port\nis selected by libpq.  In the example below, three host connections\nare specified, for ``HostA::PortA``, ``HostB`` connecting to the default port,\nand ``HostC::PortC``::\n\n    create_engine(\n        ",
      "https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING>`_.\n\nFor example, to indicate two hosts using the ``primary`` strategy::\n\n    create_engine(\n        ",
      "https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING>`_ - please refer\n    to this section in the libpq documentation for complete background on multiple host support.\n\n\nEmpty DSN Connections / Environment Variable Connections\n---------------------------------------------------------\n\nThe psycopg2 DBAPI can connect to PostgreSQL by passing an empty DSN to the\nlibpq client library, which by default indicates to connect to a localhost\nPostgreSQL database that is open for ",
      "https://www.postgresql.org/docs/current/libpq-envars.html>`_ -\n    PostgreSQL documentation on how to use ``PG_...``\n    environment variables for connections.\n\n.. _psycopg2_execution_options:\n\nPer-Statement/Connection Execution Options\n-------------------------------------------\n\nThe following DBAPI-specific options are respected when used with\n:meth:`_engine.Connection.execution_options`,\n:meth:`.Executable.execution_options`,\n:meth:`_query.Query.execution_options`,\nin addition to those not specific to DBAPIs:\n\n* ``isolation_level`` - Set the transaction isolation level for the lifespan\n  of a :class:`_engine.Connection` (can only be set on a connection,\n  not a statement\n  or query).   See :ref:`psycopg2_isolation_level`.\n\n* ``stream_results`` - Enable or disable usage of psycopg2 server side\n  cursors - this feature makes use of ",
      "https://www.psycopg.org/docs/extras.html#fast-execution-helpers>`_, which\nhave been shown in benchmarking to improve psycopg2",
      "https://docs.python.org/3/howto/logging.html>`_ - on the python.org website\n\n.. _psycopg2_hstore:\n\nHSTORE type\n------------\n\nThe ``psycopg2`` DBAPI includes an extension to natively handle marshalling of\nthe HSTORE type.   The SQLAlchemy psycopg2 dialect will enable this extension\nby default when psycopg2 version 2.4 or greater is used, and\nit is detected that the target database has the HSTORE type set up for use.\nIn other words, when the dialect makes the first\nconnection, a sequence like the following is performed:\n\n1. Request the available HSTORE oids using\n   ``psycopg2.extras.HstoreAdapter.get_oids()``.\n   If this function returns a list of HSTORE identifiers, we then determine\n   that the ``HSTORE`` extension is present.\n   This function is **skipped** if the version of psycopg2 installed is\n   less than version 2.4.\n\n2. If the ``use_native_hstore`` flag is at its default of ``True``, and\n   we",
      "https://www.openssl.org/docs/man1.1.1/man3/SSL_get_error.html#BUGS\n            # It may also occur in newer OpenSSL for a non-recoverable I/O\n            # error as a result of a system call that does not set "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg2.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.199"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg2.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/psycopg2cffi/\n\n``psycopg2cffi`` is an adaptation of ``psycopg2``, using CFFI for the C\nlayer. This makes it suitable for use in e.g. PyPy. Documentation\nis as per ``psycopg2``.\n\n.. seealso::\n\n    :mod:`sqlalchemy.dialects.postgresql.psycopg2`\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg2cffi.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport dataclasses\nfrom datetime import date\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom decimal import Decimal\nfrom typing import Any\nfrom typing import cast\nfrom typing import Generic\nfrom typing import List\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom .operators import ADJACENT_TO\nfrom .operators import CONTAINED_BY\nfrom .operators import CONTAINS\nfrom .operators import NOT_EXTEND_LEFT_OF\nfrom .operators import NOT_EXTEND_RIGHT_OF\nfrom .operators import OVERLAP\nfrom .operators import STRICTLY_LEFT_OF\nfrom .operators import STRICTLY_RIGHT_OF\nfrom ... import types as sqltypes\nfrom ...sql import operators\nfrom ...sql.type_api import TypeEngine\nfrom ...util import py310\nfrom ...util.typing import Literal\n\nif TYPE_CHECKING:\n    from ...sql.elements import ColumnElement\n    from ...sql.type_api import _TE\n    from ...sql.type_api import TypeEngineMixin\n\n_T = TypeVar(",
      "https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-DISCRETE\n        # for the rationale\n\n        if isinstance(self.lower, int) or isinstance(self.upper, int):\n            return 1\n        elif isinstance(self.lower, datetime) or isinstance(\n            self.upper, datetime\n        ):\n            # This is required, because a `isinstance(datetime.now(), date)`\n            # is True\n            return None\n        elif isinstance(self.lower, date) or isinstance(self.upper, date):\n            return timedelta(days=1)\n        else:\n            return None\n\n    def _compare_edges(\n        self,\n        value1: Optional[_T],\n        bound1: str,\n        value2: Optional[_T],\n        bound2: str,\n        only_values: bool = False,\n    ) -> int:\n        ",
      "https://www.postgresql.org/docs/current/static/functions-range.html>`_\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\ranges.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport datetime as dt\nfrom typing import Any\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom uuid import UUID as _python_UUID\n\nfrom ...sql import sqltypes\nfrom ...sql import type_api\nfrom ...util.typing import Literal\n\nif TYPE_CHECKING:\n    from ...engine.interfaces import Dialect\n    from ...sql.operators import OperatorType\n    from ...sql.type_api import _LiteralProcessorType\n    from ...sql.type_api import TypeEngine\n\n_DECIMAL_TYPES = (1231, 1700)\n_FLOAT_TYPES = (700, 701, 1021, 1022)\n_INT_TYPES = (20, 21, 23, 26, 1005, 1007, 1016)\n\n\nclass PGUuid(sqltypes.UUID[sqltypes._UUID_RETURN]):\n    render_bind_cast = True\n    render_literal_cast = True\n\n    if TYPE_CHECKING:\n\n        @overload\n        def __init__(\n            self: PGUuid[_python_UUID], as_uuid: Literal[True] = ...\n        ) -> None: ...\n\n        @overload\n        def __init__(\n            self: PGUuid[str], as_uuid: Literal[False] = ...\n        ) -> None: ...\n\n        def __init__(self, as_uuid: bool = True) -> None: ...\n\n\nclass BYTEA(sqltypes.LargeBinary):\n    __visit_name__ = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nimport decimal\n\nfrom .array import ARRAY as PGARRAY\nfrom .base import _DECIMAL_TYPES\nfrom .base import _FLOAT_TYPES\nfrom .base import _INT_TYPES\nfrom .base import PGDialect\nfrom .base import PGExecutionContext\nfrom .hstore import HSTORE\nfrom .pg_catalog import _SpaceVector\nfrom .pg_catalog import INT2VECTOR\nfrom .pg_catalog import OIDVECTOR\nfrom ... import exc\nfrom ... import types as sqltypes\nfrom ... import util\nfrom ...engine import processors\n\n_server_side_id = util.counter()\n\n\nclass _PsycopgNumeric(sqltypes.Numeric):\n    def bind_processor(self, dialect):\n        return None\n\n    def result_processor(self, dialect, coltype):\n        if self.asdecimal:\n            if coltype in _FLOAT_TYPES:\n                return processors.to_decimal_processor_factory(\n                    decimal.Decimal, self._effective_decimal_return_scale\n                )\n            elif coltype in _DECIMAL_TYPES or coltype in _INT_TYPES:\n                # psycopg returns Decimal natively for 1700\n                return None\n            else:\n                raise exc.InvalidRequestError(\n                    ",
      "https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#server-side-cursors\n        # psycopg2\n        # https://www.psycopg.org/docs/usage.html#server-side-cursors\n        ident = "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\_psycopg_common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom types import ModuleType\n\nfrom . import array as arraylib  # noqa # keep above base and other dialects\nfrom . import asyncpg  # noqa\nfrom . import base\nfrom . import pg8000  # noqa\nfrom . import psycopg  # noqa\nfrom . import psycopg2  # noqa\nfrom . import psycopg2cffi  # noqa\nfrom .array import All\nfrom .array import Any\nfrom .array import ARRAY\nfrom .array import array\nfrom .base import BIGINT\nfrom .base import BOOLEAN\nfrom .base import CHAR\nfrom .base import DATE\nfrom .base import DOMAIN\nfrom .base import DOUBLE_PRECISION\nfrom .base import FLOAT\nfrom .base import INTEGER\nfrom .base import NUMERIC\nfrom .base import REAL\nfrom .base import SMALLINT\nfrom .base import TEXT\nfrom .base import UUID\nfrom .base import VARCHAR\nfrom .dml import Insert\nfrom .dml import insert\nfrom .ext import aggregate_order_by\nfrom .ext import array_agg\nfrom .ext import ExcludeConstraint\nfrom .ext import phraseto_tsquery\nfrom .ext import plainto_tsquery\nfrom .ext import to_tsquery\nfrom .ext import to_tsvector\nfrom .ext import ts_headline\nfrom .ext import websearch_to_tsquery\nfrom .hstore import HSTORE\nfrom .hstore import hstore\nfrom .json import JSON\nfrom .json import JSONB\nfrom .json import JSONPATH\nfrom .named_types import CreateDomainType\nfrom .named_types import CreateEnumType\nfrom .named_types import DropDomainType\nfrom .named_types import DropEnumType\nfrom .named_types import ENUM\nfrom .named_types import NamedType\nfrom .ranges import AbstractMultiRange\nfrom .ranges import AbstractRange\nfrom .ranges import AbstractSingleRange\nfrom .ranges import DATEMULTIRANGE\nfrom .ranges import DATERANGE\nfrom .ranges import INT4MULTIRANGE\nfrom .ranges import INT4RANGE\nfrom .ranges import INT8MULTIRANGE\nfrom .ranges import INT8RANGE\nfrom .ranges import MultiRange\nfrom .ranges import NUMMULTIRANGE\nfrom .ranges import NUMRANGE\nfrom .ranges import Range\nfrom .ranges import TSMULTIRANGE\nfrom .ranges import TSRANGE\nfrom .ranges import TSTZMULTIRANGE\nfrom .ranges import TSTZRANGE\nfrom .types import BIT\nfrom .types import BYTEA\nfrom .types import CIDR\nfrom .types import CITEXT\nfrom .types import INET\nfrom .types import INTERVAL\nfrom .types import MACADDR\nfrom .types import MACADDR8\nfrom .types import MONEY\nfrom .types import OID\nfrom .types import REGCLASS\nfrom .types import REGCONFIG\nfrom .types import TIME\nfrom .types import TIMESTAMP\nfrom .types import TSQUERY\nfrom .types import TSVECTOR\n\n\n# Alias psycopg also as psycopg_async\npsycopg_async = type(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://pypi.org/project/aiosqlite/\n\nThe aiosqlite dialect provides support for the SQLAlchemy asyncio interface\nrunning on top of pysqlite.\n\naiosqlite is a wrapper around pysqlite that uses a background thread for\neach connection.   It does not actually use non-blocking IO, as SQLite\ndatabases are not socket-based.  However it does provide a working asyncio\ninterface that",
      "https://github.com/omnilib/aiosqlite/pull/238, so we can be\n            # assured this will not become some other kind of exception,\n            # since it doesn"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\aiosqlite.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://www.sqlite.org/datatype3.html#affinity>`_ -\n    in the SQLite documentation\n\n.. _sqlite_autoincrement:\n\nSQLite Auto Incrementing Behavior\n----------------------------------\n\nBackground on SQLite",
      "https://sqlite.org/autoinc.html\n\nKey concepts:\n\n* SQLite has an implicit ",
      "https://sqlite.org/datatype3.html>`_\n\n.. _sqlite_concurrency:\n\nDatabase Locking Behavior / Concurrency\n---------------------------------------\n\nSQLite is not designed for a high level of write concurrency. The database\nitself, being a file, is locked completely during write operations within\ntransactions, meaning exactly one ",
      "https://www.sqlite.org/whentouse.html>`_ near the bottom of the page.\n\nThe following subsections introduce areas that are impacted by SQLite",
      "https://www.sqlite.org/pragma.html#pragma_read_uncommitted>`_\ninstruction.   This setting can essentially switch SQLite between its\ndefault mode of ``SERIALIZABLE`` isolation, and a ",
      "https://sqlite.org/lang_transaction.html>`_.   A straight\n``BEGIN`` statement uses the ",
      "https://www.sqlite.org/foreignkeys.html>`_\n    - on the SQLite web site.\n\n    :ref:`event_toplevel` - SQLAlchemy event API.\n\n    :ref:`use_alter` - more information on SQLAlchemy",
      "https://www.sqlite.org/lang_conflict.html>`_ - in the SQLite\n    documentation\n\n.. versionadded:: 1.3\n\n\nThe ``sqlite_on_conflict`` parameters accept a  string argument which is just\nthe resolution name to be chosen, which on SQLite can be one of ROLLBACK,\nABORT, FAIL, IGNORE, and REPLACE.   For example, to add a UNIQUE constraint\nthat specifies the IGNORE algorithm::\n\n    some_table = Table(\n        ",
      "https://sqlite.org/lang_UPSERT.html>`_\n    - in the SQLite documentation.\n\n\nSpecifying the Target\n^^^^^^^^^^^^^^^^^^^^^\n\nBoth methods supply the ",
      "https://www.sqlite.org/datatype3.html section 2.1.\n\nThe provided typemap will make direct associations from an exact string\nname match for the following types:\n\n:class:`_types.BIGINT`, :class:`_types.BLOB`,\n:class:`_types.BOOLEAN`, :class:`_types.BOOLEAN`,\n:class:`_types.CHAR`, :class:`_types.DATE`,\n:class:`_types.DATETIME`, :class:`_types.FLOAT`,\n:class:`_types.DECIMAL`, :class:`_types.FLOAT`,\n:class:`_types.INTEGER`, :class:`_types.INTEGER`,\n:class:`_types.NUMERIC`, :class:`_types.REAL`,\n:class:`_types.SMALLINT`, :class:`_types.TEXT`,\n:class:`_types.TIME`, :class:`_types.TIMESTAMP`,\n:class:`_types.VARCHAR`, :class:`_types.NVARCHAR`,\n:class:`_types.NCHAR`\n\nWhen a type name does not match one of the above types, the ",
      "https://www.sqlite.org/lang_createtable.html>`_\n\n.. _sqlite_include_internal:\n\nReflecting internal schema tables\n----------------------------------\n\nReflection methods that return lists of tables will omit so-called\n",
      "https://www.sqlite.org/fileformat2.html#intschema>`_ - in the SQLite\n    documentation.\n\n",
      "https://github.com/python/cpython/issues/93421\n    # note this parameter is no longer used by the ORM or default dialect\n    # see #9414\n    supports_sane_rowcount_returning = False\n\n    supports_empty_insert = False\n    supports_cast = True\n    supports_multivalues_insert = True\n    use_insertmanyvalues = True\n    tuple_in_values = True\n    supports_statement_cache = True\n    insert_null_pk_still_autoincrements = True\n    insert_returning = True\n    update_returning = True\n    update_returning_multifrom = True\n    delete_returning = True\n    update_returning_multifrom = True\n\n    supports_default_metavalue = True\n    ",
      "https://www.sqlite.org/releaselog/3_7_11.html\n                self.dbapi.sqlite_version_info\n                >= (3, 7, 11)\n            )\n            # see https://www.sqlalchemy.org/trac/ticket/2568\n            # as well as https://www.sqlite.org/src/info/600482d161\n            self._broken_fk_pragma_quotes = self.dbapi.sqlite_version_info < (\n                3,\n                6,\n                14,\n            )\n\n            if self.dbapi.sqlite_version_info < (3, 35) or util.pypy:\n                self.update_returning = self.delete_returning = (\n                    self.insert_returning\n                ) = False\n\n            if self.dbapi.sqlite_version_info < (3, 32, 0):\n                # https://www.sqlite.org/limits.html\n                self.insertmanyvalues_max_parameters = 999\n\n    _isolation_lookup = util.immutabledict(\n        {",
      "https://www.sqlite.org/changes.html#version_3_3_3\n            # ",
      "https://www.sqlite.org/src/info/069351b85f9a706f60d3e98fbc8aaf40c374356b967c0464aede30ead3d9d18b\n            if hidden == 1:\n                continue\n\n            generated = bool(hidden)\n            persisted = hidden == 3\n\n            if tablesql is None and generated:\n                tablesql = self._get_table_sql(\n                    connection, table_name, schema, **kw\n                )\n                # remove create table\n                match = re.match(\n                    r",
      "https://www.sqlite.org/datatype3.html section 2.1.\n\n        This method allows SQLAlchemy to support that algorithm, while still\n        providing access to smarter reflection utilities by recognizing\n        column definitions that SQLite only supports through affinity (like\n        DATE and DOUBLE).\n\n        ",
      "https://www.mail-archive.com/sqlite-users@sqlite.org/msg30517.html\n            if not include_auto_indexes and row[1].startswith(\n                ",
      "https://www.sqlite.org/cvstrac/tktview?tn=1884\n                result = cursor.fetchall()\n            else:\n                result = []\n            if result:\n                return result\n        else:\n            return []\n"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "a@b.com",
      "%@gmail.com",
      "%@gmail.com",
      "sqlite-users@sqlite.org"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\n\nfrom .._typing import _OnConflictIndexElementsT\nfrom .._typing import _OnConflictIndexWhereT\nfrom .._typing import _OnConflictSetT\nfrom .._typing import _OnConflictWhereT\nfrom ... import util\nfrom ...sql import coercions\nfrom ...sql import roles\nfrom ...sql import schema\nfrom ...sql._typing import _DMLTableArgument\nfrom ...sql.base import _exclusive_against\nfrom ...sql.base import _generative\nfrom ...sql.base import ColumnCollection\nfrom ...sql.base import ReadOnlyColumnCollection\nfrom ...sql.dml import Insert as StandardInsert\nfrom ...sql.elements import ClauseElement\nfrom ...sql.elements import ColumnElement\nfrom ...sql.elements import KeyedColumnElement\nfrom ...sql.elements import TextClause\nfrom ...sql.expression import alias\nfrom ...util.typing import Self\n\n__all__ = ("
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\dml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import types as sqltypes\n\n\nclass JSON(sqltypes.JSON):\n    ",
      "https://www.sqlite.org/loadext.html>`_ and as such\n    may not be available, or may require run-time loading.\n\n    :class:`_sqlite.JSON` is used automatically whenever the base\n    :class:`_types.JSON` datatype is used against a SQLite backend.\n\n    .. seealso::\n\n        :class:`_types.JSON` - main documentation for the generic\n        cross-platform JSON datatype.\n\n    The :class:`_sqlite.JSON` type supports persistence of JSON values\n    as well as the core index operations provided by :class:`_types.JSON`\n    datatype, by adapting the operations to render the ``JSON_EXTRACT``\n    function wrapped in the ``JSON_QUOTE`` function at the database level.\n    Extracted values are quoted in order to ensure that the results are\n    always JSON string values.\n\n\n    .. versionadded:: 1.3\n\n\n    .. _JSON1: https://www.sqlite.org/json1.html\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\json.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"test\""
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport os\nimport re\n\nfrom ... import exc\nfrom ...engine import url as sa_url\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import follower_url_from_main\nfrom ...testing.provision import generate_driver_url\nfrom ...testing.provision import log\nfrom ...testing.provision import post_configure_engine\nfrom ...testing.provision import run_reap_dbs\nfrom ...testing.provision import stop_test_class_outside_fixtures\nfrom ...testing.provision import temp_table_keyword_args\nfrom ...testing.provision import upsert\n\n\n# TODO: I can"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://www.zetetic.net/sqlcipher>`_ backend.\n\n\nDriver\n------\n\nCurrent dialect selection logic is:\n\n* If the :paramref:`_sa.create_engine.module` parameter supplies a DBAPI module,\n  that module is used.\n* Otherwise for Python 3, choose https://pypi.org/project/sqlcipher3/\n* If not available, fall back to https://pypi.org/project/pysqlcipher3/\n* For Python 2, https://pypi.org/project/pysqlcipher/ is used.\n\n.. warning:: The ``pysqlcipher3`` and ``pysqlcipher`` DBAPI drivers are no\n   longer maintained; the ``sqlcipher3`` driver as of this writing appears\n   to be current.  For future compatibility, any pysqlcipher-compatible DBAPI\n   may be used as follows::\n\n        import sqlcipher_compatible_driver\n\n        from sqlalchemy import create_engine\n\n        e = create_engine(\n            ",
      "https://www.zetetic.net/sqlcipher/sqlcipher-api/ can be passed\nin the query string, and will result in that PRAGMA being called for each\nnew connection.  Currently, ``cipher``, ``kdf_iter``\n``cipher_page_size`` and ``cipher_use_hmac`` are supported::\n\n    e = create_engine(\n        "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlcipher.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://docs.python.org/library/sqlite3.html\n\n    Note that ``pysqlite`` is the same driver as the ``sqlite3``\n    module included with the Python distribution.\n\nDriver\n------\n\nThe ``sqlite3`` Python DBAPI is standard on all modern Python versions;\nfor cPython and Pypy, no additional installation is necessary.\n\n\nConnect Strings\n---------------\n\nThe file specification for the SQLite database is taken as the ",
      "https://www.sqlite.org/uri.html>`_, which has the  advantage\nthat additional driver-level arguments can be passed including options such as\n",
      "https://www.sqlite.org/uri.html>`_ - in\n    the SQLite documentation\n\n.. _pysqlite_regexp:\n\nRegular Expression Support\n---------------------------\n\n.. versionadded:: 1.4\n\nSupport for the :meth:`_sql.ColumnOperators.regexp_match` operator is provided\nusing Python",
      "https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function\n\n.. _re.search: https://docs.python.org/3/library/re.html#re.search\n\n.. _Python regular expressions: https://docs.python.org/3/library/re.html#re.search\n\n\n\nCompatibility with sqlite3 ",
      "https://sqlite.org/lang_transaction.html>`_,\nby adding the desired locking mode to our ``",
      "https://sqlite.org/lang_transaction.html>`_ -\n    on the SQLite site\n\n    `sqlite3 SELECT does not BEGIN a transaction <https://bugs.python.org/issue9924>`_ -\n    on the Python bug tracker\n\n    `sqlite3 module breaks transactions and potentially corrupts data <https://bugs.python.org/issue10740>`_ -\n    on the Python bug tracker\n\n.. _pysqlite_udfs:\n\nUser-Defined Functions\n----------------------\n\npysqlite supports a `create_function() <https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function>`_\nmethod that allows us to create our own user-defined functions (UDFs) in Python and use them directly in SQLite queries.\nThese functions are registered with a specific DBAPI Connection.\n\nSQLAlchemy uses connection pooling with file-based SQLite databases, so we need to ensure that the UDF is attached to the\nconnection when it is created. That is accomplished with an event listener::\n\n    from sqlalchemy import create_engine\n    from sqlalchemy import event\n    from sqlalchemy import text\n\n\n    def udf():\n        return ",
      "https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function\n            # the check is more conservative since there were still issues\n            # with following 3.8 sqlite versions\n            create_func_kw = {",
      "https://www.sqlite.org/lang_mathfunc.html\n            dbapi_connection.create_function(\n                "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlite.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\path\\\\to\\\\database.db"
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlite.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom . import aiosqlite  # noqa\nfrom . import base  # noqa\nfrom . import pysqlcipher  # noqa\nfrom . import pysqlite  # noqa\nfrom .base import BLOB\nfrom .base import BOOLEAN\nfrom .base import CHAR\nfrom .base import DATE\nfrom .base import DATETIME\nfrom .base import DECIMAL\nfrom .base import FLOAT\nfrom .base import INTEGER\nfrom .base import JSON\nfrom .base import NUMERIC\nfrom .base import REAL\nfrom .base import SMALLINT\nfrom .base import TEXT\nfrom .base import TIME\nfrom .base import TIMESTAMP\nfrom .base import VARCHAR\nfrom .dml import Insert\nfrom .dml import insert\n\n# default dialect\nbase.dialect = dialect = pysqlite.dialect\n\n\n__all__ = (\n    "
    ],
    "file": "venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/internals/en/capability-flags.html#packet-Protocol::CapabilityFlags\nLONG_PASSWORD = 1\nFOUND_ROWS = 1 << 1\nLONG_FLAG = 1 << 2\nCONNECT_WITH_DB = 1 << 3\nNO_SCHEMA = 1 << 4\nCOMPRESS = 1 << 5\nODBC = 1 << 6\nLOCAL_FILES = 1 << 7\nIGNORE_SPACE = 1 << 8\nPROTOCOL_41 = 1 << 9\nINTERACTIVE = 1 << 10\nSSL = 1 << 11\nIGNORE_SIGPIPE = 1 << 12\nTRANSACTIONS = 1 << 13\nSECURE_CONNECTION = 1 << 15\nMULTI_STATEMENTS = 1 << 16\nMULTI_RESULTS = 1 << 17\nPS_MULTI_RESULTS = 1 << 18\nPLUGIN_AUTH = 1 << 19\nCONNECT_ATTRS = 1 << 20\nPLUGIN_AUTH_LENENC_CLIENT_DATA = 1 << 21\nCAPABILITIES = (\n    LONG_PASSWORD\n    | LONG_FLAG\n    | PROTOCOL_41\n    | TRANSACTIONS\n    | SECURE_CONNECTION\n    | MULTI_RESULTS\n    | PLUGIN_AUTH\n    | PLUGIN_AUTH_LENENC_CLIENT_DATA\n    | CONNECT_ATTRS\n)\n\n# Not done yet\nHANDLE_EXPIRED_PASSWORDS = 1 << 22\nSESSION_TRACK = 1 << 23\nDEPRECATE_EOF = 1 << 24\n"
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\constants\\CLIENT.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/PyMySQL/PyMySQL/issues/607\nCONSTRAINT_FAILED = 4025\n"
    ],
    "file": "venv\\Lib\\site-packages\\pymysql\\constants\\ER.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.dabeaz.com)\n# Copyright (C) 2017\n# All rights reserved\n#\n# This module implements an ANSI-C style lexical preprocessor for PLY.\n# -----------------------------------------------------------------------------\nimport sys\n\n# Some Python 3 compatibility shims\nif sys.version_info.major < 3:\n    STRING_TYPES = (str, unicode)\nelse:\n    STRING_TYPES = str\n    xrange = range\n\n# -----------------------------------------------------------------------------\n# Default preprocessor lexer definitions.   These tokens are enough to get\n# a basic preprocessor working.   Other modules may import these if they want\n# -----------------------------------------------------------------------------\n\ntokens = (\n   "
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\ply\\cpp.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.dabeaz.com/ply)"
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\ply\\yacc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.gnu.org/software/bison/manual/html_node/Default-Reductions.html#Default-Reductions\n    def set_defaulted_states(self):\n        self.defaulted_states = {}\n        for state, actions in self.action.items():\n            rules = list(actions.values())\n            if len(rules) == 1 and rules[0] < 0:\n                self.defaulted_states[state] = rules[0]\n\n    def disable_defaulted_states(self):\n        self.defaulted_states = {}\n\n    def parse(self, input=None, lexer=None, debug=False, tracking=False, tokenfunc=None):\n        if debug or yaccdevel:\n            if isinstance(debug, int):\n                debug = PlyLogger(sys.stderr)\n            return self.parsedebug(input, lexer, debug, tracking, tokenfunc)\n        elif tracking:\n            return self.parseopt(input, lexer, debug, tracking, tokenfunc)\n        else:\n            return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\n\n\n    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    # parsedebug().\n    #\n    # This is the debugging enabled version of parse().  All changes made to the\n    # parsing engine should be made here.   Optimized versions of this function\n    # are automatically created by the ply/ygen.py script.  This script cuts out\n    # sections enclosed in markers such as this:\n    #\n    #      #--! DEBUG\n    #      statements\n    #      #--! DEBUG\n    #\n    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    def parsedebug(self, input=None, lexer=None, debug=False, tracking=False, tokenfunc=None):\n        #--! parsedebug-start\n        lookahead = None                         # Current lookahead symbol\n        lookaheadstack = []                      # Stack of lookahead symbols\n        actions = self.action                    # Local reference to action table (to avoid lookup on self.)\n        goto    = self.goto                      # Local reference to goto table (to avoid lookup on self.)\n        prod    = self.productions               # Local reference to production list (to avoid lookup on self.)\n        defaulted_states = self.defaulted_states # Local reference to defaulted states\n        pslice  = YaccProduction(None)           # Production object passed to grammar rules\n        errorcount = 0                           # Used during error recovery\n\n        #--! DEBUG\n        debug.info("
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\ply\\yacc.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "ezioup@alumni.uchicago.edu"
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\ply\\yacc.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "debug   = True"
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\ply\\yacc.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "dave@dabeaz.com"
    ],
    "file": "venv\\Lib\\site-packages\\pycparser\\ply\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/7296\n        key_parts[",
      "https://github.com/pypa/pip/pull/10564 is merged.\n                if origin.url != download_info.url:\n                    logger.warning(\n                        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\cache.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/4963\n                raise ConfigurationFileCouldNotBeLoaded(\n                    reason=f",
      "https://github.com/pypa/pip/issues/4893\n                raise ConfigurationFileCouldNotBeLoaded(error=error)\n        return parser\n\n    def _load_environment_vars(self) -> None:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\configuration.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pip.pypa.io/en/stable/topics/dependency-resolution/#handling-resolution-too-deep-errors"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\exceptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/7498.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\main.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://discuss.python.org/t/pip-without-setuptools-could-the-experience-be-improved/11810/9\n    # https://github.com/pypa/pip/issues/8559\n    elif use_pep517 is None:\n        use_pep517 = (\n            has_pyproject\n            or not importlib.util.find_spec("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\pyproject.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/7498.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue46342\n    def final(f):\n        ",
      "https://bugs.python.org/issue38834\n    # The standard library TypedDict in Python 3.9.0/1 does not honour the ",
      "https://bugs.python.org/issue42059\n    # The standard library TypedDict below Python 3.11 does not store runtime\n    # information about optional and required keys when using Required or NotRequired.\n    # Generic TypedDicts are also impossible using typing.TypedDict on Python <3.11.\n    # Aaaand on 3.12 we add __orig_bases__ to TypedDict\n    # to enable better runtime introspection.\n    # On 3.13 we deprecate some odd ways of creating TypedDicts.\n    # Also on 3.13, PEP 705 adds the ReadOnly[] qualifier.\n    # PEP 728 (still pending) makes more changes.\n    TypedDict = typing.TypedDict\n    _TypedDictMeta = typing._TypedDictMeta\n    is_typeddict = typing.is_typeddict\nelse:\n    # 3.10.0 and later\n    _TAKES_MODULE = ",
      "https://github.com/python/typing_extensions/issues/310\n        if not hints or isinstance(obj, type):\n            return\n        defaults = typing._get_defaults(obj)  # avoid accessing __annotations___\n        if not defaults:\n            return\n        original_hints = obj.__annotations__\n        for name, value in hints.items():\n            # Not a Union[..., None] or replacement conditions not fullfilled\n            if (not _could_be_inserted_optional(value)\n                or name not in defaults\n                or defaults[name] is not None\n            ):\n                continue\n            original_value = original_hints[name]\n            # value=NoneType should have caused a skip above but check for safety\n            if original_value is None:\n                original_value = _NoneType\n            # Forward reference\n            if isinstance(original_value, str):\n                if globalns is None:\n                    if isinstance(obj, _types.ModuleType):\n                        globalns = obj.__dict__\n                    else:\n                        nsobj = obj\n                        # Find globalns for the unwrapped object.\n                        while hasattr(nsobj, ",
      "https://github.com/python/cpython/blob/986a4e1b6fcae7fe7a1d0a26aea446107dd58dd2/Objects/genericaliasobject.c#L568-L582,\n        # so that we emulate the behaviour of `types.GenericAlias`\n        # on the latest versions of CPython\n        _ATTRIBUTE_DELEGATION_EXCLUSIONS = frozenset({\n            ",
      "https://docs.python.org/3/library/inspect.html#inspect.get_annotations\n\n        This backport adds the *format* argument introduced by PEP 649. The\n        three formats supported are:\n        * VALUE: the annotations are returned as-is. This is the default and\n          it is compatible with the behavior on previous Python versions.\n        * FORWARDREF: return annotations as-is if possible, but replace any\n          undefined names with ForwardRef objects. The implementation proposed by\n          PEP 649 relies on language changes that cannot be backported; the\n          typing-extensions implementation simply returns the same result as VALUE.\n        * STRING: return annotations as strings, in a format close to the original\n          source. Again, this behavior cannot be replicated directly in a backport.\n          As an approximation, typing-extensions retrieves the annotations under\n          VALUE semantics and then stringifies them.\n\n        The purpose of this backport is to allow users who would like to use\n        FORWARDREF or STRING semantics once PEP 649 is implemented, but who also\n        want to support earlier Python versions, to simply write:\n\n            typing_extensions.get_annotations(obj, format=Format.FORWARDREF)\n\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/kennethreitz/requests/pull/2567.\ndef vendored(modulename):\n    vendored_name = "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://tools.ietf.org/html/draft-ietf-httpbis-p4-conditional-26#section-4.1\n        #\n        # The server isn"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7234#section-5.2\n            ",
      "https://tools.ietf.org/html/rfc7231#section-6.4.2\n        #\n        # Client can try to refresh the value by repeating the request\n        # with cache busting headers as usual (ie no-cache).\n        if int(resp.status) in PERMANENT_REDIRECT_STATUSES:\n            msg = (\n                ",
      "https://tools.ietf.org/html/rfc7234#section-4.1:\n        # A Vary header field-value of "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/2/reference/expressions.html#atom-identifiers\n        fp = self.__getattribute__("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\filewrapper.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://tools.ietf.org/html/rfc7234#section-5.5.4 where we need\n        to explicitly say response is over 24 hours old.\n        ",
      "http://tools.ietf.org/html/rfc7234#section-4.2.2\n    to calculate a reasonable value.\n\n    Firefox also does something like this per\n    https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ\n    http://lxr.mozilla.org/mozilla-release/source/netwerk/protocol/http/nsHttpResponseHead.cpp#397\n    Unlike mozilla we limit this to 24-hr.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\heuristics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ\n    http://lxr.mozilla.org/mozilla-release/source/netwerk/protocol/http/nsHttpResponseHead.cpp#397\n    Unlike mozilla we limit this to 24-hr.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\heuristics.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "eric@ionrock.org"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://tools.ietf.org/html/rfc6125#section-6.4.3\n        ",
      "http://code.activestate.com/recipes/576693/ (r9)\n    # Backport of OrderedDict() class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.\n    # Passes Python2.7"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\compat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/reference/datamodel#object.__hash__\n    __hash__ = object.__hash__\n\n\nclass EggInfoDistribution(BaseInstalledDistribution):\n    ",
      "http://docs.python.org/reference/datamodel#object.__hash__\n    __hash__ = object.__hash__\n\n\nnew_dist_class = InstalledDistribution\nold_dist_class = EggInfoDistribution\n\n\nclass DependencyGraph(object):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://code.activestate.com/recipes/146306\n\n        parts = []\n        boundary = self.boundary\n        for k, values in fields:\n            if not isinstance(values, (list, tuple)):\n                values = [values]\n\n            for v in values:\n                parts.extend((\n                    b"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\index.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/pypi"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\index.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://, archives\n        from PyPI over those from other locations, wheel compatibility (if a\n        wheel) and then the archive name.\n        ",
      "http://peak.telecommunity.com/DevCenter/EasyInstall#package-index-api\n        scheme, netloc, path, _, _, _ = urlparse(url)\n        if scheme == "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\locators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/pypi",
      "https:// URLs over http://, archives\n        from PyPI over those from other locations, wheel compatibility (if a\n        wheel) and then the archive name.\n        ",
      "https://pypi.org/simple/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\locators.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/distutils/sourcedist.html#commands\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\manifest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0566/#id17\n_ATTR2FIELD = {name.lower().replace(",
      "https://www.python.org/dev/peps/pep-0566/#id17.\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.in-ulm.de/~mascheck/various/shebang/#length\n                  https://hg.mozilla.org/mozilla-central/file/tip/mach\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\scripts.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/12666.\n# When updating pip, we rename the old pip in place before installing the\n# new version. If we try to fetch a wrapper *after* that rename, the finder\n# machinery will be confused as the package is no longer available at the\n# location where it was imported from. So we load everything into memory in\n# advance.\n\nif os.name == ",
      "https://hg.mozilla.org/mozilla-central/file/tip/mach\n        ",
      "https://bitbucket.org/vinay.sajip/simple_launcher/\n\n        def _get_launcher(self, kind):\n            if struct.calcsize("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\scripts.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.0.0.0"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\scripts.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\n        index_counter = [0]\n        stack = []\n        lowlinks = {}\n        index = {}\n        result = []\n\n        graph = self._succs\n\n        def strongconnect(node):\n            # set the depth index for this node to the smallest unused index\n            index[node] = index_counter[0]\n            lowlinks[node] = index_counter[0]\n            index_counter[0] += 1\n            stack.append(node)\n\n            # Consider successors\n            try:\n                successors = graph[node]\n            except Exception:\n                successors = []\n            for successor in successors:\n                if successor not in lowlinks:\n                    # Successor has not yet been visited\n                    strongconnect(successor)\n                    lowlinks[node] = min(lowlinks[node], lowlinks[successor])\n                elif successor in stack:\n                    # the successor is in the stack and hence in the current\n                    # strongly connected component (SCC)\n                    lowlinks[node] = min(lowlinks[node], index[successor])\n\n            # If `node` is a root node, pop the stack and generate an SCC\n            if lowlinks[node] == index[node]:\n                connected_component = []\n\n                while True:\n                    successor = stack.pop()\n                    connected_component.append(successor)\n                    if successor == node:\n                        break\n                component = tuple(connected_component)\n                # storing the result\n                result.append(component)\n\n        for node in graph:\n            if node not in lowlinks:\n                strongconnect(node)\n\n        return result\n\n    @property\n    def dot(self):\n        result = [",
      "http://xyz link when it should be https://xyz),\n    # you can use the following handler class, which does not allow HTTP traffic.\n    #\n    # It works by inheriting from HTTPHandler - so build_opener won"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.red-dove.com/pypi/projects/",
      "https://docs.python.org/3/library/tarfile.html#extraction-filters\n        def extraction_filter(member, path):\n            ",
      "https://xyz),\n    # you can use the following handler class, which does not allow HTTP traffic.\n    #\n    # It works by inheriting from HTTPHandler - so build_opener won",
      "https://www.python.org/dev/peps/pep-0503/#normalized-names\n    return re.sub(",
      "https://upload.pypi.org/legacy/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/reference/datamodel#object.__hash__\n    def __hash__(self):\n        return hash(self._parts)\n\n    def __repr__(self):\n        return ",
      "http://docs.python.org/reference/datamodel#object.__hash__\n    def __hash__(self):\n        return hash(self.key) + hash(self._parts)\n\n    def __repr__(self):\n        return "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.2.3.4",
      "1.4.5.0",
      "1.4.5.0"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly\n    if imp:\n        return imp.load_dynamic(name, path)\n    else:\n        spec = importlib.util.spec_from_file_location(name, path)\n        module = importlib.util.module_from_spec(spec)\n        sys.modules[name] = module\n        spec.loader.exec_module(module)\n        return module\n\n\nclass Mounter(object):\n\n    def __init__(self):\n        self.impure_wheels = {}\n        self.libs = {}\n\n    def add(self, pathname, extensions):\n        self.impure_wheels[pathname] = extensions\n        self.libs.update(extensions)\n\n    def remove(self, pathname):\n        extensions = self.impure_wheels.pop(pathname)\n        for k, v in extensions:\n            if k in self.libs:\n                del self.libs[k]\n\n    def find_module(self, fullname, path=None):\n        if fullname in self.libs:\n            result = self\n        else:\n            result = None\n        return result\n\n    def load_module(self, fullname):\n        if fullname in sys.modules:\n            result = sys.modules[fullname]\n        else:\n            if fullname not in self.libs:\n                raise ImportError(",
      "https://github.com/pypa/wheel/issues/294\n        # https://github.com/pypa/wheel/issues/287\n        # https://github.com/pypa/wheel/pull/289\n        #\n        return arcname.endswith((",
      "https://www.thetopsites.net/article/53834422.shtml\n                        # So ... manually preserve permission bits as given in zinfo\n                        if os.name == "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ",
      "http://www.freedesktop.org/software/systemd/man/os-release.html>`_.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue1322>`_ for more information.\n",
      "https://github.com/python-distro/distro/issues/162\n            return {}\n\n    @staticmethod\n    def _parse_distro_release_content(line: str) -> Dict[str, str]:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0685/\n    # > When comparing extra names, tools MUST normalize the names being\n    # > compared using the semantics outlined in PEP 503 for names\n    if key == "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\markers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/pull/13475#pullrequestreview-1079784515\n    @property  # type: ignore[override]\n    def prereleases(self) -> bool:\n        # If there is an explicit prereleases set for this, then we"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.2.3.0"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/3383#issuecomment-173267692\n    has_ext = ",
      "https://developer.android.com/tools/releases/platforms>`__ to return. Defaults\n        to the current system",
      "https://developer.android.com/ndk/guides/abis>`__,\n        e.g. ``arm64_v8a``. Defaults to the current system"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\tags.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca\nELF header: https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_elffile.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://static.docs.arm.com/ihi0044/g/aaelf32.pdf\n    with _parse_elf(executable) as f:\n        return (\n            f is not None\n            and f.capacity == EIClass.C32\n            and f.encoding == EIData.Lsb\n            and f.machine == EMachine.Arm\n            and f.flags & EF_ARM_ABIMASK == EF_ARM_ABI_VER5\n            and f.flags & EF_ARM_ABI_FLOAT_HARD == EF_ARM_ABI_FLOAT_HARD\n        )\n\n\ndef _is_linux_i686(executable: str) -> bool:\n    with _parse_elf(executable) as f:\n        return (\n            f is not None\n            and f.capacity == EIClass.C32\n            and f.encoding == EIData.Lsb\n            and f.machine == EMachine.I386\n        )\n\n\ndef _have_compatible_abi(executable: str, archs: Sequence[str]) -> bool:\n    if ",
      "https://github.com/python/cpython/blob/fcf1d003bf4f0100c/Lib/platform.py#L175-L183\n    try:\n        # Should be a string like ",
      "https://sourceware.org/bugzilla/show_bug.cgi?id=24636\n    #\n    # Build a list of maximum glibc versions so that we can\n    # output the canonical list of all glibc from current_glibc\n    # down to too_old_glibc2, including all intermediary versions.\n    for glibc_major in range(current_glibc.major - 1, 1, -1):\n        glibc_minor = _LAST_GLIBC_MINOR[glibc_major]\n        glibc_max_list.append(_GLibCVersion(glibc_major, glibc_minor))\n    for arch in archs:\n        for glibc_max in glibc_max_list:\n            if glibc_max.major == too_old_glibc2.major:\n                min_minor = too_old_glibc2.minor\n            else:\n                # For other glibc major versions oldest supported is (x, 0).\n                min_minor = -1\n            for glibc_minor in range(glibc_max.minor, min_minor, -1):\n                glibc_version = _GLibCVersion(glibc_max.major, glibc_minor)\n                tag = "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_manylinux.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/packaging"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "donald@stufft.io"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/12243\n\n\n_T = TypeVar(",
      "https://github.com/python/typeshed/pull/11890\nclass _LoaderProtocol(Protocol):\n    def load_module(self, fullname: str, /) -> types.ModuleType: ...\n\n\nclass _ZipLoaderModule(Protocol):\n    __loader__: zipimport.zipimporter\n\n\n_PEP440_FALLBACK = re.compile(r",
      "https://setuptools.pypa.io/en/latest/pkg_resources.html#basic-resource-access\n\n        >>> warned = getfixture(",
      "https://setuptools.pypa.io/en/latest/references/",
      "https://github.com/python/mypy/issues/16261\n    # https://github.com/python/typeshed/issues/6347\n    @overload\n    def _normalize_cached(filename: StrPath) -> str: ...\n    @overload\n    def _normalize_cached(filename: BytesPath) -> bytes: ...\n    def _normalize_cached(filename: StrOrBytesPath) -> str | bytes: ...\nelse:\n\n    @functools.lru_cache(maxsize=None)\n    def _normalize_cached(filename):\n        return normalize_path(filename)\n\n\ndef _is_egg_path(path):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\foo/bar.txt"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://android.stackexchange.com/a/216132>`_.\n\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `version\n    <platformdirs.api.PlatformDirsABC.version>`, `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    ",
      "https://stackoverflow.com/a/61394121\n    if not TYPE_CHECKING:\n        try:\n            # First try to get a path to android app using python4android (if available)...\n            from android import mActivity  # noqa: PLC0415\n\n            context = cast("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>`_).\n\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`,\n    `version <platformdirs.api.PlatformDirsABC.version>`,\n    `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    ",
      "https://brew.sh>`_, the directory\n          will be under the Homebrew prefix, e.g. ``/opt/homebrew/share/$appname/$version``.\n          If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we",
      "https://brew.sh>`_, the directory\n          will be under the Homebrew prefix, e.g. ``/opt/homebrew/var/cache/$appname/$version``.\n          If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://specifications.freedesktop.org/basedir-spec/basedir-spec-\n    latest.html>`_.\n\n    The spec allows overriding directories with environment variables. The examples shown are the default values,\n    alongside the name of the environment variable that overrides them. Makes use of the `appname\n    <platformdirs.api.PlatformDirsABC.appname>`, `version <platformdirs.api.PlatformDirsABC.version>`, `multipath\n    <platformdirs.api.PlatformDirsABC.multipath>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n    <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    ",
      "https://freedesktop.org/wiki/Software/xdg-user-dirs/.\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid>`_.\n\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `appauthor\n    <platformdirs.api.PlatformDirsABC.appauthor>`, `version <platformdirs.api.PlatformDirsABC.version>`, `roaming\n    <platformdirs.api.PlatformDirsABC.roaming>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n    <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    ",
      "https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid\n\n    import ctypes  # noqa: PLC0415\n\n    csidl_const = {\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\ProgramData\\\\$appauthor\\\\$appname``",
      "C:\\\\ProgramData\\\\$appauthor\\\\$appname\\\\Cache\\\\$version``"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/platformdirs/platformdirs> for details and usage.\n\n",
      "https://github.com/python/mypy/issues/10962\n    PlatformDirs = _Result\nelse:\n    PlatformDirs = _set_platform_dir_class()  #: Currently active platform\nAppDirs = PlatformDirs  #: Backwards compatibility with appdirs\n\n\ndef user_data_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    roaming: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://chardet.feedparser.org/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.unicode.org/book/ch03.pdf\n    return (0xd7c0 + (c >> 10), (0xdc00 + (c & 0x3ff)))\n\n\ndef format_lines(var_name, seq, raw=False, indent_level=0):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\util.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\Python2.4\\\\Python.exe"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pygments/pygments/archive/master.zip#egg=Pygments-dev\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/pull/6710 for more details."
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\adapters.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpbin.org/get"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/3772\n        if not 400 <= r.status_code < 500:\n            self._thread_local.num_401_calls = 1\n            return r\n\n        if self._thread_local.pos is not None:\n            # Rewind the file position indicator of the body to where\n            # it was to resend the request.\n            r.request.body.seek(self._thread_local.pos)\n        s_auth = r.headers.get("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\auth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/3578.\nimport encodings.idna  # noqa: F401\nfrom io import UnsupportedOperation\n\nfrom pip._vendor.urllib3.exceptions import (\n    DecodeError,\n    LocationParseError,\n    ProtocolError,\n    ReadTimeoutError,\n    SSLError,\n)\nfrom pip._vendor.urllib3.fields import RequestField\nfrom pip._vendor.urllib3.filepost import encode_multipart_formdata\nfrom pip._vendor.urllib3.util import parse_url\n\nfrom ._internal_utils import to_native_string, unicode_is_ascii\nfrom .auth import HTTPBasicAuth\nfrom .compat import (\n    Callable,\n    JSONDecodeError,\n    Mapping,\n    basestring,\n    builtin_str,\n    chardet,\n    cookielib,\n)\nfrom .compat import json as complexjson\nfrom .compat import urlencode, urlsplit, urlunparse\nfrom .cookies import _copy_cookie_jar, cookiejar_from_dict, get_cookie_header\nfrom .exceptions import (\n    ChunkedEncodingError,\n    ConnectionError,\n    ContentDecodingError,\n    HTTPError,\n    InvalidJSONError,\n    InvalidURL,\n)\nfrom .exceptions import JSONDecodeError as RequestsJSONDecodeError\nfrom .exceptions import MissingSchema\nfrom .exceptions import SSLError as RequestsSSLError\nfrom .exceptions import StreamConsumedError\nfrom .hooks import default_hooks\nfrom .status_codes import codes\nfrom .structures import CaseInsensitiveDict\nfrom .utils import (\n    check_header_validity,\n    get_auth_from_url,\n    guess_filename,\n    guess_json_utf,\n    iter_slices,\n    parse_header_links,\n    requote_uri,\n    stream_decode_response_unicode,\n    super_len,\n    to_key_val_list,\n)\n\n#: The set of HTTP status codes that indicate an automatically\n#: processable redirect.\nREDIRECT_STATI = (\n    codes.moved,  # 301\n    codes.found,  # 302\n    codes.other,  # 303\n    codes.temporary_redirect,  # 307\n    codes.permanent_redirect,  # 308\n)\n\nDEFAULT_REDIRECT_LIMIT = 30\nCONTENT_CHUNK_SIZE = 10 * 1024\nITER_CHUNK_SIZE = 512\n\n\nclass RequestEncodingMixin:\n    @property\n    def path_url(self):\n        ",
      "https://httpbin.org/get",
      "https://httpbin.org/get",
      "https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(",
      "https://{url}?"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://domain.tld/path/to/resource",
      "http://host.name"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\sessions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/1084\n            if resp.status_code not in (\n                codes.temporary_redirect,\n                codes.permanent_redirect,\n            ):\n                # https://github.com/psf/requests/issues/3490\n                purged_headers = (",
      "https://tools.ietf.org/html/rfc7231#section-6.4.4\n        if response.status_code == codes.see_other and method != ",
      "https://httpbin.org/get",
      "https://httpbin.org/get"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\sessions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://.../back.jpeg>; rel=back;type="
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue20164 &\n                # https://github.com/psf/requests/issues/1846\n                return\n\n            if os.path.exists(loc):\n                netrc_path = loc\n                break\n\n        # Abort early if there isn",
      "https://www.ietf.org/rfc/rfc4627.txt since the charset was unset\n        return "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\foo\\bar.txt"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.1.1",
      "192.168.1.0",
      "192.168.1.1",
      "192.168.100.0",
      "255.255.255.0"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org",
      "https://httpbin.org/post",
      "https://requests.readthedocs.io>.\n\n:copyright: (c) 2017 by Kenneth Reitz.\n:license: Apache 2.0, see LICENSE for more details.\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://requests.readthedocs.io"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__version__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "me@kennethreitz.org"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__version__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://force-color.org/\n        force_color = environ.get(",
      "https://docs.python.org/3/library/signal.html#note-on-sigpipe for details.\n        ",
      "https://bugs.python.org/issue37871\n                            # https://github.com/python/cpython/issues/82052\n                            # We need to avoid writing more than 32Kb in a single write, due to the above bug\n                            write = self.file.write\n                            # Worse case scenario, every character is 4 bytes of utf-8\n                            MAX_WRITE = 32 * 1024 // 4\n                            try:\n                                if len(text) <= MAX_WRITE:\n                                    write(text)\n                                else:\n                                    batch: List[str] = []\n                                    batch_append = batch.append\n                                    size = 0\n                                    for line in text.splitlines(True):\n                                        if size + len(line) > MAX_WRITE and batch:\n                                            write("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/PyFilesystem/pyfilesystem2\n\nThe functions declared in this module should cover the different\nuse cases needed to generate a string representation of a file size\nusing several different units. Since there are many standards regarding\nfile size units, three different functions have been implemented.\n\nSee Also:\n    * `Wikipedia: Binary prefix <https://en.wikipedia.org/wiki/Binary_prefix>`_\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\filesize.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html\n    ",
      "https://example.org?foo=bar#header"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\highlighter.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.1.1",
      "192.168.1.4"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\highlighter.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:8080"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\logging.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:8080"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\logging.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\logging.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.willmcgugan.com]here[/link] to visit my Blog"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\markup.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tqdm/tqdm/blob/master/tqdm/std.py\n        minutes, seconds = divmod(int(task_time), 60)\n        hours, minutes = divmod(minutes, 60)\n\n        if self.compact and not hours:\n            formatted = f"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pygments/pygments/blob/master/pygments/formatters/terminal.py\n# A few modifications were made\n\nANSI_LIGHT: Dict[TokenType, Style] = {\n    Token: Style(),\n    Whitespace: Style(color=",
      "https://pygments.org/docs/lexers/)\n        theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to ",
      "https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german",
      "german"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_emoji_codes.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/2000/svg"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_export_format.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.textualize.io -->\n    <style>\n\n    @font-face {{\n        font-family: ",
      "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2",
      "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff",
      "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2",
      "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_export_format.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/ANSI_escape_code (Windows 10 column)\nWINDOWS_PALETTE = Palette(\n    [\n        (12, 12, 12),\n        (197, 15, 31),\n        (19, 161, 14),\n        (193, 156, 0),\n        (0, 55, 218),\n        (136, 23, 152),\n        (58, 150, 221),\n        (204, 204, 204),\n        (118, 118, 118),\n        (231, 72, 86),\n        (22, 198, 12),\n        (249, 241, 165),\n        (59, 120, 255),\n        (180, 0, 158),\n        (97, 214, 214),\n        (242, 242, 242),\n    ]\n)\n\n# # The standard ansi colors (including bright variants)\nSTANDARD_PALETTE = Palette(\n    [\n        (0, 0, 0),\n        (170, 0, 0),\n        (0, 170, 0),\n        (170, 85, 0),\n        (0, 0, 170),\n        (170, 0, 170),\n        (0, 170, 170),\n        (170, 170, 170),\n        (85, 85, 85),\n        (255, 85, 85),\n        (85, 255, 85),\n        (255, 255, 85),\n        (85, 85, 255),\n        (255, 85, 255),\n        (85, 255, 255),\n        (255, 255, 255),\n    ]\n)\n\n\n# The 256 color palette\nEIGHT_BIT_PALETTE = Palette(\n    [\n        (0, 0, 0),\n        (128, 0, 0),\n        (0, 128, 0),\n        (128, 128, 0),\n        (0, 0, 128),\n        (128, 0, 128),\n        (0, 128, 128),\n        (192, 192, 192),\n        (128, 128, 128),\n        (255, 0, 0),\n        (0, 255, 0),\n        (255, 255, 0),\n        (0, 0, 255),\n        (255, 0, 255),\n        (0, 255, 255),\n        (255, 255, 255),\n        (0, 0, 0),\n        (0, 0, 95),\n        (0, 0, 135),\n        (0, 0, 175),\n        (0, 0, 215),\n        (0, 0, 255),\n        (0, 95, 0),\n        (0, 95, 95),\n        (0, 95, 135),\n        (0, 95, 175),\n        (0, 95, 215),\n        (0, 95, 255),\n        (0, 135, 0),\n        (0, 135, 95),\n        (0, 135, 135),\n        (0, 135, 175),\n        (0, 135, 215),\n        (0, 135, 255),\n        (0, 175, 0),\n        (0, 175, 95),\n        (0, 175, 135),\n        (0, 175, 175),\n        (0, 175, 215),\n        (0, 175, 255),\n        (0, 215, 0),\n        (0, 215, 95),\n        (0, 215, 135),\n        (0, 215, 175),\n        (0, 215, 215),\n        (0, 215, 255),\n        (0, 255, 0),\n        (0, 255, 95),\n        (0, 255, 135),\n        (0, 255, 175),\n        (0, 255, 215),\n        (0, 255, 255),\n        (95, 0, 0),\n        (95, 0, 95),\n        (95, 0, 135),\n        (95, 0, 175),\n        (95, 0, 215),\n        (95, 0, 255),\n        (95, 95, 0),\n        (95, 95, 95),\n        (95, 95, 135),\n        (95, 95, 175),\n        (95, 95, 215),\n        (95, 95, 255),\n        (95, 135, 0),\n        (95, 135, 95),\n        (95, 135, 135),\n        (95, 135, 175),\n        (95, 135, 215),\n        (95, 135, 255),\n        (95, 175, 0),\n        (95, 175, 95),\n        (95, 175, 135),\n        (95, 175, 175),\n        (95, 175, 215),\n        (95, 175, 255),\n        (95, 215, 0),\n        (95, 215, 95),\n        (95, 215, 135),\n        (95, 215, 175),\n        (95, 215, 215),\n        (95, 215, 255),\n        (95, 255, 0),\n        (95, 255, 95),\n        (95, 255, 135),\n        (95, 255, 175),\n        (95, 255, 215),\n        (95, 255, 255),\n        (135, 0, 0),\n        (135, 0, 95),\n        (135, 0, 135),\n        (135, 0, 175),\n        (135, 0, 215),\n        (135, 0, 255),\n        (135, 95, 0),\n        (135, 95, 95),\n        (135, 95, 135),\n        (135, 95, 175),\n        (135, 95, 215),\n        (135, 95, 255),\n        (135, 135, 0),\n        (135, 135, 95),\n        (135, 135, 135),\n        (135, 135, 175),\n        (135, 135, 215),\n        (135, 135, 255),\n        (135, 175, 0),\n        (135, 175, 95),\n        (135, 175, 135),\n        (135, 175, 175),\n        (135, 175, 215),\n        (135, 175, 255),\n        (135, 215, 0),\n        (135, 215, 95),\n        (135, 215, 135),\n        (135, 215, 175),\n        (135, 215, 215),\n        (135, 215, 255),\n        (135, 255, 0),\n        (135, 255, 95),\n        (135, 255, 135),\n        (135, 255, 175),\n        (135, 255, 215),\n        (135, 255, 255),\n        (175, 0, 0),\n        (175, 0, 95),\n        (175, 0, 135),\n        (175, 0, 175),\n        (175, 0, 215),\n        (175, 0, 255),\n        (175, 95, 0),\n        (175, 95, 95),\n        (175, 95, 135),\n        (175, 95, 175),\n        (175, 95, 215),\n        (175, 95, 255),\n        (175, 135, 0),\n        (175, 135, 95),\n        (175, 135, 135),\n        (175, 135, 175),\n        (175, 135, 215),\n        (175, 135, 255),\n        (175, 175, 0),\n        (175, 175, 95),\n        (175, 175, 135),\n        (175, 175, 175),\n        (175, 175, 215),\n        (175, 175, 255),\n        (175, 215, 0),\n        (175, 215, 95),\n        (175, 215, 135),\n        (175, 215, 175),\n        (175, 215, 215),\n        (175, 215, 255),\n        (175, 255, 0),\n        (175, 255, 95),\n        (175, 255, 135),\n        (175, 255, 175),\n        (175, 255, 215),\n        (175, 255, 255),\n        (215, 0, 0),\n        (215, 0, 95),\n        (215, 0, 135),\n        (215, 0, 175),\n        (215, 0, 215),\n        (215, 0, 255),\n        (215, 95, 0),\n        (215, 95, 95),\n        (215, 95, 135),\n        (215, 95, 175),\n        (215, 95, 215),\n        (215, 95, 255),\n        (215, 135, 0),\n        (215, 135, 95),\n        (215, 135, 135),\n        (215, 135, 175),\n        (215, 135, 215),\n        (215, 135, 255),\n        (215, 175, 0),\n        (215, 175, 95),\n        (215, 175, 135),\n        (215, 175, 175),\n        (215, 175, 215),\n        (215, 175, 255),\n        (215, 215, 0),\n        (215, 215, 95),\n        (215, 215, 135),\n        (215, 215, 175),\n        (215, 215, 215),\n        (215, 215, 255),\n        (215, 255, 0),\n        (215, 255, 95),\n        (215, 255, 135),\n        (215, 255, 175),\n        (215, 255, 215),\n        (215, 255, 255),\n        (255, 0, 0),\n        (255, 0, 95),\n        (255, 0, 135),\n        (255, 0, 175),\n        (255, 0, 215),\n        (255, 0, 255),\n        (255, 95, 0),\n        (255, 95, 95),\n        (255, 95, 135),\n        (255, 95, 175),\n        (255, 95, 215),\n        (255, 95, 255),\n        (255, 135, 0),\n        (255, 135, 95),\n        (255, 135, 135),\n        (255, 135, 175),\n        (255, 135, 215),\n        (255, 135, 255),\n        (255, 175, 0),\n        (255, 175, 95),\n        (255, 175, 135),\n        (255, 175, 175),\n        (255, 175, 215),\n        (255, 175, 255),\n        (255, 215, 0),\n        (255, 215, 95),\n        (255, 215, 135),\n        (255, 215, 175),\n        (255, 215, 215),\n        (255, 215, 255),\n        (255, 255, 0),\n        (255, 255, 95),\n        (255, 255, 135),\n        (255, 255, 175),\n        (255, 255, 215),\n        (255, 255, 255),\n        (8, 8, 8),\n        (18, 18, 18),\n        (28, 28, 28),\n        (38, 38, 38),\n        (48, 48, 48),\n        (58, 58, 58),\n        (68, 68, 68),\n        (78, 78, 78),\n        (88, 88, 88),\n        (98, 98, 98),\n        (108, 108, 108),\n        (118, 118, 118),\n        (128, 128, 128),\n        (138, 138, 138),\n        (148, 148, 148),\n        (158, 158, 158),\n        (168, 168, 168),\n        (178, 178, 178),\n        (188, 188, 188),\n        (198, 198, 198),\n        (208, 208, 208),\n        (218, 218, 218),\n        (228, 228, 228),\n        (238, 238, 238),\n    ]\n)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_palettes.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "sindresorhus@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_spinners.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.microsoft.com/en-us/windows/console/console-functions\n",
      "https://docs.microsoft.com/en-us/windows/console/getconsolemode#parameters\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_win32_console.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/textualize]https://github.com/textualize",
      "https://twitter.com/willmcgugan]https://twitter.com/willmcgugan",
      "https://www.textualize.io]Textualize.io[/]\n\n- Will McGugan"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\__main__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://mypyc.readthedocs.io/en/latest/differences_from_python.html#stack-overflows\n# Before mypyc"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\tomli\\_parser.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/pull/6667\n    try:\n        from pip._vendor.requests import adapters as requests_adapters\n\n        preloaded_context = getattr(requests_adapters, "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/xybp888/iOS-SDKs/blob/master/iPhoneOS13.0.sdk/System/Library/Frameworks/Security.framework/Headers/SecTrust.h#L84\n    if (\n        ssl_context.verify_mode == ssl.CERT_REQUIRED\n        and sec_trust_result_type_as_int not in (1, 4)\n    ):\n        # Note that we"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_macos.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tiran/certifi-system-store by Christian Heimes\n_CA_FILE_CANDIDATES = [\n    # Alpine, Arch, Fedora 34+, OpenWRT, RHEL 9+, BSD\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_openssl.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.3.6.1",
      "5.5.7.3"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_windows.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/497 ",
      "https://github.com/urllib3/urllib3/issues/497 "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://hg.python.org/cpython/file/7aaba721ebc0/Lib/socket.py#l252\n_blocking_errnos = {errno.EAGAIN, errno.EWOULDBLOCK}\n\n\nclass HTTPConnectionPool(ConnectionPool, RequestMethods):\n    ",
      "http://bugs.python.org/issue10272\n        if ",
      "http://proxy",
      "http://google.com/",
      "http://bugs.python.org/issue28539\n    if host.startswith("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connectionpool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            if e.errno not in {\n                errno.EPIPE,\n                errno.ESHUTDOWN,\n                errno.EPROTOTYPE,\n                errno.ECONNRESET,\n            }:\n                raise\n\n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n\n        # App Engine doesn",
      "https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n\n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n\n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else",
      "https://proxy",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connectionpool.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:8080"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\exceptions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http:// or https://",
      "http:// or https://"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\exceptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc2388#section-4.4>`_.\n\n    :param name:\n        The name of the parameter, a string expected to be ASCII only.\n    :param value:\n        The value of the parameter, provided as ``bytes`` or `str``.\n    :ret:\n        An RFC-2231-formatted unicode string.\n    ",
      "https://w3c.github.io/html/sec-forms.html#multipart-form-data\n\n    :param name:\n        The name of the parameter, a string expected to be ASCII only.\n    :param value:\n        The value of the parameter, provided as ``bytes`` or `str``.\n    :ret:\n        A unicode string, stripped of troublesome characters.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\fields.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "4.10.22.7",
      "4.10.22.7"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\fields.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:3128"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://google.com/",
      "http://google.com/mail",
      "http://yahoo.com/",
      "http://localhost:3128/",
      "http://google.com/",
      "http://httpbin.org/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpbin.org/",
      "https://twitter.com/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://urllib3.readthedocs.io/en/stable/v2-migration-guide.html"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\request.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue16298) do\n                    # not properly close the connection in all cases. There is\n                    # no harm in redundantly calling close.\n                    self._fp.close()\n                    flush_decoder = True\n                    if self.enforce_content_length and self.length_remaining not in (\n                        0,\n                        None,\n                    ):\n                        # This is an edge case that httplib failed to cover due\n                        # to concerns of backward compatibility. We"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/2513#issuecomment-1152559900.\n          * urllib3 injected with pyOpenSSL-backed SSL-support.\n          * CPython < 3.10 only when `amt` does not fit 32-bit int.\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/2680\ntry:\n    import urllib3_secure_extra  # type: ignore # noqa: F401\nexcept ImportError:\n    pass\nelse:\n    warnings.warn(\n        ",
      "https://github.com/urllib3/urllib3/issues/2680"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "andrey.petrov@shazow.net"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cloud.google.com/appengine/docs/python/urlfetch>`_.\n\nExample usage::\n\n    from pip._vendor.urllib3 import PoolManager\n    from pip._vendor.urllib3.contrib.appengine import AppEngineManager, is_appengine_sandbox\n\n    if is_appengine_sandbox():\n        # AppEngineManager uses AppEngine",
      "https://google.com/",
      "https://cloud.google.com/appengine/docs/python/\\\nurlfetch/#Python_Quotas_and_limits>`_ to the URLFetch service and it may not be\nthe best choice for your application. There are three options for using\nurllib3 on Google App Engine:\n\n1. You can use :class:`AppEngineManager` with URLFetch. URLFetch is\n   cost-effective in many circumstances as long as your usage is within the\n   limitations.\n2. You can use a normal :class:`~urllib3.PoolManager` by enabling sockets.\n   Sockets also have `limitations and restrictions\n   <https://cloud.google.com/appengine/docs/python/sockets/\\\n   #limitations-and-restrictions>`_ and have a lower free quota than URLFetch.\n   To use sockets, be sure to specify the following in your ``app.yaml``::\n\n        env_variables:\n            GAE_USE_SOCKETS_HTTPLIB : ",
      "https://cloud.google.com/appengine/docs/flexible/>`_, you can use the standard\n:class:`PoolManager` without any configuration or special environment variables.\n",
      "https://cloud.google.com/appengine/docs/python/urlfetch>`_.\n\n    Notably it will raise an :class:`AppEnginePlatformError` if:\n        * URLFetch is not available.\n        * If you attempt to use this on App Engine Flexible, as full socket\n          support is available.\n        * If a request size is more than 10 megabytes.\n        * If a response size is more than 32 megabytes.\n        * If you use an unsupported request method such as OPTIONS.\n\n    Beyond those cases, it will raise normal urllib3 errors.\n    ",
      "https://urllib3.readthedocs.io/en/1.26.x/reference/urllib3.contrib.html."
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\appengine.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://code.google.com/p/urllib3/issues/detail?id=10\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\ntlmpool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/2282. ",
      "https://%s%s"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\ntlmpool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Server_Name_Indication\n.. _crime attack: https://en.wikipedia.org/wiki/CRIME_(security_exploit)\n.. _pyopenssl: https://www.pyopenssl.org\n.. _cryptography: https://cryptography.io\n.. _idna: https://github.com/kjd/idna\n",
      "https://github.com/urllib3/urllib3/issues/2680"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "will@wbond.net"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://urllib3.readthedocs.io/en/1.26.x/contrib.html#socks-proxies"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\socks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cloud.google.com/appengine/docs/standard/runtimes\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_appengine_environ.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "benjamin@python.org"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\six.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/1446\n    if _appengine_environ.is_appengine_sandbox():\n        return False\n\n    if socket.has_ipv6:\n        # has_ipv6 returns true if cPython was compiled with IPv6 support.\n        # It does not tell us if the system has IPv6 support enabled. To\n        # determine that we must bind to an IPv6 address.\n        # https://github.com/urllib3/urllib3/pull/611\n        # https://bugs.python.org/issue658327\n        try:\n            sock = socket.socket(socket.AF_INET6)\n            sock.bind((host, 0))\n            has_ipv6 = True\n        except Exception:\n            pass\n\n    if sock:\n        sock.close()\n    return has_ipv6\n\n\nHAS_IPV6 = _has_ipv6("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\connection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/800\n\n        # So we ignore the following defects:\n        # - StartBoundaryNotFoundDefect:\n        #     The claimed start boundary was never found.\n        # - MultipartInvariantViolationDefect:\n        #     A message claimed to be a multipart but no subparts were found.\n        defects = [\n            defect\n            for defect in defects\n            if not isinstance(\n                defect, (StartBoundaryNotFoundDefect, MultipartInvariantViolationDefect)\n            )\n        ]\n\n    if defects or unparsed_data:\n        raise HeaderParsingError(defects=defects, unparsed_data=unparsed_data)\n\n\ndef is_response_to_head(response):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\response.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/",
      "http://example.com/",
      "http://example.com/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7230#section-3.2.4\n        if re.match(r"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://wiki.mozilla.org/Security/Server_Side_TLS\n# - https://www.ssllabs.com/projects/best-practices/index.html\n# - https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/\n#\n# The general intent is:\n# - prefer cipher suites that offer perfect forward secrecy (DHE/ECDHE),\n# - prefer ECDHE over DHE for better performance,\n# - prefer any AES-GCM and ChaCha20 over any AES-CBC for better performance and\n#   security,\n# - prefer AES-GCM over ChaCha20 because hardware-accelerated AES is common,\n# - disable NULL authentication, MD5 MACs, DSS, and other\n#   insecure ciphers for security reasons.\n# - NOTE: TLS 1.3 cipher suites are managed through a different interface\n#   not exposed by CPython (yet!) and are enabled by default if they",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html",
      "https://bugs.python.org/issue37428\n    if (cert_reqs == ssl.CERT_REQUIRED or sys.version_info >= (3, 7, 4)) and getattr(\n        context, ",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/3/license.html\n\nimport re\nimport sys\n\n# ipaddress has been backported to 2.6+ in pypi.  If it is installed on the\n# system, use it to handle IPAddress ServerAltnames (this was added in\n# python-3.5) otherwise only do DNS matching.  This allows\n# util.ssl_match_hostname to continue to be used in Python 2.7.\ntry:\n    import ipaddress\nexcept ImportError:\n    ipaddress = None\n\n__version__ = ",
      "http://tools.ietf.org/html/rfc6125#section-6.4.3\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_match_hostname.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "3.5.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_match_hostname.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/",
      "http://example.com/",
      "http://example.com/, timeout=no_timeout)\n\n\n    :param total:\n        This combines the connect and read timeouts into one; the read timeout\n        will be set to the time leftover from the connect attempt. In the\n        event that both a connect timeout and a total are specified, or a read\n        timeout and a total are specified, the shorter timeout will be applied.\n\n        Defaults to None.\n\n    :type total: int, float, or None\n\n    :param connect:\n        The maximum amount of time (in seconds) to wait for a connection\n        attempt to a server to succeed. Omitting the parameter will default the\n        connect timeout to the system default, probably `the global default\n        timeout in socket.py\n        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n        None will set an infinite timeout for connection attempts.\n\n    :type connect: int, float, or None\n\n    :param read:\n        The maximum amount of time (in seconds) to wait between consecutive\n        read operations for a response from the server. Omitting the parameter\n        will default the read timeout to the system default, probably `the\n        global default timeout in socket.py\n        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n        None will set an infinite timeout.\n\n    :type read: int, float, or None\n\n    .. note::\n\n        Many factors can affect the total amount of time for urllib3 to return\n        an HTTP response.\n\n        For example, Python"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://google.com/mail/",
      "http://google.com/mail/",
      "http://username:password@host.com:80/path?query#fragment",
      "http://tools.ietf.org/html/rfc3986#section-5.2.4 for pseudo-code\n    segments = path.split(",
      "http://google.com/mail/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-hyper/rfc3986\nPERCENT_RE = re.compile(r"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "password@host.com"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://developer.apple.com/documentation/security/1550981-ssl_cipher_suite_values\n    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0xC02C\n    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0xC030\n    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0xC02B\n    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0xC02F\n    TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 0xCCA9\n    TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 0xCCA8\n    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 0x009F\n    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 0x009E\n    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 0xC024\n    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 0xC028\n    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0xC00A\n    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0xC014\n    TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 0x006B\n    TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 0x0039\n    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 0xC023\n    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 0xC027\n    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0xC009\n    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0xC013\n    TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 0x0067\n    TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 0x0033\n    TLS_RSA_WITH_AES_256_GCM_SHA384 = 0x009D\n    TLS_RSA_WITH_AES_128_GCM_SHA256 = 0x009C\n    TLS_RSA_WITH_AES_256_CBC_SHA256 = 0x003D\n    TLS_RSA_WITH_AES_128_CBC_SHA256 = 0x003C\n    TLS_RSA_WITH_AES_256_CBC_SHA = 0x0035\n    TLS_RSA_WITH_AES_128_CBC_SHA = 0x002F\n    TLS_AES_128_GCM_SHA256 = 0x1301\n    TLS_AES_256_GCM_SHA384 = 0x1302\n    TLS_AES_128_CCM_8_SHA256 = 0x1305\n    TLS_AES_128_CCM_SHA256 = 0x1304\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\bindings.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "will@wbond.net"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\bindings.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://pyos.github.io/dg"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\python.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org",
      "https://bugs.python.org/issue36817)\n             r",
      "https://bugs.python.org/issue36817)\n             r",
      "https://docs.python.org/3/reference/expressions.html\n            (words((\n                ",
      "https://www.python.org",
      "https://python.org",
      "https://python.org",
      "https://www.python.org/dev/peps/pep-0657/>`\n            # error locations in Python 3.11+, or single-caret markers\n            # for syntax errors before that.\n            (r",
      "https://python.org",
      "https://cython.org",
      "https://numpy.org/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\python.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/hatch/blob/5352e44/backend/src/hatchling/licenses/parse.py\n#\n# MIT License\n#\n# Copyright (c) 2017-present Ofek Lev <oss@ofek.dev>\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this\n# software and associated documentation files (the "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\licenses\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "oss@ofek.dev"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\licenses\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/ionrock/cachecontrol/issues/63\n        hashed = self.encode(name)\n        parts = list(hashed[:5]) + [hashed]\n        return os.path.join(self.directory, *parts)\n\n    def get(self, key: str) -> bytes | None:\n        name = self._fn(key)\n        try:\n            with open(name, "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\file_cache.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/7696 kicks in\n            assert self._session is not None\n        return self._session\n\n    def _build_session(\n        self,\n        options: Values,\n        retries: Optional[int] = None,\n        timeout: Optional[int] = None,\n    ) -> "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\index_command.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pip.pypa.io/en/stable/user_guide/#using-pip-from-your-program.\n# That document also provides suggestions that should work for nearly\n# all users that are considering importing and using main() directly.\n\n# However, we know that certain users will still want to invoke pip\n# in-process. If you understand and accept the implications of using pip\n# in an unsupported manner, the best approach is to use runpy to avoid\n# depending on the exact location of this entry point.\n\n# The following example shows how to use runpy to invoke pip in that\n# case:\n#\n#     sys.argv = ["
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\main.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/3418\n    elif not file.isatty() or logger.getEffectiveLevel() > logging.INFO:\n        yield\n    else:\n        file.write(HIDE_CURSOR)\n        try:\n            yield\n        finally:\n            file.write(SHOW_CURSOR)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\spinners.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0427/\n        pattern = pattern + ("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\commands\\cache.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.org/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\commands\\configuration.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/new",
      "https://pip.pypa.io/warnings/enable-long-paths\\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\commands\\install.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://wheel.readthedocs.io/en/latest/\n\n    ",
      "https://pip.pypa.io/en/stable/reference/build-system/\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\commands\\wheel.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/8761 for the original discussion and\n# rationale for why this is done within pip.\ntry:\n    __import__(",
      "https://docs.python.org/3/install/index.html#alternate-installation\n\n    :param dist_name: the name of the package to retrieve the scheme for, used\n        in the headers scheme path\n    :param user: indicates to use the "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\_distutils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/10647\n\n    This is a function for testability, but should be constant during any one\n    run.\n    ",
      "https://bugs.python.org/issue44860>.\n    ",
      "https://github.com/pypa/pip/issues/10151",
      "https://github.com/python/cpython/blob/8c21941ddaf/Lib/sysconfig.py#L178-L194\n        skip_cpython_build = (\n            sysconfig.is_python_build(check_home=True)\n            and not WINDOWS\n            and k in (",
      "https://github.com/Homebrew/homebrew-core/issues/76621"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/10243)\n                return self.location\n        return None\n\n    @property\n    def installed_location(self) -> Optional[str]:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pfmoore/pkg_metadata\n\nfrom email.header import Header, decode_header, make_header\nfrom email.message import Message\nfrom typing import Any, Dict, List, Union, cast\n\nMETADATA_FIELDS = [\n    # Name, Multiple-Use\n    ("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\_json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/",
      "https://test.pypi.org/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\index.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0376/#requested\n            ",
      "https://www.python.org/dev/peps/pep-0566/#json-compatible-metadata\n            ",
      "https://peps.python.org/pep-0508/#environment-markers\n            # TODO: currently, the resolver uses the default environment to evaluate\n            # environment markers, so that is what we report here. In the future, it\n            # should also take into account options such as --python-version or\n            # --platform, perhaps under the form of an environment_override field?\n            # https://github.com/pypa/pip/issues/11198\n            "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\installation_report.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/install/index.html#alternate-installation.\n"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\scheme.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/jaraco/keyring/blob/97689324abcf01bd1793d49063e7ca01e03d7d07/keyring/backend.py#L134-L139\n        if username is not None:\n            password = self._get_password(url, username)\n            if password is not None:\n                return username, password\n        return None\n\n    def save_auth_info(self, url: str, username: str, password: str) -> None:\n        return self._set_password(url, username, password)\n\n    def _get_password(self, service_name: str, username: str) -> Optional[str]:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/cachecontrol/issues/324).  We therefore have\n    additional logic that makes sure that both files to be present before\n    returning an entry; this fixes the read side of the race condition.\n\n    For the write side, we assume that the server will only ever return the\n    same data for the same URL, which ought to be the case for files pip is\n    downloading.  PyPI does not have a mechanism to swap out a wheel for\n    another wheel, for example.  If this assumption is not true, the\n    CacheControl issue will need to be fixed.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\cache.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bit.ly/1qrySKC)\n    (",
      "http:// URLs.\n        # If caching is disabled, we will also use it for\n        # https:// hosts that we"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\session.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/5499\nCI_ENVIRONMENT_VARIABLES = (\n    # Azure Pipelines\n    ",
      "https:// hosts that we"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\session.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.0"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\session.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/11943\n            if (\n                isinstance(req.download_info.info, ArchiveInfo)\n                and not req.download_info.info.hashes\n                and local_file\n            ):\n                hash = hash_file(local_file.path)[0].hexdigest()\n                # We populate info.hash for backward compatibility.\n                # This will automatically populate info.hashes.\n                req.download_info.info.hash = f"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\operations\\prepare.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://blahblah@rev#egg=Foobar[baz]&subdirectory=version_subdir\n        .[some_extra]\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0508/#complete-grammar\n        r"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\constructors.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://pubs.opengroup.org/onlinepubs/9699919799/>`_ and are limited\n    to uppercase letter, digits and the `_` (underscore).\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_file.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/2427\n    parser.exit = parser_exit  # type: ignore\n\n    return parser\n\n\ndef join_lines(lines_enum: ReqFileLines) -> ReqFileLines:\n    ",
      "https://github.com/pypa/pip/pull/3514>`_.\n\n    Valid characters in variable names follow the `POSIX standard\n    <http://pubs.opengroup.org/onlinepubs/9699919799/>`_ and are limited\n    to uppercase letter, digits and the `_` (underscore).\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_file.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://packaging.python.org/specifications/recording-installed-packages/\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_uninstall.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/1733>\ndef site_config_dirs(appname: str) -> List[str]:\n    if sys.platform == "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\appdirs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/pull/935#discussion_r5307003\n\n    Placed this function in compat due to differences on AIX and\n    Jython, that should eventually go away.\n\n    :raises OSError: When path is a symlink or can"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0599/#backwards-compatibility-with-manylinux2010-wheels\n        if arch_suffix in {",
      "https://www.python.org/dev/peps/pep-0571/#backwards-compatibility-with-manylinux1-wheels\n        arches.append("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\compatibility_tags.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/{}"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\deprecation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/setuptools/issues/4167).\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\egg_link.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/5599 for advice on "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\entrypoints.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue2528\n    # and we can",
      "http://bugs.python.org/issue22107\n    basename = "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\filesystem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/blob/fcf1d003bf4f0100c9d0921ff3d70e1127ca1b71/Lib/platform.py#L175-L183\n    if sys.platform == "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\glibc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue19612\n    # https://bugs.python.org/issue30418\n    if not WINDOWS:\n        return False\n\n    return isinstance(exc, OSError) and exc.errno in (errno.EINVAL, errno.EPIPE)\n\n\n@contextlib.contextmanager\ndef indent_log(num: int = 2) -> Generator[None, None, None]:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password = \":****\""
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3.12/whatsnew/3.12.html#shutil.\n        shutil.rmtree(dir, onexc=handler)  # type: ignore\n    else:\n        shutil.rmtree(dir, onerror=handler)  # type: ignore\n\n\ndef _onerror_ignore(*_args: Any) -> None:\n    pass\n\n\ndef _onerror_reraise(*_args: Any) -> None:\n    raise  # noqa: PLE0704 - Bare exception used to reraise existing exception\n\n\ndef rmtree_errorhandler(\n    func: FunctionType,\n    path: Path,\n    exc_info: Union[ExcInfo, BaseException],\n    *,\n    onexc: OnExc = _onerror_reraise,\n) -> None:\n    ",
      "https://github.com/pypa/pip/issues/1299 for more discussion\n    should_show_use_python_msg = (\n        modifying_pip and WINDOWS and os.path.basename(sys.argv[0]) in pip_names\n    )\n\n    if should_show_use_python_msg:\n        new_command = [sys.executable, ",
      "https://mypy.readthedocs.io/en/stable/common_issues.html\n    if sys.platform == ",
      "https://pip.pypa.io/warnings/venv. "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "pass@example.com",
      "accesstoken@example.com"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\Users",
      "C:\\Users"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\setuptools_build.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/issues/107845)\n                            # Ignore the error there, but do use the\n                            # more lax `tar_filter`\n                            member = tarfile.tar_filter(member, location)\n                        else:\n                            raise\n                except tarfile.TarError as exc:\n                    message = "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\unpacking.py"
  },
  {
    "pattern": "/Users/[^\"\\']+",
    "matches": [
      "/Users/foo"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\urls.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/foo#bar",
      "http://example.com/foo#bar"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\_jaraco_text.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/1130\n    unset_environ = (",
      "https://git-scm.com/docs/partial-clone\n            # Speeds up cloning by functioning without a complete copy of repository\n            self.run_command(\n                make_command(\n                    ",
      "https://article.gmane.org/gmane.comp.version-control.git/146500)\n        scheme, netloc, path, query, fragment = urlsplit(url)\n        if scheme.endswith("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\foo\\bar"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "git@example.com",
      "git@example.com",
      "git@example.com"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://myrepo/svn/MyApp#egg=MyApp"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/1174\n            prompt = (",
      "https://pip.pypa.io/en/latest/reference/pip_freeze/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "c:\\\\folder)\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/11745#issuecomment-1402805842\n            logger.critical(\n                ",
      "https://pip.pypa.io/en/latest/topics/dependency-resolution/"
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\factory.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pip.pypa.io/warnings/backtracking for "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\reporter.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/10557\n    # We will loop until we explicitly break the loop.\n    while True:\n        leaves = set()\n        for key in graph:\n            if key is None:\n                continue\n            for _child in graph.iter_children(key):\n                # This means we have at least one child\n                break\n            else:\n                # No child.\n                leaves.add(key)\n        if not leaves:\n            # We are done simplifying.\n            break\n        # Calculate the weight for the leaves.\n        weight = len(graph) - 1\n        for leaf in leaves:\n            if leaf not in requirement_keys:\n                continue\n            weights[leaf] = weight\n        # Remove the leaves from the graph, making it simpler.\n        for leaf in leaves:\n            graph.remove(leaf)\n\n    # Visit the remaining graph.\n    # `None` is guaranteed to be the root node by resolvelib.\n    visit(None)\n\n    # Sanity check: all requirement keys should be in the weights,\n    # and no other keys should be in the weights.\n    difference = set(weights.keys()).difference(requirement_keys)\n    assert not difference, difference\n\n    return weights\n\n\ndef _req_set_item_sorter(\n    item: Tuple[str, InstallRequirement],\n    weights: Dict[Optional[str], int],\n) -> Tuple[int, str]:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\resolver.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/5868\n    return sorted(\n        (record_path, hash_, str(size)) for record_path, hash_, size in outrows\n    )\n\n\ndef _record_to_fs_path(record_path: RecordPath, lib_dir: str) -> str:\n    return os.path.join(lib_dir, record_path)\n\n\ndef _fs_to_record_path(path: str, lib_dir: str) -> RecordPath:\n    # On Windows, do not handle relative paths if they belong to different\n    # logical disks\n    if os.path.splitdrive(path)[0].lower() == os.path.splitdrive(lib_dir)[0].lower():\n        path = os.path.relpath(path, lib_dir)\n\n    path = path.replace(os.path.sep, ",
      "https://packaging.python.org/",
      "https://github.com/pypa/pip/issues/1800\n    maker.clobber = True\n\n    # Ensure we don",
      "https://bitbucket.org/pypa/distlib/issue/35/\n    maker.variants = {",
      "https://bitbucket.org/pypa/distlib/issue/32/\n    maker.set_mode = True\n\n    # Generate the console and GUI entry points specified in the wheel\n    scripts_to_generate = get_console_script_specs(console)\n\n    gui_scripts_to_generate = list(starmap("
    ],
    "file": "venv\\Lib\\site-packages\\pip\\_internal\\operations\\install\\wheel.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydata/xarray/blob/master/xarray/core/extensions.py\n# 1. We don",
      "https://www.pydanny.com/cached-property.html\n        # We need to use object.__setattr__ because we overwrite __setattr__ on\n        # NDFrame\n        object.__setattr__(obj, self._name, accessor_obj)\n        return accessor_obj\n\n\n@doc(klass="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\accessor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/cython/cython/issues/2646\n        if arr.dtype.name in ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\algorithms.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/8352\n            ",
      "https://github.com/pandas-dev/pandas/pull/56212)\n                    mgr.blocks[0].refs = BlockValuesRefs(mgr.blocks[0])  # type: ignore[union-attr]\n                yield ser\n\n    @staticmethod\n    @functools.cache\n    def generate_numba_apply_func(\n        func, nogil=True, nopython=True, parallel=False\n    ) -> Callable[[npt.NDArray, Index, Index], dict[int, Any]]:\n        numba = import_optional_dependency("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\apply.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nindicator : bool or str, default False\n    If True, adds a column to the output DataFrame called ",
      "https://data-apis.org/dataframe-protocol/latest/index.html\n\n        Examples\n        --------\n        >>> df_not_necessarily_pandas = pd.DataFrame({",
      "https://github.com/data-apis/dataframe-api-compat.\n        ",
      "https://github.com/python/mypy/issues/9046\n            # error: namedtuple() expects a string literal as the first argument\n            itertuple = collections.namedtuple(  # type: ignore[misc]\n                name, fields, rename=True\n            )\n            return map(itertuple._make, zip(*arrays))\n\n        # fallback to regular tuples\n        return zip(*arrays)\n\n    def __len__(self) -> int:\n        ",
      "https://pandas-gbq.readthedocs.io>`__.\n\n        See the `How to authenticate with Google BigQuery\n        <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n        guide for authentication instructions.\n\n        Parameters\n        ----------\n        destination_table : str\n            Name of table to be written, in the form ``dataset.tablename``.\n        project_id : str, optional\n            Google BigQuery Account project ID. Optional when available from\n            the environment.\n        chunksize : int, optional\n            Number of rows to be inserted in each chunk from the dataframe.\n            Set to ``None`` to load the whole dataframe at once.\n        reauth : bool, default False\n            Force Google BigQuery to re-authenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : str, default ",
      "https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n            .. _console flow:\n                https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n            *New in version 0.2.0 of pandas-gbq*.\n\n            .. versionchanged:: 1.5.0\n               Default value is changed to ``True``. Google has deprecated the\n               ``auth_local_webserver = False`` `",
      "https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html?m=1#disallowed-oob>`_.\n        table_schema : list of dicts, optional\n            List of BigQuery table fields to which according DataFrame\n            columns conform to, e.g. ``[{",
      "https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n            list of available locations. The location must match that of the\n            target dataset.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        progress_bar : bool, default True\n            Use the library `tqdm` to show the progress bar for the upload,\n            chunk by chunk.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        credentials : google.auth.credentials.Credentials, optional\n            Credentials for accessing Google APIs. Use this parameter to\n            override default credentials, such as to use Compute Engine\n            :class:`google.auth.compute_engine.Credentials` or Service\n            Account :class:`google.oauth2.service_account.Credentials`\n            directly.\n\n            *New in version 0.8.0 of pandas-gbq*.\n\n        See Also\n        --------\n        pandas_gbq.to_gbq : This function in the pandas-gbq library.\n        read_gbq : Read a DataFrame from Google BigQuery.\n\n        Examples\n        --------\n        Example taken from `Google BigQuery documentation\n        <https://cloud.google.com/bigquery/docs/samples/bigquery-pandas-gbq-to-gbq-simple>`_\n\n        >>> project_id = ",
      "https://arrow.apache.org/docs/python/feather.html>`_. Requires a default\n        index. For saving the DataFrame with your custom index use a method that\n        supports custom indices e.g. `to_parquet`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]])\n        >>> df.to_feather(",
      "https://parquet.apache.org/>`_. You can choose different parquet\n        backends, and have the option of compression. See\n        :ref:`the user guide <io.parquet>` for more details.\n\n        Parameters\n        ----------\n        path : str, path object, file-like object, or None, default None\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a binary ``write()`` function. If None, the result is\n            returned as bytes. If a string or path, it will be used as Root Directory\n            path when writing a partitioned dataset.\n        engine : {{",
      "https://pypi.org/project/fastparquet>`_ or `pyarrow\n        <https://arrow.apache.org/docs/python/>`_ library.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={{",
      "https://arrow.apache.org/docs/python/>`_\n          library.\n        * For supported dtypes please refer to `supported ORC features in Arrow\n          <https://arrow.apache.org/docs/cpp/orc.html#data-types>`__.\n        * Currently timezones in datetime columns are not preserved when a\n          dataframe is converted into ORC files.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={",
      "https://example.com",
      "https://example.com",
      "https://example.com",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {",
      "https://docs.python.org/3/reference/lexical_analysis.html)\n        in combination with the source code in :mod:`pandas.core.computation.parsing`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({",
      "https://numpy.org/doc/stable/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``",
      "https://github.com/numpy/numpy/issues/9464\n                if (isinstance(dtype, str) and dtype == ",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        inplace : bool, default False\n            Whether to modify the DataFrame rather than creating a new one.\n            If True then value of copy is ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n        errors : {",
      "https://github.com/pandas-dev/pandas/issues/28770\n            # Incompatible types in assignment (expression has type ",
      "https://github.com/SethMMorton/natsort>` package.\n\n        >>> df = pd.DataFrame({\n        ...    ",
      "https://github.com/pandas-dev/pandas/issues/35194\n            indexer, _ = result.columns.get_indexer_non_unique(join_columns)\n            indexer = algorithms.unique1d(indexer)\n            result = result._reindex_with_indexers(\n                {1: [join_columns, indexer]}, allow_dups=True\n            )\n        else:\n            result = result.reindex(join_columns, axis=1)\n\n        return result\n\n    def _should_reindex_frame_op(self, right, op, axis: int, fill_value, level) -> bool:\n        ",
      "https://numba.pydata.org/numba-doc/dev/reference/pysupported.html>`_\n            and `supported numpy features\n            <https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html>`_\n            in numba to learn what you can or cannot use in the passed function.\n\n            .. versionadded:: 2.2.0\n\n        engine_kwargs : dict\n            Pass keyword arguments to the engine.\n            This is currently only used by the numba engine,\n            see the documentation for the engine argument for more information.\n        **kwargs\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Returns\n        -------\n        Series or DataFrame\n            Result of applying ``func`` along the given axis of the\n            DataFrame.\n\n        See Also\n        --------\n        DataFrame.map: For elementwise operations.\n        DataFrame.aggregate: Only perform aggregating type operations.\n        DataFrame.transform: Only perform transforming type operations.\n\n        Notes\n        -----\n        Functions that mutate the passed object can produce unexpected\n        behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\n        for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[4, 9]] * 3, columns=[",
      "https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_\n        * `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_\n        * `Spearman",
      "https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_\n\n        Examples\n        --------\n        >>> def histogram_intersection(a, b):\n        ...     v = np.minimum(a, b).sum().round(decimals=1)\n        ...     return v\n        >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n        ...                   columns=[",
      "https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n        of the DataFrame.\n\n        Both NA and null values are automatically excluded from the\n        calculation. (See the note below about bias from missing values.)\n        A threshold can be set for the minimum number of\n        observations for each value created. Comparisons with observations\n        below this threshold will be returned as ``NaN``.\n\n        This method is generally used for the analysis of time series data to\n        understand the relationship between different measures\n        across time.\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        ddof : int, default 1\n            Delta degrees of freedom.  The divisor used in calculations\n            is ``N - ddof``, where ``N`` represents the number of elements.\n            This argument is applicable only when no ``nan`` is in the dataframe.\n\n        numeric_only : bool, default False\n            Include only `float`, `int` or `boolean` data.\n\n            .. versionadded:: 1.5.0\n\n            .. versionchanged:: 2.0.0\n                The default value of ``numeric_only`` is now ``False``.\n\n        Returns\n        -------\n        DataFrame\n            The covariance matrix of the series of the DataFrame.\n\n        See Also\n        --------\n        Series.cov : Compute covariance with another Series.\n        core.window.ewm.ExponentialMovingWindow.cov : Exponential weighted sample\n            covariance.\n        core.window.expanding.Expanding.cov : Expanding sample covariance.\n        core.window.rolling.Rolling.cov : Rolling sample covariance.\n\n        Notes\n        -----\n        Returns the covariance matrix of the DataFrame",
      "https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n        the returned covariance matrix will be an unbiased estimate\n        of the variance and covariance between the member Series.\n\n        However, for many applications this estimate may not be acceptable\n        because the estimate covariance matrix is not guaranteed to be positive\n        semi-definite. This could lead to estimate correlations having\n        absolute values which are greater than one, and/or a non-invertible\n        covariance matrix. See `Estimation of covariance matrices\n        <https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n        matrices>`__ for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n        ...                   columns=[",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        DataFrame\n            The DataFrame has a DatetimeIndex.\n\n        Examples\n        --------\n        >>> idx = pd.PeriodIndex([",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        DataFrame\n            The DataFrame has a PeriodIndex.\n\n        Examples\n        --------\n        >>> idx = pd.to_datetime(\n        ...     [\n        ...         "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\frame.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        allows_duplicate_labels : bool, optional\n            Whether the returned object allows duplicate labels.\n\n        Returns\n        -------\n        Series or DataFrame\n            The same type as the caller.\n\n        See Also\n        --------\n        DataFrame.attrs : Global metadata applying to this dataset.\n        DataFrame.flags : Global flags applying to this object.\n\n        Notes\n        -----\n        This method returns a new object that",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        %(klass)s\n            An object of type %(klass)s.\n\n        See Also\n        --------\n        %(klass)s.rename_axis : Alter the name of the index%(see_also_sub)s.\n        ",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Series\n            or DataFrame.\n\n        Returns\n        -------\n        Series, DataFrame, or None\n            The same type as the caller or None if ``inplace=True``.\n\n        See Also\n        --------\n        Series.rename : Alter Series index labels or name.\n        DataFrame.rename : Alter DataFrame index labels or name.\n        Index.rename : Set new names on index.\n\n        Notes\n        -----\n        ``DataFrame.rename_axis`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={",
      "https://stackoverflow.com/a/17758115>`__).\n\n        >>> df = pd.DataFrame({\n        ...     ",
      "https://github.com/python/typeshed/issues/2148#issuecomment-520783318\n    # Incompatible types in assignment (expression has type ",
      "https://docs.sqlalchemy.org/en/20/core/connections.html>`_.\n            If passing a sqlalchemy.engine.Connection which is already in a transaction,\n            the transaction will not be committed.  If passing a sqlite3.Connection,\n            it will not be possible to roll back the record insertion.\n\n        schema : str, optional\n            Specify the schema (if database flavor supports this). If None, use\n            default schema.\n        if_exists : {",
      "https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or\n            `SQLAlchemy <https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount>`__.\n\n            .. versionadded:: 1.4.0\n\n        Raises\n        ------\n        ValueError\n            When the table already exists and `if_exists` is ",
      "https://docs.sqlalchemy.org\n        .. [2] https://www.python.org/dev/peps/pep-0249/\n\n        Examples\n        --------\n        Create an in-memory SQLite database.\n\n        >>> from sqlalchemy import create_engine\n        >>> engine = create_engine(",
      "https://docs.python.org/3/library/pickle.html.\n\n        {storage_options}\n\n        See Also\n        --------\n        read_pickle : Load pickled pandas object (or any object) from file.\n        DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n        DataFrame.to_sql : Write DataFrame to a SQL database.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n        Examples\n        --------\n        >>> original_df = pd.DataFrame({{",
      "https://xarray.pydata.org/en/stable/>`__\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(",
      "https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. ",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations must\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index",
      "https://github.com/SethMMorton/natsort>` package.\n\n        >>> df = pd.DataFrame({\n        ...    ",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.nan\n            Value to use for missing values. Defaults to NaN, but can be any\n            ",
      "https://pandas.pydata.org/pandas-docs/",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        errors : {",
      "https://github.com/python/mypy/issues/8354\n        return cast(Self, result)\n\n    @final\n    def copy(self, deep: bool_t | None = True) -> Self:\n        ",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n            will be enabled by default, which means that the ",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        same type as input object\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to numeric type.\n        convert_dtypes : Convert argument to best possible dtype.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                    ref_count += 1\n                if ctr <= ref_count:\n                    warnings.warn(\n                        _chained_assignment_warning_method_msg,\n                        FutureWarning,\n                        stacklevel=2,\n                    )\n\n        value, method = validate_fillna_kwargs(value, method)\n        if method is not None:\n            warnings.warn(\n                f",
      "https://github.com/pandas-dev/pandas",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                    ref_count += 1\n                if ctr <= ref_count:\n                    warnings.warn(\n                        _chained_assignment_warning_method_msg,\n                        FutureWarning,\n                        stacklevel=2,\n                    )\n\n        return self._pad_or_backfill(\n            ",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                    ref_count += 1\n                if ctr <= ref_count:\n                    warnings.warn(\n                        _chained_assignment_warning_method_msg,\n                        FutureWarning,\n                        stacklevel=2,\n                    )\n\n        return self._pad_or_backfill(\n            ",
      "https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.\n\n        Examples\n        --------\n        Filling in ``NaN`` in a :class:`~pandas.Series` via linear\n        interpolation.\n\n        >>> s = pd.Series([0, 1, np.nan, 3])\n        >>> s\n        0    0.0\n        1    1.0\n        2    NaN\n        3    3.0\n        dtype: float64\n        >>> s.interpolate()\n        0    0.0\n        1    1.0\n        2    2.0\n        3    3.0\n        dtype: float64\n\n        Filling in ``NaN`` in a Series via polynomial interpolation or splines:\n        Both ",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                    ref_count += 1\n                if ctr <= ref_count:\n                    warnings.warn(\n                        _chained_assignment_warning_method_msg,\n                        FutureWarning,\n                        stacklevel=2,\n                    )\n\n        axis = self._get_axis_number(axis)\n\n        if self.empty:\n            if inplace:\n                return None\n            return self.copy()\n\n        if not isinstance(method, str):\n            raise ValueError(",
      "https://github.com/pandas-dev/pandas/pull/14476\n            if is_series:\n                loc = self.index.searchsorted(where, side=",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                    ref_count += 1\n                if ctr <= ref_count:\n                    warnings.warn(\n                        _chained_assignment_warning_method_msg,\n                        FutureWarning,\n                        stacklevel=2,\n                    )\n\n        axis = nv.validate_clip_with_axis(axis, (), kwargs)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # GH 17276\n        # numpy doesn",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n        Examples\n        --------\n        Start by creating a series with 4 one minute timestamps.\n\n        >>> index = pd.date_range(",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__\n        for more.\n\n        To learn more about the offset strings, please see `this link\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n        Examples\n        --------\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range(",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        fill_value : scalar, default np.nan\n            Value to use for missing values. Defaults to NaN, but can be any\n            ",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                    ref_count += 1\n                if ctr <= ref_count:\n                    warnings.warn(\n                        _chained_assignment_warning_method_msg,\n                        FutureWarning,\n                        stacklevel=2,\n                    )\n\n        other = common.apply_if_callable(other, self)\n        return self._where(cond, other, inplace, axis, level)\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[False] = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> Self:\n        ...\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[True],\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: bool_t = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> Self | None:\n        ...\n\n    @final\n    @doc(\n        where,\n        klass=_shared_doc_kwargs[",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                    ref_count += 1\n                if ctr <= ref_count:\n                    warnings.warn(\n                        _chained_assignment_warning_method_msg,\n                        FutureWarning,\n                        stacklevel=2,\n                    )\n\n        cond = common.apply_if_callable(cond, self)\n        other = common.apply_if_callable(other, self)\n\n        # see gh-21891\n        if not hasattr(cond, ",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        type of caller\n            The truncated Series or DataFrame.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by label.\n        DataFrame.iloc : Select a subset of a DataFrame by position.\n\n        Notes\n        -----\n        If the index being truncated contains only datetime values,\n        `before` and `after` may be specified as strings instead of\n        Timestamps.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        {klass}\n            Object with time zone converted axis.\n\n        Raises\n        ------\n        TypeError\n            If the axis is tz-naive.\n\n        Examples\n        --------\n        Change to another time zone:\n\n        >>> s = pd.Series(\n        ...     [1],\n        ...     index=pd.DatetimeIndex([",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        ambiguous : "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\generic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                ref_count += 1\n            if ctr <= ref_count:\n                warnings.warn(\n                    _chained_assignment_warning_msg, FutureWarning, stacklevel=2\n                )\n\n        check_dict_or_set_indexers(key)\n        if isinstance(key, tuple):\n            key = tuple(list(x) if is_iterator(x) else x for x in key)\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            key = self._check_deprecated_callable_usage(key, maybe_callable)\n        indexer = self._get_setitem_indexer(key)\n        self._has_valid_setitem_indexer(key)\n\n        iloc = self if self.name == ",
      "https://github.com/pandas-dev/pandas/pull/49469)\n            retval = retval.copy(deep=False)\n\n        return retval\n\n    @final\n    def _getitem_lowerdim(self, tup: tuple):\n        # we can directly get the axis result since the axis is specified\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            return self._getitem_axis(tup, axis=axis)\n\n        # we may have a nested tuples indexer here\n        if self._is_nested_tuple_indexer(tup):\n            return self._getitem_nested_tuple(tup)\n\n        # we maybe be using a tuple to represent multiple dimensions here\n        ax0 = self.obj._get_axis(0)\n        # ...but iloc should handle the tuple as simple integer-location\n        # instead of checking it as multiindex representation (GH 13797)\n        if (\n            isinstance(ax0, MultiIndex)\n            and self.name != ",
      "https://github.com/numpy/numpy/pull/10615\n                                    arr = arr[0, ...]\n                                empty_value[indexer[0]] = arr\n                                self.obj[key] = empty_value\n                                return\n\n                            self.obj[key] = empty_value\n                        elif not is_list_like(value):\n                            self.obj[key] = construct_1d_array_from_inferred_fill_value(\n                                value, len(self.obj)\n                            )\n                        else:\n                            # FIXME: GH#42099#issuecomment-864326014\n                            self.obj[key] = infer_fill_value(value)\n\n                        new_indexer = convert_from_missing_indexer_tuple(\n                            indexer, self.obj.axes\n                        )\n                        self._setitem_with_indexer(new_indexer, value, name)\n\n                        return\n\n                    # reindex the axis\n                    # make sure to clear the cache because we are\n                    # just replacing the block manager here\n                    # so the object is the same\n                    index = self.obj._get_axis(i)\n                    with warnings.catch_warnings():\n                        # TODO: re-issue this with setitem-specific message?\n                        warnings.filterwarnings(\n                            "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikiversity.org/wiki/Cubic_Spline_Interpolation>`_\n            on Wikiversity.\n    .. [2] Carl de Boor, ",
      "https://stackoverflow.com/a/6811241\n    shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)\n    strides = a.strides + (a.strides[-1],)\n    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\missing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydata/bottleneck/issues/379\n\n        # GH 15507\n        # bottleneck does not properly upcast during the sum\n        # so can overflow\n\n        # GH 9422\n        # further we also want to preserve NaN when all elements\n        # are NaN, unlike bottleneck/numpy which consider this\n        # to be 0\n        return name not in [",
      "https://github.com/pandas-dev/pandas/pull/43311#issuecomment-974891737\n            and (values.shape[1] / 1000) > values.shape[0]\n            and values.dtype != object\n            and values.dtype != bool\n        ):\n            arrs = list(values)\n            if kwargs.get(",
      "https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n    avg = _ensure_numeric(values.sum(axis=axis, dtype=np.float64)) / count\n    if axis is not None:\n        avg = np.expand_dims(avg, axis)\n    sqr = _ensure_numeric((avg - values) ** 2)\n    if mask is not None:\n        np.putmask(sqr, mask, 0)\n    result = sqr.sum(axis=axis, dtype=np.float64) / d\n\n    # Return variance as np.float64 (the datatype used in the accumulator),\n    # unless we were dealing with a float array, in which case use the same\n    # precision as the original values array.\n    if dtype.kind == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\nanops.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n        Examples\n        --------\n        Resampling a Series:\n\n        >>> s = pd.Series([1, 2, 3],\n        ...               index=pd.date_range(",
      "https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n        Examples\n        --------\n        Resampling a Series:\n\n        >>> s = pd.Series([1, 2, 3],\n        ...               index=pd.date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\resample.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/data-apis/dataframe-api-compat.\n        ",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                ref_count += 1\n            if ctr <= ref_count and (\n                warn_copy_on_write()\n                or (\n                    not warn_copy_on_write()\n                    and self._mgr.blocks[0].refs.has_reference()  # type: ignore[union-attr]\n                )\n            ):\n                warn = False\n                warnings.warn(\n                    _chained_assignment_warning_msg, FutureWarning, stacklevel=2\n                )\n\n        check_dict_or_set_indexers(key)\n        key = com.apply_if_callable(key, self)\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n\n        if key is Ellipsis:\n            key = slice(None)\n\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind=",
      "https://pypi.org/project/tabulate>`_.\n\n        Returns\n        -------\n        str\n            {klass} in Markdown-friendly format.\n\n        Notes\n        -----\n        Requires the `tabulate <https://pypi.org/project/tabulate>`_ package.\n\n        {examples}\n        ",
      "https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_\n        * `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_\n        * `Spearman",
      "https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_\n\n        Automatic data alignment: as with all pandas operations, automatic data alignment is performed for this method.\n        ``corr()`` automatically considers values with matching indices.\n\n        Examples\n        --------\n        >>> def histogram_intersection(a, b):\n        ...     v = np.minimum(a, b).sum().round(decimals=1)\n        ...     return v\n        >>> s1 = pd.Series([.2, .0, .6, .2])\n        >>> s2 = pd.Series([.3, .6, .0, .1])\n        >>> s1.corr(s2, method=histogram_intersection)\n        0.3\n\n        Pandas auto-aligns the values with matching indices\n\n        >>> s1 = pd.Series([1, 2, 3], index=[0, 1, 2])\n        >>> s2 = pd.Series([1, 2, 3], index=[2, 1, 0])\n        >>> s1.corr(s2)\n        -1.0\n        ",
      "https://github.com/pandas-dev/pandas/pull/56060#discussion_r1399245221\n                ref_count += 1\n            if ctr <= ref_count:\n                warnings.warn(\n                    _chained_assignment_warning_method_msg,\n                    FutureWarning,\n                    stacklevel=2,\n                )\n\n        if not isinstance(other, Series):\n            other = Series(other)\n\n        other = other.reindex_like(self)\n        mask = notna(other)\n\n        self._mgr = self._mgr.putmask(mask=mask, new=other)\n        self._maybe_update_cacher()\n\n    # ----------------------------------------------------------------------\n    # Reindexing, sorting\n\n    @overload\n    def sort_values(\n        self,\n        *,\n        axis: Axis = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: Literal[False] = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        ignore_index: bool = ...,\n        key: ValueKeyFunc = ...,\n    ) -> Series:\n        ...\n\n    @overload\n    def sort_values(\n        self,\n        *,\n        axis: Axis = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: Literal[True],\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        ignore_index: bool = ...,\n        key: ValueKeyFunc = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def sort_values(\n        self,\n        *,\n        axis: Axis = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: bool = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        ignore_index: bool = ...,\n        key: ValueKeyFunc = ...,\n    ) -> Series | None:\n        ...\n\n    def sort_values(\n        self,\n        *,\n        axis: Axis = 0,\n        ascending: bool | Sequence[bool] = True,\n        inplace: bool = False,\n        kind: SortKind = ",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n        inplace : bool, default False\n            Whether to return a new Series. If True the value of copy is ignored.\n        level : int or level name, default None\n            In case of MultiIndex, only rename labels in the specified level.\n        errors : {",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        Series with DatetimeIndex\n\n        Examples\n        --------\n        >>> idx = pd.PeriodIndex([",
      "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Returns\n        -------\n        Series\n            Series with index converted to PeriodIndex.\n\n        Examples\n        --------\n        >>> idx = pd.DatetimeIndex([",
      "https://pandas.pydata.org/docs/user_guide/indexing.html>`__.\n\n        Examples\n        --------\n        To create a Series with a custom index and view the index labels:\n\n        >>> cities = ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\series.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups>`_),\n    the values are used as-is to determine the groups. A label or list\n    of labels may be passed to group by the columns in ``self``.\n    Notice that a tuple is interpreted as a (single) key.\naxis : {0 or ",
      "https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),\n    such as ``head()``, ``tail()``, ``nth()`` and in transformations\n    (see the `transformations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).\nsort : bool, default True\n    Sort group keys. Get better performance by turning this off.\n    Note this does not influence the order of observations within each\n    group. Groupby preserves the order of rows within each group. If False,\n    the groups will appear in the same order as they did in the original DataFrame.\n    This argument has no effect on filtrations (see the `filtrations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),\n    such as ``head()``, ``tail()``, ``nth()`` and in transformations\n    (see the `transformations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).\n\n    .. versionchanged:: 2.0.0\n\n        Specifying ``sort=False`` with an ordered categorical grouper will no\n        longer sort the values.\n\ngroup_keys : bool, default True\n    When calling apply and the ``by`` argument produces a like-indexed\n    (i.e. :ref:`a transform <groupby.transform>`) result, add group keys to\n    index to identify pieces. By default group keys are not included\n    when the result",
      "https://pandas.pydata.org/pandas-docs/stable/groupby.html>`__ for more\ndetailed usage and examples, including splitting an object into groups,\niterating through groups, selecting a group, aggregation, and more.\n",
      "https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_."
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\shared_docs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\errors\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/indygreg/python-zstandard/pull/165.\n    zstd = import_optional_dependency("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas-gbq.readthedocs.io.",
      "https://pandas-gbq.readthedocs.io>`__.\n\n    See the `How to authenticate with Google BigQuery\n    <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n    guide for authentication instructions.\n\n    Parameters\n    ----------\n    query : str\n        SQL-Like Query to return data values.\n    project_id : str, optional\n        Google BigQuery Account project ID. Optional when available from\n        the environment.\n    index_col : str, optional\n        Name of result column to use for index in results DataFrame.\n    col_order : list(str), optional\n        List of BigQuery column names in the desired order for results\n        DataFrame.\n    reauth : bool, default False\n        Force Google BigQuery to re-authenticate the user. This is useful\n        if multiple accounts are used.\n    auth_local_webserver : bool, default True\n        Use the `local webserver flow`_ instead of the `console flow`_\n        when getting user credentials.\n\n        .. _local webserver flow:\n            https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n        .. _console flow:\n            https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n        *New in version 0.2.0 of pandas-gbq*.\n\n        .. versionchanged:: 1.5.0\n           Default value is changed to ``True``. Google has deprecated the\n           ``auth_local_webserver = False`` `",
      "https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html?m=1#disallowed-oob>`_.\n    dialect : str, default ",
      "https://cloud.google.com/bigquery/docs/reference/legacy-sql>`__.\n        ``",
      "https://cloud.google.com/bigquery/docs/reference/standard-sql/>`__.\n    location : str, optional\n        Location where the query job should run. See the `BigQuery locations\n        documentation\n        <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n        list of available locations. The location must match that of any\n        datasets used in the query.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    configuration : dict, optional\n        Query config parameters for job processing.\n        For example:\n\n            configuration = {",
      "https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.query>`__.\n    credentials : google.auth.credentials.Credentials, optional\n        Credentials for accessing Google APIs. Use this parameter to override\n        default credentials, such as to use Compute Engine\n        :class:`google.auth.compute_engine.Credentials` or Service Account\n        :class:`google.oauth2.service_account.Credentials` directly.\n\n        *New in version 0.8.0 of pandas-gbq*.\n    use_bqstorage_api : bool, default False\n        Use the `BigQuery Storage API\n        <https://cloud.google.com/bigquery/docs/reference/storage/>`__ to\n        download query results quickly, but at an increased cost. To use this\n        API, first `enable it in the Cloud Console\n        <https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com>`__.\n        You must also have the `bigquery.readsessions.create\n        <https://cloud.google.com/bigquery/docs/access-control#roles>`__\n        permission on the project you are billing queries to.\n\n        This feature requires version 0.10.0 or later of the ``pandas-gbq``\n        package. It also requires the ``google-cloud-bigquery-storage`` and\n        ``fastavro`` packages.\n\n    max_results : int, optional\n        If set, limit the maximum number of rows to fetch from the query\n        results.\n\n    progress_bar_type : Optional, str\n        If set, use the `tqdm <https://tqdm.github.io/>`__ library to\n        display a progress bar while the data downloads. Install the\n        ``tqdm`` package to use this feature.\n\n        Possible values of ``progress_bar_type`` include:\n\n        ``None``\n            No progress bar.\n        ``",
      "https://cloud.google.com/bigquery/docs/pandas-gbq-migration>`_\n\n    >>> sql = ",
      "https://pandas-gbq.readthedocs.io/en/latest/api.html#pandas_gbq.read_gbq",
      "https://pandas-gbq.readthedocs.io/en/latest/api.html#pandas_gbq.to_gbq"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\gbq.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://exslt.org/regular-expressions",
      "http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`__. A\n        working draft of the HTML 5 spec can be found `here\n        <https://html.spec.whatwg.org/multipage/tables.html>`__. It contains the\n        latest information on table attributes for the modern web.\n\n    parse_dates : bool, optional\n        See :func:`~read_csv` for more details.\n\n    thousands : str, optional\n        Separator to use to parse thousands. Defaults to ``"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\html.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://html.spec.whatwg.org/multipage/dom.html#global-attributes>`__. ::\n\n            attrs = {{",
      "https://html.spec.whatwg.org/multipage/tables.html>`__. It contains the\n        latest information on table attributes for the modern web.\n\n    parse_dates : bool, optional\n        See :func:`~read_csv` for more details.\n\n    thousands : str, optional\n        Separator to use to parse thousands. Defaults to ``"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\html.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://arrow.apache.org/docs/python/>`_\n      library.\n    * For supported dtypes please refer to `supported ORC features in Arrow\n      <https://arrow.apache.org/docs/cpp/orc.html#data-types>`__.\n    * Currently timezones in datetime columns are not preserved when a\n      dataframe is converted into ORC files.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\orc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/pickle.html\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({{",
      "https://docs.python.org/3/library/pickle.html>`__.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str, path object, or file-like object\n        String, path object (implementing ``os.PathLike[str]``), or file-like\n        object implementing a binary ``readlines()`` function.\n        Also accepts URL. URL is not limited to S3 and GCS.\n\n    {decompression_options}\n\n        .. versionchanged:: 1.4.0 Zstandard support.\n\n    {storage_options}\n\n    Returns\n    -------\n    same type as object stored in file\n\n    See Also\n    --------\n    DataFrame.to_pickle : Pickle (serialize) DataFrame object to file.\n    Series.to_pickle : Pickle (serialize) Series object to file.\n    read_hdf : Read HDF5 file into a DataFrame.\n    read_sql : Read SQL query or database table into a DataFrame.\n    read_parquet : Load a parquet object, returning a DataFrame.\n\n    Notes\n    -----\n    read_pickle is only guaranteed to be backwards compatible to pandas 0.20.3\n    provided the object was serialized with to_pickle.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame(\n    ...     {{"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\pickle.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/13492\n    ",
      "https://docs.python.org/3/library/pickle.html for more.\n\n    Parameters\n    ----------\n    path_or_buf : str, path object, pandas.HDFStore\n        Any valid string path is acceptable. Only supports the local file system,\n        remote URLs and file-like objects are not supported.\n\n        If you want to pass in a path object, pandas accepts any\n        ``os.PathLike``.\n\n        Alternatively, pandas accepts an open :class:`pandas.HDFStore` object.\n\n    key : object, optional\n        The group identifier in the store. Can be omitted if the HDF file\n        contains a single pandas object.\n    mode : {",
      "https://docs.python.org/3/library/pickle.html for more.\n\n    Parameters\n    ----------\n    path : str\n        File path to HDF5 file.\n    mode : {",
      "https://docs.python.org/3/library/pickle.html for more.\n\n        Parameters\n        ----------\n        key : str\n            Object being retrieved from file.\n        where : list or None\n            List of Term (or convertible) objects, optional.\n        start : int or None\n            Row number to start selection.\n        stop : int, default None\n            Row number to stop selection.\n        columns : list or None\n            A list of columns that if not None, will limit the return columns.\n        iterator : bool or False\n            Returns an iterator.\n        chunksize : int or None\n            Number or rows to include in iteration, return an iterator.\n        auto_close : bool or False\n            Should automatically close the store when finished.\n\n        Returns\n        -------\n        object\n            Retrieved object from file.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=[",
      "https://docs.python.org/3/library/pickle.html for more.\n\n\n        Parameters\n        ----------\n        key : str\n        where : list of Term (or convertible) objects, optional\n        start : integer (defaults to None), row number to start selection\n        stop  : integer (defaults to None), row number to stop selection\n        ",
      "https://docs.python.org/3/library/pickle.html for more.\n\n        Parameters\n        ----------\n        key : str\n        column : str\n            The column of interest.\n        start : int or None, default None\n        stop : int or None, default None\n\n        Raises\n        ------\n        raises KeyError if the column is not found (or key is not a valid\n            store)\n        raises ValueError if the column can not be extracted individually (it\n            is part of a data block)\n\n        ",
      "https://docs.python.org/3/library/pickle.html for more.\n\n        Parameters\n        ----------\n        keys : a list of the tables\n        selector : the table to apply the where criteria (defaults to keys[0]\n            if not supplied)\n        columns : the columns I want back\n        start : integer (defaults to None), row number to start selection\n        stop  : integer (defaults to None), row number to stop selection\n        iterator : bool, return an iterator, default False\n        chunksize : nrows to include in iteration, return an iterator\n        auto_close : bool, default False\n            Should automatically close the store when finished.\n\n        Raises\n        ------\n        raises KeyError if keys or selector is not found or keys is empty\n        raises TypeError if keys is not a list or tuple\n        raises ValueError if the tables are not ALL THE SAME DIMENSIONS\n        ",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#query-via-data-columns>`__.\n        encoding : str, default None\n            Provide an encoding for strings.\n        track_times : bool, default True\n            Parameter is propagated to ",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#query-via-data-columns>`__.\n        min_itemsize : dict of columns that specify minimum str sizes\n        nan_rep      : str to use as str nan representation\n        chunksize    : size to chunk the writing\n        expectedrows : expected TOTAL row size of this table\n        encoding     : default None, provide an encoding for str\n        dropna : bool, default False, optional\n            Do not write an ALL nan row to the store settable\n            by the option "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\pytables.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.sqlalchemy.org/en/20/core/connections.html>`_.\n    index_col : str or list of str, optional, default: None\n        Column(s) to set as index(MultiIndex).\n    coerce_float : bool, default True\n        Attempts to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point, useful for SQL result sets.\n    params : list, tuple or dict, optional, default: None\n        List of parameters to pass to execute method.  The syntax used\n        to pass parameters is database driver dependent. Check your\n        database driver documentation for which of the five syntax styles,\n        described in PEP 249",
      "https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or\n    `SQLAlchemy <https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.BaseCursorResult.rowcount>`__\n    ",
      "https://stackoverflow.com/a/67358288/6067848\n            msg = r",
      "https://stackoverflow.com/questions/6514274/how-do-you-escape-strings\\\n    # -for-sqlite-table-column-names-in-python\n    # Ensure the string can be encoded as UTF-8.\n    # Ensure the string does not include any NUL characters.\n    # Replace all ",
      "https://docs.python.org/3.12/library/sqlite3.html#adapter-and-converter-recipes\n        # Python 3.12+ doesn"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\sql.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://presbrey.mit.edu/PyDTA and\nhttps://www.statsmodels.org/devel/\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\stata.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.statsmodels.org/devel/\n",
      "https://www.stata.com/help.cgi?datetime\n\n    Parameters\n    ----------\n    dates : Series\n        The Stata Internal Format date to convert to datetime according to fmt\n    fmt : str\n        The format to convert to. Can be, tc, td, tw, tm, tq, th, ty\n        Returns\n\n    Returns\n    -------\n    converted : Series\n        The converted dates\n\n    Examples\n    --------\n    >>> dates = pd.Series([52])\n    >>> _stata_elapsed_date_to_datetime_vec(dates , ",
      "https://www.stata.com/help.cgi?datetime\n\n    Parameters\n    ----------\n    dates : Series\n        Series or array containing datetime or datetime64[ns] to\n        convert to the Stata Internal Format given by fmt\n    fmt : str\n        The format to convert to. Can be, tc, td, tw, tm, tq, th, ty\n    ",
      "https://www.stata.com/help.cgi?missing>\n\n    Integer missing values make the code "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\stata.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\xml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com",
      "https://example.com",
      "https://example.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\xml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Histogram\n\n    Parameters\n    ----------\n    data : DataFrame\n        The pandas object holding the data.\n    column : str or sequence, optional\n        If passed, will be used to limit data to a subset of columns.\n    by : object, optional\n        If passed, then used to form histograms for separate groups.\n    grid : bool, default True\n        Whether to show axis grid lines.\n    xlabelsize : int, default None\n        If specified changes the x-axis label size.\n    xrot : float, default None\n        Rotation of x axis labels. For example, a value of 90 displays the\n        x labels rotated 90 degrees clockwise.\n    ylabelsize : int, default None\n        If specified changes the y-axis label size.\n    yrot : float, default None\n        Rotation of y axis labels. For example, a value of 90 displays the\n        y labels rotated 90 degrees clockwise.\n    ax : Matplotlib axes object, default None\n        The axes to plot the histogram on.\n    sharex : bool, default True if ax is None else False\n        In case subplots=True, share x axis and set some x axis labels to\n        invisible; defaults to True if ax is None otherwise False if an ax\n        is passed in.\n        Note that passing in both an ax and sharex=True will alter all x axis\n        labels for all subplots in a figure.\n    sharey : bool, default False\n        In case subplots=True, share y axis and set some y axis labels to\n        invisible.\n    figsize : tuple, optional\n        The size in inches of the figure to create. Uses the value in\n        `matplotlib.rcParams` by default.\n    layout : tuple, optional\n        Tuple of (rows, columns) for the layout of the histograms.\n    bins : int or sequence, default 10\n        Number of histogram bins to be used. If an integer is given, bins + 1\n        bin edges are calculated and returned. If bins is a sequence, gives\n        bin edges, including left edge of first bin and right edge of last\n        bin. In this case, bins is returned unmodified.\n\n    backend : str, default None\n        Backend to use instead of the backend specified in the option\n        ``plotting.backend``. For instance, ",
      "https://en.wikipedia.org/wiki/Box_plot>`_.\n\nParameters\n----------\n%(data)s\\\ncolumn : str or list of str, optional\n    Column name or list of names, or vector.\n    Can be any valid input to :meth:`pandas.DataFrame.groupby`.\nby : str or array-like, optional\n    Column in the DataFrame to :meth:`pandas.DataFrame.groupby`.\n    One box-plot will be done per value of columns in `by`.\nax : object of class matplotlib.axes.Axes, optional\n    The matplotlib axes to be used by boxplot.\nfontsize : float or str\n    Tick label font size in points or as a string (e.g., `large`).\nrot : float, default 0\n    The rotation angle of labels (in degrees)\n    with respect to the screen coordinate system.\ngrid : bool, default True\n    Setting this to True will show the grid.\nfigsize : A tuple (width, height) in inches\n    The size of the figure to create in matplotlib.\nlayout : tuple (rows, columns), optional\n    For example, (3, 5) will display the subplots\n    using 3 rows and 5 columns, starting from the top-left.\nreturn_type : {",
      "https://en.wikipedia.org/wiki/Box_plot>`__.\n\n        A consideration when using this chart is that the box and the whiskers\n        can overlap, which is very common when plotting small sets of data.\n\n        Parameters\n        ----------\n        by : str or sequence\n            Column in the DataFrame to group by.\n\n            .. versionchanged:: 1.4.0\n\n               Previously, `by` is silently ignore and makes no groupings\n\n        **kwargs\n            Additional keywords are documented in\n            :meth:`DataFrame.plot`.\n\n        Returns\n        -------\n        :class:`matplotlib.axes.Axes` or numpy.ndarray of them\n\n        See Also\n        --------\n        DataFrame.boxplot: Another method to draw a box plot.\n        Series.plot.box: Draw a box plot from a Series object.\n        matplotlib.pyplot.boxplot: Draw a box plot in matplotlib.\n\n        Examples\n        --------\n        Draw a box plot from a DataFrame with four columns of randomly\n        generated data.\n\n        .. plot::\n            :context: close-figs\n\n            >>> data = np.random.randn(25, 4)\n            >>> df = pd.DataFrame(data, columns=list(",
      "https://en.wikipedia.org/wiki/Kernel_density_estimation\n\n        Parameters\n        ----------\n        bw_method : str, scalar or callable, optional\n            The method used to calculate the estimator bandwidth. This can be\n            ",
      "https://github.com/python/importlib_metadata/issues/298\n    if hasattr(eps, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\plotting\\_core.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://doi.org/10.1145/331770.331775>`_\n    describing RadViz.\n\n    Parameters\n    ----------\n    frame : `DataFrame`\n        Object holding the data.\n    class_column : str\n        Column name containing the name of the data point category.\n    ax : :class:`matplotlib.axes.Axes`, optional\n        A plot instance to which to add the information.\n    color : list[str] or tuple[str], optional\n        Assign a color to each category. Example: [",
      "https://raw.githubusercontent.com/pandas-dev/",
      "https://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29\n\n    Parameters\n    ----------\n    series : pandas.Series\n        Series from where to get the samplings for the bootstrapping.\n    fig : matplotlib.figure.Figure, default None\n        If given, it will use the `fig` reference for plotting instead of\n        creating a new one with default parameters.\n    size : int, default 50\n        Number of data points to consider during each sampling. It must be\n        less than or equal to the length of the `series`.\n    samples : int, default 500\n        Number of times the bootstrap procedure is performed.\n    **kwds\n        Options to pass to matplotlib plotting method.\n\n    Returns\n    -------\n    matplotlib.figure.Figure\n        Matplotlib figure.\n\n    See Also\n    --------\n    pandas.DataFrame.plot : Basic plotting for DataFrame objects.\n    pandas.Series.plot : Basic plotting for Series objects.\n\n    Examples\n    --------\n    This example draws a basic bootstrap plot for a Series.\n\n    .. plot::\n        :context: close-figs\n\n        >>> s = pd.Series(np.random.uniform(size=100))\n        >>> pd.plotting.bootstrap_plot(s)  # doctest: +SKIP\n        <Figure size 640x480 with 6 Axes>\n    ",
      "https://raw.githubusercontent.com/pandas-dev/"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\plotting\\_misc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pyviz/hvplot as a reference on how to write a backend.\n\nFor the discussion about the API see\nhttps://github.com/pandas-dev/pandas/issues/26747.\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\plotting\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/22205\n        s = np.tile(1.0, 1_000_001)\n        s[0] = np.nan\n        result = algos.isin(s, np.array([np.nan, 1]))\n        expected = np.ones(len(s), dtype=bool)\n        tm.assert_numpy_array_equal(result, expected)\n\n    def test_same_nan_is_in_large_series(self):\n        # https://github.com/pandas-dev/pandas/issues/22205\n        s = np.tile(1.0, 1_000_001)\n        series = Series(s)\n        s[0] = np.nan\n        result = series.isin(np.array([np.nan, 1]))\n        expected = Series(np.ones(len(s), dtype=bool))\n        tm.assert_series_equal(result, expected)\n\n    def test_same_object_is_in(self):\n        # GH 22160\n        # there could be special treatment for nans\n        # the user however could define a custom class\n        # with similar behavior, then we at least should\n        # fall back to usual python",
      "https://github.com/pandas-dev/pandas/issues/9443#issuecomment-73719328\n\n        tm.assert_series_equal(\n            Series([True, True, False]).value_counts(dropna=True),\n            Series([2, 1], index=[True, False], name=",
      "https://github.com/pandas-dev/pandas/issues/16519\n        expected = np.empty(len(uniques), dtype=object)\n        expected[:] = uniques\n\n        msg = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\test_algos.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydata/xarray/issues/3751\n    cftime = pytest.importorskip(",
      "https://github.com/MacPython/pandas-wheels/pull/50\n\n    pyexe = sys.executable.replace(",
      "https://github.com/data-apis/dataframe-api-compat,\n    this is just to check that the entry point works as expected.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\test_downstream.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/36047\n        with monkeypatch.context() as m:\n            m.setattr(expr, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\test_expressions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/24752\n    def test_nanmean(self, unit):\n        dti = pd.date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\test_nanops.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opm.gov/policy-data-oversight/pay-leave/federal-holidays/\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tseries\\holiday.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://matplotlib.org/users/license.html\n\n\nclass Substitution:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\util\\_decorators.py"
  },
  {
    "pattern": "/Users/[^\"\\']+",
    "matches": [
      "/users/license.html\n\n\nclass Substitution:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\util\\_decorators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/17407119/python-inspect-stack-is-slow\n    frame: FrameType | None = inspect.currentframe()\n    try:\n        n = 0\n        while frame:\n            filename = inspect.getfile(frame)\n            if filename.startswith(pkg_dir) and not filename.startswith(test_dir):\n                frame = frame.f_back\n                n += 1\n            else:\n                break\n    finally:\n        # See note in\n        # https://docs.python.org/3/library/inspect.html#inspect.Traceback\n        del frame\n    return n\n\n\n@contextlib.contextmanager\ndef rewrite_warning(\n    target_message: str,\n    target_category: type[Warning],\n    new_message: str,\n    new_category: type[Warning] | None = None,\n) -> Generator[None, None, None]:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\util\\_exceptions.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "5.10.102.1"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\util\\_print_versions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/17407119/python-inspect-stack-is-slow\n    frame = inspect.currentframe()\n    for _ in range(4):\n        frame = frame.f_back  # type: ignore[union-attr]\n    try:\n        caller_filename = inspect.getfile(frame)  # type: ignore[arg-type]\n    finally:\n        # See note in\n        # https://docs.python.org/3/library/inspect.html#inspect.Traceback\n        del frame\n    msg = (\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\_testing\\_warnings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/blob/master/python/pyarrow/src/arrow/python/helpers.cc#L86\n    FLOAT_PYARROW_DTYPES = [pa.float32(), pa.float64()]\n    FLOAT_PYARROW_DTYPES_STR_REPR = [\n        str(ArrowDtype(typ)) for typ in FLOAT_PYARROW_DTYPES\n    ]\n    DECIMAL_PYARROW_DTYPES = [pa.decimal128(7, 3)]\n    STRING_PYARROW_DTYPES = [pa.string()]\n    BINARY_PYARROW_DTYPES = [pa.binary()]\n\n    TIME_PYARROW_DTYPES = [\n        pa.time32(",
      "https://arrow.apache.org/docs/python/api/datatypes.html#factory-functions\n    ALL_PYARROW_DTYPES = (\n        ALL_INT_PYARROW_DTYPES\n        + FLOAT_PYARROW_DTYPES\n        + DECIMAL_PYARROW_DTYPES\n        + STRING_PYARROW_DTYPES\n        + BINARY_PYARROW_DTYPES\n        + TIME_PYARROW_DTYPES\n        + DATE_PYARROW_DTYPES\n        + DATETIME_PYARROW_DTYPES\n        + TIMEDELTA_PYARROW_DTYPES\n        + BOOL_PYARROW_DTYPES\n    )\n    ALL_REAL_PYARROW_DTYPES_STR_REPR = (\n        ALL_INT_PYARROW_DTYPES_STR_REPR + FLOAT_PYARROW_DTYPES_STR_REPR\n    )\nelse:\n    FLOAT_PYARROW_DTYPES_STR_REPR = []\n    ALL_INT_PYARROW_DTYPES_STR_REPR = []\n    ALL_PYARROW_DTYPES = []\n    ALL_REAL_PYARROW_DTYPES_STR_REPR = []\n\nALL_REAL_NULLABLE_DTYPES = (\n    FLOAT_NUMPY_DTYPES + ALL_REAL_EXTENSION_DTYPES + ALL_REAL_PYARROW_DTYPES_STR_REPR\n)\n\narithmetic_dunder_methods = [\n    ",
      "https://github.com/pandas-dev/pandas/pull/46018 and\n        # https://github.com/pandas-dev/pandas/issues/32638 and linked issues\n        return lambda *args, **kwargs: SubclassedSeries(*args, **kwargs)\n\n    @property\n    def _constructor_expanddim(self):\n        return lambda *args, **kwargs: SubclassedDataFrame(*args, **kwargs)\n\n\nclass SubclassedDataFrame(DataFrame):\n    _metadata = [",
      "https://github.com/pandas-dev/pandas/pull/43930#discussion_r736862669\n        left = cast("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\_testing\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/packaging/blob/main/packaging/_structures.py\n# and https://github.com/pypa/packaging/blob/main/packaging/_structures.py\n# changeset ae891fd74d6dd4c6063bb04f2faeadaac6fc6313\n# 04/30/2021\n\n# This file is dual licensed under the terms of the Apache License, Version\n# 2.0, and the BSD License. Licence at LICENSES/PACKAGING_LICENSE\nfrom __future__ import annotations\n\nimport collections\nfrom collections.abc import Iterator\nimport itertools\nimport re\nfrom typing import (\n    Callable,\n    SupportsInt,\n    Tuple,\n    Union,\n)\nimport warnings\n\n__all__ = ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\util\\version\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31505\n    expected = DataFrame(\n        {",
      "https://github.com/pandas-dev/pandas/issues/30815\n\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/34506\n    if engine == ",
      "https://github.com/pandas-dev/pandas/issues/35940\n    if engine == ",
      "https://github.com/pandas-dev/pandas/issues/48656\n    df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/39636\n    df = DataFrame([], columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_transform.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32815\n    s = Series([1, 2, 3])\n    msg = ",
      "https://github.com/pandas-dev/pandas/issues/46588\n    s = Series([1, 2, 3])\n    msg = f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_invalid_arg.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/13841\n    # Raising in __eq__ will fallback to NumPy, which warns, fails,\n    # then re-raises the original exception. So we just need to ignore.\n    @pytest.mark.filterwarnings(",
      "https://github.com/pandas-dev/pandas/issues/10329\n            time(1, 2, 3),\n        ],\n    )\n    @pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/10329\n\n        tz = tz_naive_fixture\n\n        obj1 = date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_datetime64.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/18832\n                ",
      "https://github.com/numpy/numpy/pull/8127\n        idx1 = idx1._rename(",
      "https://github.com/numpy/numpy/pull/8127\n        result = pow(idx, scalar)\n        expected = pow(Index(idx.to_numpy()), scalar)\n        tm.assert_index_equal(result, expected, exact="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_numeric.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31109\n    values = np.array(\n        [datetime.date(2000, 1, 1), datetime.date(2000, 1, 2)], dtype=object\n    )\n    a = MyIndex._simple_new(values)\n    other = pd.Index(other)\n    result = other + a\n    assert isinstance(result, MyIndex)\n    assert a._calls == 1\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_object.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32762\n    if not as_index:\n        values = values._data\n\n    result = values.searchsorted(klass(values))\n    expected = np.array([0, 1], dtype=result.dtype)\n\n    tm.assert_numpy_array_equal(result, expected)\n\n\n@pytest.mark.parametrize(\n    ",
      "https://github.com/pandas-dev/pandas/issues/32762\n    msg = ",
      "https://github.com/pandas-dev/pandas/issues/26109\n    strings = ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimelike.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/48748#issuecomment-1260181008\n        td = pd.Timedelta(microseconds=1)\n        dti = pd.date_range(",
      "https://github.com/pandas-dev/pandas/pull/32490\n        ser = pd.Series([1, 2], dtype=dtype)\n        orig = ser.copy()\n\n        err = False\n        if (dtype == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34843\n        arr.flags.writeable = False\n        result = constructor(arr)\n        tm.assert_equal(result, expected)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\base\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33820\n    df = pd.DataFrame(data)\n    result = df.to_numpy(dtype=dtype, na_value=na_value)\n    expected = np.array([[1, 1], [2, 2], [3, na_value]], dtype=dtype)\n    tm.assert_numpy_array_equal(result, expected)\n\n\n@pytest.mark.parametrize(\n    ",
      "https://github.com/pandas-dev/pandas/issues/33820\n    df = pd.DataFrame(data)\n    result = df.to_numpy(dtype=float, na_value=np.nan)\n    tm.assert_numpy_array_equal(result, expected)\n\n\ndef test_to_numpy_dataframe_single_block_no_mutate():\n    # https://github.com/pandas-dev/pandas/issues/33820\n    result = pd.DataFrame(np.array([1.0, 2.0, np.nan]))\n    expected = pd.DataFrame(np.array([1.0, 2.0, np.nan]))\n    result.to_numpy(na_value=0.0)\n    tm.assert_frame_equal(result, expected)\n\n\nclass TestAsArray:\n    @pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\base\\test_conversion.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/15981\n        mark = pytest.mark.xfail(reason="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\base\\test_misc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydata/numexpr/issues/492",
      "https://github.com/pandas-dev/pandas/issues/12293\n        #  this fails on Windows, apparently a floating point precision issue\n\n        # Did not test complex64 because DataFrame is converting it to\n        # complex128. Due to https://github.com/pandas-dev/pandas/issues/10952\n        df = DataFrame(\n            {",
      "https://github.com/pandas-dev/pandas/issues/10239\n        # lose name with numexpr engine. Remove when that",
      "https://github.com/pandas-dev/pandas/pull/42826\n    df = DataFrame(\n        np.random.default_rng(2).standard_normal((5, 2)), columns=[column, ",
      "https://github.com/pandas-dev/pandas/issues/47449\n    # Ensure we don"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\computation\\test_eval.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/8514\n\n        original_value = 60\n        context_value = 10\n        option_name = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\config\\test_config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/54654\n    # ensure_string_array may alter array inplace\n    base = Series(np.array([(1, 2), None, 1], dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_astype.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/55745\n        # changed to NOT update inplace because there is no benefit (actual\n        # operation already done non-inplace). This was only for the optics\n        # of updating the backing array inplace, but we no longer want to make\n        # that guarantee\n        assert not np.shares_memory(get_array(ser), data)\n        tm.assert_numpy_array_equal(data, get_array(ser_orig))\n    else:\n        assert np.shares_memory(get_array(ser), data)\n        tm.assert_numpy_array_equal(data, get_array(ser))\n\n\ndef test_inplace_arithmetic_series_with_reference(\n    using_copy_on_write, warn_copy_on_write\n):\n    ser = Series([1, 2, 3])\n    ser_orig = ser.copy()\n    view = ser[:]\n    with tm.assert_cow_warning(warn_copy_on_write):\n        ser *= 2\n    if using_copy_on_write:\n        assert not np.shares_memory(get_array(ser), get_array(view))\n        tm.assert_series_equal(ser_orig, view)\n    else:\n        assert np.shares_memory(get_array(ser), get_array(view))\n\n\n@pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_methods.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/25257\n    df = pd.DataFrame(\n        {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_concat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/37265\n    dtype = PeriodDtype(freq="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_dtypes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/5326, just test\n    # is_hashable()\n    assert not inference.is_hashable(np.array([]))\n\n\n@pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/23553\n        values = klass(\n            [\n                Period(",
      "https://github.com/pandas-dev/pandas/issues/33741\n        result = lib.infer_dtype(values, skipna=skipna)\n        assert result == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_inference.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/50360\n    left = np.array([np.array([1, 2, 3]), np.array([4, 5])], dtype=object)\n    right = np.array([[1, 2, 3], [4, 5]], dtype=object)\n\n    assert array_equivalent(left, right, strict_nan=strict_nan)\n    assert not array_equivalent(left, right[::-1], strict_nan=strict_nan)\n\n    # multiple levels of nesting\n    left = np.array(\n        [\n            np.array([np.array([1, 2, 3]), np.array([4, 5])], dtype=object),\n            np.array([np.array([6]), np.array([7, 8]), np.array([9])], dtype=object),\n        ],\n        dtype=object,\n    )\n    right = np.array([[[1, 2, 3], [4, 5]], [[6], [7, 8], [9]]], dtype=object)\n    assert array_equivalent(left, right, strict_nan=strict_nan)\n    assert not array_equivalent(left, right[::-1], strict_nan=strict_nan)\n\n    # same-length lists\n    subarr = np.empty(2, dtype=object)\n    subarr[:] = [\n        np.array([None, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_missing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/54930)\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\conftest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/47034#discussion_r955500784\n        # data._pa_array = pa.ChunkedArray\n        result = type(data)._from_sequence(data._pa_array, dtype=data.dtype)\n        tm.assert_extension_array_equal(result, data)\n        assert isinstance(result._pa_array, pa.ChunkedArray)\n\n        result = type(data)._from_sequence(\n            data._pa_array.combine_chunks(), dtype=data.dtype\n        )\n        tm.assert_extension_array_equal(result, data)\n        assert isinstance(result._pa_array, pa.ChunkedArray)\n\n    def test_from_sequence_pa_array_notimplemented(self, request):\n        with pytest.raises(NotImplementedError, match=",
      "https://github.com/pandas-dev/pandas/issues/49767"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_arrow.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/30958\n\n        cmp_dtype = ",
      "https://github.com/pandas-dev/pandas/issues/30958\n        length = 64\n        if is_windows_or_32bit:\n            # Item "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_masked.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32395\n        df = expected = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_numpy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/20762\n        # This should be the same, aside from concat([sparse, float])\n        df1 = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_sparse.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34311\n    df = DataFrame(\n        np.random.default_rng(2).integers(0, 100, (10, 3)), columns=[",
      "https://github.com/pandas-dev/pandas/issues/35194\n    df1 = DataFrame(data=[[0]], columns=[",
      "https://github.com/pandas-dev/pandas/issues/36373\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/33765\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_arithmetic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/23995 for more.\n        arr = Series([1, 2, 3]).array\n        result = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/33457\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/35521\n\n    # create non-consolidated dataframe with object dtype columns\n    df = DataFrame()\n    df["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_block_internals.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/39272\n        arr = np.array([",
      "https://github.com/pandas-dev/pandas/issues/39272\n        arr = np.array([[",
      "https://github.com/pandas-dev/pandas/issues/32289\n        a = DataFrame()\n        b = np.empty((0, 0))\n        with pytest.raises(ValueError, match=r",
      "https://github.com/pandas-dev/pandas/issues/21083\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/49523\n        orig = float_frame.copy()\n        cop = DataFrame(float_frame)\n        assert cop._mgr is not float_frame._mgr\n        # Overwriting index of copy doesn",
      "https://github.com/pandas-dev/pandas/issues/32582\n        values = typ({1, 2, 3})\n        msg = f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/29463\n        tz = tz_aware_fixture\n        df_index = date_range(\n            start=",
      "https://github.com/pandas-dev/pandas/issues/22435\n        n = 10\n        df = DataFrame(\n            {\n                ",
      "https://github.com/pandas-dev/pandas/pull/32460\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_query_eval.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/24752\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/24752\n        # Behavior in 0.24.0rc1 was buggy.\n        # As of 2.0 with numeric_only=None we do *not* drop datetime columns\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/39738\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/33256\n        arr = np.random.default_rng(2).integers(1000, size=(10, 5))\n        df = DataFrame(arr, dtype=",
      "https://github.com/pandas-dev/pandas/issues/34520\n    df = DataFrame([[",
      "https://github.com/pandas-dev/pandas/issues/32651\n    int64_info = np.iinfo(",
      "https://github.com/pandas-dev/pandas/issues/41074\n    df = DataFrame([1, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_reductions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/reference/datamodel.html#object.__repr__\n        # ",
      "https://github.com/pandas-dev/pandas/pull/24134/files\n        df = DataFrame(\n            {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_repr.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/36353\n    columns = MultiIndex.from_product([(",
      "https://github.com/pandas-dev/pandas/issues/19351\n        # make sure DataFrame.unstack() works when its run on a subset of the DataFrame\n        # and the Index levels contain values that are not present in the subset\n        result = DataFrame(result_rows, columns=result_columns).set_index(\n            [",
      "https://github.com/pandas-dev/pandas/issues/37115\n        df = DataFrame(\n            {\n                "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_stack_unstack.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/34402\n        # allow subclass in both directions\n        df1 = DataFrame({",
      "https://github.com/pandas-dev/pandas/pull/46018\n        df = tm.SubclassedDataFrame({",
      "https://github.com/pandas-dev/pandas/pull/54922\n    # https://github.com/pandas-dev/pandas/issues/55120\n    df = MySubclassWithMetadata(\n        np.random.default_rng(2).random((5, 3)), columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_subclass.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/39259\n    df = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/39184\n    df1 = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/39184\n    # test that the deprecation also works with > 2 inputs -> using a numba\n    # written ufunc for this because numpy itself doesn"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_ufunc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/37186/files#r506978889\n    # ensure we don"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_finalize.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/50862\n        tm.assert_equal(result.reset_index(drop=True), expected)\n\n        # get the bool data\n        arr = np.array([True, True, False, True])\n        o = construct(frame_or_series, n, value=arr, **kwargs)\n        result = o._get_numeric_data()\n        tm.assert_equal(result, o)\n\n    def test_nonzero(self, frame_or_series):\n        # GH 4633\n        # look at the boolean/nonzero behavior for objects\n        obj = construct(frame_or_series, shape=4)\n        msg = f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_generic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/41971#issuecomment-860607472\n\n\n@pytest.fixture(params=[False])\ndef nogil(request):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\conftest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31068\n    b = [1, 2] * 5\n    if category:\n        b = pd.Categorical(b, categories=[1, 2, 3])\n        expected_index = pd.CategoricalIndex([1, 2, 3], categories=[1, 2, 3], name=",
      "https://github.com/pandas-dev/pandas/issues/34809\n    # We"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31802\n    # Some operations may require creating new blocks, which requires\n    # valid mgr_locs\n    df = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_bin_groupby.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/8138\n    d = {\n        ",
      "https://stackoverflow.com/questions/23814368/sorting-pandas-\n    #        categorical-labels-after-groupby\n    # This should result in a properly sorted Series so that the plot\n    # has a sorted x axis\n    # self.cat.groupby([",
      "https://github.com/pandas-dev/pandas/issues/18678\n    df = DataFrame(\n        {",
      "https://github.com/pandas-dev/pandas/issues/18678\n    df = DataFrame(\n        {",
      "https://github.com/pandas-dev/pandas/issues/21390\n\n    df = DataFrame(\n        {\n            ",
      "https://github.com/pandas-dev/pandas/issues/31450\n    df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_categorical.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32841\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_counting.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/18314\n    df = DataFrame(\n        {\n            (",
      "https://github.com/pandas-dev/pandas/issues/18798\n    df = DataFrame(1, index=range(3), columns=MultiIndex.from_product([[1, 2], [3, 4]]))\n    with pytest.raises(KeyError, match=r"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/56761\n    result = custom_df.groupby("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_subclass.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/27190\n        s = Series([], name=",
      "https://github.com/pandas-dev/pandas/issues/31670\n        df = DataFrame(\n            [[123, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_grouping.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/39329\n    # simplified case: multiple object columns where one is all-NaN\n    # -> gets split as the all-NaN is inferred as float\n    df = DataFrame(\n        {",
      "https://github.com/pandas-dev/pandas/issues/32861\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_reductions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/16409\n        pytest.importorskip(",
      "https://github.com/numpy/numpy/issues/11521\n        idx = Index([(",
      "https://github.com/numpy/numpy/issues/19146\n        #  but a more accurate choice would be uint64\n        values = [0, np.iinfo(np.uint64).max]\n\n        result = ensure_index(values)\n        assert list(result) == values\n\n        expected = Index(values, dtype=",
      "https://github.com/pandas-dev/pandas/issues/27125\n    # about this). However, as long as this is not solved in general,this test ensures\n    # that the returned shape is consistent with this underlying array for\n    # compat with matplotlib (see https://github.com/pandas-dev/pandas/issues/27775)\n    idx = Index([0, 1, 2, 3])\n    with pytest.raises(ValueError, match="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32013\n        if isinstance(index, MultiIndex):\n            index.names = ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34191\n\n    msg = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/55793/files#r1383719998\n        tz = maybe_get_tz("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_index_new.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org/doc/stable/reference/ufuncs.html\n\n    if isinstance(index, DatetimeIndexOpsMixin):\n        with tm.external_error_raised((TypeError, AttributeError)):\n            with np.errstate(all=",
      "https://numpy.org/doc/stable/reference/ufuncs.html\n    if isinstance(index, (DatetimeIndex, TimedeltaIndex)):\n        if func in (np.isfinite, np.isinf, np.isnan):\n            # numpy 1.18 changed isinf and isnan to not raise on dt64/td64\n            result = func(index)\n            assert isinstance(result, np.ndarray)\n\n            out = np.empty(index.shape, dtype=bool)\n            func(index, out=out)\n            tm.assert_numpy_array_equal(out, result)\n        else:\n            with tm.external_error_raised(TypeError):\n                func(index)\n\n    elif isinstance(index, PeriodIndex):\n        with tm.external_error_raised(TypeError):\n            func(index)\n\n    elif is_numeric_dtype(index) and not (\n        is_complex_dtype(index) and func is np.signbit\n    ):\n        # Results in bool array\n        result = func(index)\n        if not isinstance(index.dtype, np.dtype):\n            # e.g. Int64 we expect to get BooleanArray back\n            assert isinstance(result, BooleanArray)\n        else:\n            assert isinstance(result, np.ndarray)\n\n        out = np.empty(index.shape, dtype=bool)\n        func(index, out=out)\n\n        if not isinstance(index.dtype, np.dtype):\n            tm.assert_numpy_array_equal(out, result._data)\n        else:\n            tm.assert_numpy_array_equal(out, result)\n\n    elif len(index) == 0:\n        pass\n    else:\n        with tm.external_error_raised(TypeError):\n            func(index)\n\n\n@pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/46769\n    idx1 = Index([1, 2, 3, 4], dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_numpy_compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/47071\n\n    idx = CustomIndex([1, 2, 3])\n    result = idx.insert(0, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_subclass.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33544\n    result = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_at.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/24054495/potential-bug-setting-value-for-undefined-column-using-iloc\n        df = DataFrame(np.arange(0, 9), columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_chaining_and_caching.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31503\n    arr = np.array([1, 2, 3])\n\n    result = check_array_indexer(arr, indexer)\n    expected = np.array([True, False, False], dtype=bool)\n\n    tm.assert_numpy_array_equal(result, expected)\n\n\n@pytest.mark.parametrize(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_check_indexer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/11754\n    df = DataFrame([[1, 2]], columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/46268\n\n    # For numeric data, assigning length-1 array to scalar position gets unpacked\n    df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://groups.google.com/forum/?fromgroups#!topic/pydata/zTm2No0crYs\n\n        # these are going to raise because the we are non monotonic\n        df = DataFrame(\n            {",
      "https://github.com/pandas-dev/pandas/issues/56223\n            result.loc[:, idxer] = expected\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_setitem_time_key(self, using_array_manager):\n        index = date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_loc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31503\n    obj = frame_or_series([1, 2, 3])\n\n    mask = pd.array([True, False, None], dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_na_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/53077\n    pa = pytest.importorskip(",
      "https://github.com/pandas-dev/pandas/issues/48393\n    df = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/54781\n    df = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/56703\n    df = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/56701\n    df = pd.Series([1, 2, 3], name=0).to_frame()\n    names = df.__dataframe__().column_names()\n    assert names == [",
      "https://github.com/pandas-dev/pandas/issues/56701\n    df = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/57643\n    # https://github.com/pandas-dev/pandas/issues/57664\n    pa = pytest.importorskip(",
      "https://github.com/pandas-dev/pandas/issues/57643\n    pa = pytest.importorskip(",
      "https://github.com/pandas-dev/pandas/issues/57761\n    pytest.importorskip(",
      "https://github.com/pandas-dev/pandas/issues/57762\n    pytest.importorskip(",
      "https://github.com/pandas-dev/pandas/issues/56700\n    df = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/data-apis/dataframe-api\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_spec_conformance.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/blob/master/python/pyarrow/types.pxi\n\n\n@pytest.mark.parametrize(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/24866\n    arr = pd.arrays.NumpyExtensionArray(np.array([1, 2]))\n\n    # NumpyExtensionArray, no dtype\n    result = block_maker(arr, BlockPlacement(slice(len(arr))), ndim=arr.ndim)\n    assert result.dtype.kind in ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_internals.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5000"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\conftest.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5000",
      "http://127.0.0.1:{endpoint_port}/"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\conftest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/spulec/moto/issues/1924 & 1952\n    monkeypatch.setenv("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\conftest.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\conftest.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://pandas/somethingelse.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/cython/cython/issues/1720\nclass TestCommonIOCapabilities:\n    data1 = ",
      "https://stackoverflow.com/questions/55171439\n\n        GH 35681\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/27575\n    code = textwrap.dedent(\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_compression.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/wesm/feather/issues/53\n        # not currently able to handle duplicate columns\n        df = pd.DataFrame(np.arange(12).reshape(4, 3), columns=list("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_feather.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/ZIP_(file_format)#File_headers\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_gcs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wiktionary.org/wiki/linkless",
      "https://en.wikipedia.org/",
      "https://en.wikipedia.org/wiki/Page_footer",
      "https://en.wiktionary.org/wiki/linkless",
      "https://en.wikipedia.org/",
      "https://en.wikipedia.org/wiki/Page_footer",
      "https://google.com",
      "https://google.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_html.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/37286",
      "https://github.com/pandas-dev/pandas/issues/26551\n        pytest.importorskip(",
      "https://github.com/pandas-dev/pandas/issues/55606\n    #     # above 2GB of string data\n    #     v1 = b",
      "https://github.com/dask/fastparquet/issues/929"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_parquet.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://url.com",
      "http://gzip.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_pickle.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/51315\n@pytest.mark.filterwarnings(",
      "https://haven.tidyverse.org/)\n    # Licence at LICENSES/HAVEN_LICENSE, LICENSES/HAVEN_MIT\n    fname = path_klass(datapath(",
      "https://haven.tidyverse.org/)\n    # Licence at LICENSES/HAVEN_LICENSE, LICENSES/HAVEN_MIT\n    fname = datapath(",
      "https://haven.tidyverse.org/)\n    # Licence at LICENSES/HAVEN_LICENSE, LICENSES/HAVEN_MIT\n    fname = datapath(",
      "https://haven.tidyverse.org/)\n    # Licence at LICENSES/HAVEN_LICENSE, LICENSES/HAVEN_MIT\n    fname = datapath(",
      "https://haven.tidyverse.org/)\n    # Licence at LICENSES/HAVEN_LICENSE, LICENSES/HAVEN_MIT\n    fname = datapath("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_spss.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:3306",
      "localhost:5432",
      "localhost:5432"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_sql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/10104\n    from sqlalchemy.engine import Engine\n\n    def test_select(connection):\n        query = ",
      "https://github.com/sqlalchemy/sqlalchemy/commit/\n        # 00b5c10846e800304caa86549ab9da373b42fa5d#r48323973\n        foo_data = test_select(conn)\n        test_append(conn, foo_data)\n\n    def main(connectable):\n        if isinstance(connectable, Engine):\n            with connectable.connect() as conn:\n                with conn.begin():\n                    test_connectable(conn)\n        else:\n            test_connectable(connectable)\n\n    assert (\n        DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/55554\n    conn = sqlite_builtin_detect_types\n    df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_sql.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://go.worldbank.org/ZXY29PVJ21\n        dpath = datapath("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\test_stata.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://matplotlib.org/stable/users/prev_whats_new/whats_new_3.6.0.html#garbage-collection-is-no-longer-run-on-figure-close  # noqa: E501\n    gc.collect(1)\n\n\n@pytest.fixture\ndef hist_df():\n    n = 50\n    rng = np.random.default_rng(10)\n    gender = rng.choice(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\conftest.py"
  },
  {
    "pattern": "/Users/[^\"\\']+",
    "matches": [
      "/users/prev_whats_new/whats_new_3.6.0.html#garbage-collection-is-no-longer-run-on-figure-close  # noqa: E501\n    gc.collect(1)\n\n\n@pytest.fixture\ndef hist_df():\n    n = 50\n    rng = np.random.default_rng(10)\n    gender = rng.choice(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\conftest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/28647\n    monkeypatch.setitem(sys.modules, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_backend.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/7096\n\n        df = DataFrame(\n            np.random.default_rng(2).standard_normal((6, 4)),\n            index=list(string.ascii_letters[:6]),\n            columns=[",
      "https://github.com/pandas-dev/pandas/pull/7096\n\n        df = DataFrame(\n            np.random.default_rng(2).standard_normal((6, 4)),\n            index=list(string.ascii_letters[:6]),\n            columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_boxplot_method.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/matplotlib/matplotlib/issues/8459\n        rng = date_range(",
      "https://github.com/matplotlib/matplotlib/issues/11391\n        df = DataFrame(np.random.default_rng(2).random((10, 2)), columns=[",
      "https://github.com/pandas-dev/pandas/issues/29460\n        # regular time series\n        x = to_datetime(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_datetimelike.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33450\n        cat = Series(Categorical([np.nan], categories=[1, 2], ordered=True))\n        result = getattr(cat, function)(skipna=skipna)\n        assert result is np.nan\n\n    @pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_reductions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pytest.org/en/latest/fixture.html#override-a-fixture-with-direct-test-parametrization  # noqa: E501\n# in this module we override the fixture values defined in conftest.py\n# tuples of "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/8683\n\n    index1 = date_range(",
      "https://github.com/pandas-dev/pandas/issues/51024\n    idx = date_range(",
      "https://github.com/pandas-dev/pandas/issues/55271\n    dti = date_range(start=",
      "https://github.com/pandas-dev/pandas/issues/55281\n    dti = date_range(start=",
      "https://github.com/pandas-dev/pandas/issues/55282\n    dti = date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_datetime_index.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/39329\n\n    dates = date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_resampler_grouper.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/37465\n    g = np.random.default_rng(2)\n    a = Series(g.integers(0, 3, size=100)).astype(a_dtype)\n    b = Series(g.integers(0, 2, size=100)).astype(b_dtype)\n    result = crosstab(a, b, margins=True, dropna=False)\n    columns = Index([0, 1, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_crosstab.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/56101#discussion_r1405325425\n        # for why we round to 8 seconds instead of 7\n        left = DatetimeIndex(\n            [",
      "https://github.com/pandas-dev/pandas/pull/56101#discussion_r1405325425\n        # for why we round to 8 seconds instead of 7\n        expected_bins = DatetimeIndex(\n            [",
      "https://github.com/pandas-dev/pandas/issues/36603\n    ser = Series([1, 2, 3, 4, 5])\n    bins = Series([0, 2, 4, 6])\n    labels = Series([",
      "https://github.com/pandas-dev/pandas/issues/46218\n    bins = interval_range(Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_cut.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/14427\n            expected = pd.concat(\n                [\n                    Series([1, 2, 3], name="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_get_dummies.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.ats.ucla.edu/stat/stata/modules/reshapel.htm\n        df = DataFrame(\n            {\n                "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_melt.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/19096\n        c1 = Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_union_categoricals.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31847\n    result = pickle.loads(pickle.dumps(NA))\n    assert result is NA\n\n\ndef test_pickle_roundtrip_pandas():\n    result = tm.round_trip_pickle(NA)\n    assert result is NA\n\n\n@pytest.mark.parametrize(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\scalar\\test_na_scalar.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/18147\n        # no exception and no empty docstring\n        assert pydoc.getdoc(Series.index)\n\n    def test_ndarray_compat(self):\n        # test numpy compat with Series as sub-class of NDFrame\n        tsdf = DataFrame(\n            np.random.default_rng(2).standard_normal((1000, 3)),\n            columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\test_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/9836#issuecomment-92123057\n        # and following comparisons with scalars not in categories should raise\n        # for unequal comps, but not for equal/not equal\n        cat = Series(Categorical(list("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\test_arithmetic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/21083\n        ser = Series([",
      "https://github.com/pandas-dev/pandas/issues/56131\n            tm.assert_series_equal(result, expected)\n\n        data = ma.masked_all((3,), dtype=bool)\n        result = Series(data)\n        expected = Series([np.nan, np.nan, np.nan], dtype=object)\n        tm.assert_series_equal(result, expected)\n\n        data[0] = True\n        data[2] = False\n        index = [",
      "https://github.com/pandas-dev/pandas/issues/56131\n            tm.assert_series_equal(result, expected)\n\n        data = ma.masked_all((3,), dtype=",
      "https://github.com/pandas-dev/pandas/issues/49523\n        s = Series([1, 2, 3])\n        s_orig = s.copy()\n        s2 = Series(s)\n        assert s2._mgr is not s._mgr\n        # Overwriting index of s2 doesn",
      "https://github.com/pandas-dev/pandas/issues/22698\n    @pytest.mark.filterwarnings(",
      "https://github.com/pandas-dev/pandas/pull/33846\n        result = Series(",
      "https://github.com/pandas-dev/pandas/issues/35762\n        dtype = pd.SparseDtype(",
      "https://github.com/pandas-dev/pandas/issues/36044\n        result = Series({",
      "https://github.com/pandas-dev/pandas/issues/36291\n        n = 1_000_000_000_000_000_000_000\n        result = Series(n, index=[0])\n        expected = Series(n)\n        tm.assert_series_equal(result, expected)\n\n    def test_constructor_list_of_periods_infers_period_dtype(self):\n        series = Series(list(period_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/23628\n        # multi-set Index ops are buggy, so let"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\test_logical_ops.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/commit/9030dc021f07c76809848925cb34828f6c8484f3\n\n        selector = -0.5 <= datetime_series <= 0.5\n        expected = (datetime_series >= -0.5) & (datetime_series <= 0.5)\n        tm.assert_series_equal(selector, expected)\n\n    def test_valid(self, datetime_series):\n        ts = datetime_series.copy()\n        ts.index = ts.index._with_freq(None)\n        ts[::2] = np.nan\n\n        result = ts.dropna()\n        assert len(result) == ts.count()\n        tm.assert_series_equal(result, ts[1::2])\n        tm.assert_series_equal(result, ts[pd.notna(ts)])\n\n\ndef test_hasnans_uncached_for_series():\n    # GH#19700\n    # set float64 dtype to avoid upcast when setting nan\n    idx = Index([0, 1], dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\test_missing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/34402\n        # allow subclass in both directions\n        s1 = pd.Series([1, 2, 3])\n        s2 = tm.SubclassedSeries([1, 2, 3])\n        assert s1.equals(s2)\n        assert s2.equals(s1)\n\n\nclass SubclassedSeries(pd.Series):\n    @property\n    def _constructor(self):\n        def _new(*args, **kwargs):\n            # some constructor logic that accesses the Series",
      "https://github.com/pandas-dev/pandas/issues/52445\n    result = SubclassedSeries({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\test_subclass.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/26987\n    a1[a1 == 0] = 1\n    a2[a2 == 0] = 1\n\n    if sparse:\n        a1 = SparseArray(a1, dtype=pd.SparseDtype(",
      "https://github.com/pandas-dev/pandas/issues/27186\n    ser = pd.Series([1, 2, 3])\n    obj = np.array([1, 2, 3])\n\n    with pytest.raises(NotImplementedError, match=",
      "https://github.com/pandas-dev/pandas/pull/51082\n@td.skip_copy_on_write_not_yet_implemented\ndef test_np_fix():\n    # np.fix is not a ufunc but is composed of several ufunc calls under the hood\n    # with `out` and `where` keywords\n    ser = pd.Series([-1.5, -0.5, 0.5, 1.5])\n    result = np.fix(ser)\n    expected = pd.Series([-1.0, -0.0, 0.0, 1.0])\n    tm.assert_series_equal(result, expected)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\test_ufunc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/10661\n    s = Series(list("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/54533/files#r1299808126"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_case_justify.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/18657\n    box = index_or_series\n\n    s = Series([",
      "https://github.com/pandas-dev/pandas/issues/33425\n    s = Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_cat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/6348\n    # not passing index to the extractor\n    data = ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_extract.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "dave@google.com",
      "tdhock5@gmail.com",
      "maudelaperriere@gmail.com",
      "rob@gmail.com",
      "steve@gmail.com",
      "a@b.com",
      "c@d.com",
      "e@f.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_extract.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/41025#issuecomment-824062416\n\n    values = Series([",
      "https://github.com/pandas-dev/pandas/issues/13438\n    msg = ",
      "https://github.com/pandas-dev/pandas/issues/41602\n    ser = Series([",
      "https://github.com/pandas-dev/pandas/pull/24809\n    s = Series([",
      "https://github.com/pandas-dev/pandas/pull/24809, enforced in 2.0\n    # GH 24804\n    s = Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_find_replace.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "dave@google.com",
      "steve@gmail.com",
      "rob@gmail.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_find_replace.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/23677\n\n    idx = Index([",
      "https://github.com/pandas-dev/pandas/issues/23558\n    # more than one char\n    s = Series([",
      "https://github.com/pandas-dev/pandas/issues/23558\n    # None\n    s = Series([",
      "https://github.com/pandas-dev/pandas/issues/23558\n    # Not split\n    s = Series([",
      "https://github.com/pandas-dev/pandas/issues/23558\n    # unicode\n    s = Series([",
      "https://github.com/pandas-dev/pandas/issues/23558\n    # compare to standard lib\n    s = Series([",
      "https://github.com/pandas-dev/pandas/issues/23558\n\n    values = Index([",
      "https://github.com/pandas-dev/pandas/issues/23558\n\n    s = Series([",
      "https://github.com/pandas-dev/pandas/issues/23558\n    s = Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_split_partition.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/10673\n    ser = Series(list(",
      "https://github.com/pandas-dev/pandas/issues/38979\n    df = DataFrame(zip(",
      "https://github.com/pandas-dev/pandas/issues/20868\n    value = Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_strings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/30969\n    # Only expand=False & multiple groups was failing\n\n    a = Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_string_array.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/50051\n            to_datetime(ser2, format=",
      "https://github.com/pandas-dev/pandas/issues/50237\n        # Explicit cast to float to explicit cast when setting np.nan\n        ser = Series([198012, 198012] + [198101] * 5, dtype=",
      "https://github.com/pandas-dev/pandas/issues/26493\n        result = to_datetime(\n            [",
      "https://github.com/pandas-dev/pandas/issues/50412\n        # the formats alternate between ISO8601 and non-ISO8601 to check both paths\n        result = to_datetime(\n            ",
      "https://github.com/pandas-dev/pandas/issues/50108\n        d1 = date(2020, 1, 2)\n        res = to_datetime([",
      "https://github.com/pandas-dev/pandas/issues/49298\n        # https://github.com/pandas-dev/pandas/issues/50254\n        # note: ISO8601 formats go down a fastpath, so we need to check both\n        # a ISO8601 format and a non-ISO8601 one\n        ts1 = constructor(args[0])\n        ts2 = args[1]\n        result = to_datetime([ts1, ts2], format=fmt, utc=utc)\n        tm.assert_index_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        ",
      "https://github.com/pandas-dev/pandas/issues/49298\n        # https://github.com/pandas-dev/pandas/issues/50254\n        # note: ISO8601 formats go down a fastpath, so we need to check both\n        # a ISO8601 format and a non-ISO8601 one\n        args = [",
      "https://github.com/pandas-dev/pandas/issues/50071\n        msg = ",
      "https://github.com/pandas-dev/pandas/issues/50071\n        result = to_datetime(\n            [",
      "https://github.com/pandas-dev/pandas/issues/49298\n        # note: ISO8601 formats go down a fastpath, so we need to check both\n        # a ISO8601 format and a non-ISO8601 one\n        ts1 = constructor(args[0])\n        ts2 = constructor(args[1])\n        with pytest.raises(\n            ValueError, match=",
      "https://github.com/pandas-dev/pandas/issues/50359\n        result = to_datetime([",
      "https://github.com/pandas-dev/pandas/issues/50036\n        result = to_datetime([arg, np.datetime64(",
      "https://github.com/pandas-dev/pandas/issues/31491\n        # Need at least 50 to ensure cache is used.\n        dts = [\n            np.datetime64(",
      "https://github.com/pandas-dev/pandas/issues/50587\n        result = to_datetime(np.datetime64(",
      "https://github.com/pandas-dev/pandas/issues/50585\n        arr = [\n            Timestamp(",
      "https://github.com/pandas-dev/pandas/issues/50255\n        with pytest.raises(\n            ValueError, match=",
      "https://github.com/pandas-dev/pandas/issues/50255\n        ts_strings = [string_arg, outofbounds]\n        result = to_datetime(ts_strings, errors=",
      "https://github.com/pandas-dev/pandas/issues/12649\n        # `format` is longer than the string, so this fails regardless of `exact`\n        with pytest.raises(\n            ValueError,\n            match=(\n                rf",
      "https://github.com/pandas-dev/pandas/issues/12649\n        # `format` is shorter than the date string, so only fails with `exact=True`\n        msg = ",
      "https://github.com/pandas-dev/pandas/issues/12649\n        expected = Timestamp(2012, 1, 1)\n        result = to_datetime(input, format=format, exact=False)\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        ",
      "https://github.com/pandas-dev/pandas/issues/12649\n        with pytest.raises(\n            ValueError,\n            match=(\n                rf",
      "https://github.com/pandas-dev/pandas/issues/12649\n        expected = Timestamp(2020, 1, 1)\n        result = to_datetime(input, format=format)\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        ",
      "https://github.com/pandas-dev/pandas/issues/21422\n        expected = Timestamp(2020, 1, 1)\n        result = to_datetime(input, format=format)\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        ",
      "https://github.com/pandas-dev/pandas/issues/12649\n        expected = Timestamp(2020, 1, 1, tzinfo=pytz.UTC)\n        result = to_datetime(input, format=format)\n        assert result == expected\n\n    def test_to_datetime_default(self, cache):\n        rs = to_datetime(",
      "https://github.com/pandas-dev/pandas/issues/49748\n        result = to_datetime(",
      "https://github.com/pandas-dev/pandas/issues/50462\n        with pytest.raises(ValueError, match=msg):\n            to_datetime(arg, errors=",
      "https://github.com/dateutil/dateutil/issues/217\n        yearfirst = True\n\n        result1, _ = parsing.parse_datetime_string_with_reso(\n            date_str, yearfirst=yearfirst\n        )\n        result2 = to_datetime(date_str, yearfirst=yearfirst)\n        result3 = to_datetime([date_str], yearfirst=yearfirst)\n        # result5 is used below\n        result4 = to_datetime(\n            np.array([date_str], dtype=object), yearfirst=yearfirst, cache=cache\n        )\n        result6 = DatetimeIndex([date_str], yearfirst=yearfirst)\n        # result7 is used below\n        result8 = DatetimeIndex(Index([date_str]), yearfirst=yearfirst)\n        result9 = DatetimeIndex(Series([date_str]), yearfirst=yearfirst)\n\n        for res in [result1, result2]:\n            assert res == expected\n        for res in [result3, result4, result6, result8, result9]:\n            exp = DatetimeIndex([Timestamp(expected)])\n            tm.assert_index_equal(res, exp)\n\n        # these really need to have yearfirst, but we don",
      "https://github.com/pandas-dev/pandas/issues/50411\n    result = to_datetime([",
      "https://github.com/pandas-dev/pandas/issues/50411\n    result = to_datetime([",
      "https://github.com/pandas-dev/pandas/issues/50411\n    with pytest.raises(\n        ValueError, match=",
      "https://github.com/pandas-dev/pandas/issues/50411\n    result = to_datetime(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_datetime.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/37262\n    s = Series(values, dtype=nullable_string_dtype)\n    result = to_numeric(s)\n    tm.assert_series_equal(result, expected)\n\n\ndef test_to_numeric_from_nullable_string_coerce(nullable_string_dtype):\n    # GH#52146\n    values = ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_numeric.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/25077\n        arr = np.arange(0, 1, 1e-6)[-10:]\n        result = to_timedelta(arr, unit="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_timedelta.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/vaexio/vaex/issues/357\n    #  fields functions shouldn"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_fields.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/49043\n    result = parsing.guess_datetime_format(input)\n    expected = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_parsing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35715\n    left = array([1, 2, 3], dtype=",
      "https://github.com/pandas-dev/pandas/issues/55730\n    timestamp = Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_extension_array_equal.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32747\n    left = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/32747\n    left = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/35715\n    left = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/35715\n    left = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_frame_equal.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31881\n    a = np.array([True, False])\n    b = np.array([True, pd.NA], dtype=object)\n\n    msg = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_numpy_array_equal.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/47829\n    category = (FutureWarning, UserWarning)\n    with tm.assert_produces_warning(category, match=r"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_produces_warning.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32747\n    left = Series(pd.array([1, 2, 3], dtype=",
      "https://github.com/pandas-dev/pandas/issues/32747\n    left = Series([pd.Interval(0, 1)], dtype=",
      "https://github.com/pandas-dev/pandas/issues/35446\n    s1 = Series([",
      "https://github.com/pandas-dev/pandas/issues/35715\n    left = Series([1, 2, 3], dtype=",
      "https://github.com/pandas-dev/pandas/issues/35715\n    left = Series([1, 2, 3], dtype=",
      "https://github.com/pandas-dev/pandas/issues/55882\n    left = Series([1577840521123000], dtype=dtype)\n    right = Series([1577840521123543], dtype=dtype)\n    with pytest.raises(AssertionError, match="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_series_equal.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/41404\n    obj = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/41404\n    # https://github.com/pandas-dev/pandas/pull/42049\n    obj = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264885726\n    hashes = [\n        ",
      "https://github.com/pandas-dev/pandas/issues/30887\n    result = pd.util.hash_pandas_object(Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\util\\test_hashing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/41971#issuecomment-860607472\n\n\n@pytest.fixture(params=[False])\ndef nogil(request):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\window\\conftest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numbagg/numbagg/blob/v0.2.1/numbagg/test/test_moving.py#L50\n    data = Series([10, 0, np.nan, 10])\n    result = data.ewm(alpha=0.5, ignore_na=ignore).sum()\n    expected = Series(expected_data)\n    tm.assert_series_equal(result, expected)\n\n\ndef test_ewma_adjust():\n    vals = Series(np.zeros(1000))\n    vals[5] = 1\n    result = vals.ewm(span=100, adjust=False).mean().sum()\n    assert np.abs(result - 1) < 1e-2\n\n\ndef test_ewma_cases(adjust, ignore_na):\n    # try adjust/ignore_na args matrix\n\n    s = Series([1.0, 2.0, 4.0, 8.0])\n\n    if adjust:\n        expected = Series([1.0, 1.6, 2.736842, 4.923077])\n    else:\n        expected = Series([1.0, 1.333333, 2.222222, 4.148148])\n\n    result = s.ewm(com=2.0, adjust=adjust, ignore_na=ignore_na).mean()\n    tm.assert_series_equal(result, expected)\n\n\ndef test_ewma_nan_handling():\n    s = Series([1.0] + [np.nan] * 5 + [1.0])\n    result = s.ewm(com=5).mean()\n    tm.assert_series_equal(result, Series([1.0] * len(s)))\n\n    s = Series([np.nan] * 2 + [1.0] + [np.nan] * 2 + [1.0])\n    result = s.ewm(com=5).mean()\n    tm.assert_series_equal(result, Series([np.nan] * 2 + [1.0] * 4))\n\n\n@pytest.mark.parametrize(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\window\\test_ewm.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/18921\n    # minp=0\n    x = Series([np.nan])\n    result = x.expanding(min_periods=0).sum()\n    expected = Series([0.0])\n    tm.assert_series_equal(result, expected)\n\n    # minp=1\n    result = x.expanding(min_periods=1).sum()\n    expected = Series([np.nan])\n    tm.assert_series_equal(result, expected)\n\n\ndef test_expanding_axis(axis_frame):\n    # see gh-23372.\n    df = DataFrame(np.ones((10, 20)))\n    axis = df._get_axis_number(axis_frame)\n\n    if axis == 0:\n        msg = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\window\\test_expanding.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/38057\n\n        # grouping by 1 columns -> 2-level MI as result\n        df = DataFrame({",
      "https://github.com/twosigma/pandas/issues/53\n        typ = np.dtype(any_int_numpy_dtype).type\n        size = 1000\n        idx = np.repeat(typ(0), size)\n        idx[-1] = 1\n\n        val = 5e25\n        arr = np.repeat(val, size)\n        arr[0] = np.nan\n        arr[-1] = 0\n\n        df = DataFrame(\n            {\n                "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\window\\test_groupby.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/18921\n    # minp=0\n    x = Series([np.nan])\n    result = x.rolling(1, min_periods=0).sum()\n    expected = Series([0.0])\n    tm.assert_series_equal(result, expected)\n\n    # minp=1\n    result = x.rolling(1, min_periods=1).sum()\n    expected = Series([np.nan])\n    tm.assert_series_equal(result, expected)\n\n\ndef test_missing_minp_zero_variable():\n    # https://github.com/pandas-dev/pandas/pull/18921\n    x = Series(\n        [np.nan] * 4,\n        index=DatetimeIndex(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://yahoo.brand.edgar-online.com/Default.aspx?\n        # companyid=3184&formtypeID=7)\n        (offset_lom_sat_sep, datetime(2010, 9, 25), True),\n        (offset_lom_sat_sep, datetime(2011, 9, 24), True),\n        (offset_lom_sat_sep, datetime(2012, 9, 29), True),\n    ]\n\n    @pytest.mark.parametrize(",
      "http://google.brand.edgar-online.com/?sym=MU&formtypeID=7\n        (offset_lom_aug_thu, datetime(2012, 8, 30), True),\n        (offset_lom_aug_thu, datetime(2011, 9, 1), True),\n        (offset_n, datetime(2012, 12, 31), False),\n        (offset_n, datetime(2013, 1, 1), True),\n        (offset_n, datetime(2013, 1, 2), False),\n    ]\n\n    @pytest.mark.parametrize(",
      "http://www.intc.com/releasedetail.cfm?ReleaseID=542844\n        (\n            makeFY5253LastOfMonthQuarter(\n                1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1\n            ),\n            datetime(2011, 4, 2),\n            True,\n        ),\n        # see: http://google.brand.edgar-online.com/?sym=INTC&formtypeID=7\n        (\n            makeFY5253LastOfMonthQuarter(\n                1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1\n            ),\n            datetime(2012, 12, 29),\n            True,\n        ),\n        (\n            makeFY5253LastOfMonthQuarter(\n                1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1\n            ),\n            datetime(2011, 12, 31),\n            True,\n        ),\n        (\n            makeFY5253LastOfMonthQuarter(\n                1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1\n            ),\n            datetime(2010, 12, 25),\n            True,\n        ),\n    ]\n\n    @pytest.mark.parametrize(",
      "http://google.brand.edgar-online.com/?sym=MU&formtypeID=7\n        (offset_nem_thu_aug_4, datetime(2012, 8, 30), True),\n        (offset_nem_thu_aug_4, datetime(2011, 9, 1), True),\n        # See: http://google.brand.edgar-online.com/?sym=MU&formtypeID=13\n        (offset_nem_thu_aug_4, datetime(2013, 5, 30), True),\n        (offset_nem_thu_aug_4, datetime(2013, 2, 28), True),\n        (offset_nem_thu_aug_4, datetime(2012, 11, 29), True),\n        (offset_nem_thu_aug_4, datetime(2012, 5, 31), True),\n        (offset_nem_thu_aug_4, datetime(2007, 3, 1), True),\n        (offset_nem_thu_aug_4, datetime(1994, 3, 3), True),\n        (offset_n, datetime(2012, 12, 31), False),\n        (offset_n, datetime(2013, 1, 1), True),\n        (offset_n, datetime(2013, 1, 2), False),\n    ]\n\n    @pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_fiscal.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar#Last_Saturday_of_the_month_at_fiscal_year_end)\n        (offset_lom_sat_aug, datetime(2006, 8, 26), True),\n        (offset_lom_sat_aug, datetime(2007, 8, 25), True),\n        (offset_lom_sat_aug, datetime(2008, 8, 30), True),\n        (offset_lom_sat_aug, datetime(2009, 8, 29), True),\n        (offset_lom_sat_aug, datetime(2010, 8, 28), True),\n        (offset_lom_sat_aug, datetime(2011, 8, 27), True),\n        (offset_lom_sat_aug, datetime(2012, 8, 25), True),\n        (offset_lom_sat_aug, datetime(2013, 8, 31), True),\n        (offset_lom_sat_aug, datetime(2014, 8, 30), True),\n        (offset_lom_sat_aug, datetime(2015, 8, 29), True),\n        (offset_lom_sat_aug, datetime(2016, 8, 27), True),\n        (offset_lom_sat_aug, datetime(2017, 8, 26), True),\n        (offset_lom_sat_aug, datetime(2018, 8, 25), True),\n        (offset_lom_sat_aug, datetime(2019, 8, 31), True),\n        (offset_lom_sat_aug, datetime(2006, 8, 27), False),\n        (offset_lom_sat_aug, datetime(2007, 8, 28), False),\n        (offset_lom_sat_aug, datetime(2008, 8, 31), False),\n        (offset_lom_sat_aug, datetime(2009, 8, 30), False),\n        (offset_lom_sat_aug, datetime(2010, 8, 29), False),\n        (offset_lom_sat_aug, datetime(2011, 8, 28), False),\n        (offset_lom_sat_aug, datetime(2006, 8, 25), False),\n        (offset_lom_sat_aug, datetime(2007, 8, 24), False),\n        (offset_lom_sat_aug, datetime(2008, 8, 29), False),\n        (offset_lom_sat_aug, datetime(2009, 8, 28), False),\n        (offset_lom_sat_aug, datetime(2010, 8, 27), False),\n        (offset_lom_sat_aug, datetime(2011, 8, 26), False),\n        (offset_lom_sat_aug, datetime(2019, 8, 30), False),\n        # From GMCR (see for example:\n        # http://yahoo.brand.edgar-online.com/Default.aspx?\n        # companyid=3184&formtypeID=7)\n        (offset_lom_sat_sep, datetime(2010, 9, 25), True),\n        (offset_lom_sat_sep, datetime(2011, 9, 24), True),\n        (offset_lom_sat_sep, datetime(2012, 9, 29), True),\n    ]\n\n    @pytest.mark.parametrize(",
      "https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar\n        #    #Saturday_nearest_the_end_of_month)\n        #    2006-09-02   2006 September 2\n        #    2007-09-01   2007 September 1\n        #    2008-08-30   2008 August 30    (leap year)\n        #    2009-08-29   2009 August 29\n        #    2010-08-28   2010 August 28\n        #    2011-09-03   2011 September 3\n        #    2012-09-01   2012 September 1  (leap year)\n        #    2013-08-31   2013 August 31\n        #    2014-08-30   2014 August 30\n        #    2015-08-29   2015 August 29\n        #    2016-09-03   2016 September 3  (leap year)\n        #    2017-09-02   2017 September 2\n        #    2018-09-01   2018 September 1\n        #    2019-08-31   2019 August 31\n        (offset_lom_aug_sat, datetime(2006, 9, 2), True),\n        (offset_lom_aug_sat, datetime(2007, 9, 1), True),\n        (offset_lom_aug_sat, datetime(2008, 8, 30), True),\n        (offset_lom_aug_sat, datetime(2009, 8, 29), True),\n        (offset_lom_aug_sat, datetime(2010, 8, 28), True),\n        (offset_lom_aug_sat, datetime(2011, 9, 3), True),\n        (offset_lom_aug_sat, datetime(2016, 9, 3), True),\n        (offset_lom_aug_sat, datetime(2017, 9, 2), True),\n        (offset_lom_aug_sat, datetime(2018, 9, 1), True),\n        (offset_lom_aug_sat, datetime(2019, 8, 31), True),\n        (offset_lom_aug_sat, datetime(2006, 8, 27), False),\n        (offset_lom_aug_sat, datetime(2007, 8, 28), False),\n        (offset_lom_aug_sat, datetime(2008, 8, 31), False),\n        (offset_lom_aug_sat, datetime(2009, 8, 30), False),\n        (offset_lom_aug_sat, datetime(2010, 8, 29), False),\n        (offset_lom_aug_sat, datetime(2011, 8, 28), False),\n        (offset_lom_aug_sat, datetime(2006, 8, 25), False),\n        (offset_lom_aug_sat, datetime(2007, 8, 24), False),\n        (offset_lom_aug_sat, datetime(2008, 8, 29), False),\n        (offset_lom_aug_sat, datetime(2009, 8, 28), False),\n        (offset_lom_aug_sat, datetime(2010, 8, 27), False),\n        (offset_lom_aug_sat, datetime(2011, 8, 26), False),\n        (offset_lom_aug_sat, datetime(2019, 8, 30), False),\n        # From Micron, see:\n        # http://google.brand.edgar-online.com/?sym=MU&formtypeID=7\n        (offset_lom_aug_thu, datetime(2012, 8, 30), True),\n        (offset_lom_aug_thu, datetime(2011, 9, 1), True),\n        (offset_n, datetime(2012, 12, 31), False),\n        (offset_n, datetime(2013, 1, 1), True),\n        (offset_n, datetime(2013, 1, 2), False),\n    ]\n\n    @pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_fiscal.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34580\n        offset, cases = case\n        shift = DatetimeIndex(cases.keys())\n        exp = DatetimeIndex(cases.values())\n\n        with tm.assert_produces_warning(None):\n            # GH#22535 check that we don"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_month.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/18761 -\nwhich was more ambitious but less idiomatic in its use of Hypothesis.\n\nYou may wish to consult the previous version for inspiration on further\ntests, or when trying to pin down the bugs exposed by the tests below.\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets_properties.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/10673\n        cat = Series(list(",
      "https://github.com/pandas-dev/pandas/issues/10661\n\n        ser = Series(idx)\n        cat = ser.astype(",
      "https://github.com/pandas-dev/pandas/issues/46313\n        df = DataFrame(\n            {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_cat_accessor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/10673\n        ser = Series(date_range(",
      "https://github.com/pandas-dev/pandas/issues/22342\n        result = result.str.normalize(",
      "https://github.com/pandas-dev/pandas/issues/45858\n        ser = Series(data)\n        with tm.assert_produces_warning(None):\n            result = ser.dt.strftime("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_dt_accessor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31501\n        ser = Series(\n            [0, 1, 2],\n            DatetimeIndex([",
      "https://github.com/pandas-dev/pandas/issues/37427\n    # with getitem, when assigning with a Series, it is not first aligned\n    ser = Series(range(10))\n    idx = np.array([2, 4, 9])\n    ser[idx] = Series([10, 11, 12])\n    expected = Series([0, 1, 10, 3, 11, 5, 6, 7, 8, 12])\n    tm.assert_series_equal(ser, expected)\n\n\ndef test_getitem_duplicate_index_mistyped_key_raises_keyerror():\n    # GH#29189 float_index.get_loc(None) should raise KeyError, not TypeError\n    ser = Series([2, 5, 6, 8], index=[2.0, 4.0, 4.0, 5.0])\n    with pytest.raises(KeyError, match="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_getitem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35878\n        idx = MultiIndex.from_tuples([(",
      "https://github.com/numpy/numpy/issues/12550\n\n        ser = Series({",
      "https://github.com/pandas-dev/pandas/issues/39584#issuecomment-941212124\n    @pytest.fixture\n    def obj(self):\n        return Series([1, 2, 3], dtype=",
      "https://github.com/pandas-dev/pandas/issues/20643#issuecomment-431244590\n    # fixed sometime prior to GH#45121\n    orig = Series([0, 1, 2], index=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_setitem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/20664\n    ser = Series(pd.Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_take.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34592\n    ser = Series([], dtype=float)\n    result = ser.where([])\n    tm.assert_series_equal(result, ser)\n\n\ndef test_where_categorical(frame_or_series):\n    # https://github.com/pandas-dev/pandas/issues/18888\n    exp = frame_or_series(\n        pd.Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_where.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/24866\n        ser = Series([1, 2], dtype=",
      "https://github.com/pandas-dev/pandas/issues/35471\n        ser = Series(data, dtype=dtype)\n        if errors == ",
      "https://github.com/pandas-dev/pandas/issues/36451\n        ser = Series([0.1], dtype=dtype)\n        result = ser.astype(str)\n        expected = Series([",
      "https://github.com/pandas-dev/pandas/issues/36904\n        ser = Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_astype.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org/doc/stable/reference/generated/numpy.piecewise.html\n    x = np.linspace(-2.5, 2.5, 6)\n    ser = Series(x)\n    result = ser.case_when(\n        caselist=[\n            (lambda df: df < 0, lambda df: -df),\n            (lambda df: df >= 0, lambda df: df),\n        ]\n    )\n    expected = np.piecewise(x, [x < 0, x >= 0], [lambda x: -x, lambda x: x])\n    tm.assert_series_equal(result, Series(expected))\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_case_when.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/45506\n    # Catch OverflowError when comparing datetime64 and string\n    data = [\n        {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_compare.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31731 -> converting columns\n        # that are already string dtype\n        df = pd.DataFrame(\n            {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_convert_dtypes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/27183\n        s = Series([None, None], dtype=object)\n        result = s.describe()\n        expected = Series(\n            [0, 0, np.nan, np.nan],\n            dtype=object,\n            index=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_describe.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35614\n    s = pd.Series([{",
      "https://github.com/pandas-dev/pandas/issues/40487\n    s = pd.Series([1, 2, 3], index=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_explode.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/38851\n        # different tzinfos representing UTC treated as equal\n        ser = Series(date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_fillna.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/34746\n        s = Series([1, 2, 3])\n\n        msg = f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_interpolate.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/37174\n        arr = np.array([1, 2, 3])\n        arr.setflags(write=False)\n        s = Series([1, 2, 3])\n        result = s.isin(arr)\n        expected = Series([True, True, True])\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/37094\n    # combination of object dtype for the values\n    # and > _MINIMUM_COMP_ARR_LEN elements\n    min_isin_comp = 5\n    ser = Series([1, 2, np.nan] * min_isin_comp)\n    with monkeypatch.context() as m:\n        m.setattr(algorithms, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_isin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/17648\n    # Checks that np.nan key is appropriately mapped\n    s = Series([1, 2, np.nan])\n    expected = Series([",
      "https://github.com/pandas-dev/pandas/issues/29733\n    # Check collections.abc.Mapping support as mapper for Series.map\n    s = Series([1, 2, 3])\n    not_a_dictionary = non_dict_mapping_subclass({3: ",
      "https://github.com/pandas-dev/pandas/issues/29733\n    # Check collections.abc.Mapping support as mapper for Series.map\n    class NonDictMappingWithMissing(non_dict_mapping_subclass):\n        def __missing__(self, key):\n            return "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_map.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/42921\n    if dtype == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reindex.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34530\n        obj = frame_or_series(pd.array([1, 2, 3], dtype=",
      "https://github.com/pandas-dev/pandas/issues/35680\n        s = pd.Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_replace.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/23995\n        result = Series(data).values\n        expected = np.array(data.astype(object))\n        tm.assert_numpy_array_equal(result, expected)\n\n    def test_values(self, datetime_series):\n        tm.assert_almost_equal(\n            datetime_series.values, list(datetime_series), check_dtype=False\n        )\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_values.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32023\n        result = getattr(interval, method)(delta)\n        left = getattr(interval.left, method)(delta)\n        right = getattr(interval.right, method)(delta)\n        expected = Interval(left, right)\n\n        assert result == expected\n\n    @pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/32023\n        msg = ",
      "https://github.com/pandas-dev/pandas/issues/35931\n        interval = Interval(0, 1)\n        arr = np.array([interval, interval])\n        result = interval == arr\n        expected = np.array([True, True])\n        tm.assert_numpy_array_equal(result, expected)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_arithmetic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/53369\n        i1 = Period.now(freq="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\scalar\\period\\test_period.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/49076\n    result = Timedelta(10, unit="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/glossary.html#term-hashable\n        # Hashable objects which compare equal must have the same hash value.\n        assert pandas_timedelta != numpy_timedelta or hash(pandas_timedelta) == hash(\n            numpy_timedelta\n        )\n\n    def test_implementation_limits(self):\n        min_td = Timedelta(Timedelta.min)\n        max_td = Timedelta(Timedelta.max)\n\n        # GH 12727\n        # timedelta limits correspond to int64 boundaries\n        assert min_td._value == iNaT + 1\n        assert max_td._value == lib.i8max\n\n        # Beyond lower limit, a NAT before the Overflow\n        assert (min_td - Timedelta(1, ",
      "https://github.com/pandas-dev/pandas/issues/21484\n    assert bool(value) is expected\n\n\ndef test_timedelta_attribute_precision():\n    # GH 31354\n    td = Timedelta(1552211999999999872, unit="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_timedelta.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/statsmodels/statsmodels/issues/3374\n        # ends up multiplying really large numbers which overflow\n\n        stamp = Timestamp(",
      "https://github.com/pandas-dev/pandas/issues/14080\n        # used to crash, so check for proper overflow exception\n\n        stamp = Timestamp(",
      "https://github.com/pandas-dev/pandas/issues/31774\n        msg = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_arithmetic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/22346 for why\n        #  we can",
      "https://github.com/pandas-dev/pandas/issues/49076\n    result = Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/22342\n        # different normalizations\n        expected_day = unicodedata.normalize(",
      "https://github.com/dateutil/dateutil/issues/197\n            pytest.skip(\n                ",
      "https://github.com/pandas-dev/pandas/pull/48748#pullrequestreview-1122635413\n        ts = Timestamp(year=2022, month=1, day=1, microsecond=999999).as_unit(",
      "https://github.com/pandas-dev/pandas/issues/51060\n        result = Timestamp(-52700112000, unit=",
      "https://github.com/pandas-dev/pandas/issues/50231\n    with tm.assert_produces_warning(None):\n        result = Timestamp(",
      "https://github.com/pandas-dev/pandas/issues/50787\n    ts = Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timestamp.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35460\n        df = DataFrame(columns=[",
      "https://github.com/pandas-dev/pandas/issues/35460\n        df = DataFrame(columns=[",
      "https://github.com/pandas-dev/pandas/issues/35460\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/19096\n        a = Series(Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append_common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/24845\n\n        c1 = pd.CategoricalIndex(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_categorical.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/36263\n        df1 = DataFrame(\n            np.random.default_rng(2).standard_normal(5),\n            index=[0, 1, 2, 3, 3],\n            columns=[",
      "https://github.com/pandas-dev/pandas/issues/45637\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/pull/43507#issuecomment-920375856\n    df1 = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_concat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/11058\n        idx = Index(\n            [dt.date(2013, 1, 1), dt.date(2014, 1, 1), dt.date(2015, 1, 1)],\n            dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_datetimes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/20613\n        df1 = DataFrame(\n            {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_sort.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/17962\n        # Checks that method runs for non string column names\n        left = DataFrame(\n            {0: [1, 0, 1, 0], 1: [0, 1, 0, 0], 2: [0, 0, 2, 0], 3: [1, 0, 0, 3]}\n        )\n\n        right = left.astype(float)\n        expected = left\n        result = merge(left, right)\n        tm.assert_frame_equal(expected, result)\n\n    def test_merge_index_as_on_arg(self, df, df2):\n        # GH14355\n\n        left = df.set_index(",
      "https://github.com/pandas-dev/pandas/issues/25014\n        dtz = pd.DatetimeTZDtype(tz=",
      "https://github.com/pandas-dev/pandas/issues/17257 for more.\n        # We include this as a regression test for GH-24897.\n        left = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/27943\n        data1 = DataFrame(\n            np.arange(20).reshape((4, 5)) + 1, columns=[",
      "https://github.com/pandas-dev/pandas/issues/31208\n    df1 = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/53200\n    vals = [\n        pd.Timestamp(2023, 5, 12, tz=tz),\n        pd.Timestamp(2023, 5, 13, tz=tz),\n        pd.Timestamp(2023, 5, 14, tz=tz),\n    ]\n    df1 = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35558\n        if unit == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_asof.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/9737\n\n        axes = df.plot(subplots=True, title=",
      "https://github.com/pandas-dev/pandas/issues/8852 for bug report\n        #\n        # Exercise colormap path and non-colormap path as they are independent\n        #\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/8390\n            result_labels = [x.get_text() for x in ax.get_legend().get_texts()]\n            expected_labels = base_expected[:i] + base_expected[i + 1 :]\n            assert result_labels == expected_labels\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize(\n        ",
      "https://github.com/pandas-dev/pandas/issues/9737 using gridspec,\n        # the axis in fig.get_axis() are sorted differently than pandas\n        # expected them, so make sure that only the right ones are removed\n        import matplotlib.pyplot as plt\n\n        plt.close(",
      "https://github.com/pandas-dev/pandas/issues/9737 using gridspec,\n        # the axis in fig.get_axis() are sorted differently than pandas\n        # expected them, so make sure that only the right ones are removed\n        import matplotlib.pyplot as plt\n\n        df = DataFrame(\n            {\n                ",
      "https://github.com/pandas-dev/pandas/issues/9737 using gridspec,\n        # the axis in fig.get_axis() are sorted differently than pandas\n        # expected them, so make sure that only the right ones are removed\n        import matplotlib.pyplot as plt\n\n        gs, axes = _generate_4_axes_via_gridspec()\n\n        df = DataFrame(\n            {\n                ",
      "https://github.com/pandas-dev/pandas/issues/9737 using gridspec,\n        import matplotlib.pyplot as plt\n\n        df = DataFrame(\n            {\n                "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34316\n\n        df = DataFrame(\n            [[5.1, 3.5], [4.9, 3.0], [7.0, 3.2], [6.4, 3.2], [5.9, 3.0]],\n            columns=[",
      "https://github.com/pandas-dev/pandas/issues/11136\n        # Creating a DataFrame with duplicate column labels and testing colors of them.\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_color.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/20968\n        # sharey can now be switched check whether the right\n        # pair of axes is turned on or off\n        df = DataFrame(\n            {\n                ",
      "https://github.com/pandas-dev/pandas/issues/20968\n        # sharex can now be switched check whether the right\n        # pair of axes is turned on or off\n\n        df = DataFrame(\n            {\n                "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_groupby.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/matplotlib/matplotlib/issues/11357",
      "https://github.com/pandas-dev/pandas/issues/39522\n        from matplotlib.collections import LineCollection\n        from matplotlib.lines import Line2D\n\n        df = DataFrame([{",
      "https://github.com/pandas-dev/pandas/issues/40044\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_legend.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/26714\n                _check_visible(ax.get_xticklabels(minor=True), visible=False)\n            _check_visible(ax.xaxis.get_label(), visible=False)\n            _check_visible(ax.get_yticklabels())\n\n        _check_visible(axes[-1].xaxis)\n        _check_visible(axes[-1].get_xticklabels())\n        _check_visible(axes[-1].get_xticklabels(minor=True))\n        _check_visible(axes[-1].xaxis.get_label())\n        _check_visible(axes[-1].get_yticklabels())\n\n    @pytest.mark.slow\n    @pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_subplots.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.oasis-open.org/office/v1.2/os/OpenDocument-v1.2-os-part1.html#refTable13\n    from odf.namespaces import OFFICENS\n    from odf.table import (\n        TableCell,\n        TableRow,\n    )\n\n    table_cell_name = TableCell().qname\n\n    with tm.ensure_clean(ext) as f:\n        pd.DataFrame([[value]]).to_excel(f, header=False, index=False)\n\n        with pd.ExcelFile(f) as wb:\n            sheet = wb._reader.get_sheet_by_index(0)\n            sheet_rows = sheet.getElementsByType(TableRow)\n            sheet_cells = [\n                x\n                for x in sheet_rows[0].childNodes\n                if hasattr(x, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_odswriter.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tafia/calamine/issues/355\n        if engine == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_readers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.borders.html\n# Note: Leaving behavior of "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_style.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://drafts.csswg.org/css-backgrounds/#border-shorthands)\n        ("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_css.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/55630\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/31532\n        with pytest.raises(\n            ValueError, match=",
      "https://pandas.pydata.org/docs/dev/user_guide/options.html#frequently-used-options\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_format.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue32255\n        #\n        # Python",
      "https://bugs.python.org/pull_request4672.\n        df1 = DataFrame([None, 1])\n        expected1 = ",
      "https://docs.python.org/3/library/csv.html#csv.writer)",
      "https://github.com/pandas-dev/pandas/issues/31447\n        result = pd.Series(range(8, 12)).to_csv(na_rep="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_csv.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/?q1=a&q2=b",
      "https://github.com/pandas-dev/pandas/issues/13828\n    df = DataFrame(\n        [\n            ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_html.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/36775\n        dtype = float_ea_dtype\n        ser = Series([0.0, 1.0, None], dtype=dtype)\n        result = ser.to_string()\n        expected = dedent(\n            ",
      "https://github.com/pandas-dev/pandas/issues/36775\n        dtype = any_int_ea_dtype\n        ser = Series([0, 1, None], dtype=dtype)\n        result = ser.to_string()\n        expected = dedent(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_string.py"
  },
  {
    "pattern": "german",
    "matches": [
      "German",
      "German"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_normalize.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example-site.com/data"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_pandas.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34548\n    jsonl = (\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_readlines.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/issues/38676"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\conftest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/issues/38676"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_encoding.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/37094\n    parser = all_parsers\n\n    ARR_LEN = 100\n    df = DataFrame(\n        {\n            "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_index_col.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.1.1.1",
      "1.1.1.1",
      "1.1.1.1",
      "1.1.1.1",
      "1.1.1.1"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_mangle_dupes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://boto3.amazonaws.com/v1/documentation/api/latest/guide/error-handling.html\n        # Catch a ClientError since AWS Service Errors are defined dynamically\n        error = (FileNotFoundError, botocore.exceptions.ClientError)\n\n        with pytest.raises(error, match=",
      "https://boto3.amazonaws.com/v1/documentation/api/latest/guide/error-handling.html\n        # Catch a ClientError since AWS Service Errors are defined dynamically\n        error = (FileNotFoundError, botocore.exceptions.ClientError)\n\n        with pytest.raises(error, match="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_network.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/44231\n        # pyarrow 6.0 starts to infer time type\n        expected[",
      "https://github.com/dateutil/dateutil/issues/217\n# has been addressed, but we just don",
      "https://github.com/pandas-dev/pandas/issues/48017\n        warn = None\n    elif cache_dates:\n        # Note: warning is not raised if ",
      "https://github.com/apache/arrow/issues/38676",
      "https://github.com/pandas-dev/pandas/issues/2586\n    parser = all_parsers\n    data = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_parse_dates.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://publib.boulder.ibm.com/infocenter/dmndhelp/v6r1mx/index.jsp?topic=/com.ibm.wbit.612.help.config.doc/topics/rfixwidth.html\n    data = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_read_fwf.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/issues/38676"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_unsupported.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/PyTables/PyTables/issues/282\n        # bug in selection when 0th row has a np.nan and an index\n        # store.append("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_select.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/cython/cython/issues/1720\nclass TestSAS7BDAT:\n    @pytest.mark.slow\n    def test_from_file(self, dirpath, data_test_ix):\n        expected, test_ix = data_test_ix\n        for k in test_ix:\n            fname = os.path.join(dirpath, f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_sas7bdat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://wwwn.cdc.gov/Nchs/Nhanes/2005-2006/PAXRAW_D.ZIP\n        # This file has truncated floats (5 bytes in this case).\n\n        # GH 11713\n\n        data_csv = pd.read_csv(file04.replace("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_xport.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.cms.gov/files/zip/puf2019.zip\n        # (despite the extension, it"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_xport.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.xom",
      "http://example.xom",
      "http://example.com",
      "http://example.com",
      "http://other.org",
      "http://example.com",
      "http://other.org",
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://other.org",
      "http://example.com",
      "http://example.com",
      "http://other.org",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.w3.org/1999/XSL/Transform"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_to_xml.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://www.opengis.net/kml/2.2",
      "http://www.opengis.net/kml/2.2",
      "http://www.opengis.net/kml/2.2",
      "http://www.opengis.net/kml/2.2",
      "http://www.opengis.net/kml/2.2",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.opengis.net/kml/2.2",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.opengis.net/kml/2.2",
      "http://www.w3.org/1999/XSL/Transform",
      "http://www.w3.org/1999/XSL/Transform",
      "http://example.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_xml.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.ikea.com/se/sv/catalog/categories/departments/living_room/10475/?se%7cps%7cnonbranded%7cvardagsrum%7cgoogle%7ctv_bord",
      "http://www.ikea.com/se/sv/catalog/categories/departments/living_room/10475/?se%7cps%7cnonbranded%7cvardagsrum%7cgoogle%7ctv_bord",
      "http://www.ikea.com/se/sv/catalog/categories/departments/living_room/10475/?se%7cps%7cnonbranded%7cvardagsrum%7cgoogle%7ctv_bord"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_common_basic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/13824840/feature-request-for-\n    # pandas-read-csv\n    data = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_common_basic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/issues/38676"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_file_buffer_url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35493\n    parser = all_parsers\n    data = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_inf.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/issues/38676",
      "https://github.com/apache/arrow/issues/38676",
      "https://github.com/apache/arrow/issues/38676",
      "https://github.com/apache/arrow/issues/38676"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_read_errors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/56136\n@pytest.mark.usefixtures("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_dtypes_basic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/issues/38676",
      "https://github.com/apache/arrow/issues/38676",
      "https://github.com/apache/arrow/issues/38676"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_usecols_basic.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.web.com",
      "http://www.web.com",
      "http://www.web",
      "http://www.web",
      "http://web.com:80",
      "http://web.com:80",
      "http://user:pass@web.com",
      "http://user:pass@web.com",
      "http://web.com/,.",
      "http://web.com/,.",
      "http://a.c"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_html.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.web.com",
      "https://www.web.com",
      "https://a.d"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_html.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "pass@web.com",
      "pass@web.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_html.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.2.3.4",
      "1.2.3.4"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_html.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://matplotlib.org/stable/users/prev_whats_new/whats_new_3.6.0.html#garbage-collection-is-no-longer-run-on-figure-close  # noqa: E501\n    gc.collect(1)\n\n\n@pytest.fixture\ndef df():\n    return DataFrame([[1, 2], [2, 4]], columns=[",
      "https://github.com/pandas-dev/pandas/issues/49374\n    cmap = mpl.colors.ListedColormap([[1, 1, 1], [0, 0, 0]])\n    df["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_matplotlib.py"
  },
  {
    "pattern": "/Users/[^\"\\']+",
    "matches": [
      "/users/prev_whats_new/whats_new_3.6.0.html#garbage-collection-is-no-longer-run-on-figure-close  # noqa: E501\n    gc.collect(1)\n\n\n@pytest.fixture\ndef df():\n    return DataFrame([[1, 2], [2, 4]], columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_matplotlib.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/12090#issuecomment-180695902\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/11655\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/12125\n        # smoke test for _translate\n        df = DataFrame({0: [1, 2, 3]})\n        df.style._translate(True, True)\n\n    def test_apply_axis(self):\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/25858\n        # Checks styler.map works with multindex when codes are provided\n        codes = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])\n        columns = MultiIndex(\n            levels=[[",
      "https://github.com/pandas-dev/pandas/issues/16780\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_style.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/20508968/series-fillna-in-a-multiindex-dataframe-does-not-fill-is-this-a-bug\n    a = [12, 23]\n    b = [123, None]\n    c = [1234, 2345]\n    d = [12345, 23456]\n    tuples = [("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_chaining_and_caching.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/27841\n    df = DataFrame(\n        ",
      "https://github.com/pandas-dev/pandas/issues/35858\n    date = pd.Timestamp(",
      "https://github.com/pandas-dev/pandas/issues/35351\n    df = DataFrame(\n        data=[["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_loc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35563\n        idx = Index(range(2), name="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_multiindex.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/24572040/pandas-access-the-level-of-multiindex-for-inplace-operation\n        df_orig = DataFrame.from_dict(\n            {\n                ",
      "https://github.com/pandas-dev/pandas/issues/31449\n        index = MultiIndex.from_tuples(\n            [("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_setitem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/24959\n        idx = Index([1, pd.Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_setops.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/16603\n        a = CategoricalIndex(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_equals.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/19551\n        ci = CategoricalIndex(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/48818/files#r982793461"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_arithmetic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35843\n        values = [\n            Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/statsmodels/statsmodels/issues/3349\n        # replace should take ints/longs for compat\n        result = date_range(Timestamp(",
      "https://github.com/pandas-dev/pandas/issues/56847\n        msg = (\n            ",
      "https://github.com/pandas-dev/pandas/issues/24110\n        start, end = start_end\n        result = date_range(start=start, end=end, periods=2, inclusive="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_date_range.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33741\n        values = DatetimeIndex([Timestamp(",
      "https://github.com/pandas-dev/pandas/issues/16515\n        idx = DatetimeIndex(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/47772\n        result = ii.get_indexer(target.asi8)\n        expected = np.array([-1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32762\n    values = IntervalIndex([Interval(0, 1), Interval(1, 2)])\n    result = values.searchsorted(listlike_box(values))\n    expected = np.array([0, 1], dtype=result.dtype)\n    tm.assert_numpy_array_equal(result, expected)\n\n    result = values._data.searchsorted(listlike_box(values))\n    tm.assert_numpy_array_equal(result, expected)\n\n\n@pytest.mark.parametrize(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35658\n        idx = IntervalIndex.from_tuples([(1, 2), (2, 3)], closed=closed)\n        result = tm.round_trip_pickle(idx)\n        tm.assert_index_equal(result, idx)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_pickle.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org/doc/stable/reference/ufuncs.html\n\n    expected_exception = TypeError\n    msg = (\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_analytics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/41485\n    idx = MultiIndex.from_tuples(\n        [\n            (1, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_get_set.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/21390\n        midx = MultiIndex.from_product(\n            [\n                Categorical([",
      "https://github.com/pandas-dev/pandas/issues/29896\n        # test getting an indexer for another index with different methods\n        # confirms that getting an indexer without a filling method, getting an\n        # indexer and backfilling, and getting an indexer and padding all behave\n        # correctly in the case where all of the target values fall in between\n        # several levels in the MultiIndex into which they are getting an indexer\n        #\n        # visually, the MultiIndexes used in this test are:\n        # mult_idx_1:\n        #  0: -1 0\n        #  1:    2\n        #  2:    3\n        #  3:    4\n        #  4:  0 0\n        #  5:    2\n        #  6:    3\n        #  7:    4\n        #  8:  1 0\n        #  9:    2\n        # 10:    3\n        # 11:    4\n        #\n        # mult_idx_2:\n        #  0: 0 1\n        #  1:   3\n        #  2:   4\n        mult_idx_1 = MultiIndex.from_product([[-1, 0, 1], [0, 2, 3, 4]])\n        mult_idx_2 = MultiIndex.from_product([[0], [1, 3, 4]])\n\n        indexer = mult_idx_1.get_indexer(mult_idx_2)\n        expected = np.array([-1, 6, 7], dtype=indexer.dtype)\n        tm.assert_almost_equal(expected, indexer)\n\n        backfill_indexer = mult_idx_1.get_indexer(mult_idx_2, method=",
      "https://github.com/pandas-dev/pandas/issues/29896\n        # tests get_indexer() on MultiIndexes with 3+ levels\n        # visually, these are\n        # mult_idx_1:\n        #  0: 1 2 5\n        #  1:     7\n        #  2:   4 5\n        #  3:     7\n        #  4:   6 5\n        #  5:     7\n        #  6: 3 2 5\n        #  7:     7\n        #  8:   4 5\n        #  9:     7\n        # 10:   6 5\n        # 11:     7\n        #\n        # mult_idx_2:\n        #  0: 1 1 8\n        #  1: 1 5 9\n        #  2: 1 6 7\n        #  3: 2 1 6\n        #  4: 2 7 6\n        #  5: 2 7 8\n        #  6: 3 6 8\n        mult_idx_1 = MultiIndex.from_product([[1, 3], [2, 4, 6], [5, 7]])\n        mult_idx_2 = MultiIndex.from_tuples(\n            [\n                (1, 1, 8),\n                (1, 5, 9),\n                (1, 6, 7),\n                (2, 1, 6),\n                (2, 7, 7),\n                (2, 7, 8),\n                (3, 6, 8),\n            ]\n        )\n        # sanity check\n        assert mult_idx_1.is_monotonic_increasing\n        assert mult_idx_1.is_unique\n        assert mult_idx_2.is_monotonic_increasing\n        assert mult_idx_2.is_unique\n\n        # show the relationships between the two\n        assert mult_idx_2[0] < mult_idx_1[0]\n        assert mult_idx_1[3] < mult_idx_2[1] < mult_idx_1[4]\n        assert mult_idx_1[5] == mult_idx_2[2]\n        assert mult_idx_1[5] < mult_idx_2[3] < mult_idx_1[6]\n        assert mult_idx_1[5] < mult_idx_2[4] < mult_idx_1[6]\n        assert mult_idx_1[5] < mult_idx_2[5] < mult_idx_1[6]\n        assert mult_idx_1[-1] < mult_idx_2[6]\n\n        indexer_no_fill = mult_idx_1.get_indexer(mult_idx_2)\n        expected = np.array([-1, -1, 5, -1, -1, -1, -1], dtype=indexer_no_fill.dtype)\n        tm.assert_almost_equal(expected, indexer_no_fill)\n\n        # test with backfilling\n        indexer_backfilled = mult_idx_1.get_indexer(mult_idx_2, method=",
      "https://github.com/pandas-dev/pandas/issues/29896\n        # tests a corner case with get_indexer() with MultiIndexes where, when we\n        # need to ",
      "https://github.com/pandas-dev/pandas/issues/26944\n    idx = MultiIndex.from_product(\n        [\n            date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/24959\n    idx = MultiIndex.from_product([[1, 0], [",
      "https://github.com/pandas-dev/pandas/issues/24959\n    idx = MultiIndex.from_product([[1, pd.Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_setops.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/advanced.html#sorting-a-multiindex\n    dfm = DataFrame(\n        {\n            "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_sorting.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/28279\n    # https://github.com/pandas-dev/pandas/issues/28023\n    series = Series(\n        [0, 1, 2, 3, 4, 5],\n        index=[\n            7606741985629028552,\n            17876870360202815256,\n            17876870360202815256,\n            13106359306506049338,\n            8991270399732411471,\n            8991270399732411472,\n        ],\n    )\n\n    result = series.loc[box([7606741985629028552, 17876870360202815256])]\n\n    expected = Index(\n        [7606741985629028552, 17876870360202815256, 17876870360202815256],\n        dtype=",
      "https://github.com/pandas-dev/pandas/issues/35217\n    float_index = Index([1.0, 2, 3])\n    string_index = Index(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_numeric.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/26778\n        # [u]int | float -> float\n        index = Index([0, 2, 3], dtype=dtype)\n        other = Index([0.5, 1.5], dtype=np.float64)\n        expected = Index([0.0, 0.5, 1.5, 2.0, 3.0], dtype=np.float64)\n        result = index.union(other)\n        tm.assert_index_equal(result, expected)\n\n        result = other.union(index)\n        tm.assert_index_equal(result, expected)\n\n    def test_range_float_union_dtype(self):\n        # https://github.com/pandas-dev/pandas/issues/26778\n        index = RangeIndex(start=0, stop=3)\n        other = Index([0.5, 1.5], dtype=np.float64)\n        result = index.union(other)\n        expected = Index([0.0, 0.5, 1, 1.5, 2.0], dtype=np.float64)\n        tm.assert_index_equal(result, expected)\n\n        result = other.union(index)\n        tm.assert_index_equal(result, expected)\n\n    def test_range_uint64_union_dtype(self):\n        # https://github.com/pandas-dev/pandas/issues/26778\n        index = RangeIndex(start=0, stop=3)\n        other = Index([0, 10], dtype=np.uint64)\n        result = index.union(other)\n        expected = Index([0, 1, 2, 10], dtype=object)\n        tm.assert_index_equal(result, expected)\n\n        result = other.union(index)\n        tm.assert_index_equal(result, expected)\n\n    def test_float64_index_difference(self):\n        # https://github.com/pandas-dev/pandas/issues/35217\n        float_index = Index([1.0, 2, 3])\n        string_index = Index([",
      "https://github.com/pandas-dev/pandas/issues/24959\n\n        idx = Index([1, 0, 2])\n        # default, sort=None\n        other = idx[slice_]\n        tm.assert_index_equal(idx.union(other), idx)\n        tm.assert_index_equal(other.union(idx), idx)\n\n        # sort=False\n        tm.assert_index_equal(idx.union(other, sort=False), idx)\n\n    @pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_setops.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/38607\n    # GH#49658 pre-2.0 Index called .values.astype(str) here, which effectively\n    #  did a .decode() on the bytes object.  In 2.0 we go through\n    #  ensure_string_array which does f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\object\\test_astype.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/22762\n                return\n            index = Index(\n                np.array(\n                    [\n                        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\object\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/23438\n        data = date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35897\n        result = timedelta_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_timedelta_range.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33358\n        rng = date_range(\n            start="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_period.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31522\n    df = DataFrame(\n        {\n            ",
      "https://github.com/pandas-dev/pandas/pull/31616\n    df = DataFrame(\n        {\n            ",
      "https://github.com/pandas-dev/pandas/pull/31359\n    # This is currently failing to cast back to Int64Dtype.\n    # The presence of the NA causes two problems\n    # 1. NA is not an instance of Int64Dtype.type (numpy.int64)\n    # 2. The presence of an NA forces object type, so the non-NA values is\n    #    a Python int rather than a NumPy int64. Python ints aren",
      "https://github.com/pandas-dev/pandas/issues/36003\n    # ensure we don",
      "https://github.com/pandas-dev/pandas/issues/18869\n    def func(x):\n        if len(x) == 0:\n            raise ValueError("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_aggregate.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/19526\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/36014\n    df = DataFrame(\n        {\n            ",
      "https://github.com/pandas-dev/pandas/issues/37415)\n    df = DataFrame(\n        {\n            "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_cython.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/35441/\n    expected.index = MultiIndex(\n        levels=[[0, 1], expected.index],\n        codes=[[0, 0, 1, 1], range(len(expected.index))],\n    )\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_frame_describe_tupleindex():\n    # GH 14848 - regression from 0.19.0 to 0.19.1\n    df1 = DataFrame(\n        {\n            "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\methods\\test_describe.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32123\n    groups = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/32123\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/32800\n    # None should be preserved as object dtype\n    df = DataFrame.from_dict({",
      "https://github.com/pandas-dev/pandas/issues/33071\n    # https://github.com/pandas-dev/pandas/issues/32194\n    df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\methods\\test_nth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/27526\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/pull/28085#issuecomment-524066959\n    arr = np.random.default_rng(2).integers(0, 5, size=(10, 3), dtype=np.int64)\n    df = DataFrame(arr, columns=list(",
      "https://github.com/pandas-dev/pandas/issues/27470\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/33136\n    df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\methods\\test_quantile.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/11699\n    df = DataFrame(columns=[",
      "https://github.com/pandas-dev/pandas/issues/23050\n    # Assert no ",
      "https://github.com/pandas-dev/pandas/issues/34010\n    ser = Series([1], index=PeriodIndex(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\methods\\test_size.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/49909\n    right = right.rename(name)\n\n    # have to sort on index because of unstable sort on values\n    left, right = map(rebuild_index, (left, right))  # xref GH9212\n    tm.assert_series_equal(left.sort_index(), right.sort_index())\n\n\n@pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/49909\n    expected = expected.rename("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\methods\\test_value_counts.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/23461\n    def demean_rename(x):\n        result = x - x.mean()\n\n        if isinstance(x, Series):\n            return result\n\n        result = result.rename(columns={c: f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\groupby\\transform\\test_transform.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/23559\n        data = SparseArray([0, 1])\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_getitem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/42950 - when selecting a column\n        # from dataframe, don",
      "https://github.com/pandas-dev/pandas/issues/55025\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/56204\n    pytest.importorskip("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/44098)\n        df = DataFrame(\n            np.random.default_rng(2).integers(0, 100, size=(3, 100)), dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_insert.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/39548\n    df = DataFrame([Timedelta(i, unit="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_mask.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34573\n        expected = DataFrame(\n            {\n                ",
      "https://github.com/pandas-dev/pandas/issues/47172\n\n        labels = [f",
      "https://github.com/pandas-dev/pandas/issues/55791\n    df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/56503\n    df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_setitem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/50727\n        result = DatetimeIndex(\n            date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_asfreq.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33113\n        df = DataFrame()\n        result = df.astype({})\n        tm.assert_frame_equal(result, df)\n        assert result is not df\n\n    @pytest.mark.parametrize(\n        ",
      "https://github.com/pandas-dev/pandas/issues/35471\n        df = DataFrame(Series(data, dtype=dtype))\n        if errors == ",
      "https://github.com/pandas-dev/pandas/issues/41797\n        df = DataFrame(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_astype.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33803\n        data = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/33803\n        pytest.importorskip("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_cov_corr.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35559\n        arr = np.random.default_rng(2).standard_normal((5, 2))\n        arr.flags.writeable = False\n        df = DataFrame(arr)\n        result = df.diff()\n        expected = DataFrame(np.array(df)).diff()\n        tm.assert_frame_equal(result, expected)\n\n    def test_diff_all_int_dtype(self, any_int_numpy_dtype):\n        # GH 14773\n        df = DataFrame(range(5))\n        df = df.astype(any_int_numpy_dtype)\n        result = df.diff()\n        expected_dtype = (\n            "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_diff.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32992\n    df = DataFrame([[1, nulls_fixture], [2, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_drop_duplicates.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35614\n    df = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_explode.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/36495\n    df = DataFrame(\n        [\n            [1, 1, 1, 1.0],\n            [2, 2, 2, 2.0],\n            [3, 3, 3, 3.0],\n        ],\n        columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_fillna.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/21056\n    df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_info.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35598\n        df = DataFrame()\n        result = df.interpolate()\n        assert result is not df\n        expected = df\n        tm.assert_frame_equal(result, expected)\n\n    def test_interp_bad_method(self):\n        df = DataFrame(\n            {\n                ",
      "https://github.com/pandas-dev/pandas/issues/25190\n        x = np.linspace(0, 100, 1000)\n        y = np.sin(x)\n        df = DataFrame(\n            data=np.tile(y, (10, 1)), index=np.arange(10), columns=x\n        ).reindex(columns=x * 1.005)\n        result = df.interpolate(method="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_interpolate.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/37174\n        arr = np.array([1, 2, 3])\n        arr.setflags(write=False)\n        df = DataFrame([1, 2, 3])\n        result = df.isin(arr)\n        expected = DataFrame([True, True, True])\n        tm.assert_frame_equal(result, expected)\n\n    def test_isin_not_lossy(self):\n        # GH 53514\n        val = 1666880195890293744\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_isin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/19607\n    df1 = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_join.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/7163\n        expected = DataFrame(\n            [[1.5, 1.5, 1.5], [2.0, 2.0, 2.0]],\n            index=[0.25, 0.5],\n            columns=["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_quantile.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/51197\n        # also ensure to honor copy keyword for ExtensionDtypes\n        N = 10\n        df = DataFrame(\n            np.random.default_rng(2).standard_normal((N * 10, N)), dtype=",
      "https://github.com/pandas-dev/pandas/issues/29896\n        # tests for reindexing a multi-indexed DataFrame with a new MultiIndex\n        #\n        # confirms that we can reindex a multi-indexed DataFrame with a new\n        # MultiIndex object correctly when using no filling, backfilling, and\n        # padding\n        #\n        # The DataFrame, `df`, used in this test is:\n        #       c\n        #  a b\n        # -1 0  A\n        #    1  B\n        #    2  C\n        #    3  D\n        #    4  E\n        #    5  F\n        #    6  G\n        #  0 0  A\n        #    1  B\n        #    2  C\n        #    3  D\n        #    4  E\n        #    5  F\n        #    6  G\n        #  1 0  A\n        #    1  B\n        #    2  C\n        #    3  D\n        #    4  E\n        #    5  F\n        #    6  G\n        #\n        # and the other MultiIndex, `new_multi_index`, is:\n        # 0: 0 0.5\n        # 1:   2.0\n        # 2:   5.0\n        # 3:   5.8\n        df = DataFrame(\n            {\n                ",
      "https://github.com/pandas-dev/pandas/issues/31964\n        dti = pd.DatetimeIndex([",
      "https://github.com/pandas-dev/pandas/issues/35286\n        df = DataFrame(\n            {",
      "https://github.com/pandas-dev/pandas/issues/12392\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/12392\n        # Enforced in 2.0\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/12392\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/12392\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/12392\n        # equivalence of the labels/axis and index/columns API",
      "https://github.com/pandas-dev/pandas/issues/21390\n        midx = MultiIndex.from_product(\n            [\n                Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reindex.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31925\n        class MyDataFrame(DataFrame):\n            pass\n\n        expected = DataFrame()\n        df = MyDataFrame()\n        result = df.reindex_like(expected)\n\n        tm.assert_frame_equal(result, expected)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reindex_like.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/12392\n        df = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/12392\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rename.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32988\n        df = DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n        tm.assert_frame_equal(result, df)\n\n    @pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/35680\n        df = DataFrame([",
      "https://github.com/pandas-dev/pandas/issues/35931\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_replace.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35606\n    dti = pd.DatetimeIndex([",
      "https://github.com/pandas-dev/pandas/issues/35657\n    dti = pd.DatetimeIndex(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reset_index.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/48090\n        # result of this method is not a view on the original dataframe\n        df = DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_select_dtypes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/40258\n        expected = DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/36383\n        categories = ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sort_values.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/35455\n        df = DataFrame([[Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_numpy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33327\n        obj = Series(index=index, dtype=object)\n        if frame_or_series is DataFrame:\n            obj = obj.to_frame()\n\n        if not isinstance(index, DatetimeIndex):\n            msg = f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_period.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/2407\n        # Issue GH#11879. to_records used to raise an exception when used\n        # with column names containing non-ascii characters in Python 2\n        result = DataFrame(data={"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_records.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "user@example.com",
      "someone_else@example.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_records.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33756\n        idx = Index([3, 2, 1, 0], dtype=dtyp)\n        if isinstance(idx, DatetimeIndex):\n            before = pd.Timestamp(before) if before is not None else None\n            after = pd.Timestamp(after) if after is not None else None\n            indices = [pd.Timestamp(i) for i in indices]\n        values = frame_or_series(range(len(idx)), index=idx)\n        result = values.truncate(before=before, after=after)\n        expected = values.loc[indices]\n        tm.assert_equal(result, expected)\n\n    def test_truncate_multiindex(self, frame_or_series):\n        # GH 34564\n        mi = pd.MultiIndex.from_product([[1, 2, 3, 4], ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_truncate.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/56227\n        result = DataFrame([pd.Timestamp("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_update.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/47762\n    # ensure that attribute of the column array is preserved (when it gets\n    # preserved in reindexing the array) during merge/concat\n    arr = FloatAttrArray(np.array([np.nan, np.nan], dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\array_with_attr\\test_array_with_attr.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33113\n        df = pd.DataFrame()\n        result = df.astype(dtype)\n        tm.assert_frame_equal(result, df)\n\n    @pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/28488\n        result = data.astype(data.dtype, copy=copy)\n        assert (result is data) is (not copy)\n        tm.assert_extension_array_equal(result, data)\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\casting.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31503\n        mask = pd.array(np.zeros(data.shape, dtype=",
      "https://github.com/pandas-dev/pandas/issues/20640\n        n = len(data)\n        result = data.take([0, -n, n - 1, -1])\n        expected = data.take([0, 0, n - 1, n - 1])\n        tm.assert_extension_array_equal(result, expected)\n\n    def test_take_non_na_fill_value(self, data_missing):\n        fill_value = data_missing[1]  # valid\n        na = data_missing[0]\n\n        arr = data_missing._from_sequence(\n            [na, fill_value, na], dtype=data_missing.dtype\n        )\n        result = arr.take([-1, 1], fill_value=fill_value, allow_fill=True)\n        expected = arr.take([1, 1])\n        tm.assert_extension_array_equal(result, expected)\n\n    def test_take_pandas_style_negative_raises(self, data, na_value):\n        with pytest.raises(ValueError, match=",
      "https://github.com/pandas-dev/pandas/pull/30175\n        s = pd.Series(data)\n        result = s[:1].item()\n        assert result == data[0]\n\n        msg = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\getitem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/24147\n        a = pd.Series(data[:3])\n        b = pd.Series(data[2:5], index=[2, 3, 4])\n        result = a.combine_first(b)\n        expected = pd.Series(data[:5])\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/22386\n        subset = data[:5]\n        data = pd.Series(subset, name=",
      "https://github.com/pandas-dev/pandas/issues/23911\n        subset = data[:2]\n        result = subset.shift(periods)\n        expected = subset.take(indices, allow_fill=True)\n        tm.assert_extension_array_equal(result, expected)\n\n    @pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/23911\n        empty = data[:0]\n        result = empty.shift(periods)\n        expected = empty\n        tm.assert_extension_array_equal(result, expected)\n\n    def test_shift_zero_copies(self, data):\n        # GH#31502\n        result = data.shift(0)\n        assert result is not data\n\n        result = data[:0].shift(2)\n        assert result is not data\n\n    def test_shift_fill_value(self, data):\n        arr = data[:4]\n        fill_value = data[0]\n        result = arr.shift(1, fill_value=fill_value)\n        expected = data.take([0, 0, 1, 2])\n        tm.assert_extension_array_equal(result, expected)\n\n        result = arr.shift(-2, fill_value=fill_value)\n        expected = data.take([2, 3, 0, 0])\n        tm.assert_extension_array_equal(result, expected)\n\n    def test_not_hashable(self, data):\n        # We are in general mutable, so not hashable\n        with pytest.raises(TypeError, match=",
      "https://github.com/pandas-dev/pandas/issues/23066\n        data = pd.Series(data)\n        if as_frame:\n            data = data.to_frame()\n        a = pd.util.hash_pandas_object(data)\n        b = pd.util.hash_pandas_object(data)\n        tm.assert_equal(a, b)\n\n    def test_searchsorted(self, data_for_sorting, as_series):\n        if data_for_sorting.dtype._is_boolean:\n            return self._test_searchsorted_bool_dtypes(data_for_sorting, as_series)\n\n        b, c, a = data_for_sorting\n        arr = data_for_sorting.take([2, 0, 1])  # to get [a, b, c]\n\n        if as_series:\n            arr = pd.Series(arr)\n        assert arr.searchsorted(a) == 0\n        assert arr.searchsorted(a, side=",
      "https://github.com/pandas-dev/pandas/issues/34660\n        assert pd.Series(data).equals(pd.Series(data))\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\methods.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/20762\n        df1 = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/20576\n        ser = pd.Series(data, name=",
      "https://github.com/pandas-dev/pandas/issues/20555\n        df = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\reshaping.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32395\n        df = expected = pd.DataFrame({0: pd.Series(data)})\n        result = pd.DataFrame(index=df.index)\n\n        key = full_indexer(df)\n        result.loc[key, 0] = df[0]\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_setitem_with_expansion_row(self, data, na_value):\n        df = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/47284\n        df.loc[2, ",
      "https://github.com/pandas-dev/pandas/issues/32395\n        ser = pd.Series(data, name=",
      "https://github.com/pandas-dev/pandas/pull/44514#discussion_r754002410\n        using_array_manager = isinstance(df._mgr, pd.core.internals.ArrayManager)\n        using_copy_on_write = pd.options.mode.copy_on_write\n\n        blk_data = df._mgr.arrays[0]\n\n        orig = df.copy()\n\n        df.iloc[:] = df.copy()\n        tm.assert_frame_equal(df, orig)\n\n        df.iloc[:-1] = df.iloc[:-1].copy()\n        tm.assert_frame_equal(df, orig)\n\n        df.iloc[:] = df.values\n        tm.assert_frame_equal(df, orig)\n        if not using_array_manager and not using_copy_on_write:\n            # GH#33457 Check that this setting occurred in-place\n            # FIXME(ArrayManager): this should work there too\n            assert df._mgr.arrays[0] is blk_data\n\n        df.iloc[:-1] = df.values[:-1]\n        tm.assert_frame_equal(df, orig)\n\n    def test_delitem_series(self, data):\n        # GH#40763\n        ser = pd.Series(data, name="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\setitem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/22850\n    cls = DecimalArrayWithoutFromSequence\n\n    @classmethod\n    def construct_array_type(cls):\n        return DecimalArrayWithoutFromSequence\n\n    monkeypatch.setattr(DecimalDtype, ",
      "https://github.com/pandas-dev/pandas/issues/22930\n    arr = to_decimal([1, 2, 3, 4])\n    if reverse:\n        div, mod = divmod(2, arr)\n    else:\n        div, mod = divmod(arr, 2)\n    expected_div = to_decimal(expected_div)\n    expected_mod = to_decimal(expected_mod)\n\n    tm.assert_extension_array_equal(div, expected_div)\n    tm.assert_extension_array_equal(mod, expected_mod)\n\n\ndef test_ufunc_fallback(data):\n    a = data[:5]\n    s = pd.Series(a, index=range(3, 8))\n    result = np.abs(s)\n    expected = pd.Series(np.abs(a), index=range(3, 8))\n    tm.assert_series_equal(result, expected)\n\n\ndef test_array_ufunc():\n    a = to_decimal([1, 2, 3])\n    result = np.exp(a)\n    expected = to_decimal(np.exp(a._data))\n    tm.assert_extension_array_equal(result, expected)\n\n\ndef test_array_ufunc_series():\n    a = to_decimal([1, 2, 3])\n    s = pd.Series(a)\n    result = np.exp(s)\n    expected = pd.Series(to_decimal(np.exp(a._data)))\n    tm.assert_series_equal(result, expected)\n\n\ndef test_array_ufunc_series_scalar_other():\n    # check _HANDLED_TYPES\n    a = to_decimal([1, 2, 3])\n    s = pd.Series(a)\n    result = np.add(s, decimal.Decimal(1))\n    expected = pd.Series(np.add(a, decimal.Decimal(1)))\n    tm.assert_series_equal(result, expected)\n\n\ndef test_array_ufunc_series_defer():\n    a = to_decimal([1, 2, 3])\n    s = pd.Series(a)\n\n    expected = pd.Series(to_decimal([2, 4, 6]))\n    r1 = np.add(s, a)\n    r2 = np.add(a, s)\n\n    tm.assert_series_equal(r1, expected)\n    tm.assert_series_equal(r2, expected)\n\n\ndef test_groupby_agg():\n    # Ensure that the result of agg is inferred to be decimal dtype\n    # https://github.com/pandas-dev/pandas/issues/29141\n\n    data = make_data()[:5]\n    df = pd.DataFrame(\n        {",
      "https://github.com/pandas-dev/pandas/issues/29141\n\n    def DecimalArray__my_sum(self):\n        return np.sum(np.array(self))\n\n    monkeypatch.setattr(DecimalArray, ",
      "https://github.com/pandas-dev/pandas/issues/29708\n    # Ensure that indexing operations do not materialize (convert to a numpy\n    # array) the ExtensionArray unnecessary\n\n    def DecimalArray__array__(self, dtype=None):\n        raise Exception("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\decimal\\test_decimal.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/28840\n    # array with list-likes fail when doing astype(str) on the numpy array\n    # which was done in get_values_for_csv\n    df = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\extension\\list\\test_list.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/10218\n    assert result.dtype == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_object_arr.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/29962",
      "https://github.com/pandas-dev/pandas/issues/33450\n        cat = Categorical([np.nan], categories=[1, 2], ordered=True)\n        result = getattr(cat, function)(skipna=skipna)\n        assert result is np.nan\n\n    @pytest.mark.parametrize(",
      "https://github.com/pandas-dev/pandas/issues/8420\n        # https://github.com/pandas-dev/pandas/issues/14522\n\n        cat = Categorical(\n            ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_analytics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/17981\n        c = Categorical([",
      "https://github.com/pandas-dev/pandas/issues/3678\n        # describe should work with NaN\n        cat = Categorical([np.nan, 1, 2, 2])\n        desc = cat.describe()\n        expected = DataFrame(\n            {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/3678\n        cat = Categorical([np.nan, 1, 2, 3])\n        assert is_integer_dtype(cat.categories)\n\n        # this should result in floats\n        cat = Categorical([np.nan, 1, 2.0, 3])\n        assert is_float_dtype(cat.categories)\n\n        cat = Categorical([np.nan, 1.0, 2.0, 3.0])\n        assert is_float_dtype(cat.categories)\n\n        # This doesn",
      "https://github.com/pandas-dev/pandas/issues/16022\n        msg = r",
      "https://github.com/pandas-dev/pandas/issues/31927\n        values = klass(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31503\n    ser = Series(range(3))\n    idx = Categorical([True, False, None])\n    if index:\n        idx = CategoricalIndex(idx)\n\n    result = ser[idx]\n    expected = ser[idx.fillna(False)]\n\n    tm.assert_series_equal(result, expected)\n\n\n@pytest.fixture\ndef non_coercible_categorical(monkeypatch):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_indexing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/19682\n        # https://github.com/pandas-dev/pandas/issues/13628\n        cat = Categorical([1, 2, 3, None, None])\n\n        if len(fillna_kwargs) == 1 and ",
      "https://github.com/pandas-dev/pandas/issues/21097\n        if named:\n            Point = collections.namedtuple(",
      "https://github.com/pandas-dev/pandas/issues/33594\n        msg = ",
      "https://github.com/pandas-dev/pandas/issues/33594\n        # Using isna directly for Categorical will fail in general here\n        cat = Categorical(values)\n\n        msg = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_missing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32276\n        c1 = Categorical.from_codes([-1, 0], categories=categories)\n        c2 = Categorical.from_codes([0, 1], categories=categories)\n\n        result = c1 != c2\n\n        assert result.all()\n\n    def test_compare_frame(self):\n        # GH#24282 check that Categorical.__cmp__(DataFrame) defers to frame\n        data = [",
      "https://github.com/pandas-dev/pandas/issues/9836#issuecomment-92123057\n        # and following comparisons with scalars not in categories should raise\n        # for unequal comps, but not for equal/not equal\n        cat = Categorical([1, 2, 3], ordered=True)\n\n        msg = ",
      "https://github.com/pandas-dev/pandas/issues/26504\n        # BUG: fix ordered categorical comparison with missing values (#26504 )\n        # and following comparisons with scalars in categories with missing\n        # values should be evaluated as False\n\n        cat = Categorical([1, 2, 3, None], categories=[1, 2, 3], ordered=True)\n        scalar = 2\n        expected = getattr(np.array(cat), compare_operators_no_eq_ne)(scalar)\n        actual = getattr(cat, compare_operators_no_eq_ne)(scalar)\n        tm.assert_numpy_array_equal(actual, expected)\n\n    @pytest.mark.filterwarnings(",
      "https://github.com/pandas-dev/pandas/issues/26504\n        # and following comparisons of missing values in ordered Categorical\n        # with listlike should be evaluated as False\n\n        cat = Categorical([1, 2, 3, None], categories=[1, 2, 3], ordered=True)\n        other = Categorical([2, 2, 2, 2], categories=[1, 2, 3], ordered=True)\n        expected = getattr(np.array(cat), compare_operators_no_eq_ne)(2)\n        actual = getattr(cat, compare_operators_no_eq_ne)(other)\n        tm.assert_numpy_array_equal(actual, expected)\n\n    @pytest.mark.parametrize(\n        ",
      "https://github.com/pandas-dev/pandas/issues/16014\n        c1 = ctor([",
      "https://github.com/pandas-dev/pandas/issues/16603#issuecomment-\n        # 349290078\n        a = Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_operators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33288\n        ("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_replace.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/20664\n\n    def test_take_default_allow_fill(self):\n        cat = Categorical([",
      "https://github.com/pandas-dev/pandas/issues/20664\n        cat = Categorical([",
      "https://github.com/pandas-dev/pandas/issues/20664\n        cat = Categorical([], categories=[",
      "https://github.com/pandas-dev/pandas/issues/23296\n        cat = Categorical([",
      "https://github.com/pandas-dev/pandas/issues/23296\n        cat = Categorical([",
      "https://github.com/pandas-dev/pandas/issues/23296\n        cat = Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_take.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/16409\n        pytest.importorskip("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_warnings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/32265/\n    a = pd.array([0, 1, -1, None], dtype=dtype)\n    result = a / zero\n    expected = FloatingArray(\n        np.array([np.nan, np.inf, -np.inf, np.nan], dtype=dtype.numpy_dtype),\n        np.array([False, False, False, True]),\n    )\n    if negative:\n        expected *= -1\n    tm.assert_extension_array_equal(result, expected)\n\n\ndef test_pow_scalar(dtype):\n    a = pd.array([-1, 0, 1, None, 2], dtype=dtype)\n    result = a**0\n    expected = pd.array([1, 1, 1, 1, 1], dtype=dtype)\n    tm.assert_extension_array_equal(result, expected)\n\n    result = a**1\n    expected = pd.array([-1, 0, 1, None, 2], dtype=dtype)\n    tm.assert_extension_array_equal(result, expected)\n\n    result = a**pd.NA\n    expected = pd.array([None, None, 1, None, None], dtype=dtype)\n    tm.assert_extension_array_equal(result, expected)\n\n    result = a**np.nan\n    # TODO np.nan should be converted to pd.NA / missing before operation?\n    expected = FloatingArray(\n        np.array([np.nan, np.nan, 1, np.nan, np.nan], dtype=dtype.numpy_dtype),\n        mask=a._mask,\n    )\n    tm.assert_extension_array_equal(result, expected)\n\n    # reversed\n    a = a[1:]  # Can",
      "https://github.com/pandas-dev/pandas/issues/22022\n    # https://github.com/pandas-dev/pandas/issues/29997\n    arr = pd.array([np.nan, np.nan], dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_arithmetic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/15127>\n@pytest.mark.filterwarnings("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_function.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/27398, GH#22793\n    a = pd.array([0, 1, -1, None], dtype=",
      "https://github.com/pandas-dev/pandas/issues/30188#issuecomment-564452740\n    ser = pd.Series([0, 1], dtype=any_int_ea_dtype)\n    result = 1 // ser\n    expected = pd.Series([np.inf, 1.0], dtype=",
      "https://github.com/pandas-dev/pandas/issues/22022\n    # https://github.com/pandas-dev/pandas/issues/29997\n    arr = pd.array([np.nan, np.nan], dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_arithmetic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31102\n    a = pd.array([1, 0, -1, 2, None], dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_dtypes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/15127>\n@pytest.mark.filterwarnings(",
      "https://github.com/pandas-dev/pandas/issues/33317\n    ser = pd.Series([], dtype=",
      "https://github.com/pandas-dev/pandas/pull/32867\n    # ensure the integers are not cast to float during reductions\n    df = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_function.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31495, GH#22428, GH#31502\n        a = IntervalArray.from_breaks([1, 2, 3])\n        result = a.shift()\n        # int -> float\n        expected = IntervalArray.from_tuples([(np.nan, np.nan), (1.0, 2.0)])\n        tm.assert_interval_array_equal(result, expected)\n\n        msg = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_interval.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/39943\n    data, _ = data\n    ser = pd.Series(data)\n\n    if op == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arithmetic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/31896\n    # possible mismatch in types\n\n    dtype = pd.UInt32Dtype()\n    result = dtype.__from_arrow__(pa.array([1, 2, 3, 4, None], type=",
      "https://github.com/pandas-dev/pandas/issues/38525\n\n    df = pd.DataFrame({",
      "https://github.com/pandas-dev/pandas/issues/40896\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arrow_compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/28150\n    arr = NumpyExtensionArray(np.array([1, 2, 3]))\n    with pytest.raises(ValueError, match="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\numpy_\\test_numpy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/25403\n    pa = period_array([pd.Period(",
      "https://github.com/pandas-dev/pandas/issues/23438\n    arr = pd.date_range("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/30758\n        df = pd.DataFrame({"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_accessor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/26946\n        sparse = SparseArray([fill_value] * 10 + [1.1, 2.2], fill_value=fill_value)\n        r1, r2 = np.modf(sparse)\n        e1, e2 = np.modf(np.asarray(sparse))\n        tm.assert_sp_array_equal(r1, SparseArray(e1, fill_value=fill_value))\n        tm.assert_sp_array_equal(r2, SparseArray(e2, fill_value=fill_value))\n\n    def test_nbytes_integer(self):\n        arr = SparseArray([1, 0, 0, 0, 2], kind=",
      "https://github.com/pandas-dev/pandas/issues/23168\n    arr = SparseArray([0, 0])\n    result = arr.unique()\n    expected = SparseArray([0])\n    tm.assert_sp_array_equal(result, expected)\n\n\ndef test_map():\n    arr = SparseArray([0, 1, 2])\n    expected = SparseArray([10, 11, 12], fill_value=10)\n\n    # dict\n    result = arr.map({0: 10, 1: 11, 2: 12})\n    tm.assert_sp_array_equal(result, expected)\n\n    # series\n    result = arr.map(pd.Series({0: 10, 1: 11, 2: 12}))\n    tm.assert_sp_array_equal(result, expected)\n\n    # function\n    result = arr.map(pd.Series({0: 10, 1: 11, 2: 12}))\n    expected = SparseArray([10, 11, 12], fill_value=10)\n    tm.assert_sp_array_equal(result, expected)\n\n\ndef test_map_missing():\n    arr = SparseArray([0, 1, 2])\n    expected = SparseArray([10, 11, None], fill_value=10)\n\n    result = arr.map({0: 10, 1: 11})\n    tm.assert_sp_array_equal(result, expected)\n\n\n@pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_array.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/34336\n    s_sparse = pd.Series([1, 0, 2], dtype=pd.SparseDtype("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_combine_concat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33655\n    values = pd.array(values, dtype=dtype)\n    msg = ",
      "https://github.com/pandas-dev/pandas/issues/36451\n    ser = pd.Series([0.1], dtype=float_dtype)\n    result = ser.astype(dtype)\n    expected = pd.Series([",
      "https://github.com/pandas-dev/pandas/issues/47628\n    # setting None with a boolean mask (through _putmaks) should still result\n    # in pd.NA values in the underlying array\n    ser = pd.Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\tests\\arrays\\string_\\test_string.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/matplotlib/matplotlib/pull/17266, we need to handle the\n    case of repeated ticks (due to `FixedLocator`) and thus we duplicate the number of\n    labels.\n    ",
      "https://github.com/pandas-dev/pandas/pull/12216#issuecomment-241175580\n        result = _grouped_plot_by_column(\n            plot_group,\n            data,\n            columns=columns,\n            by=by,\n            grid=grid,\n            figsize=figsize,\n            ax=ax,\n            layout=layout,\n            return_type=return_type,\n            **kwds,\n        )\n    else:\n        if return_type is None:\n            return_type = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\plotting\\_matplotlib\\boxplot.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/24304\n                # convert ndarray[period] -> PeriodIndex\n                return PeriodIndex(values, freq=axis.freq).asi8\n            elif isinstance(values, (list, tuple, np.ndarray, Index)):\n                return [get_datevalue(x, axis.freq) for x in values]\n        return values\n\n\ndef get_datevalue(date, freq):\n    if isinstance(date, Period):\n        return date.asfreq(freq).ordinal\n    elif isinstance(date, (str, datetime, pydt.date, pydt.time, np.datetime64)):\n        return Period(date, freq).ordinal\n    elif (\n        is_integer(date)\n        or is_float(date)\n        or (isinstance(date, (np.ndarray, Index)) and (date.size == 1))\n    ):\n        return date\n    elif date is None:\n        return None\n    raise ValueError(f",
      "https://github.com/matplotlib/matplotlib/issues/11391\n                # Series was skipped. Convert to DatetimeIndex to get asi8\n                values = Index(values)\n            if isinstance(values, Index):\n                values = values.values\n            if not isinstance(values, np.ndarray):\n                values = com.asarray_tuplesafe(values)\n\n            if is_integer_dtype(values) or is_float_dtype(values):\n                return values\n\n            try:\n                values = tools.to_datetime(values)\n            except Exception:\n                pass\n\n            values = mdates.date2num(values)\n\n        return values\n\n    @staticmethod\n    def axisinfo(unit: tzinfo | None, axis) -> munits.AxisInfo:\n        ",
      "https://github.com/pandas-dev/pandas/pull/47602\n        years = dates_[year_start] // 4 + 1970\n        nyears = span / periodsperyear\n        (min_anndef, maj_anndef) = _get_default_annual_spacing(nyears)\n        major_idx = year_start[(years % maj_anndef == 0)]\n        info_maj[major_idx] = True\n        info["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\plotting\\_matplotlib\\converter.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/ipython/ipython/issues/11215\n\n        # GH33389, if ax is used multiple times, we should always\n        # use the last one which contains the latest information\n        # about the ax\n        img = ax.collections[-1]\n        return fig.colorbar(img, ax=ax, **kwds)\n\n\nclass ScatterPlot(PlanePlot):\n    @property\n    def _kind(self) -> Literal["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://msdn.com/ms649016#_win32_Copying_Information_to_the_Clipboard\n\n        text = _stringifyText(text)  # Converts non-str values to str.\n\n        with window() as hwnd:\n            # http://msdn.com/ms649048\n            # If an application calls OpenClipboard with hwnd set to NULL,\n            # EmptyClipboard sets the clipboard owner to NULL;\n            # this causes SetClipboardData to fail.\n            # => We need a valid hwnd to copy something.\n            with clipboard(hwnd):\n                safeEmptyClipboard()\n\n                if text:\n                    # http://msdn.com/ms649051\n                    # If the hMem parameter identifies a memory object,\n                    # the object must have been allocated using the\n                    # function with the GMEM_MOVEABLE flag.\n                    count = wcslen(text) + 1\n                    handle = safeGlobalAlloc(GMEM_MOVEABLE, count * sizeof(c_wchar))\n                    locked_handle = safeGlobalLock(handle)\n\n                    ctypes.memmove(\n                        c_wchar_p(locked_handle),\n                        c_wchar_p(text),\n                        count * sizeof(c_wchar),\n                    )\n\n                    safeGlobalUnlock(handle)\n                    safeSetClipboardData(CF_UNICODETEXT, handle)\n\n    def paste_windows():\n        with clipboard(None):\n            handle = safeGetClipboardData(CF_UNICODETEXT)\n            if not handle:\n                # GetClipboardData may return NULL with errno == NO_ERROR\n                # if the clipboard is empty.\n                # (Also, it may return a handle to an empty buffer,\n                # but technically that"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\clipboard\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pyperclip.readthedocs.io/en/latest/index.html#not-implemented-error\n    ",
      "https://bugs.kde.org/show_bug.cgi?id=342874\n        # TODO: https://github.com/asweigart/pyperclip/issues/43\n        clipboardContents = stdout.decode(ENCODING)\n        # even if blank, Klipper will append a newline at the end\n        assert len(clipboardContents) > 0\n        # make sure that newline is there\n        assert clipboardContents.endswith(",
      "https://github.com/asweigart/pyperclip/issues/55\n        if os.path.exists(",
      "https://github.com/asweigart/pyperclip/issues/55",
      "https://pypi.python.org/project/QtPy\n            import qtpy  # check if qtpy is installed\n        except ImportError:\n            # If qtpy isn"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\clipboard\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "al@inventwithpython.com"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\clipboard\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/project/odfpy/>`_ will be used.\n    - Otherwise if ``path_or_buffer`` is an xls format, ``xlrd`` will be used.\n    - Otherwise if ``path_or_buffer`` is in xlsb format, ``pyxlsb`` will be used.\n    - Otherwise ``openpyxl`` will be used.\nconverters : dict, default None\n    Dict of functions for converting values in certain columns. Keys can\n    either be integers or column labels, values are functions that take one\n    input argument, the Excel cell content, and return the transformed\n    content.\ntrue_values : list, default None\n    Values to consider as True.\nfalse_values : list, default None\n    Values to consider as False.\nskiprows : list-like, int, or callable, optional\n    Line numbers to skip (0-indexed) or number of lines to skip (int) at the\n    start of the file. If callable, the callable function will be evaluated\n    against the row indices, returning True if the row should be skipped and\n    False otherwise. An example of a valid callable argument would be ``lambda\n    x: x in [0, 2]``.\nnrows : int, default None\n    Number of rows to parse.\nna_values : scalar, str, list-like, or dict, default None\n    Additional strings to recognize as NA/NaN. If dict passed, specific\n    per-column NA values. By default the following values are interpreted\n    as NaN: ",
      "https://stackoverflow.com/questions/31416842/\n                #     openpyxl-does-not-close-excel-workbook-in-read-only-mode\n                self.book.close()\n            elif hasattr(self.book, ",
      "https://github.com/python-excel/xlrd/blob/2.0.1/xlrd/book.py#L548\n                self.book.release_resources()\n        self.handles.close()\n\n    @property\n    def sheet_names(self) -> list[str]:\n        raise NotImplementedError\n\n    def get_sheet_by_name(self, name: str):\n        raise NotImplementedError\n\n    def get_sheet_by_index(self, index: int):\n        raise NotImplementedError\n\n    def get_sheet_data(self, sheet, rows: int | None = None):\n        raise NotImplementedError\n\n    def raise_if_bad_sheet_by_index(self, index: int) -> None:\n        n_sheets = len(self.sheet_names)\n        if index >= n_sheets:\n            raise ValueError(\n                f",
      "https://pypi.org/project/XlsxWriter/>`__ for xlsx files if xlsxwriter\n      is installed otherwise `openpyxl <https://pypi.org/project/openpyxl/>`__\n    * `odswriter <https://pypi.org/project/odswriter/>`__ for ods files\n\n    See ``DataFrame.to_excel`` for typical usage.\n\n    The writer should be used as a context manager. Otherwise, call `close()` to save\n    and close any opened file handles.\n\n    Parameters\n    ----------\n    path : str or typing.BinaryIO\n        Path to xls or xlsx or ods file.\n    engine : str (optional)\n        Engine to use for writing. If None, defaults to\n        ``io.excel.<extension>.writer``.  NOTE: can only be passed as a keyword\n        argument.\n    date_format : str, default None\n        Format string for dates written into Excel files (e.g. ",
      "https://github.com/python-excel/xlrd.\n\n    Parameters\n    ----------\n    content_or_path : str or file-like object\n        Path to file or content of file to inspect. May be a URL.\n    {storage_options}\n\n    Returns\n    -------\n    str or None\n        Format of file if it can be determined.\n\n    Raises\n    ------\n    ValueError\n        If resulting stream is empty.\n    BadZipFile\n        If resulting stream does not have an XLS signature and is not a valid zipfile.\n    ",
      "https://xlrd.readthedocs.io/en/latest/>`_\n           now only supports old-style ``.xls`` files.\n           When ``engine=None``, the following logic will be\n           used to determine the engine:\n\n           - If ``path_or_buffer`` is an OpenDocument format (.odf, .ods, .odt),\n             then `odf <https://pypi.org/project/odfpy/>`_ will be used.\n           - Otherwise if ``path_or_buffer`` is an xls format,\n             ``xlrd`` will be used.\n           - Otherwise if ``path_or_buffer`` is in xlsb format,\n             `pyxlsb <https://pypi.org/project/pyxlsb/>`_ will be used.\n\n           .. versionadded:: 1.3.0\n\n           - Otherwise if `openpyxl <https://pypi.org/project/openpyxl/>`_ is installed,\n             then ``openpyxl`` will be used.\n           - Otherwise if ``xlrd >= 2.0`` is installed, a ``ValueError`` will be raised.\n\n           .. warning::\n\n            Please do not report issues when using ``xlrd`` to read ``.xlsx`` files.\n            This is not supported, switch to using ``openpyxl`` instead.\n    engine_kwargs : dict, optional\n        Arbitrary keyword arguments passed to excel engine.\n\n    Examples\n    --------\n    >>> file = pd.ExcelFile("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/36175#discussion_r484639704\n                    value.append(self._get_cell_string_value(fragment))\n            else:\n                value.append(str(fragment).strip("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\excel\\_odfreader.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/docs/dev/user_guide/options.html#frequently-used-options\n\n        GH #37359\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\formats\\format.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://unicode.org/reports/tr11/\n        # Ambiguous width can be changed by option\n        self._EAW_MAP = {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\formats\\printing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.w3.org/WAI/GL/wiki/Relative_luminance)\n\n            Parameters\n            ----------\n            color : rgb or rgba tuple\n\n            Returns\n            -------\n            float\n                The relative luminance as a value from 0 to 1\n            "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\formats\\style.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://, ftp:// or www. to\n            HTML <a> tags as clickable URL hyperlinks if ",
      "http://, ftp:// or www. to\n            HTML <a> tags as clickable URL hyperlinks if "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\formats\\style_render.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://, http://, ftp:// or www. to\n            HTML <a> tags as clickable URL hyperlinks if ",
      "https://, http://, ftp:// or www. to\n            HTML <a> tags as clickable URL hyperlinks if "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\formats\\style_render.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/codecs.html#error-handlers>`_ .\n\n        .. versionadded:: 1.3.0\n\n    lines : bool, default False\n        Read the file as a json object per line.\n\n    chunksize : int, optional\n        Return JsonReader object for iteration.\n        See the `line-delimited json docs\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json>`_\n        for more information on ``chunksize``.\n        This can only be passed if `lines=True`.\n        If this is None, the file will be read into memory all at once.\n    {decompression_options}\n\n        .. versionchanged:: 1.4.0 Zstandard support.\n\n    nrows : int, optional\n        The number of lines from the line-delimited jsonfile that has to be read.\n        This can only be passed if `lines=True`.\n        If this is None, all the rows will be returned.\n\n    {storage_options}\n\n    dtype_backend : {{"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\json\\_json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://specs.frictionlessdata.io/table-schema/\n",
      "https://pandas.pydata.org/docs/user_guide/io.html#table-schema>`__ for\n    conversion types.\n    Timedeltas as converted to ISO8601 duration format with\n    9 decimal places after the seconds field for nanosecond precision.\n\n    Categoricals are converted to the `any` dtype, and use the `enum` field\n    constraint to list the allowed values. The `ordered` attribute is included\n    in an `ordered` field.\n\n    Examples\n    --------\n    >>> from pandas.io.json._table_schema import build_table_schema\n    >>> df = pd.DataFrame(\n    ...     {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\json\\_table_schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/10615\n        if isinstance(arg, np.ndarray) and arg.ndim == 1 and len(arg) == 1:\n            return arg[0]\n        return arg\n\n    def converter(*date_cols, col: Hashable):\n        if len(date_cols) == 1 and date_cols[0].dtype.kind in "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, gs, and file. For file URLs, a host is\n    expected. A local file could be: file://localhost/path/to/table.csv.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method, such as\n    a file handle (e.g. via builtin ``open`` function) or ``StringIO``.\nsep : str, default {_default_sep}\n    Character or regex pattern to treat as the delimiter. If ``sep=None``, the\n    C engine cannot automatically detect\n    the separator, but the Python parsing engine can, meaning the latter will\n    be used and automatically detect the separator from only the first valid\n    row of the file by Python",
      "https://docs.python.org/3/library/datetime.html\n    #strftime-and-strptime-behavior>`_ for more information on choices, though\n    note that :const:`",
      "https://en.wikipedia.org/wiki/ISO_8601>`_\n        time string (not necessarily in exactly the same format);\n    - ",
      "https://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_\n    for more information on ``iterator`` and ``chunksize``.\n\n{decompression_options}\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nthousands : str (length 1), optional\n    Character acting as the thousands separator in numerical values.\ndecimal : str (length 1), default ",
      "https://docs.python.org/3/library/codecs.html#standard-encodings>`_ .\n\nencoding_errors : str, optional, default ",
      "https://docs.python.org/3/library/codecs.html#error-handlers>`_ .\n\n    .. versionadded:: 1.3.0\n\ndialect : str or csv.Dialect, optional\n    If provided, this parameter will override values (default or not) for the\n    following parameters: ``delimiter``, ``doublequote``, ``escapechar``,\n    ``skipinitialspace``, ``quotechar``, and ``quoting``. If it is necessary to\n    override values, a ``ParserWarning`` will be issued. See ``csv.Dialect``\n    documentation for more details.\non_bad_lines : {{",
      "https://arrow.apache.org/docs/python/generated/pyarrow.csv.ParseOptions.html\n          #pyarrow.csv.ParseOptions.invalid_row_handler>`_ when ``engine=",
      "https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. ",
      "https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. ",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str, path object, or file-like object\n        String, path object (implementing ``os.PathLike[str]``), or file-like\n        object implementing a text ``read()`` function.The string could be a URL.\n        Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is\n        expected. A local file could be:\n        ``file://localhost/path/to/table.csv``.\n    colspecs : list of tuple (int, int) or "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/CUJ/1992/9210/ross/ross.htm\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\sas\\sas7bdat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bitbucket.org/jaredhobbs/sas7bdat\n\nSee also:\n  https://github.com/BioStatMatt/sas7bdat\n\nPartial documentation of the file format:\n  https://cran.r-project.org/package=sas7bdat/vignettes/sas7bdat.pdf\n\nReference for binary data compression:\n  http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/CUJ/1992/9210/ross/ross.htm\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\sas\\sas7bdat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://support.sas.com/documentation/cdl/en/etsug/60372/HTML/default/viewer.htm#etsug_intervals_sect009.htm\n# https://github.com/epam/parso/blob/master/src/main/java/com/epam/parso/impl/SasFileConstants.java\nsas_date_formats: Final = (\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\sas\\sas_constants.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://support.sas.com/documentation/onlinedoc/dfdmstudio/2.6/dmpdmsug/Content/dfU_Encodings_SAS.html\n# corresponding to the Python documentation of standard encodings\n# https://docs.python.org/3/library/codecs.html#standard-encodings\nencoding_names: Final = {\n    20: ",
      "https://github.com/epam/parso/blob/master/src/main/java/com/epam/parso/impl/SasFileConstants.java\nsas_date_formats: Final = (\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\sas\\sas_constants.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://support.sas.com/content/dam/SAS/support/en/technical-papers/record-layout-of-a-sas-version-5-or-6-data-set-in-sas-transport-xport-format.pdf\n",
      "https://github.com/jcushman/xport/pull/3\n    # The R ",
      "https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/movefile/p1bm6aqp3fw4uin1hucwh718f6kp.htm\n                raise ValueError(\n                    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\io\\sas\\sas_xport.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/blob/main/pandas/tests/extension/list/array.py\n    ",
      "https://github.com/python/typeshed/issues/2148#issuecomment-520783318\n    # Incompatible types in assignment (expression has type ",
      "https://github.com/pandas-dev/pandas/issues/22850\n                    # We catch all regular exceptions here, and fall back\n                    # to an ndarray.\n                    res = maybe_cast_pointwise_result(arr, self.dtype, same_dtype=False)\n                    if not isinstance(res, type(self)):\n                        # exception raised in _from_sequence; ensure we have ndarray\n                        res = np.asarray(arr)\n                else:\n                    res = np.asarray(arr, dtype=result_dtype)\n                return res\n\n            if op.__name__ in {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/4125\n    # error: Signature of "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`__\n    for more.\n\n    Examples\n    --------\n    >>> pd.Categorical([1, 2, 3, 1, 2, 3])\n    [1, 2, 3, 1, 2, 3]\n    Categories (3, int64): [1, 2, 3]\n\n    >>> pd.Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/44624)\n        result = cast(",
      "https://mypy.readthedocs.io/en/latest/generics.html\n\n        no_op = check_setitem_lengths(key, value, self)\n\n        # Calling super() before the no_op short-circuit means that we raise\n        #  on invalid ",
      "https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n            if dtype != np.int64:\n                raise TypeError(\n                    f",
      "https://docs.python.org/3/library/datetime.html"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\datetimelike.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://mysite.verizon.net/aesir_research/date/jdalg2.htm\n        year = np.asarray(self.year)\n        month = np.asarray(self.month)\n        day = np.asarray(self.day)\n        testarr = month < 3\n        year[testarr] -= 1\n        month[testarr] += 12\n        return (\n            day\n            + np.fix((153 * month - 457) / 5)\n            + 365 * year\n            + np.floor(year / 4)\n            - np.floor(year / 100)\n            + np.floor(year / 400)\n            + 1_721_118.5\n            + (\n                self.hour\n                + self.minute / 60\n                + self.second / 3600\n                + self.microsecond / 3600 / 10**6\n                + self.nanosecond / 3600 / 10**9\n            )\n            / 24\n        )\n\n    # -----------------------------------------------------------------\n    # Reductions\n\n    def std(\n        self,\n        axis=None,\n        dtype=None,\n        out=None,\n        ddof: int = 1,\n        keepdims: bool = False,\n        skipna: bool = True,\n    ):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\datetimes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/33358\n            if res is None:\n                res = freq\n\n            freq = res\n        return PeriodArray._from_datetime64(self._ndarray, freq, tz=self.tz)\n\n    # -----------------------------------------------------------------\n    # Properties - Vectorized Timestamp Properties/Methods\n\n    def month_name(self, locale=None) -> npt.NDArray[np.object_]:\n        ",
      "https://en.wikipedia.org/wiki/Julian_day\n        ",
      "https://github.com/pandas-dev/pandas/issues/49468.\n        data = data.astype(DT64NS_DTYPE).view(",
      "https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = cast(DatetimeTZDtype, dtype)\n            dtype = DatetimeTZDtype(\n                unit=dtype.unit, tz=timezones.tz_standardize(dtype.tz)\n            )\n\n    return dtype\n\n\ndef _validate_tz_from_dtype(\n    dtype, tz: tzinfo | None, explicit_tz_none: bool = False\n) -> tzinfo | None:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\datetimes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#intervalindex>`__\nfor more.\n\n%(examples)s\\\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\interval.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/22449\n        return str\n\n    @property\n    def dtype(self) -> BaseMaskedDtype:\n        raise AbstractMethodError(self)\n\n    @overload\n    def __getitem__(self, item: ScalarIndexer) -> Any:\n        ...\n\n    @overload\n    def __getitem__(self, item: SequenceIndexer) -> Self:\n        ...\n\n    def __getitem__(self, item: PositionalIndexer) -> Self | Any:\n        item = check_array_indexer(self, item)\n\n        newmask = self._mask[item]\n        if is_bool(newmask):\n            # This is a scalar indexing\n            if newmask:\n                return self.dtype.na_value\n            return self._data[item]\n\n        return self._simple_new(self._data[item], newmask)\n\n    def _pad_or_backfill(\n        self,\n        *,\n        method: FillnaOptions,\n        limit: int | None = None,\n        limit_area: Literal[",
      "https://github.com/pandas-dev/pandas/pull/38379 for some discussion\n            result[self._mask] = values_have_NA\n\n        mask = np.zeros(self._data.shape, dtype=bool)\n        return BooleanArray(result, mask, copy=False)\n\n    def copy(self) -> Self:\n        data = self._data.copy()\n        mask = self._mask.copy()\n        return self._simple_new(data, mask)\n\n    @doc(ExtensionArray.duplicated)\n    def duplicated(\n        self, keep: Literal["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/pull/13757\n            if array.num_chunks == 0:\n                array = pyarrow.array([], type=array.type)\n            else:\n                array = array.combine_chunks()\n\n        data, mask = pyarrow_array_to_numpy_and_mask(array, dtype=self.numpy_dtype)\n        return array_class(data.copy(), ~mask, copy=False)\n\n    @classmethod\n    def _get_dtype_mapping(cls) -> Mapping[np.dtype, NumericDtype]:\n        raise AbstractMethodError(cls)\n\n    @classmethod\n    def _standardize_dtype(cls, dtype: NumericDtype | str | np.dtype) -> NumericDtype:\n        ",
      "https://github.com/numpy/numpy/pull/7476\n            dtype = dtype.lower()\n\n        if not isinstance(dtype, NumericDtype):\n            mapping = cls._get_dtype_mapping()\n            try:\n                dtype = mapping[np.dtype(dtype)]\n            except KeyError as err:\n                raise ValueError(f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\numeric.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org/doc/stable/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html\n        # The primary modification is not boxing scalar return values\n        # in NumpyExtensionArray, since pandas"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\numpy_.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/36126\n    # error: Signature of "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/12550\n            #  timedelta64 will incorrectly cast to int\n            if not is_list_like(other):\n                other = [other] * num_set\n            else:\n                other = list(other)\n\n    return other\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\array_algos\\putmask.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/reference/simple_stmts.html#simple-statements>`__,\n        only Python `expressions\n        <https://docs.python.org/3/reference/simple_stmts.html#expression-statements>`__.\n    parser : {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\computation\\eval.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/microsoft/pyright/issues/2315\n_T = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\computation\\expr.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydata/numexpr/issues/379)\n            pass\n        except NotImplementedError:\n            if _bool_arith_fallback(op_str, a, b):\n                pass\n            else:\n                raise\n\n        if is_reversed:\n            # reverse order to original for fallback\n            a, b = b, a\n\n    if _TEST_MODE:\n        _store_test_result(result is not None)\n\n    if result is None:\n        result = _evaluate_standard(op, op_str, a, b)\n\n    return result\n\n\n_op_str_mapping = {\n    operator.add: ",
      "https://github.com/pydata/numexpr/issues/365\n    # so sticking with unaccelerated for now GH#36552\n    operator.mod: None,\n    roperator.rmod: None,\n    operator.pow: "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\computation\\expressions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/collections.html#chainmap-examples-and-recipes\nclass DeepChainMap(ChainMap[_KT, _VT]):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\computation\\scope.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/39692#issuecomment-1441051740\n        #  avoid cache misses with NaN/NaT values that are not singletons\n        if fill_value is not NA:\n            try:\n                orig_is_nat = np.isnat(fill_value)\n            except TypeError:\n                pass\n\n        fill_value = _canonical_nans.get(type(fill_value), fill_value)\n\n    # for performance, we are using a cached version of the actual implementation\n    # of the function in _maybe_promote. However, this doesn",
      "https://github.com/pandas-dev/pandas/pull/49569#issuecomment-1308300065\n\n    Parameters\n    ----------\n    dtypes : np.dtypes\n\n    Returns\n    -------\n    np.dtype\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/52576\n            return dtype.numpy_dtype.type\n        return dtype.type\n\n    try:\n        dtype = pandas_dtype(dtype)\n    except TypeError:\n        pass\n\n    if isinstance(dtype, ExtensionDtype):\n        return dtype.type\n    elif isinstance(dtype, str):\n        # TODO(jreback)\n        # should deprecate these\n        if dtype in ["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#unioning>`__\n\n    Examples\n    --------\n    If you want to combine categoricals that do not necessarily have\n    the same categories, `union_categoricals` will combine a list-like\n    of categoricals. The new categories will be the union of the\n    categories being combined.\n\n    >>> a = pd.Categorical(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\dtypes\\concat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://arrow.apache.org/docs/python/api/datatypes.html#factory-functions>`__.\n\n    Attributes\n    ----------\n    pyarrow_dtype\n\n    Methods\n    -------\n    None\n\n    Returns\n    -------\n    ArrowDtype\n\n    Examples\n    --------\n    >>> import pyarrow as pa\n    >>> pd.ArrowDtype(pa.int64())\n    int64[pyarrow]\n\n    Types with parameters must be constructed with ArrowDtype.\n\n    >>> pd.ArrowDtype(pa.timestamp(",
      "https://github.com/apache/arrow/issues/34462\n            return np.dtype(f",
      "https://github.com/apache/arrow/issues/34462\n            return np.dtype(f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/1006\n    # error: "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\dtypes\\generic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True\n\n\ndef is_sequence(obj) -> bool:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/4859217/\n      programmatically-creating-variables-in-python/4859312#4859312\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/1484\n# See note at _mangle_lambda_list\nScalarResult = TypeVar("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\groupby\\generic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#piping-function-calls>`_\n\nExamples\n--------\n%(examples)s\n",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n            If a BaseIndexer subclass, the window boundaries\n            based on the defined ``get_window_bounds`` method. Additional rolling\n            keyword arguments, namely ``min_periods``, ``center``, ``closed`` and\n            ``step`` will be passed to ``get_window_bounds``.\n\n        min_periods : int, default None\n            Minimum number of observations in window required to have a value;\n            otherwise, result is ``np.nan``.\n\n            For a window that is specified by an offset,\n            ``min_periods`` will default to 1.\n\n            For a window that is specified by an integer, ``min_periods`` will default\n            to the size of the window.\n\n        center : bool, default False\n            If False, set the window labels as the right edge of the window index.\n\n            If True, set the window labels as the center of the window index.\n\n        win_type : str, default None\n            If ``None``, all points are evenly weighted.\n\n            If a string, it must be a valid `scipy.signal window function\n            <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`__.\n\n            Certain Scipy window types require additional parameters to be passed\n            in the aggregation function. The additional parameters must match\n            the keywords specified in the Scipy window type method signature.\n\n        on : str, optional\n            For a DataFrame, a column label or Index level on which\n            to calculate the rolling window, rather than the DataFrame"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`_.\n    axis : str, int, defaults to 0\n        Number/name of the axis.\n    sort : bool, default to False\n        Whether to sort the resulting labels.\n    closed : {"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\groupby\\grouper.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/31423\n\n        if isinstance(dtype, ExtensionDtype):\n            return dtype.index_class\n\n        if dtype.kind == ",
      "https://github.com/python/typeshed/issues/2148#issuecomment-520783318\n    # Incompatible types in assignment (expression has type ",
      "https://github.com/pandas-dev/pandas/issues/19764\n        ",
      "https://github.com/pandas-dev/pandas/issues/26778 for discussion\n        # Now it",
      "https://github.com/numpy/numpy/issues/12550\n            casted = arr.dtype.type(item)\n            new_values = np.insert(arr, loc, casted)\n\n        else:\n            # error: No overload variant of ",
      "https://github.com/pandas-dev/pandas/issues/31109\n            return NotImplemented\n\n        return super()._arith_method(other, op)\n\n    @final\n    def _unary_method(self, op):\n        result = op(self._values)\n        return Index(result, name=self.name)\n\n    def __abs__(self) -> Index:\n        return self._unary_method(operator.abs)\n\n    def __neg__(self) -> Index:\n        return self._unary_method(operator.neg)\n\n    def __pos__(self) -> Index:\n        return self._unary_method(operator.pos)\n\n    def __invert__(self) -> Index:\n        # GH#8875\n        return self._unary_method(operator.inv)\n\n    # --------------------------------------------------------------------\n    # Reductions\n\n    def any(self, *args, **kwargs):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#categoricalindex>`__\n    for more.\n\n    Examples\n    --------\n    >>> pd.CategoricalIndex(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexes\\category.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    >>> idx = pd.DatetimeIndex([",
      "https://github.com/pandas-dev/pandas/pull/36148#issuecomment-687883081\n            parsed = parsed.tz_localize(self.tz)\n\n        return parsed, reso\n\n    def _disallow_mismatched_indexing(self, key) -> None:\n        ",
      "https://github.com/pandas-dev/pandas/issues/31501\n            label = Timestamp(label).to_pydatetime()\n\n        label = super()._maybe_cast_slice_bound(label, side)\n        self._data._assert_tzawareness_compat(label)\n        return Timestamp(label)\n\n    def slice_indexer(self, start=None, end=None, step=None):\n        ",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start=",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    Note how the two weekend days are skipped in the result.\n\n    >>> pd.bdate_range(start="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexes\\datetimes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    Numeric ``start`` and  ``end`` is supported.\n\n    >>> pd.interval_range(start=0, end=5)\n    IntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\n                  dtype="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexes\\interval.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html>`__\n    for more.\n\n    Examples\n    --------\n    A new ``MultiIndex`` is typically constructed using one of the helper\n    methods :meth:`MultiIndex.from_arrays`, :meth:`MultiIndex.from_product`\n    and :meth:`MultiIndex.from_tuples`. For example (using ``.from_arrays``):\n\n    >>> arrays = [[1, 1, 2, 2], [",
      "https://github.com/pandas-dev/pandas/issues/31648\n        result = [x._rename(name=name) for x, name in zip(self._levels, self._names)]\n        for level in result:\n            # disallow midx.levels[0].name = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    >>> pd.period_range(start="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexes\\period.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/a/32481015\n        if not other:\n            return True\n        if not self._range:\n            return False\n        if len(other) > 1 and other.step % self._range.step:\n            return False\n        return other.start in self._range and other[-1] in self._range\n\n    def _union(self, other: Index, sort: bool | None):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    >>> pd.TimedeltaIndex([",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    >>> pd.timedelta_range(start="
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\indexes\\timedeltas.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/54781\n            dtype = self.dtype\n        else:\n            raise NotImplementedError(f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\interchange\\column.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/data-apis/dataframe-api\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\interchange\\dataframe_protocol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/19083\n    ctypes_type = np.ctypeslib.as_ctypes_type(column_dtype)\n\n    if bit_width == 1:\n        assert length is not None, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\interchange\\from_dataframe.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://arrow.apache.org/docs/format/CDataInterface.html#data-type-description-format-strings\n    "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\interchange\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/55139#pullrequestreview-1720690758\n            # on hard-coding stacklevel\n            stacklevel=2,\n        )\n\n        if name == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\internals\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/4125\n        ",
      "https://github.com/pandas-dev/pandas/issues/39817\n    if len(result) == 0:\n        # all empties -> check for bool to not coerce to float\n        kinds = {obj.dtype.kind for obj in to_concat_no_proxy}\n        if len(kinds) != 1:\n            if "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\internals\\array_manager.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/10615\n            value = value[0, ...]\n\n        arr[indexer] = value\n\n    def grouped_reduce(self, func):\n        arr = self.array\n        res = func(arr)\n        index = default_index(len(res))\n\n        mgr = type(self).from_array(res, index)\n        return mgr\n\n    @classmethod\n    def from_array(cls, arr: ArrayLike, index: Index):\n        raise AbstractMethodError(cls)\n\n\ndef interleaved_dtype(dtypes: list[DtypeObj]) -> DtypeObj | None:\n    ",
      "https://github.com/pandas-dev/pandas/issues/22791\n    # Give EAs some input on what happens here. Sparse needs this.\n    if isinstance(dtype, SparseDtype):\n        dtype = dtype.subtype\n        dtype = cast(np.dtype, dtype)\n    elif isinstance(dtype, ExtensionDtype):\n        dtype = np.dtype("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues",
      "https://github.com/pandas-dev/pandas/issues.",
      "https://github.com/numpy/numpy/pull/10615\n                casted = casted[0, ...]\n            try:\n                values[indexer] = casted\n            except (TypeError, ValueError) as err:\n                if is_list_like(casted):\n                    raise ValueError(\n                        ",
      "https://github.com/numpy/numpy/blob/486878b37fc7439a3b2b87747f50db9b62fea8eb/numpy/core/src/multiarray/calculation.c#L625-L636\n                values = values.copy()\n            else:\n                refs = self.refs\n        return self.make_block_same_class(values, refs=refs)\n\n    # ---------------------------------------------------------------------\n    # Abstract Methods Overridden By EABackedBlock and NumpyBlock\n\n    def delete(self, loc) -> list[Block]:\n        ",
      "https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/52685#issuecomment-1523287739\n        arrs = [mgr.blocks[0].values.T for mgr, _ in mgrs_indexers]\n        arr = np.concatenate(arrs).T\n        bp = libinternals.BlockPlacement(slice(shape[0]))\n        nb = new_block_2d(arr, bp)\n        return nb\n\n    arr = np.empty(shape, dtype=first_dtype)\n\n    if first_dtype == np.float64:\n        take_func = libalgos.take_2d_axis0_float64_float64\n    else:\n        take_func = libalgos.take_2d_axis0_float32_float32\n\n    start = 0\n    for mgr, indexers in mgrs_indexers:\n        mgr_len = mgr.shape[1]\n        end = start + mgr_len\n\n        if 0 in indexers:\n            take_func(\n                mgr.blocks[0].values,\n                indexers[0],\n                arr[:, start:end],\n            )\n        else:\n            # No reindexing necessary, we can copy values directly\n            arr[:, start:end] = mgr.blocks[0].values\n\n        start += mgr_len\n\n    bp = libinternals.BlockPlacement(slice(shape[0]))\n    nb = new_block_2d(arr, bp)\n    return nb\n\n\ndef _get_combined_plan(\n    mgrs: list[BlockManager],\n) -> list[tuple[BlockPlacement, list[JoinUnit]]]:\n    plan = []\n\n    max_len = mgrs[0].shape[0]\n\n    blknos_list = [mgr.blknos for mgr in mgrs]\n    pairs = libinternals.get_concat_blkno_indexers(blknos_list)\n    for ind, (blknos, bp) in enumerate(pairs):\n        # assert bp.is_slice_like\n        # assert len(bp) > 0\n\n        units_for_bp = []\n        for k, mgr in enumerate(mgrs):\n            blkno = blknos[k]\n\n            nb = _get_block_for_concat_plan(mgr, bp, blkno, max_len=max_len)\n            unit = JoinUnit(nb)\n            units_for_bp.append(unit)\n\n        plan.append((bp, units_for_bp))\n\n    return plan\n\n\ndef _get_block_for_concat_plan(\n    mgr: BlockManager, bp: BlockPlacement, blkno: int, *, max_len: int\n) -> Block:\n    blk = mgr.blocks[blkno]\n    # Assertions disabled for performance:\n    #  assert bp.is_slice_like\n    #  assert blkno != -1\n    #  assert (mgr.blknos[bp] == blkno).all()\n\n    if len(bp) == len(blk.mgr_locs) and (\n        blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice.step == 1\n    ):\n        nb = blk\n    else:\n        ax0_blk_indexer = mgr.blklocs[bp.indexer]\n\n        slc = lib.maybe_indices_to_slice(ax0_blk_indexer, max_len)\n        # TODO: in all extant test cases 2023-04-08 we have a slice here.\n        #  Will this always be the case?\n        if isinstance(slc, slice):\n            nb = blk.slice_block_columns(slc)\n        else:\n            nb = blk.take_block_columns(slc)\n\n    # assert nb.shape == (len(bp), mgr.shape[1])\n    return nb\n\n\nclass JoinUnit:\n    def __init__(self, block: Block) -> None:\n        self.block = block\n\n    def __repr__(self) -> str:\n        return f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/54508#issuecomment-1675827918\n            result = np.empty(n, dtype=object)\n        else:\n            result = np.empty(n, dtype=dtype)\n            result = ensure_wrapped_if_datetimelike(result)\n\n        for blk in self.blocks:\n            # Such assignment may incorrectly coerce NaT to None\n            # result[blk.mgr_locs] = blk._slice((slice(None), loc))\n            for i, rl in enumerate(blk.mgr_locs):\n                result[rl] = blk.iget((i, loc))\n\n        if isinstance(dtype, ExtensionDtype):\n            cls = dtype.construct_array_type()\n            result = cls._from_sequence(result, dtype=dtype)\n\n        bp = BlockPlacement(slice(0, len(result)))\n        block = new_block(result, placement=bp, ndim=1)\n        return SingleBlockManager(block, self.axes[0])\n\n    def iget(self, i: int, track_ref: bool = True) -> SingleBlockManager:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/55139#pullrequestreview-1720690758\n            # on hard-coding stacklevel\n            stacklevel=2,\n        )\n        from pandas.core.internals.managers import create_block_manager_from_blocks\n\n        return create_block_manager_from_blocks\n\n    if name in [\n        ",
      "https://github.com/pandas-dev/pandas/pull/55139#pullrequestreview-1720690758\n            # on hard-coding stacklevel\n            stacklevel=2,\n        )\n        if name == "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\internals\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/41165)\n        # error: Argument 2 to "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\ops\\docstrings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\n    It is not recommended to build DataFrames by adding single rows in a\n    for loop. Build a list of rows and make a DataFrame in a single concat.\n\n    Examples\n    --------\n    Combine two ``Series``.\n\n    >>> s1 = pd.Series(["
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/52451\nif np.intc is not np.int32:\n    _factorizers[np.intc] = libhashtable.Int64Factorizer\n\n_known = (np.ndarray, ExtensionArray, Index, ABCSeries)\n\n\n@Substitution("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\reshape\\merge.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/31290\n    # https://github.com/pandas-dev/pandas/issues/31389\n    elif isinstance(x.dtype, ExtensionDtype) and is_numeric_dtype(x.dtype):\n        x_arr = x.to_numpy(dtype=np.float64, na_value=np.nan)\n        x = Index(x_arr)\n\n    return Index(x), dtype\n\n\ndef _is_dt_or_td(dtype: DtypeObj) -> bool:\n    # Note: the dtype here comes from an Index.dtype, so we know that that any\n    #  dt64/td64 dtype is of a supported unit.\n    return isinstance(dtype, DatetimeTZDtype) or lib.is_np_dtype(dtype, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\reshape\\tile.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/tutorial/index.html",
      "https://docs.python.org/3/tutorial/index.html\n    2                                              NaN\n    dtype: object\n\n    In the default setting, the string is split by whitespace.\n\n    >>> s.str.split()\n    0                   [this, is, a, regular, sentence]\n    1    [https://docs.python.org/3/tutorial/index.html]\n    2                                                NaN\n    dtype: object\n\n    Without the `n` parameter, the outputs of `rsplit` and `split`\n    are identical.\n\n    >>> s.str.rsplit()\n    0                   [this, is, a, regular, sentence]\n    1    [https://docs.python.org/3/tutorial/index.html]\n    2                                                NaN\n    dtype: object\n\n    The `n` parameter can be used to limit the number of splits on the\n    delimiter. The outputs of `split` and `rsplit` are different.\n\n    >>> s.str.split(n=2)\n    0                     [this, is, a regular sentence]\n    1    [https://docs.python.org/3/tutorial/index.html]\n    2                                                NaN\n    dtype: object\n\n    >>> s.str.rsplit(n=2)\n    0                     [this is a, regular, sentence]\n    1    [https://docs.python.org/3/tutorial/index.html]\n    2                                                NaN\n    dtype: object\n\n    The `pat` parameter can be used to split by other characters.\n\n    >>> s.str.split(pat=",
      "https://docs.python.org/3/tutorial/index.html  None  None     None      None\n    2                                            NaN   NaN   NaN      NaN       NaN\n\n    For slightly more complex use cases like splitting the html document name\n    from a url, a combination of parameter settings can be used.\n\n    >>> s.str.rsplit(",
      "https://docs.python.org/3/tutorial  index.html\n    2                                 NaN         NaN\n    %(regex_examples)s",
      "https://docs.python.org/3/howto/regex.html#compilation-flags>`_.\n        **kwargs\n            For compatibility with other string methods. Not used.\n\n        Returns\n        -------\n        Series or Index\n            Same type as the calling object containing the integer counts.\n\n        See Also\n        --------\n        re : Standard library module for regular expressions.\n        str.count : Standard library version, without regular expression support.\n\n        Notes\n        -----\n        Some characters need to be escaped when passing in `pat`.\n        eg. ``"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/pull/39226#issuecomment-836719770,\n        # in which case we could do return self._str_map(str.removeprefix)\n\n        def removeprefix(text: str) -> str:\n            if text.startswith(prefix):\n                return text[len(prefix) :]\n            return text\n\n        return self._str_map(removeprefix)\n\n    def _str_removesuffix(self, suffix: str) -> Series:\n        return self._str_map(lambda x: x.removesuffix(suffix))\n\n    def _str_extract(self, pat: str, flags: int = 0, expand: bool = True):\n        regex = re.compile(pat, flags=flags)\n        na_value = self._str_na_value\n\n        if not expand:\n\n            def g(x):\n                m = regex.search(x)\n                return m.groups()[0] if m else na_value\n\n            return self._str_map(g, convert=False)\n\n        empty_row = [na_value] * regex.groups\n\n        def f(x):\n            if not isinstance(x, str):\n                return empty_row\n            m = regex.search(x)\n            if m:\n                return [na_value if item is None else item for item in m.groups()]\n            else:\n                return empty_row\n\n        return [f(val) for val in np.asarray(self)]\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n        #time-zone-handling>`_.\n\n    format : str, default None\n        The strftime to parse time, e.g. :const:`",
      "https://docs.python.org/3/library/datetime.html\n        #strftime-and-strptime-behavior>`_ for more information on choices, though\n        note that :const:`",
      "https://en.wikipedia.org/wiki/ISO_8601>`_\n          time string (not necessarily in exactly the same format);\n        - ",
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n      #timeseries-timestamp-limits>`_.\n\n    - when ``utc=False`` (default) and the input is an array-like or\n      :class:`Series` containing mixed naive/aware datetime, or aware with mixed\n      time offsets. Note that this happens in the (quite frequent) situation when\n      the timezone has a daylight savings policy. In that case you may wish to\n      use ``utc=True``.\n\n    Examples\n    --------\n\n    **Handling various input formats**\n\n    Assembling a datetime from multiple columns of a :class:`DataFrame`. The keys\n    can be common abbreviations like [",
      "https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\tools\\datetimes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numba/numba/issues/2916"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\util\\numba_.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Pearson_correlation_coefficient).\n\n        When `other` is not specified, the output will be self correlation (e.g.\n        all 1"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\window\\expanding.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numba/numba/issues/1269\n@functools.cache\ndef generate_manual_numpy_nan_agg_with_axis(nan_func):\n    if TYPE_CHECKING:\n        import numba\n    else:\n        numba = import_optional_dependency("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\window\\numba_.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n        If a BaseIndexer subclass, the window boundaries\n        based on the defined ``get_window_bounds`` method. Additional rolling\n        keyword arguments, namely ``min_periods``, ``center``, ``closed`` and\n        ``step`` will be passed to ``get_window_bounds``.\n\n    min_periods : int, default None\n        Minimum number of observations in window required to have a value;\n        otherwise, result is ``np.nan``.\n\n        For a window that is specified by an offset, ``min_periods`` will default to 1.\n\n        For a window that is specified by an integer, ``min_periods`` will default\n        to the size of the window.\n\n    center : bool, default False\n        If False, set the window labels as the right edge of the window index.\n\n        If True, set the window labels as the center of the window index.\n\n    win_type : str, default None\n        If ``None``, all points are evenly weighted.\n\n        If a string, it must be a valid `scipy.signal window function\n        <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`__.\n\n        Certain Scipy window types require additional parameters to be passed\n        in the aggregation function. The additional parameters must match\n        the keywords specified in the Scipy window type method signature.\n\n    on : str, optional\n        For a DataFrame, a column label or Index level on which\n        to calculate the rolling window, rather than the DataFrame",
      "https://en.wikipedia.org/wiki/Pearson_correlation_coefficient).\n\n        When `other` is not specified, the output will be self correlation (e.g.\n        all 1"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\window\\rolling.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numba/numba/issues/4202#issuecomment-1185981507\n        buf_shape = (dim0,) + np.atleast_1d(np.asarray(res0)).shape\n        if axis == 0:\n            buf_shape = buf_shape[::-1]\n        buff = np.empty(buf_shape)\n\n        if axis == 1:\n            buff[0] = res0\n            for i in numba.prange(1, values.shape[0]):\n                buff[i] = nb_compat_func(values[i])\n        else:\n            buff[:, 0] = res0\n            for j in numba.prange(1, values.shape[1]):\n                buff[:, j] = nb_compat_func(values[:, j])\n        return buff\n\n    return nb_looper\n\n\n@functools.cache\ndef make_looper(func, result_dtype, is_grouped_kernel, nopython, nogil, parallel):\n    if TYPE_CHECKING:\n        import numba\n    else:\n        numba = import_optional_dependency("
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\_numba\\executor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numba/numba/blob/main/numba/tests/pdlike_usecase.py\n",
      "https://numba.discourse.group/t/qst-how-to-cache-the-boxing-of-an-object/2128/2?u=lithomas1\n            (",
      "https://github.com/numba/numba/blob/596e8a55334cc46854e3192766e643767bd7c934/numba/core/boxing.py#L593C17-L593C17\n    with c.builder.if_else(cgutils.is_not_null(c.builder, index.parent)) as (\n        has_parent,\n        otherwise,\n    ):\n        with has_parent:\n            c.pyapi.incref(index.parent)\n        with otherwise:\n            # TODO: preserve the original class for the index\n            # Also need preserve the name of the Index\n            # class_obj = c.pyapi.unserialize(c.pyapi.serialize_object(typ.pyclass))\n            class_obj = c.pyapi.unserialize(c.pyapi.serialize_object(Index))\n            array_obj = c.box(typ.as_array, index.data)\n            if isinstance(typ.dtype, types.UnicodeCharSeq):\n                # We converted to numpy string dtype, convert back\n                # to object since _simple_new won"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\_numba\\extensions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numba/numba/issues/7417\n    Q: list = []\n    W: list = []\n    for i in range(N):\n        curr_win_size = end[i] - start[i]\n        if i == 0:\n            st = start[i]\n        else:\n            st = end[i - 1]\n\n        for k in range(st, end[i]):\n            ai = values[k]\n            if not np.isnan(ai):\n                nobs += 1\n            elif is_max:\n                ai = -np.inf\n            else:\n                ai = np.inf\n            # Discard previous entries if we find new min or max\n            if is_max:\n                while Q and ((ai >= values[Q[-1]]) or values[Q[-1]] != values[Q[-1]]):\n                    Q.pop()\n            else:\n                while Q and ((ai <= values[Q[-1]]) or values[Q[-1]] != values[Q[-1]]):\n                    Q.pop()\n            Q.append(k)\n            W.append(k)\n\n        # Discard entries outside and left of current window\n        while Q and Q[0] <= start[i] - 1:\n            Q.pop(0)\n        while W and W[0] <= start[i] - 1:\n            if not np.isnan(values[W[0]]):\n                nobs -= 1\n            W.pop(0)\n\n        # Save output based on index in input value array\n        if Q and curr_win_size > 0 and nobs >= min_periods:\n            output[i] = values[Q[0]]\n        else:\n            if values.dtype.kind != "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\_numba\\kernels\\min_max_.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/apache/arrow/issues/35563\n            return pc.cast(arrow_array, pa.float64(), safe=False), pc.cast(\n                pa_object, pa.float64(), safe=False\n            )\n\n        return arrow_array, pa_object\n\n    def floordiv_compat(\n        left: pa.ChunkedArray | pa.Array | pa.Scalar,\n        right: pa.ChunkedArray | pa.Array | pa.Scalar,\n    ) -> pa.ChunkedArray:\n        # TODO: Replace with pyarrow floordiv kernel.\n        # https://github.com/apache/arrow/issues/39386\n        if pa.types.is_integer(left.type) and pa.types.is_integer(right.type):\n            divided = pc.divide_checked(left, right)\n            if pa.types.is_signed_integer(divided.type):\n                # GH 56676\n                has_remainder = pc.not_equal(pc.multiply(divided, right), left)\n                has_one_negative_operand = pc.less(\n                    pc.bit_wise_xor(left, right),\n                    pa.scalar(0, type=divided.type),\n                )\n                result = pc.if_else(\n                    pc.and_(\n                        has_remainder,\n                        has_one_negative_operand,\n                    ),\n                    # GH: 55561\n                    pc.subtract(divided, pa.scalar(1, type=divided.type)),\n                    divided,\n                )\n            else:\n                result = divided\n            result = result.cast(left.type)\n        else:\n            divided = pc.divide(left, right)\n            result = pc.floor(divided)\n        return result\n\n    ARROW_ARITHMETIC_FUNCS = {\n        ",
      "https://github.com/pandas-dev/pandas/pull/50998#discussion_r1100344804\n    if pa_version_under11p0:\n        unit = str(pa_dtype).split(",
      "https://arrow.apache.org/docs/python/api/compute.html>`__\n    Some methods may either raise an exception or raise a ``PerformanceWarning`` if an\n    associated compute function is not available based on the installed version of PyArrow.\n\n    Please install the latest version of PyArrow to enable the best functionality and avoid\n    potential bugs in prior versions of PyArrow.\n\n    Examples\n    --------\n    Create an ArrowExtensionArray with :func:`pandas.array`:\n\n    >>> pd.array([1, 1, None], dtype=",
      "https://github.com/apache/arrow/issues/37291\n            if isinstance(value, Timedelta):\n                if pa_type is None:\n                    pa_type = pa.duration(value.unit)\n                elif value.unit != pa_type.unit:\n                    value = value.as_unit(pa_type.unit)\n                value = value._value\n            elif isinstance(value, Timestamp):\n                if pa_type is None:\n                    pa_type = pa.timestamp(value.unit, tz=value.tz)\n                elif value.unit != pa_type.unit:\n                    value = value.as_unit(pa_type.unit)\n                value = value._value\n\n            pa_scalar = pa.scalar(value, type=pa_type, from_pandas=True)\n\n        if pa_type is not None and pa_scalar.type != pa_type:\n            pa_scalar = pa_scalar.cast(pa_type)\n\n        return pa_scalar\n\n    @classmethod\n    def _box_pa_array(\n        cls, value, pa_type: pa.DataType | None = None, copy: bool = False\n    ) -> pa.Array | pa.ChunkedArray:\n        ",
      "https://github.com/apache/arrow/issues/35289\n                value = value.tolist()\n            elif copy and is_array_like(value):\n                # pa array should not get updated when numpy array is updated\n                value = value.copy()\n\n            if (\n                pa_type is not None\n                and pa.types.is_duration(pa_type)\n                and (not isinstance(value, np.ndarray) or value.dtype.kind not in ",
      "https://github.com/apache/arrow/issues/37291\n                from pandas.core.tools.timedeltas import to_timedelta\n\n                value = to_timedelta(value, unit=pa_type.unit).as_unit(pa_type.unit)\n                value = value.to_numpy()\n\n            try:\n                pa_array = pa.array(value, type=pa_type, from_pandas=True)\n            except (pa.ArrowInvalid, pa.ArrowTypeError):\n                # GH50430: let pyarrow infer type, then cast\n                pa_array = pa.array(value, from_pandas=True)\n\n            if pa_type is None and pa.types.is_duration(pa_array.type):\n                # Workaround https://github.com/apache/arrow/issues/37291\n                from pandas.core.tools.timedeltas import to_timedelta\n\n                value = to_timedelta(value)\n                value = value.to_numpy()\n                pa_array = pa.array(value, type=pa_type, from_pandas=True)\n\n            if pa.types.is_duration(pa_array.type) and pa_array.null_count > 0:\n                # GH52843: upstream bug for duration types when originally\n                # constructed with data containing numpy NaT.\n                # https://github.com/apache/arrow/issues/35088\n                arr = cls(pa_array)\n                arr = arr.fillna(arr.dtype.na_value)\n                pa_array = arr._pa_array\n\n        if pa_type is not None and pa_array.type != pa_type:\n            if pa.types.is_dictionary(pa_type):\n                pa_array = pa_array.dictionary_encode()\n            else:\n                try:\n                    pa_array = pa_array.cast(pa_type)\n                except (\n                    pa.ArrowInvalid,\n                    pa.ArrowTypeError,\n                    pa.ArrowNotImplementedError,\n                ):\n                    if pa.types.is_string(pa_array.type) or pa.types.is_large_string(\n                        pa_array.type\n                    ):\n                        # TODO: Move logic in _from_sequence_of_strings into\n                        # _box_pa_array\n                        return cls._from_sequence_of_strings(\n                            value, dtype=pa_type\n                        )._pa_array\n                    else:\n                        raise\n\n        return pa_array\n\n    def __getitem__(self, item: PositionalIndexer):\n        ",
      "https://github.com/apache/arrow/issues/38768\n            if item.start == item.stop:\n                pass\n            elif (\n                item.stop is not None\n                and item.stop < -len(self)\n                and item.step is not None\n                and item.step < 0\n            ):\n                item = slice(item.start, None, item.step)\n\n        value = self._pa_array[item]\n        if isinstance(value, pa.ChunkedArray):\n            return type(self)(value)\n        else:\n            pa_type = self._pa_array.type\n            scalar = value.as_py()\n            if scalar is None:\n                return self._dtype.na_value\n            elif pa.types.is_timestamp(pa_type) and pa_type.unit != ",
      "https://issues.apache.org/jira/browse/ARROW-10739 is addressed\n    def __getstate__(self):\n        state = self.__dict__.copy()\n        state[",
      "https://github.com/pandas-dev/pandas/pull/51307#issuecomment-1426372604\n        if isna(key) and key is not self.dtype.na_value:\n            if self.dtype.kind == ",
      "https://github.com/apache/arrow/issues/15226#issuecomment-1376578323\n            data = data.cast(pa.int64())\n\n        if pa.types.is_dictionary(data.type):\n            encoded = data\n        else:\n            encoded = data.dictionary_encode(null_encoding=null_encoding)\n        if encoded.length() == 0:\n            indices = np.array([], dtype=np.intp)\n            uniques = type(self)(pa.chunked_array([], type=encoded.type.value_type))\n        else:\n            # GH 54844\n            combined = encoded.combine_chunks()\n            pa_indices = combined.indices\n            if pa_indices.null_count > 0:\n                pa_indices = pc.fill_null(pa_indices, -1)\n            indices = pa_indices.to_numpy(zero_copy_only=False, writable=True).astype(\n                np.intp, copy=False\n            )\n            uniques = type(self)(combined.dictionary)\n\n        if pa_version_under11p0 and pa.types.is_duration(pa_type):\n            uniques = cast(ArrowExtensionArray, uniques.astype(self.dtype))\n        return indices, uniques\n\n    def reshape(self, *args, **kwargs):\n        raise NotImplementedError(\n            f",
      "https://github.com/apache/arrow/issues/15226#issuecomment-1376578323\n            data = self._pa_array.cast(pa.int64())\n        else:\n            data = self._pa_array\n\n        pa_result = pc.unique(data)\n\n        if pa_version_under11p0 and pa.types.is_duration(pa_type):\n            pa_result = pa_result.cast(pa_type)\n\n        return type(self)(pa_result)\n\n    def value_counts(self, dropna: bool = True) -> Series:\n        ",
      "https://github.com/apache/arrow/issues/15226#issuecomment-1376578323\n            data = self._pa_array.cast(pa.int64())\n        else:\n            data = self._pa_array\n\n        from pandas import (\n            Index,\n            Series,\n        )\n\n        vc = data.value_counts()\n\n        values = vc.field(0)\n        counts = vc.field(1)\n        if dropna and data.null_count > 0:\n            mask = values.is_valid()\n            values = values.filter(mask)\n            counts = counts.filter(mask)\n\n        if pa_version_under11p0 and pa.types.is_duration(pa_type):\n            values = values.cast(pa_type)\n\n        counts = ArrowExtensionArray(counts)\n\n        index = Index(type(self)(values))\n\n        return Series(counts, index=index, name=",
      "https://github.com/apache/arrow/issues/33769 in these cases\n            #  we can cast to ints and back\n            nbits = pa_dtype.bit_width\n            if nbits == 32:\n                data = data.cast(pa.int32())\n            else:\n                data = data.cast(pa.int64())\n\n        result = pc.quantile(data, q=qs, interpolation=interpolation)\n\n        if pa.types.is_temporal(pa_dtype):\n            if pa.types.is_floating(result.type):\n                result = pc.floor(result)\n            nbits = pa_dtype.bit_width\n            if nbits == 32:\n                result = result.cast(pa.int32())\n            else:\n                result = result.cast(pa.int64())\n            result = result.cast(pa_dtype)\n\n        return type(self)(result)\n\n    def _mode(self, dropna: bool = True) -> Self:\n        ",
      "https://github.com/apache/arrow/issues/34634\n            values = values.combine_chunks()\n        try:\n            return pc.replace_with_mask(values, mask, replacements)\n        except pa.ArrowNotImplementedError:\n            pass\n        if isinstance(replacements, pa.Array):\n            replacements = np.array(replacements, dtype=object)\n        elif isinstance(replacements, pa.Scalar):\n            replacements = replacements.as_py()\n        result = np.array(values, dtype=object)\n        result[mask] = replacements\n        return pa.array(result, type=values.type, from_pandas=True)\n\n    # ------------------------------------------------------------------\n    # GroupBy Methods\n\n    def _to_masked(self):\n        pa_dtype = self._pa_array.type\n\n        if pa.types.is_floating(pa_dtype) or pa.types.is_integer(pa_dtype):\n            na_value = 1\n        elif pa.types.is_boolean(pa_dtype):\n            na_value = True\n        else:\n            raise NotImplementedError\n\n        dtype = _arrow_dtype_mapping()[pa_dtype]\n        mask = self.isna()\n        arr = self.to_numpy(dtype=dtype.numpy_dtype, na_value=na_value)\n        return dtype.construct_array_type()(arr, mask)\n\n    def _groupby_op(\n        self,\n        *,\n        how: str,\n        has_dropped_na: bool,\n        min_count: int,\n        ngroups: int,\n        ids: npt.NDArray[np.intp],\n        **kwargs,\n    ):\n        if isinstance(self.dtype, StringDtype):\n            return super()._groupby_op(\n                how=how,\n                has_dropped_na=has_dropped_na,\n                min_count=min_count,\n                ngroups=ngroups,\n                ids=ids,\n                **kwargs,\n            )\n\n        # maybe convert to a compatible dtype optimized for groupby\n        values: ExtensionArray\n        pa_type = self._pa_array.type\n        if pa.types.is_timestamp(pa_type):\n            values = self._to_datetimearray()\n        elif pa.types.is_duration(pa_type):\n            values = self._to_timedeltaarray()\n        else:\n            values = self._to_masked()\n\n        result = values._groupby_op(\n            how=how,\n            has_dropped_na=has_dropped_na,\n            min_count=min_count,\n            ngroups=ngroups,\n            ids=ids,\n            **kwargs,\n        )\n        if isinstance(result, np.ndarray):\n            return result\n        return type(self)._from_sequence(result, copy=False)\n\n    def _apply_elementwise(self, func: Callable) -> list[list[Any]]:\n        ",
      "https://github.com/apache/arrow/issues/39149\n        # GH 56404, unexpected behavior with negative max_replacements with pyarrow.\n        pa_max_replacements = None if n < 0 else n\n        result = func(\n            self._pa_array,\n            pattern=pat,\n            replacement=repl,\n            max_replacements=pa_max_replacements,\n        )\n        return type(self)(result)\n\n    def _str_repeat(self, repeats: int | Sequence[int]):\n        if not isinstance(repeats, int):\n            raise NotImplementedError(\n                f"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\arrow\\array.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pitrou/pyarrow-hotfix was installed and enabled\n    if getattr(pyarrow, "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\arrow\\extension_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pandas-dev/pandas/issues/40896\n    offset = arr.offset * dtype.itemsize\n    length = len(arr) * dtype.itemsize\n    data_buf = buflist[1][offset : offset + length]\n    data = np.frombuffer(data_buf, dtype=dtype)\n    bitmask = buflist[0]\n    if bitmask is not None:\n        mask = pyarrow.BooleanArray.from_buffers(\n            pyarrow.bool_(), len(arr), [None, bitmask], offset=arr.offset\n        )\n        mask = np.asarray(mask)\n    else:\n        mask = np.ones(len(arr), dtype=bool)\n    return data, mask\n"
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\arrow\\_arrow_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/typing/issues/684\nif TYPE_CHECKING:\n    from collections.abc import Sequence\n    from enum import Enum\n\n    class ellipsis(Enum):\n        Ellipsis = "
    ],
    "file": "venv\\Lib\\site-packages\\pandas\\core\\arrays\\sparse\\array.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/hatch/blob/5352e44/backend/src/hatchling/licenses/parse.py\n#\n# MIT License\n#\n# Copyright (c) 2017-present Ofek Lev <oss@ofek.dev>\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this\n# software and associated documentation files (the "
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\licenses\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "oss@ofek.dev"
    ],
    "file": "venv\\Lib\\site-packages\\packaging\\licenses\\__init__.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "21.2.2.126"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\chart\\pie_chart.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "21.2.2.197"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\chart\\shapes.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "21.2.2.216"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\chart\\text.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tantale/deprecated/blob/master/deprecated/__init__.py\n# with an enhancement to update docstrings of deprecated functions\nstring_types = (type(b"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\compat\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://chimera.labs.oreilly.com/books/1230000000393/ch08.html#_discussiuncion_130\n"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\descriptors\\base.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/TR/xmlschema11-2/#nt-Base64Binary\n    pattern = "
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\descriptors\\excel.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://msdn.microsoft.com/en-us/library/dd946381(v=office.12).aspx\n    pattern = r"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\descriptors\\excel.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\drawing\\spreadsheet_drawing.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://ewbi.blogs.com/develops/2004/12/excel_formula_p.html written by Eric\nBachtal\n"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\formula\\tokenizer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/TR/xml/#charsets\n        if "
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\formula\\translate.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://schemas.openxmlformats.org/markup-compatibility/2006"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\packaging\\workbook.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://schemas.openxmlformats.org/officeDocument/2006/relationships/pivotCacheDefinition"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\pivot\\cache.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://schemas.openxmlformats.org/officeDocument/2006/relationships/pivotCacheRecords"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\pivot\\record.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://schemas.openxmlformats.org/officeDocument/2006/relationships/pivotTable"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\pivot\\table.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://code.activestate.com/recipes/52303-the-auxiliary-dictionary-idiom-for-sequences-with-/\n    "
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\indexed_list.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://blogs.msdn.com/b/ericwhite/archive/2008/02/23/the-legacy-hashing-algorithm-in-open-xml.aspx\n    "
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\protection.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "xnoguer@rezebra.com"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\protection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://startbigthinksmall.wordpress.com/2010/01/04/points-inches-and-emus-measuring-units-in-office-open-xml/\n\nSee also http://msdn.microsoft.com/en-us/library/dd560821(v=office.12).aspx\n\ndxa: The main unit in OOXML is a twentieth of a point. Also called twips.\npt: point. In Excel there are 72 points to an inch\nhp: half-points are used to specify font sizes. A font-size of 12pt equals 24 half points\npct: Half-points are used to specify font sizes. A font-size of 12pt equals 24 half points\n\nEMU: English Metric Unit, EMUs are used for coordinates in vector-based\ndrawings and embedded pictures. One inch equates to 914400 EMUs and a\ncentimeter is 360000. For bitmaps the default resolution is 96 dpi (known as\nPixelsPerInch in Excel). Spec p. 1122\n\nFor radial geometry Excel uses integer units of 1/60000th of a degree.\n"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\units.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\workbook\\_writer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://stackoverflow.com/questions/27711175/regex-with-multiple-optional-groups for discussion\n    "
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\worksheet\\header_footer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://schemas.openxmlformats.org/drawingml/2006/main"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\writer\\theme.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/XML/1998/namespace",
      "http://purl.org/dc/elements/1.1/",
      "http://purl.org/dc/terms/",
      "http://schemas.openxmlformats.org/officeDocument/2006/",
      "http://schemas.openxmlformats.org/package/2006/",
      "http://www.w3.org/2001/XMLSchema-instance",
      "http://www.w3.org/XML/1998/namespace",
      "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
      "http://schemas.openxmlformats.org/drawingml/2006/chart",
      "http://schemas.openxmlformats.org/drawingml/2006/main",
      "http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing",
      "http://schemas.openxmlformats.org/drawingml/2006/chartDrawing",
      "http://schemas.microsoft.com/office/2006/relationships/ui/extensibility",
      "http://purl.org/dc/dcmitype/"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\xml\\constants.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://purl.org/dc/dcmitype/"
    ],
    "file": "venv\\Lib\\site-packages\\openpyxl\\xml\\functions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/c-api/arg.html#building-values\nc2buildvalue_map = {"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\capi_maps.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://scipy.org/install.html\n#endif\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\cfuncs.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://cens.ioc.ee/projects/f2py2e\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\crackfortran.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e\n",
      "https://github.com/numpy/numpy/pull/19388 for more information.\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\crackfortran.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "3.3.2.4",
      "3.3.2.3",
      "3.3.3.3"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\crackfortran.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org/doc/stable/f2py/index.html\\n",
      "https://numpy.org/doc/stable/f2py/buildtools/meson.html\\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\f2py2e.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "pearu@cens.ioc.ee"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\rules.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://j3-fortran.org/doc/year/21/21-007.pdf\n\nCopyright 1999 -- 2011 Pearu Peterson all rights reserved.\nCopyright 2011 -- present NumPy Developers.\nPermission to use, modify, and distribute this software is given under the\nterms of the NumPy License.\n\nNO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\symbolic.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://cens.ioc.ee/projects/f2py2e\nfrom numpy.f2py.f2py2e import main\n\nmain()\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\__main__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e\nfrom numpy.f2py.f2py2e import main\n\nmain()\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\__main__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/6430\n            array = numpy.ndarray(count, dtype=dtype)\n\n            if dtype.itemsize > 0:\n                # If dtype.itemsize == 0 then there"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\format.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org/neps/nep-0013-ufunc-overrides.html>`_.\n\n    As an trivial example, consider this implementation of an ``ArrayLike``\n    class that simply wraps a NumPy array and ensures that the result of any\n    arithmetic operation is also an ``ArrayLike`` object:\n\n        >>> import numbers\n        >>> class ArrayLike(np.lib.mixins.NDArrayOperatorsMixin):\n        ...     def __init__(self, value):\n        ...         self.value = np.asarray(value)\n        ...\n        ...     # One might also consider adding the built-in list type to this\n        ...     # list, to support operations like np.add(array_like, list)\n        ...     _HANDLED_TYPES = (np.ndarray, numbers.Number)\n        ...\n        ...     def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n        ...         out = kwargs.get("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\mixins.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/12065.\n\n        if (\n            range_safe_from_overflow and\n            (below_memory_constraint or kind == "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_arraysetops_impl.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.scipy.org/not/real/data.txt",
      "http://www.google.com/",
      "http://``) to be used, without it they\n    will fail::\n\n        >>> repos = np.lib.npyio.DataSource()\n        >>> repos.exists(",
      "http://www.google.com/index.html",
      "http://www.google.com/",
      "http://www.google.com/",
      "http://www.xyz.edu/data"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_datasource.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/guido/src/local/data.txt",
      "/home/guido",
      "/home/guido/www.google.com/index.html",
      "/home/guido/foobar.txt",
      "/home/guido.foobar.txt",
      "/home/guido/foobar.txt",
      "/home/guido/foobar.txt",
      "/home/guido/datafile.txt\n        #        destpath = /home/alex/\n        #        upath = self.abspath(path)\n        #        upath == ",
      "/home/alex/home/guido/datafile.txt",
      "/home/user/data/dir/"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_datasource.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.ams.org/journals/mcom/1988-51-184/\n            S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf>`_.\n    ",
      "https://docs.scipy.org/doc/numpy/reference/c-api.generalized-ufuncs.html\n_DIMENSION_NAME = r",
      "https://en.wikipedia.org/wiki/Window_function\n    .. [5] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           ",
      "https://en.wikipedia.org/wiki/Window_function\n    .. [4] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           ",
      "https://en.wikipedia.org/wiki/Window_function\n    .. [4] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           ",
      "https://personal.math.ubc.ca/~cbm/aands/page_379.htm\n    .. [3] https://metacpan.org/pod/distribution/Math-Cephes/lib/Math/Cephes.pod#i0:-Modified-Bessel-function-of-order-zero\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.i0(0.)\n    array(1.0)\n    >>> np.i0([0, 1, 2, 3])\n    array([1.        , 1.26606588, 2.2795853 , 4.88079259])\n\n    ",
      "https://en.wikipedia.org/wiki/Window_function\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> np.kaiser(12, 14)\n     array([7.72686684e-06, 3.46009194e-03, 4.65200189e-02, # may vary\n            2.29737120e-01, 5.99885316e-01, 9.45674898e-01,\n            9.45674898e-01, 5.99885316e-01, 2.29737120e-01,\n            4.65200189e-02, 3.46009194e-03, 7.72686684e-06])\n\n\n    Plot the window and the frequency response.\n\n    .. plot::\n        :include-source:\n\n        import matplotlib.pyplot as plt\n        from numpy.fft import fft, fftshift\n        window = np.kaiser(51, 14)\n        plt.plot(window)\n        plt.title(",
      "https://mathworld.wolfram.com/SincFunction.html\n    .. [2] Wikipedia, ",
      "https://en.wikipedia.org/wiki/Sinc_function\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> x = np.linspace(-4, 4, 41)\n    >>> np.sinc(x)\n     array([-3.89804309e-17,  -4.92362781e-02,  -8.40918587e-02, # may vary\n            -8.90384387e-02,  -5.84680802e-02,   3.89804309e-17,\n            6.68206631e-02,   1.16434881e-01,   1.26137788e-01,\n            8.50444803e-02,  -3.89804309e-17,  -1.03943254e-01,\n            -1.89206682e-01,  -2.16236208e-01,  -1.55914881e-01,\n            3.89804309e-17,   2.33872321e-01,   5.04551152e-01,\n            7.56826729e-01,   9.35489284e-01,   1.00000000e+00,\n            9.35489284e-01,   7.56826729e-01,   5.04551152e-01,\n            2.33872321e-01,   3.89804309e-17,  -1.55914881e-01,\n           -2.16236208e-01,  -1.89206682e-01,  -1.03943254e-01,\n           -3.89804309e-17,   8.50444803e-02,   1.26137788e-01,\n            1.16434881e-01,   6.68206631e-02,   3.89804309e-17,\n            -5.84680802e-02,  -8.90384387e-02,  -8.40918587e-02,\n            -4.92362781e-02,  -3.89804309e-17])\n\n    >>> plt.plot(x, np.sinc(x))\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title(",
      "https://en.wikipedia.org/wiki/Trapezoidal_rule\n\n    .. [2] Illustration image:\n           https://en.wikipedia.org/wiki/File:Composite_trapezoidal_rule_illustration.png\n\n    Examples\n    --------\n    >>> import numpy as np\n\n    Use the trapezoidal rule on evenly spaced points:\n\n    >>> np.trapezoid([1, 2, 3])\n    4.0\n\n    The spacing between sample points can be selected by either the\n    ``x`` or ``dx`` arguments:\n\n    >>> np.trapezoid([1, 2, 3], x=[4, 6, 8])\n    8.0\n    >>> np.trapezoid([1, 2, 3], dx=2)\n    8.0\n\n    Using a decreasing ``x`` corresponds to integrating in reverse:\n\n    >>> np.trapezoid([1, 2, 3], x=[8, 6, 4])\n    -8.0\n\n    More generally ``x`` is used to integrate along a parametric curve. We can\n    estimate the integral :math:`\\int_0^1 x^2 = 1/3` using:\n\n    >>> x = np.linspace(0, 1, num=50)\n    >>> y = x**2\n    >>> np.trapezoid(y, x)\n    0.33340274885464394\n\n    Or estimate the area of a circle, noting we repeat the sample which closes\n    the curve:\n\n    >>> theta = np.linspace(0, 2 * np.pi, num=1000, endpoint=True)\n    >>> np.trapezoid(np.cos(theta), x=np.sin(theta))\n    3.141571941375841\n\n    ``np.trapezoid`` can be applied along a specified axis to do multiple\n    computations in one call:\n\n    >>> a = np.arange(6).reshape(2, 3)\n    >>> a\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.trapezoid(a, axis=0)\n    array([1.5, 2.5, 3.5])\n    >>> np.trapezoid(a, axis=1)\n    array([2.,  8.])\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_function_base_impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Histogram#Scott.27s_normal_reference_rule\n\n    This paper by Stone appears to be the origination of this rule.\n    https://digitalassets.lib.berkeley.edu/sdtr/ucb/text/34.pdf\n\n    Parameters\n    ----------\n    x : array_like\n        Input data that is to be histogrammed, trimmed to range. May not\n        be empty.\n    range : (float, float)\n        The lower and upper range of the bins.\n\n    Returns\n    -------\n    h : An estimate of the optimal bin width for the given data.\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_histograms_impl.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "hinsen@cnrs-orleans.fr"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_index_tricks_impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/library/string.html#format-specification-mini-language>`_,\n           Python Documentation.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> x = y = z = np.arange(0.0,5.0,1.0)\n    >>> np.savetxt(",
      "https://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html>`_.\n\n    Examples\n    --------\n    >>> from io import StringIO\n    >>> import numpy as np\n\n    Comma delimited file with mixed dtype\n\n    >>> s = StringIO("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_npyio_impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Curve_fitting\n    .. [2] Wikipedia, ",
      "https://en.wikipedia.org/wiki/Polynomial_interpolation\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> import warnings\n    >>> x = np.array([0.0, 1.0, 2.0, 3.0,  4.0,  5.0])\n    >>> y = np.array([0.0, 0.8, 0.9, 0.1, -0.8, -1.0])\n    >>> z = np.polyfit(x, y, 3)\n    >>> z\n    array([ 0.08703704, -0.81349206,  1.69312169, -0.03968254]) # may vary\n\n    It is convenient to use `poly1d` objects for dealing with polynomials:\n\n    >>> p = np.poly1d(z)\n    >>> p(0.5)\n    0.6143849206349179 # may vary\n    >>> p(3.5)\n    -0.34732142857143039 # may vary\n    >>> p(10)\n    22.579365079365115 # may vary\n\n    High-order polynomials may oscillate wildly:\n\n    >>> with warnings.catch_warnings():\n    ...     warnings.simplefilter("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_polynomial_impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydata/bottleneck>`_.\n\n    As a rough estimate, a sliding window approach with an input size of `N`\n    and a window size of `W` will scale as `O(N*W)` where frequently a special\n    algorithm can achieve `O(N)`. That means that the sliding window variant\n    for a window size of 100 can be a 100 times slower than a more specialized\n    version.\n\n    Nevertheless, for small window sizes, when no custom algorithm exists, or\n    as a prototyping and developing tool, this function can be a good solution.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.lib.stride_tricks import sliding_window_view\n    >>> x = np.arange(6)\n    >>> x.shape\n    (6,)\n    >>> v = sliding_window_view(x, 3)\n    >>> v.shape\n    (4, 3)\n    >>> v\n    array([[0, 1, 2],\n           [1, 2, 3],\n           [2, 3, 4],\n           [3, 4, 5]])\n\n    This also works in more dimensions, e.g.\n\n    >>> i, j = np.ogrid[:3, :4]\n    >>> x = 10*i + j\n    >>> x.shape\n    (3, 4)\n    >>> x\n    array([[ 0,  1,  2,  3],\n           [10, 11, 12, 13],\n           [20, 21, 22, 23]])\n    >>> shape = (2,2)\n    >>> v = sliding_window_view(x, shape)\n    >>> v.shape\n    (2, 3, 2, 2)\n    >>> v\n    array([[[[ 0,  1],\n             [10, 11]],\n            [[ 1,  2],\n             [11, 12]],\n            [[ 2,  3],\n             [12, 13]]],\n           [[[10, 11],\n             [20, 21]],\n            [[11, 12],\n             [21, 22]],\n            [[12, 13],\n             [22, 23]]]])\n\n    The axis can be specified explicitly:\n\n    >>> v = sliding_window_view(x, 3, 0)\n    >>> v.shape\n    (1, 4, 3)\n    >>> v\n    array([[[ 0, 10, 20],\n            [ 1, 11, 21],\n            [ 2, 12, 22],\n            [ 3, 13, 23]]])\n\n    The same axis can be used several times. In that case, every use reduces\n    the corresponding original dimension:\n\n    >>> v = sliding_window_view(x, (2, 3), (1, 1))\n    >>> v.shape\n    (3, 1, 2, 3)\n    >>> v\n    array([[[[ 0,  1,  2],\n             [ 1,  2,  3]]],\n           [[[10, 11, 12],\n             [11, 12, 13]]],\n           [[[20, 21, 22],\n             [21, 22, 23]]]])\n\n    Combining with stepped slicing (`::step`), this can be used to take sliding\n    views which skip elements:\n\n    >>> x = np.arange(7)\n    >>> sliding_window_view(x, 5)[:, ::2]\n    array([[0, 2, 4],\n           [1, 3, 5],\n           [2, 4, 6]])\n\n    or views which move by multiple elements\n\n    >>> x = np.arange(7)\n    >>> sliding_window_view(x, 3)[::2, :]\n    array([[0, 1, 2],\n           [2, 3, 4],\n           [4, 5, 6]])\n\n    A common application of `sliding_window_view` is the calculation of running\n    statistics. The simplest example is the\n    `moving average <https://en.wikipedia.org/wiki/Moving_average>`_:\n\n    >>> x = np.arange(6)\n    >>> x.shape\n    (6,)\n    >>> v = sliding_window_view(x, 3)\n    >>> v.shape\n    (4, 3)\n    >>> v\n    array([[0, 1, 2],\n           [1, 2, 3],\n           [2, 3, 4],\n           [3, 4, 5]])\n    >>> moving_average = v.mean(axis=-1)\n    >>> moving_average\n    array([1., 2., 3., 4.])\n\n    Note that a sliding window approach is often **not** optimal (see Notes).\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_stride_tricks_impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/project/threadpoolctl/>`_\n       library if available.\n    2. SIMD related information is derived from ``__cpu_features__``,\n       ``__cpu_baseline__`` and ``__cpu_dispatch__``\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_utils_impl.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/user/.ssh/id_dsa"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\_utils_impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/networkx/networkx/issues/5838\nfrom . import _type_check_impl\nfrom . import _index_tricks_impl\nfrom . import _nanfunctions_impl\nfrom . import _function_base_impl\nfrom . import _stride_tricks_impl\nfrom . import _shape_base_impl\nfrom . import _twodim_base_impl\nfrom . import _ufunclike_impl\nfrom . import _histograms_impl\nfrom . import _utils_impl\nfrom . import _arraysetops_impl\nfrom . import _polynomial_impl\nfrom . import _npyio_impl\nfrom . import _arrayterator_impl\nfrom . import _arraypad_impl\nfrom . import _version\n\n# numpy.lib namespace members\nfrom ._arrayterator_impl import Arrayterator\nfrom ._version import NumpyVersion\nfrom numpy._core._multiarray_umath import add_docstring, tracemalloc_domain\nfrom numpy._core.function_base import add_newdoc\n\n__all__ = [\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Condition_number\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.linalg import inv\n    >>> a = np.array([[1., 2.], [3., 4.]])\n    >>> ainv = inv(a)\n    >>> np.allclose(a @ ainv, np.eye(2))\n    True\n    >>> np.allclose(ainv @ a, np.eye(2))\n    True\n\n    If a is a matrix object, then the return value is a matrix as well:\n\n    >>> ainv = inv(np.matrix(a))\n    >>> ainv\n    matrix([[-2. ,  1. ],\n            [ 1.5, -0.5]])\n\n    Inverses of several matrices can be computed at once:\n\n    >>> a = np.array([[[1., 2.], [3., 4.]], [[1, 3], [3, 5]]])\n    >>> inv(a)\n    array([[[-2.  ,  1.  ],\n            [ 1.5 , -0.5 ]],\n           [[-1.25,  0.75],\n            [ 0.75, -0.25]]])\n\n    If a matrix is close to singular, the computed inverse may not satisfy\n    ``a @ ainv = ainv @ a = eye(a.shape[0])`` even if a `LinAlgError`\n    is not raised:\n\n    >>> a = np.array([[2,4,6],[2,0,2],[6,8,14]])\n    >>> inv(a)  # No errors raised\n    array([[-1.12589991e+15, -5.62949953e+14,  5.62949953e+14],\n       [-1.12589991e+15, -5.62949953e+14,  5.62949953e+14],\n       [ 1.12589991e+15,  5.62949953e+14, -5.62949953e+14]])\n    >>> a @ inv(a)\n    array([[ 0.   , -0.5  ,  0.   ],  # may vary\n           [-0.5  ,  0.625,  0.25 ],\n           [ 0.   ,  0.   ,  1.   ]])\n\n    To detect ill-conditioned matrices, you can use `numpy.linalg.cond` to\n    compute its *condition number* [1]_. The larger the condition number, the\n    more ill-conditioned the matrix is. As a rule of thumb, if the condition\n    number ``cond(a) = 10**k``, then you may lose up to ``k`` digits of\n    accuracy on top of what would be lost to the numerical method due to loss\n    of precision from arithmetic methods.\n\n    >>> from numpy.linalg import cond\n    >>> cond(a)\n    np.float64(8.659885634118668e+17)  # may vary\n\n    It is also possible to detect ill-conditioning by inspecting the matrix",
      "https://en.wikipedia.org/wiki/QR_factorization\n\n    Subclasses of `ndarray` are preserved except for the ",
      "https://www.mathworks.com/help/techdoc/ref/rank.html\n    .. [2] W. H. Press, S. A. Teukolsky, W. T. Vetterling and B. P. Flannery,\n           ",
      "https://en.wikipedia.org/wiki/Matrix_chain_multiplication\n\n    Examples\n    --------\n    `multi_dot` allows you to write::\n\n    >>> import numpy as np\n    >>> from numpy.linalg import multi_dot\n    >>> # Prepare some data\n    >>> A = np.random.random((10000, 100))\n    >>> B = np.random.random((100, 1000))\n    >>> C = np.random.random((1000, 5))\n    >>> D = np.random.random((5, 333))\n    >>> # the actual dot multiplication\n    >>> _ = multi_dot([A, B, C, D])\n\n    instead of::\n\n    >>> _ = np.dot(np.dot(np.dot(A, B), C), D)\n    >>> # or\n    >>> _ = A.dot(B).dot(C).dot(D)\n\n    Notes\n    -----\n    The cost for a matrix multiplication can be calculated with the\n    following function::\n\n        def cost(A, B):\n            return A.shape[0] * A.shape[1] * B.shape[1]\n\n    Assume we have three matrices\n    :math:`A_{10x100}, B_{100x5}, C_{5x50}`.\n\n    The costs for the two different parenthesizations are as follows::\n\n        cost((AB)C) = 10*100*5 + 10*5*50   = 5000 + 2500   = 7500\n        cost(A(BC)) = 10*100*50 + 100*5*50 = 50000 + 25000 = 75000\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\linalg\\_linalg.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.openblas.net/\n- threadpoolctl: https://github.com/joblib/threadpoolctl\n\nPlease note that the most-used linear algebra functions in NumPy are present in\nthe main ``numpy`` namespace rather than in ``numpy.linalg``.  There are:\n``dot``, ``vdot``, ``inner``, ``outer``, ``matmul``, ``tensordot``, ``einsum``,\n``einsum_path`` and ``kron``.\n\nFunctions present in numpy.linalg are listed below.\n\n\nMatrix and vector products\n--------------------------\n\n   cross\n   multi_dot\n   matrix_power\n   tensordot\n   matmul\n\nDecompositions\n--------------\n\n   cholesky\n   outer\n   qr\n   svd\n   svdvals\n\nMatrix eigenvalues\n------------------\n\n   eig\n   eigh\n   eigvals\n   eigvalsh\n\nNorms and other numbers\n-----------------------\n\n   norm\n   matrix_norm\n   vector_norm\n   cond\n   det\n   matrix_rank\n   slogdet\n   trace (Array API compatible)\n\nSolving equations and inverting matrices\n----------------------------------------\n\n   solve\n   tensorsolve\n   lstsq\n   inv\n   pinv\n   tensorinv\n\nOther matrix operations\n-----------------------\n\n   diagonal (Array API compatible)\n   matrix_transpose (Array API compatible)\n\nExceptions\n----------\n\n   LinAlgError\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\linalg\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.scipy.org/doc/numpy/user/"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\matrixlib\\defmatrix.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://web.archive.org/web/20080221202153/https://www.math.hmc.edu/~benjamin/papers/CombTrig.pdf, pg. 4)\n\n",
      "https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\polynomial\\chebyshev.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermfit, hermval\n    >>> x = np.linspace(-10, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = hermval(x, [1, 2, 3]) + err\n    >>> hermfit(x, y, 2)\n    array([1.02294967, 2.00016403, 2.99994614]) # may vary\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\polynomial\\hermite.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite_e import hermefit, hermeval\n    >>> x = np.linspace(-10, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = hermeval(x, [1, 2, 3]) + err\n    >>> hermefit(x, y, 2)\n    array([1.02284196, 2.00032805, 2.99978457]) # may vary\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\polynomial\\hermite_e.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagfit, lagval\n    >>> x = np.linspace(0, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = lagval(x, [1, 2, 3]) + err\n    >>> lagfit(x, y, 2)\n    array([1.00578369, 1.99417356, 2.99827656]) # may vary\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\polynomial\\laguerre.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\polynomial\\legendre.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/4763 for a detailed discussion\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\random\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/19800",
      "https://github.com/numpy/numpy/pull/19800.\n        xp_eps = eps.get("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\tests\\test_public_api.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "DEBUG=True"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\tests\\test_public_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://mypy-lang.org/\n.. _configuration file: https://mypy.readthedocs.io/en/stable/config_file.html\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\typing\\mypy_plugin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/project/typing-extensions/\n\nMypy plugin\n-----------\n\n.. versionadded:: 1.21\n\n.. automodule:: numpy.typing.mypy_plugin\n\n.. currentmodule:: numpy.typing\n\nDifferences from the runtime NumPy API\n--------------------------------------\n\nNumPy is very flexible. Trying to describe the full range of\npossibilities statically would result in types that are not very\nhelpful. For that reason, the typed NumPy API is often stricter than\nthe runtime NumPy API. This section describes some notable\ndifferences.\n\nArrayLike\n~~~~~~~~~\n\nThe `ArrayLike` type tries to avoid creating object arrays. For\nexample,\n\n.. code-block:: python\n\n    >>> np.array(x**2 for x in range(10))\n    array(<generator object <genexpr> at ...>, dtype=object)\n\nis valid NumPy code which will create a 0-dimensional object\narray. Type checkers will complain about the above example when using\nthe NumPy types however. If you really intended to do the above, then\nyou can either use a ``# type: ignore`` comment:\n\n.. code-block:: python\n\n    >>> np.array(x**2 for x in range(10))  # type: ignore\n\nor explicitly type the array like object as `~typing.Any`:\n\n.. code-block:: python\n\n    >>> from typing import Any\n    >>> array_like: Any = (x**2 for x in range(10))\n    >>> np.array(array_like)\n    array(<generator object <genexpr> at ...>, dtype=object)\n\nndarray\n~~~~~~~\n\nIt"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\typing\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "hinsenk@ere.umontreal.ca"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\arrayprint.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/arogozhnikov/einops>`_ package to cover\n        additional operations: transpose, reshape/flatten, repeat/tile,\n        squeeze/unsqueeze and reductions.\n        The `opt_einsum <https://optimized-einsum.readthedocs.io/en/stable/>`_\n        optimizes contraction order for einsum-like expressions\n        in backend-agnostic manner.\n\n    Notes\n    -----\n    The Einstein summation convention can be used to compute\n    many multi-dimensional, linear algebraic array operations. `einsum`\n    provides a succinct way of representing these.\n\n    A non-exhaustive list of these operations,\n    which can be computed by `einsum`, is shown below along with examples:\n\n    * Trace of an array, :py:func:`numpy.trace`.\n    * Return a diagonal, :py:func:`numpy.diag`.\n    * Array axis summations, :py:func:`numpy.sum`.\n    * Transpositions and permutations, :py:func:`numpy.transpose`.\n    * Matrix multiplication and dot product, :py:func:`numpy.matmul`\n        :py:func:`numpy.dot`.\n    * Vector inner and outer products, :py:func:`numpy.inner`\n        :py:func:`numpy.outer`.\n    * Broadcasting, element-wise and scalar multiplication,\n        :py:func:`numpy.multiply`.\n    * Tensor contractions, :py:func:`numpy.tensordot`.\n    * Chained array operations, in efficient calculation order,\n        :py:func:`numpy.einsum_path`.\n\n    The subscripts string is a comma-separated list of subscript labels,\n    where each label refers to a dimension of the corresponding operand.\n    Whenever a label is repeated it is summed, so ``np.einsum("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\einsumfunc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org/doc/stable/glossary.html#term-contiguous>`_\n    in memory along the sort axis. For even better performance and reduced\n    memory consumption, ensure that the array is already contiguous along the\n    sort axis.\n\n    The sort order for complex numbers is lexicographic. If both the real\n    and imaginary parts are non-nan then the order is determined by the\n    real parts except when they are equal, in which case the order is\n    determined by the imaginary parts.\n\n    Previous to numpy 1.4.0 sorting real and complex arrays containing nan\n    values led to undefined behaviour. In numpy versions >= 1.4.0 nan\n    values are sorted to the end. The extended sort order is:\n\n      * Real: [R, nan]\n      * Complex: [R + Rj, R + nanj, nan + Rj, nan + nanj]\n\n    where R is a non-nan real value. Complex values with the same nan\n    placements are sorted according to the non-nan part if it exists.\n    Non-nan values are sorted as before.\n\n    quicksort has been changed to:\n    `introsort <https://en.wikipedia.org/wiki/Introsort>`_.\n    When sorting does not make enough progress it switches to\n    `heapsort <https://en.wikipedia.org/wiki/Heapsort>`_.\n    This implementation makes quicksort O(n*log(n)) in the worst case.\n\n    ",
      "https://en.wikipedia.org/wiki/Timsort>`_\n    or `radix sort <https://en.wikipedia.org/wiki/Radix_sort>`_\n    depending on the data type.\n    API forward compatibility currently limits the\n    ability to select the implementation and it is hardwired for the different\n    data types.\n\n    Timsort is added for better performance on already or nearly\n    sorted data. On random data timsort is almost identical to\n    mergesort. It is now used for stable sort while quicksort is still the\n    default sort if none is chosen. For timsort details, refer to\n    `CPython listsort.txt\n    <https://github.com/python/cpython/blob/3.7/Objects/listsort.txt>`_\n    ",
      "https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.round([0.37, 1.64])\n    array([0., 2.])\n    >>> np.round([0.37, 1.64], decimals=1)\n    array([0.4, 1.6])\n    >>> np.round([.5, 1.5, 2.5, 3.5, 4.5]) # rounds to nearest even value\n    array([0., 2., 2., 4., 4.])\n    >>> np.round([1,2,3,11], decimals=1) # ndarray of ints is returned\n    array([ 1,  2,  3, 11])\n    >>> np.round([1,2,3,11], decimals=-1)\n    array([ 0,  0,  0, 10])\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\fromnumeric.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://perl5.git.perl.org/perl.git/blob/3118d7d684b56cbeb702af874f4326683c45f045:/Configure\n\n_KNOWN_TYPES = {}\ndef _register_type(machar, bytepat):\n    _KNOWN_TYPES[bytepat] = machar\n\n\n_float_ma = {}\n\n\ndef _register_known_types():\n    # Known parameters for float16\n    # See docstring of MachAr class for description of parameters.\n    f16 = ntypes.float16\n    float16_ma = MachArLike(f16,\n                            machep=-10,\n                            negep=-11,\n                            minexp=-14,\n                            maxexp=16,\n                            it=10,\n                            iexp=5,\n                            ibeta=2,\n                            irnd=5,\n                            ngrd=0,\n                            eps=exp2(f16(-10)),\n                            epsneg=exp2(f16(-11)),\n                            huge=f16(65504),\n                            tiny=f16(2 ** -14))\n    _register_type(float16_ma, b",
      "https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format#Double-double_arithmetic\n    # These numbers have the same exponent range as float64, but extended\n    # number of digits in the significand.\n    huge_dd = nextafter(ld(inf), ld(0), dtype=ld)\n    # As the smallest_normal in double double is so hard to calculate we set\n    # it to NaN.\n    smallest_normal_dd = nan\n    # Leave the same value for the smallest subnormal as double\n    smallest_subnormal_dd = ld(nextafter(0., 1.))\n    float_dd_ma = MachArLike(ld,\n                             machep=-105,\n                             negep=-106,\n                             minexp=-1022,\n                             maxexp=1024,\n                             it=105,\n                             iexp=11,\n                             ibeta=2,\n                             irnd=5,\n                             ngrd=0,\n                             eps=exp2(ld(-105)),\n                             epsneg=exp2(ld(-106)),\n                             huge=huge_dd,\n                             tiny=smallest_normal_dd,\n                             smallest_subnormal=smallest_subnormal_dd)\n    # double double; low, high order (e.g. PPC 64)\n    _register_type(float_dd_ma,\n        b",
      "https://doi.org/10.1109/IEEESTD.2008.4610935\n    .. [2] Wikipedia, ",
      "https://en.wikipedia.org/wiki/Denormal_number\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.finfo(np.float64).dtype\n    dtype("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\getlimits.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Frobenius_inner_product>`_\n    (also known as the *trace inner product* or the *standard inner product*\n    on a vector space of matrices).\n\n    Parameters\n    ----------\n    a : array_like\n        If `a` is complex the complex conjugate is taken before calculation\n        of the dot product.\n    b : array_like\n        Second argument to the dot product.\n\n    Returns\n    -------\n    output : ndarray\n        Dot product of `a` and `b`.  Can be an int, float, or\n        complex depending on the types of `a` and `b`.\n\n    See Also\n    --------\n    dot : Return the dot product without using the complex conjugate of the\n          first argument.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([1+2j,3+4j])\n    >>> b = np.array([5+6j,7+8j])\n    >>> np.vdot(a, b)\n    (70-8j)\n    >>> np.vdot(b, a)\n    (70+8j)\n\n    Note that higher-dimensional arrays are flattened!\n\n    >>> a = np.array([[1, 4], [5, 6]])\n    >>> b = np.array([[4, 1], [2, 2]])\n    >>> np.vdot(a, b)\n    30\n    >>> np.vdot(b, a)\n    30\n    >>> 1*4 + 4*1 + 5*2 + 6*2\n    30\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\multiarray.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Cross-correlation\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.correlate([1, 2, 3], [0, 1, 0.5])\n    array([3.5])\n    >>> np.correlate([1, 2, 3], [0, 1, 0.5], ",
      "https://en.wikipedia.org/wiki/Convolution\n\n    Examples\n    --------\n    Note how the convolution operator flips the second array\n    before ",
      "https://en.wikipedia.org/wiki/Two"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\numeric.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pv.github.io/numpy-bench/#bench_shape_base.Block2D.time_block2d\n    # to tune this parameter until a C version of the `_block_info_recursion`\n    # algorithm is implemented which would likely be faster than the python\n    # version.\n    if list_ndim * final_size > (2 * 512 * 512):\n        return _block_slicing(arrays, list_ndim, result_ndim)\n    else:\n        return _block_concatenate(arrays, list_ndim, result_ndim)\n\n\n# These helper functions are mostly used for testing.\n# They allow us to write tests that directly call `_block_slicing`\n# or `_block_concatenate` without blocking large arrays to force the wisdom\n# to trigger the desired path.\ndef _block_setup(arrays):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\shape_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://data-apis.org/array-api/latest/design_topics/data_interchange.html#syntax-for-data-interchange-with-dlpack\n\n    .. [2] Python specification for DLPack,\n       https://dmlc.github.io/dlpack/latest/python_spec.html\n\n    Examples\n    --------\n    >>> import torch  # doctest: +SKIP\n    >>> x = torch.arange(10)  # doctest: +SKIP\n    >>> # create a view of the torch tensor "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\_add_newdocs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Binary_prefix\n        LOG2_STEP = 10\n        STEP = 1024\n        units = ["
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\_exceptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue12836.\n        ptr = self._ctypes.cast(self._data, obj)\n        ptr._arr = self._arr\n        return ptr\n\n    def shape_as(self, obj):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\_internal.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/IEEE_754\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> orig_settings = np.seterr(all="
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\_ufunc_config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://numpy.org/devdocs/user/troubleshooting-importerror.html\n\nPlease note and check the following:\n\n  * The Python version is: Python%d.%d from ",
      "https://github.com/dask/distributed/issues/3450\n    return func.__name__\n\n\ndef _DType_reconstruct(scalar_type):\n    # This is a work-around to pickle type(np.dtype(np.float64)), etc.\n    # and it should eventually be replaced with a better solution, e.g. when\n    # DTypes become HeapTypes.\n    return type(dtype(scalar_type))\n\n\ndef _DType_reduce(DType):\n    # As types/classes, most DTypes can simply be pickled by their name:\n    if not DType._legacy or DType.__module__ == "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pyinstaller.readthedocs.io/en/stable/hooks.html\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_pyinstaller\\hook-numpy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/22193\nif sys.version_info >= (3, 11):\n    from typing import Never as _UnknownType\nelse:\n    from typing import NoReturn as _UnknownType\n\n\n_ArrayLikeUnknown: TypeAlias = _DualArrayLike[\n    dtype[_UnknownType],\n    _UnknownType,\n]\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_typing\\_array_like.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html\nDTypeLike: TypeAlias = (\n    np.dtype[Any]\n    # default data type (float64)\n    | None\n    # array-scalar types and generic types\n    | type[Any]  # NOTE: We",
      "https://github.com/numpy/numpy/issues/16891 for more details.\n\n# Aliases for commonly used dtype-like objects.\n# Note that the precision of `np.number` subclasses is ignored herein.\n_DTypeLikeBool: TypeAlias = (\n    type[bool]\n    | type[np.bool]\n    | np.dtype[np.bool]\n    | _SupportsDType[np.dtype[np.bool]]\n    | _BoolCodes\n)\n_DTypeLikeUInt: TypeAlias = (\n    type[np.unsignedinteger[Any]]\n    | np.dtype[np.unsignedinteger[Any]]\n    | _SupportsDType[np.dtype[np.unsignedinteger[Any]]]\n    | _UInt8Codes\n    | _UInt16Codes\n    | _UInt32Codes\n    | _UInt64Codes\n    | _UByteCodes\n    | _UShortCodes\n    | _UIntCCodes\n    | _LongCodes\n    | _ULongLongCodes\n    | _UIntPCodes\n    | _UIntCodes\n)\n_DTypeLikeInt: TypeAlias = (\n    type[int]\n    | type[np.signedinteger[Any]]\n    | np.dtype[np.signedinteger[Any]]\n    | _SupportsDType[np.dtype[np.signedinteger[Any]]]\n    | _Int8Codes\n    | _Int16Codes\n    | _Int32Codes\n    | _Int64Codes\n    | _ByteCodes\n    | _ShortCodes\n    | _IntCCodes\n    | _LongCodes\n    | _LongLongCodes\n    | _IntPCodes\n    | _IntCodes\n)\n_DTypeLikeFloat: TypeAlias = (\n    type[float]\n    | type[np.floating[Any]]\n    | np.dtype[np.floating[Any]]\n    | _SupportsDType[np.dtype[np.floating[Any]]]\n    | _Float16Codes\n    | _Float32Codes\n    | _Float64Codes\n    | _HalfCodes\n    | _SingleCodes\n    | _DoubleCodes\n    | _LongDoubleCodes\n)\n_DTypeLikeComplex: TypeAlias = (\n    type[complex]\n    | type[np.complexfloating[Any]]\n    | np.dtype[np.complexfloating[Any]]\n    | _SupportsDType[np.dtype[np.complexfloating[Any]]]\n    | _Complex64Codes\n    | _Complex128Codes\n    | _CSingleCodes\n    | _CDoubleCodes\n    | _CLongDoubleCodes\n)\n_DTypeLikeDT64: TypeAlias = (\n    type[np.timedelta64]\n    | np.dtype[np.timedelta64]\n    | _SupportsDType[np.dtype[np.timedelta64]]\n    | _TD64Codes\n)\n_DTypeLikeTD64: TypeAlias = (\n    type[np.datetime64]\n    | np.dtype[np.datetime64]\n    | _SupportsDType[np.dtype[np.datetime64]]\n    | _DT64Codes\n)\n_DTypeLikeStr: TypeAlias = (\n    type[str]\n    | type[np.str_]\n    | np.dtype[np.str_]\n    | _SupportsDType[np.dtype[np.str_]]\n    | _StrCodes\n)\n_DTypeLikeBytes: TypeAlias = (\n    type[bytes]\n    | type[np.bytes_]\n    | np.dtype[np.bytes_]\n    | _SupportsDType[np.dtype[np.bytes_]]\n    | _BytesCodes\n)\n_DTypeLikeVoid: TypeAlias = (\n    type[np.void]\n    | np.dtype[np.void]\n    | _SupportsDType[np.dtype[np.void]]\n    | _VoidCodes\n    | _VoidDTypeLike\n)\n_DTypeLikeObject: TypeAlias = (\n    type\n    | np.dtype[np.object_]\n    | _SupportsDType[np.dtype[np.object_]]\n    | _ObjectCodes\n)\n\n_DTypeLikeComplex_co: TypeAlias = (\n    _DTypeLikeBool\n    | _DTypeLikeUInt\n    | _DTypeLikeInt\n    | _DTypeLikeFloat\n    | _DTypeLikeComplex\n)\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_typing\\_dtype_like.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/1468\n        "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_coercion.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/5982"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_defchararray.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue4180 and it is probably simplest to\n        # try to keep the tests cleanly giving only the right warning type.\n        # (While checking them set to "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_deprecations.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/16574#issuecomment-642660971\n    assert np.dtype(dtype=np.float64) == np.dtype(np.float64)\n\n\nclass TestFromDTypeAttribute:\n    def test_simple(self):\n        class dt:\n            dtype = np.dtype("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dtype.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/6659\n        # Ensure that start/stop can be objects that implement\n        # __array_interface__ and are convertible to numeric scalars\n\n        class Arrayish:\n            "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_function_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue9949\n        # use Path.resolve, just as memmap class does internally\n        abspath = str(Path(tmpname).resolve())\n        fp[:] = self.data[:]\n        assert_equal(abspath, str(fp.filename.resolve()))\n        b = fp[:1]\n        assert_equal(abspath, str(b.filename.resolve()))\n        del b\n        del fp\n\n    def test_filename_fileobj(self):\n        fp = memmap(self.tmpfp, dtype=self.dtype, mode="
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_memmap.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/3526\n\n        numpy_int = np.int_(0)\n\n        # int_ doesn",
      "https://github.com/numpy/numpy/issues/3286\n        a = np.array([], dtype=[(",
      "https://github.com/numpy/numpy/issues/3253\n        dat2 = np.zeros(3, [(",
      "https://github.com/numpy/numpy/issues/3126\n        struct_dt = np.dtype([(",
      "https://foss.heptapod.net/pypy/pypy/-/issues/3724",
      "https://github.com/intel/x86-simd-sort/pull/39\n    arr = -0.5 + rnd.rand(N).astype(dtype)\n    arr[N-1] = np.inf\n    assert_arg_sorted(arr, np.argsort(arr, kind=",
      "https://github.com/intel/x86-simd-sort/pull/39\n    arr = rnd.randint(low=minv, high=maxv, size=N, dtype=dtype)\n    arr[N-1] = maxv\n    assert_arg_sorted(arr, np.argsort(arr, kind="
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multiarray.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/27271\n        a = np.array("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_numeric.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/2599\n        dt = np.dtype([(",
      "https://github.com/numpy/numpy/issues/3256\n        ra = np.recarray(\n            (2,), dtype=[(",
      "https://github.com/numpy/numpy/issues/3561\n        rec = np.recarray(1, dtype=[(",
      "https://github.com/numpy/numpy/issues/4806\n        arr = np.zeros((3,), dtype=[("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_records.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/565\n        a = np.array([",
      "https://bitbucket.org/pypy/pypy/issues/2789\n        for j in range(5):\n            structure = np.array([1], dtype=[(("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_regression.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/IEEE_754\n            constr = np.array([0x00]*storage_bytes, dtype=np.uint8)\n            if which == "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarmath.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.",
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.",
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.org",
      "http://www.python.",
      "http://www.python.org",
      "http://www.python.",
      "http://www.python.org"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_strings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/4855\n\n        class MyA(np.ndarray):\n            def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n                return getattr(ufunc, method)(*(input.view(np.ndarray)\n                                              for input in inputs), **kwargs)\n        a = np.arange(12.).reshape(4,3)\n        ra = a.view(dtype=("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_ufunc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/19192\n    @pytest.mark.xfail(\n        _glibc_older_than(",
      "https://github.com/numpy/numpy/issues/18005\n        with assert_no_warnings():\n            a = np.array(1e9, dtype=",
      "https://github.com/numpy/numpy/issues/20448\n    @pytest.mark.xfail(\n        _glibc_older_than(",
      "https://github.com/numpy/numpy/issues/25097\n        with assert_no_warnings():\n            np.zeros(128 + 1, dtype=dt) / subnorm\n\nclass TestFPClass:\n    @pytest.mark.parametrize(",
      "https://github.com/numpy/numpy/issues/6685\n    val = 4607998452777363968\n    # This is exactly representable in floating point\n    assert_equal(val, int(float(val)))\n    # Rint should not change the value\n    assert_equal(val, np.rint(val))\n\n\n@pytest.mark.parametrize(",
      "https://github.com/numpy/numpy/issues/15597\n    arr = np.array([0.61, 0.60, 0.77, 0.41, 0.19], dtype=ftype)\n    out_max = np.array([0.61, 0.61, 0.77, 0.77, 0.77], dtype=ftype)\n    out_min = np.array([0.61, 0.60, 0.60, 0.41, 0.19], dtype=ftype)\n    assert_equal(np.maximum.accumulate(arr), out_max)\n    assert_equal(np.minimum.accumulate(arr), out_min)\n\n@pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/1592158/convert-hex-to-float #\ndef convert(s, datatype="
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_accuracy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/16660\nclass TestComplexAbsoluteMixedDTypes:\n    @pytest.mark.parametrize("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_complex.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/scipy/scipy/blob/a755ee77ec47a64849abe42c349936475a6c2f24/scipy/io/arff/tests/test_arffread.py#L41-L44\nA_float = np.array([[1, 5], [2, 4], [np.nan, np.nan]])\nA_void: npt.NDArray[np.void] = np.empty(3, [("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\typing\\tests\\data\\pass\\ndarray_misc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/27171\narr: np.ndarray[XYGrid, Any] = cast(\n    np.ndarray[XYGrid, Any],\n    np.empty(XYGrid(2, 2)),\n)\n\n# Test variance of _ShapeType_co\ndef accepts_2d(a: np.ndarray[tuple[int, int], Any]) -> None:\n    return None\n\naccepts_2d(arr)\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\typing\\tests\\data\\pass\\shape.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://msdn.microsoft.com/library/en-us/dnperfmo/html/perfmonpt2.asp\n        #(dead link)\n        # My older explanation for this was that the "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\testing\\_private\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\n    rx = x.view(vdt)\n    if not (rx.size == 1):\n        rx[rx < 0] = comp - rx[rx < 0]\n    else:\n        if rx < 0:\n            rx = comp - rx\n\n    return rx\n\n\ndef integer_repr(x):\n    ",
      "https://bugs.python.org/issue4180.\n\n    This bug causes Python before 3.4 to not reliably show warnings again\n    after they have been ignored once (even within catch_warnings). It\n    means that no "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\testing\\_private\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://mail.python.org/pipermail/numpy-discussion/2012-September/063801.html\n        # Consensus is that this is probably some gcc quirk that affects\n        # rounding but not in any important way, so we just use a looser\n        # tolerance on this test:\n        np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30)\n\n    def test_poisson(self):\n        random = Generator(MT19937(self.seed))\n        actual = random.poisson(lam=.123456789, size=(3, 2))\n        desired = np.array([[0, 0],\n                            [0, 0],\n                            [0, 0]])\n        assert_array_equal(actual, desired)\n\n    def test_poisson_exceptions(self):\n        lambig = np.iinfo("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\random\\tests\\test_generator_mt19937.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://mail.python.org/pipermail/numpy-discussion/2012-September/063801.html\n        # Consensus is that this is probably some gcc quirk that affects\n        # rounding but not in any important way, so we just use a looser\n        # tolerance on this test:\n        np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30)\n\n    def test_poisson(self):\n        np.random.seed(self.seed)\n        actual = np.random.poisson(lam=.123456789, size=(3, 2))\n        desired = np.array([[0, 0],\n                            [1, 0],\n                            [0, 0]])\n        assert_array_equal(actual, desired)\n\n    def test_poisson_exceptions(self):\n        lambig = np.iinfo("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\random\\tests\\test_random.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://mail.python.org/pipermail/numpy-discussion/2012-September/063801.html\n        # Consensus is that this is probably some gcc quirk that affects\n        # rounding but not in any important way, so we just use a looser\n        # tolerance on this test:\n        np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30)\n\n    def test_poisson(self):\n        random.seed(self.seed)\n        actual = random.poisson(lam=.123456789, size=(3, 2))\n        desired = np.array([[0, 0],\n                            [1, 0],\n                            [0, 0]])\n        assert_array_equal(actual, desired)\n\n    def test_poisson_exceptions(self):\n        lambig = np.iinfo("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\random\\tests\\test_randomstate.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://gist.github.com/imneme/540829265469e673d045\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\random\\tests\\test_seed_sequence.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "c:\\Anaconda\nset PYTHON_VERSION=38\ncl.exe /LD .\\distributions.c -DDLL_EXPORT \\\n    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\random\\_examples\\numba\\extending_distributions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/8590#discussion_r101126465\n        dt = np.dtype(",
      "https://github.com/numpy/numpy/issues/27201\n        assert allequal(x, x)\n        assert allequal(x, x, fill_value=False)\n\n        assert allequal(y, y)\n        assert not allequal(y, y, fill_value=False)\n\n    def test_flatten_mask(self):\n        # Tests flatten mask\n        # Standard dtype\n        mask = np.array([0, 0, 1], dtype=bool)\n        assert_equal(flatten_mask(mask), mask)\n        # Flexible dtype\n        mask = np.array([(0, 0), (0, 1)], dtype=[(",
      "https://github.com/astropy/astropy/issues/6645\n        class Sub(type(np.ma.masked)):\n            pass\n\n        a = Sub()\n        assert_(a is Sub())\n        assert_(a is not np.ma.masked)\n        assert_not_equal(repr(a), "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_core.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/2684)\n        mask = np.array([[0, 0, 0, 1, 0],\n                         [0, 1, 0, 0, 0]], dtype=bool)\n        a = masked_array([[0, 1+2j, 3+4j, 5+6j, 7+8j],\n                          [9j, 0+1j, 2+3j, 4+5j, 7+7j]],\n                         mask=mask)\n\n        av = average(a)\n        expected = np.average(a.compressed())\n        assert_almost_equal(av.real, expected.real)\n        assert_almost_equal(av.imag, expected.imag)\n\n        av0 = average(a, axis=0)\n        expected0 = average(a.real, axis=0) + average(a.imag, axis=0)*1j\n        assert_almost_equal(av0.real, expected0.real)\n        assert_almost_equal(av0.imag, expected0.imag)\n\n        av1 = average(a, axis=1)\n        expected1 = average(a.real, axis=1) + average(a.imag, axis=1)*1j\n        assert_almost_equal(av1.real, expected1.real)\n        assert_almost_equal(av1.imag, expected1.imag)\n\n        # Test with the ",
      "https://github.com/numpy/numpy/issues/10438)\n        a = np.ma.array(np.arange(9).reshape(3, 3),\n                        mask=[[1, 0, 0], [1, 0, 0], [0, 0, 0]])\n        weights_unmasked = masked_array([5, 28, 31], mask=False)\n        weights_masked = masked_array([5, 28, 31], mask=[1, 0, 0])\n\n        avg_unmasked = average(a, axis=0,\n                               weights=weights_unmasked, returned=False)\n        expected_unmasked = np.array([6.0, 5.21875, 6.21875])\n        assert_almost_equal(avg_unmasked, expected_unmasked)\n\n        avg_masked = average(a, axis=0, weights=weights_masked, returned=False)\n        expected_masked = np.array([6.0, 5.576271186440678, 6.576271186440678])\n        assert_almost_equal(avg_masked, expected_masked)\n\n        # weights should be masked if needed\n        # depending on the array mask. This is to avoid summing\n        # masked nan or other values that are not cancelled by a zero\n        a = np.ma.array([1.0,   2.0,   3.0,  4.0],\n                   mask=[False, False, True, True])\n        avg_unmasked = average(a, weights=[1, 1, 1, np.nan])\n\n        assert_almost_equal(avg_unmasked, 1.5)\n\n        a = np.ma.array([\n            [1.0, 2.0, 3.0, 4.0],\n            [5.0, 6.0, 7.0, 8.0],\n            [9.0, 1.0, 2.0, 3.0],\n        ], mask=[\n            [False, True, True, False],\n            [True, False, True, True],\n            [True, False, True, False],\n        ])\n\n        avg_masked = np.ma.average(a, weights=[1, np.nan, 1], axis=0)\n        avg_expected = np.ma.array([1.0, np.nan, np.nan, 3.5],\n                              mask=[False, True, True, False])\n\n        assert_almost_equal(avg_masked, avg_expected)\n        assert_equal(avg_masked.mask, avg_expected.mask)\n\n\nclass TestConcatenator:\n    # Tests for mr_, the equivalent of r_ for masked arrays.\n\n    def test_1d(self):\n        # Tests mr_ on 1D arrays.\n        assert_array_equal(mr_[1, 2, 3, 4, 5, 6], array([1, 2, 3, 4, 5, 6]))\n        b = ones(5)\n        m = [1, 0, 0, 0, 0]\n        d = masked_array(b, mask=m)\n        c = mr_[d, 0, 0, d]\n        assert_(isinstance(c, MaskedArray))\n        assert_array_equal(c, [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1])\n        assert_array_equal(c.mask, mr_[m, 0, 0, m])\n\n    def test_2d(self):\n        # Tests mr_ on 2D arrays.\n        a_1 = np.random.rand(5, 5)\n        a_2 = np.random.rand(5, 5)\n        m_1 = np.round(np.random.rand(5, 5), 0)\n        m_2 = np.round(np.random.rand(5, 5), 0)\n        b_1 = masked_array(a_1, mask=m_1)\n        b_2 = masked_array(a_2, mask=m_2)\n        # append columns\n        d = mr_["
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_extras.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/4564)\n    roughly following MaskedIterator\n    ",
      "https://github.com/numpy/numpy/issues/15200)\n    "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_subclassing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/25552\n        arr = np.array([[1, 2, 3], [2, 3, 1]])\n        expected_values, expected_inverse = np.unique(arr, return_inverse=True)\n        expected_inverse = expected_inverse.reshape(arr.shape)\n        for func in np.unique_inverse, np.unique_all:\n            result = func(arr)\n            assert_array_equal(expected_values, result.values)\n            assert_array_equal(expected_inverse, result.inverse_indices)\n            assert_array_equal(arr, result.values[result.inverse_indices])\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraysetops.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/4755\n        assert_raises(TypeError, meshgrid,\n                      [1, 2, 3], [4, 5, 6, 7], indices=",
      "https://github.com/numpy/numpy/issues/5297\n        x = np.arange(0, 10, dtype=np.float32)\n        y = np.arange(10, 20, dtype=np.float64)\n\n        X, Y = np.meshgrid(x,y)\n\n        assert_(X.dtype == x.dtype)\n        assert_(Y.dtype == y.dtype)\n\n        # copy\n        X, Y = np.meshgrid(x,y, copy=True)\n\n        assert_(X.dtype == x.dtype)\n        assert_(Y.dtype == y.dtype)\n\n        # sparse\n        X, Y = np.meshgrid(x,y, sparse=True)\n\n        assert_(X.dtype == x.dtype)\n        assert_(Y.dtype == y.dtype)\n\n    def test_writeback(self):\n        # Issue 8561\n        X = np.array([1.1, 2.2])\n        Y = np.array([3.3, 4.4])\n        x, y = np.meshgrid(X, Y, sparse=False, copy=True)\n\n        x[0, :] = 0\n        assert_equal(x[0, :], 0)\n        assert_equal(x[1, :], X)\n\n    def test_nd_shape(self):\n        a, b, c, d, e = np.meshgrid(*([0] * i for i in range(1, 6)))\n        expected_shape = (2, 1, 3, 4, 5)\n        assert_equal(a.shape, expected_shape)\n        assert_equal(b.shape, expected_shape)\n        assert_equal(c.shape, expected_shape)\n        assert_equal(d.shape, expected_shape)\n        assert_equal(e.shape, expected_shape)\n\n    def test_nd_values(self):\n        a, b, c = np.meshgrid([0], [1, 2], [3, 4, 5])\n        assert_equal(a, [[[0, 0, 0]], [[0, 0, 0]]])\n        assert_equal(b, [[[1, 1, 1]], [[2, 2, 2]]])\n        assert_equal(c, [[[3, 4, 5]], [[3, 4, 5]]])\n\n    def test_nd_indexing(self):\n        a, b, c = np.meshgrid([0], [1, 2], [3, 4, 5], indexing=",
      "https://doi.org/10.48550/arXiv.0912.0902\n        if weights and method not in methods_supporting_weights:\n            pytest.skip("
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_function_base.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://projects.scipy.org/numpy/ticket/1517#comment:2\n        with temppath(suffix="
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_io.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/q/44769632/102441\n        foo = np.array([(1,)],\n                       dtype=[(",
      "https://github.com/numpy/numpy/issues/2346\n\n    def setup_method(self):\n        from datetime import date\n        self.data = dict(obj=date(2000, 1, 1))\n\n    def test_append_to_objects(self):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_recfunctions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.google.com/",
      "http://fake.abc.web/site/"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__datasource.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "c:\\\\windows\\\\system.dat"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__datasource.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/23338"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_crackfortran.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/pull/10676.\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_quoted_character.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/numpy/numpy/issues/24874#issuecomment-1835632293\n        for path_object in path_objects:\n            dest_path = Path.cwd() / path_object.name\n            if dest_path.exists():\n                dest_path.unlink()\n            shutil.copy2(path_object, dest_path)\n            os.remove(path_object)\n\n    def write_meson_build(self, build_dir: Path) -> None:\n        "
    ],
    "file": "venv\\Lib\\site-packages\\numpy\\f2py\\_backends\\_meson.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "PASSWORD = '{self._password1 or self._password}'"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\abstracts.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\abstracts.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html\n        ",
      "https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html\n        ",
      "https://dev.mysql.com/doc/refman/5.7/en/expired-password-handling.html\n            try:\n                self.set_charset_collation(charset=self._charset_id)\n            except DatabaseError:\n                # get out of sandbox mode - with no FOR user clause, the statement sets\n                # the password for the current user.\n                self.cmd_query(f",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_basic_character_set.html#a_protocol_character_set\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\n                page_protocol_com_stmt_prepare.html\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_com_stmt_execute.html\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_com_stmt_send_long_data.html\n        ",
      "https://dev.mysql.com/doc/connector-python/en/\\\n                connector-python-api-mysqlcursor-callproc.html\n        ",
      "https://dev.mysql.com/doc/connector-python/en/\\\n                connector-python-api-mysqlcursor-description.html\n        "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\abstracts.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "ldapauth@MYSQL.COM"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\abstracts.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\abstracts.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\authentication.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_basic_character_set.html#a_protocol_character_set\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_basic_character_set.html#a_protocol_character_set\n        "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\authentication.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\nfrom typing import List, Optional, Tuple\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\charsets.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\charsets.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\connection.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\connection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\connection_cext.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n",
      "http://dev.mysql.com/doc/refman/5.6/en/server-sql-mode.html\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\constants.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\constants.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\conversion.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\cursor.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\cursor_cext.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\custom_types.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\dbapi.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\errorcode.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\errors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/connector-python/en/connector-python-api-errors-error.html\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\errors.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\logger.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\network.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers.\n            if tls_cipher_suites and tls_version == "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\network.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\network.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\optionfiles.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\pooling.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html\n    ",
      "https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html\n        ",
      "https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html\n        "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\pooling.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\protocol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_connection_phase_packets_protocol_auth_more_data.html\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/\\\n                latest/page_protocol_connection_phase_packets_protocol_\n                auth_switch_request.html\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_connection_phase_packets_protocol_auth_\\\n                next_factor_request.html\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_connection_phase_packets_protocol_handshake_response.html\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_connection_phase_packets_protocol_handshake_response.html\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_connection_phase_packets_protocol_handshake_response.html\n\n            [2]: https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_basic_character_set.html#a_protocol_character_set\n        ",
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_connection_phase_packets_protocol_ssl_request.html\n\n            [2]: https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_basic_character_set.html#a_protocol_character_set\n        "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\protocol.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\tls_ciphers.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\types.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\utils.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\version.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\_decorating.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\_scripting.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/refman/en/comments.html.\n        ",
      "https://dev.mysql.com/doc/refman/8.0/en/keywords.html to know more\n        about quoting a reserved word.\n\n        *Note that comments are always ignored as they are not considered to be\n        part of statements, with one exeception; **C-style comments representing\n        MySQL extensions or optimizer hints are preserved***.\n        "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\_scripting.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\abstracts.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_basic_character_set.html#a_protocol_character_set\n        "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\abstracts.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\abstracts.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\authentication.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_basic_character_set.html#a_protocol_character_set\n        "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\authentication.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\charsets.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german",
      "german"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\charsets.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\connection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\cursor.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\logger.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# pylint: disable=dangerous-default-value\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\network.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers.\n            if tls_cipher_suites and tls_version == "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\network.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\network.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\protocol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_connection_phase_packets_protocol_handshake_response.html\n\n            [2]: https://dev.mysql.com/doc/dev/mysql-server/latest/\\\n                page_protocol_basic_character_set.html#a_protocol_character_set\n        "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\protocol.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\utils.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\_decorating.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code=",
      "http://dev.mysql.com/downloads/connector/python/\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\base.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\compiler.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\creation.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\features.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\introspection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://buildmedia.readthedocs.org/media/pdf/mypy/stable/mypy.pdf [page 42]\nif TYPE_CHECKING:\n    # CursorWraper is used exclusively for type hinting\n    from mysql.connector.django.base import CursorWrapper\n\n# Based on my investigation, named tuples to\n# comply with mypy need to define a static list or tuple\n# for field_names (second argument). In this case, the field\n# names are created dynamically for FieldInfo which triggers\n# a mypy error. The solution is not straightforward since\n# FieldInfo attributes are Django version dependent. Code\n# refactory is needed to fix this issue.\nFieldInfo = namedtuple(  # type: ignore[misc]\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\introspection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\operations.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\schema.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\django\\validation.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\locales\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\opentelemetry\\constants.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/open-telemetry/opentelemetry-specification/blob/main/\n# specification/trace/semantic_conventions/span-general.md\nNET_SOCK_FAMILY = "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\opentelemetry\\constants.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\opentelemetry\\context_propagation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.w3.org/TR/trace-context/#traceparent-header\n    ",
      "https://www.w3.org/TR/trace-context/#traceparent-header\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\opentelemetry\\context_propagation.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\opentelemetry\\instrumentation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/open-telemetry/opentelemetry-specification/blob/main/\\\n            specification/trace/semantic_conventions/span-general.md\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\opentelemetry\\instrumentation.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\authentication_kerberos_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.microsoft.com/en-us/windows/win32/secauthn\n        # [1] prefix/microsoft-negotiate?source=recommendations\n        # [2] prefix/microsoft-kerberos?source=recommendations\n        self.clientauth = sspi.ClientAuth(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\authentication_kerberos_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\authentication_ldap_sasl_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pythongssapi.github.io/<suffix>\n            # suffix: python-gssapi/latest/gssapi.html#gssapi.sec_contexts.SecurityContext\n            initial_client_token = self.ctx.step()\n        except gssapi.raw.misc.GSSError as err:\n            raise InterfaceError(f"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\authentication_ldap_sasl_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\authentication_oci_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\authentication_openid_connect_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\authentication_webauthn_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://{self.options["
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\authentication_webauthn_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\caching_sha2_password.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\mysql_clear_password.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\mysql_native_password.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\sha256_password.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\plugins\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\locales\\eng\\client_error.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\locales\\eng\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\authentication_kerberos_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.microsoft.com/en-us/windows/win32/secauthn\n        # [1] prefix/microsoft-negotiate?source=recommendations\n        # [2] prefix/microsoft-kerberos?source=recommendations\n        self.clientauth = sspi.ClientAuth(\n            "
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\authentication_kerberos_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\authentication_ldap_sasl_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pythongssapi.github.io/<suffix>\n            # suffix: python-gssapi/latest/gssapi.html#gssapi.sec_contexts.SecurityContext\n            initial_client_token = self.ctx.step()\n        except gssapi.raw.misc.GSSError as err:\n            raise InterfaceError(f"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\authentication_ldap_sasl_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# mypy: disable-error-code="
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\authentication_oci_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\authentication_openid_connect_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\authentication_webauthn_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://{self.options["
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\authentication_webauthn_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\caching_sha2_password.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\mysql_clear_password.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\mysql_native_password.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\sha256_password.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://oss.oracle.com/licenses/universal-foss-exception.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mysql\\connector\\aio\\plugins\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\autohandler.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\babelplugin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/project/Babel/"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\babelplugin.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\beaker_cache.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nfrom io import BytesIO\nfrom io import StringIO\nimport re\n\nfrom mako import lexer\nfrom mako import parsetree\n\n\nclass MessageExtractor:\n    use_bytes = True\n\n    def process_file(self, fileobj):\n        template_node = lexer.Lexer(\n            fileobj.read(), input_encoding=self.config["
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\extract.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nimport contextlib\nimport io\n\nfrom lingua.extractors import Extractor\nfrom lingua.extractors import get_extractor\nfrom lingua.extractors import Message\n\nfrom mako.ext.extract import MessageExtractor\n\n\nclass LinguaMakoExtractor(Extractor, MessageExtractor):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\linguaplugin.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\preprocessors.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nfrom pygments import highlight\nfrom pygments.formatters.html import HtmlFormatter\nfrom pygments.lexer import bygroups\nfrom pygments.lexer import DelegatingLexer\nfrom pygments.lexer import include\nfrom pygments.lexer import RegexLexer\nfrom pygments.lexer import using\nfrom pygments.lexers.agile import Python3Lexer\nfrom pygments.lexers.agile import PythonLexer\nfrom pygments.lexers.web import CssLexer\nfrom pygments.lexers.web import HtmlLexer\nfrom pygments.lexers.web import JavascriptLexer\nfrom pygments.lexers.web import XmlLexer\nfrom pygments.token import Comment\nfrom pygments.token import Keyword\nfrom pygments.token import Name\nfrom pygments.token import Operator\nfrom pygments.token import Other\nfrom pygments.token import String\nfrom pygments.token import Text\n\n\nclass MakoLexer(RegexLexer):\n    name = "
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\pygmentplugin.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nfrom mako import compat\nfrom mako.lookup import TemplateLookup\nfrom mako.template import Template\n\n\nclass TGPlugin:\n\n    "
    ],
    "file": "venv\\Lib\\site-packages\\mako\\ext\\turbogears.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-greenlet/greenlet/issues/242\n    del ec\n\n    # assert outside the block so it works for AssertionError too !\n    assert success, "
    ],
    "file": "venv\\Lib\\site-packages\\mako\\testing\\assertions.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\app\\pasterapp.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://datatracker.ietf.org/doc/html/rfc9112#name-transfer-encoding\n                vals = [v.strip() for v in value.split(",
      "https://docs.python.org/3/library/urllib.parse.html#url-parsing-security\n        # There are *four* `request-target` forms in rfc9112, none of them can be empty:\n        # 1. origin-form, which starts with a slash\n        # 2. absolute-form, which starts with a non-empty scheme\n        # 3. authority-form, (for CONNECT) which contains a colon after the host\n        # 4. asterisk-form, which is an asterisk (`\\x2A`)\n        # => manually reject one always invalid URI: empty\n        if len(self.uri) == 0:\n            raise InvalidRequestLine(bytes_to_str(line_bytes))\n\n        try:\n            parts = split_request_uri(self.uri)\n        except ValueError:\n            raise InvalidRequestLine(bytes_to_str(line_bytes))\n        self.path = parts.path or "
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\http\\message.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1",
      "127.0.0.1"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\http\\message.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.ietf.org/rfc/rfc3875\n    if isinstance(client, str):\n        environ["
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\http\\wsgi.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.datadoghq.com/guides/dogstatsd/#datagram-format\n            if self.dogstatsd_tags:\n                msg = msg + b"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\instrument\\statsd.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/2/library/sys.html#sys.exc_info warning,\n            # delete the traceback after use.\n            try:\n                _, exc_val, exc_tb = sys.exc_info()\n                self.reloader.add_extra_file(exc_val.filename)\n\n                tb_string = io.StringIO()\n                traceback.print_tb(exc_tb, file=tb_string)\n                self.wsgi = util.make_fail_app(tb_string.getvalue())\n            finally:\n                del exc_tb\n\n    def init_signals(self):\n        # reset signaling\n        for s in self.SIGNALS:\n            signal.signal(s, signal.SIG_DFL)\n        # init new signaling\n        signal.signal(signal.SIGQUIT, self.handle_quit)\n        signal.signal(signal.SIGTERM, self.handle_exit)\n        signal.signal(signal.SIGINT, self.handle_quit)\n        signal.signal(signal.SIGWINCH, self.handle_winch)\n        signal.signal(signal.SIGUSR1, self.handle_usr1)\n        signal.signal(signal.SIGABRT, self.handle_abort)\n\n        # Don"
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\workers\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/eventlet/eventlet/pull/544\nEVENTLET_WSGI_LOCAL = getattr(eventlet.wsgi, "
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\workers\\geventlet.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.tornadoweb.org/en/stable/releases/v5.0.0.html#backwards-compatibility-notes\n# for more details.\nTORNADO5 = tornado.version_info >= (5, 0, 0)\n\n\nclass TornadoWorker(Worker):\n\n    @classmethod\n    def setup(cls):\n        web = sys.modules.pop("
    ],
    "file": "venv\\Lib\\site-packages\\gunicorn\\workers\\gtornado.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-greenlet/greenlet/issues/245\n        # Before the fix, this crashed pretty reliably on\n        # Python 3.10, at least on macOS; but much less reliably on other\n        # interpreters (memory layout must have changed).\n        # The threaded test crashed more reliably on more interpreters.\n        from greenlet import getcurrent\n        from greenlet import GreenletExit\n\n        class Greenlet(RawGreenlet):\n            pass\n\n        initial_refs = sys.getrefcount(Greenlet)\n        # This has to be an instance variable because\n        # Python 2 raises a SyntaxError if we delete a local\n        # variable referenced in an inner scope.\n        self.glets = [] # pylint:disable=attribute-defined-outside-init\n\n        def greenlet_main():\n            try:\n                getcurrent().parent.switch()\n            except GreenletExit:\n                self.glets.append(getcurrent())\n\n        # Before the\n        for _ in range(10):\n            Greenlet(greenlet_main).switch()\n\n        del self.glets\n        self.assertEqual(sys.getrefcount(Greenlet), initial_refs)\n\n    @unittest.skipIf(\n        PY313 and RUNNING_ON_MANYLINUX,\n        ",
      "https://github.com/python-greenlet/greenlet/issues/245\n        from threading import Thread\n        from threading import Event\n\n        from greenlet import getcurrent\n\n        class MyGreenlet(RawGreenlet):\n            pass\n\n        glets = []\n        ref_cleared = Event()\n\n        def greenlet_main():\n            getcurrent().parent.switch()\n\n        def thread_main(greenlet_running_event):\n            mine = MyGreenlet(greenlet_main)\n            glets.append(mine)\n            # The greenlets being deleted must be active\n            mine.switch()\n            # Don",
      "https://github.com/python-greenlet/greenlet/issues/388\n        main = greenlet.getcurrent()\n\n        def outer():\n            inner(sys._getframe(0))\n\n        def inner(frame):\n            main.switch(frame)\n\n        gr = RawGreenlet(outer)\n        frame = gr.switch()\n\n        # Do something else to clobber the part of the C stack used by `gr`,\n        # so we can",
      "https://github.com/python-greenlet/greenlet/issues/218\n        # %s formatting on Python 2 was producing unicode, not str.\n\n        g_dead = RawGreenlet(lambda: None)\n        g_not_started = RawGreenlet(lambda: None)\n        g_cur = greenlet.getcurrent()\n\n        for g in g_dead, g_not_started, g_cur:\n\n            self.assertIsInstance(\n                "
    ],
    "file": "venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/gevent/gevent/issues/1909\n\nThis test is fragile and relies on details of the CPython\nimplementation (like most of the rest of this package):\n\n    - We enter the trashcan and deferred deallocation after\n      ``_PyTrash_UNWIND_LEVEL`` calls. This constant, defined in\n      CPython"
    ],
    "file": "venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet_trash.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-greenlet/greenlet/issues/251\n        # Killing a greenlet (probably not the main one)\n        # in one thread from another thread would\n        # result in leaking a list (the ts_delkey list).\n        # We no longer use lists to hold that stuff, though.\n\n        # For the test to be valid, even empty lists have to be tracked by the\n        # GC\n\n        assert gc.is_tracked([])\n        HasFinalizerTracksInstances.reset()\n        greenlet.getcurrent()\n        greenlets_before = self.count_objects(greenlet.greenlet, exact_kind=False)\n\n        background_glet_running = threading.Event()\n        background_glet_killed = threading.Event()\n        background_greenlets = []\n\n        # XXX: Switching this to a greenlet subclass that overrides\n        # run results in all callers failing the leaktest; that\n        # greenlet instance is leaked. There",
      "https://github.com/gevent/gevent/issues/1924\n        # and https://github.com/python-greenlet/greenlet/issues/328\n        self._only_test_some_versions()\n        def f():\n            return 1\n\n        ITER = 10000\n        def run_it():\n            for _ in range(ITER):\n                greenlet.greenlet(f).switch()\n\n        # Establish baseline\n        for _ in range(3):\n            run_it()\n\n        # uss: (Linux, macOS, Windows): aka "
    ],
    "file": "venv\\Lib\\site-packages\\greenlet\\tests\\test_leaks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://discuss.python.org/t/cpython-3-12-greenlet-and-tracing-profiling-how-to-not-crash-and-get-correct-results/33144/2\nDEBUG_BUILD_PY312 = (\n    PY312 and hasattr(sys, ",
      "https://github.com/python-greenlet/greenlet/issues/332\n        # Our logic in asserting that the tracefunction should\n        # gain a reference was incorrect if the same tracefunction was set\n        # twice.\n        tracer = GreenletTracer()\n        with tracer:\n            greenlet.settrace(tracer)\n\n\nclass PythonTracer(object):\n    oldtrace = None\n\n    def __init__(self):\n        self.actions = []\n\n    def __call__(self, frame, event, arg):\n        # Record the co_name so we have an idea what function we"
    ],
    "file": "venv\\Lib\\site-packages\\greenlet\\tests\\test_tracing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://devblogs.microsoft.com/oldnewthing/20110519-00/?p=10623\n        # and\n        # https://docs.microsoft.com/en-us/previous-versions/k089yyh0(v=vs.140)?redirectedfrom=MSDN\n        # and\n        # https://devblogs.microsoft.com/oldnewthing/20190108-00/?p=100655\n        expected_exit = (\n            -signal.SIGABRT,\n            # But beginning on Python 3.11, the faulthandler\n            # that prints the C backtraces sometimes segfaults after\n            # reporting the exception but before printing the stack.\n            # This has only been seen on linux/gcc.\n            -signal.SIGSEGV,\n        ) if not WIN else (\n            3,\n            0xc0000409,\n            0xc0000005,\n        )\n        return expected_exit\n\n    def get_process_uss(self):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\greenlet\\tests\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, "
    ],
    "file": "venv\\Lib\\site-packages\\flask_migrate\\templates\\aioflask\\env.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, "
    ],
    "file": "venv\\Lib\\site-packages\\flask_migrate\\templates\\aioflask-multidb\\env.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, "
    ],
    "file": "venv\\Lib\\site-packages\\flask_migrate\\templates\\flask\\env.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, "
    ],
    "file": "venv\\Lib\\site-packages\\flask_migrate\\templates\\flask-multidb\\env.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.cl.cam.ac.uk/~mgk25/iso-time.html>`_\n- `W3C Date and Time Formats <https://www.w3.org/TR/NOTE-datetime>`_\n- `Time Formats (Planetary Rings Node) <https://pds-rings.seti.org:443/tools/time_formats.html>`_\n- `CPAN ParseDate module\n  <https://metacpan.org/pod/release/MUIR/Time-modules-2013.0912/lib/Time/ParseDate.pm>`_\n- `Java SimpleDateFormat Class\n  <https://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html>`_\n"
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\parser\\_parser.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://python.org/sf/1447945 or https://bugs.python.org/issue5288\n        # for some information.\n        old_offset = second_offset\n        calculated_offset = 60 * ((second_offset + 30) // 60)\n        return calculated_offset\n\n\ntry:\n    # Python 3.7 feature\n    from contextlib import nullcontext as _nullcontext\nexcept ImportError:\n    class _nullcontext(object):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\tz\\tz.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://data.iana.org/time-zones/tz-link.html>`_ for more information.\n    Time zone files can be compiled from the `IANA Time Zone database files\n    <https://www.iana.org/time-zones>`_ with the `zic time zone compiler\n    <https://www.freebsd.org/cgi/man.cgi?query=zic&sektion=8>`_\n\n    .. note::\n\n        Only construct a ``tzfile`` directly if you have a specific timezone\n        file on disk that you want to read into a Python ``tzinfo`` object.\n        If you want to get a ``tzfile`` representing a specific IANA zone,\n        (e.g. ``",
      "https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html\n    ",
      "https://tools.ietf.org/html/rfc5545\n    ",
      "https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html\n\n        .. _`",
      "https://blog.ganssle.io/articles/2018/02/aware-datetime-arithmetic.html\n        ",
      "https://bugs.python.org/issue5288\n        # for some information.\n        old_offset = second_offset\n        calculated_offset = 60 * ((second_offset + 30) // 60)\n        return calculated_offset\n\n\ntry:\n    # Python 3.7 feature\n    from contextlib import nullcontext as _nullcontext\nexcept ImportError:\n    class _nullcontext(object):\n        "
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\tz\\tz.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://ww_winreg.jsiinc.com/SUBA/tip0300/rh0398.htm\n        tup = struct.unpack(",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms725481(v=vs.85).aspx\n        (self._stdmonth,\n         self._stddayofweek,   # Sunday = 0\n         self._stdweeknumber,  # Last = 5\n         self._stdhour,\n         self._stdminute) = tup[4:9]\n\n        (self._dstmonth,\n         self._dstdayofweek,   # Sunday = 0\n         self._dstweeknumber,  # Last = 5\n         self._dsthour,\n         self._dstminute) = tup[12:17]\n\n        self._dst_base_offset_ = self._dst_offset - self._std_offset\n        self.hasdst = self._get_hasdst()\n\n    def __repr__(self):\n        return "
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\tz\\win.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/abalkin/tz\nif hasattr(datetime, "
    ],
    "file": "venv\\Lib\\site-packages\\dateutil\\tz\\_common.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "2.5.29.9",
      "2.5.29.14",
      "2.5.29.15",
      "2.5.29.16",
      "2.5.29.17",
      "2.5.29.18",
      "2.5.29.19",
      "2.5.29.30",
      "2.5.29.31",
      "2.5.29.32",
      "2.5.29.33",
      "2.5.29.35",
      "2.5.29.36",
      "2.5.29.37",
      "2.5.29.46",
      "2.5.29.54",
      "2.5.29.28",
      "1.3.6.1",
      "5.5.7.1",
      "1.3.6.1",
      "5.5.7.1",
      "1.3.6.1",
      "5.5.7.48",
      "1.3.6.1",
      "5.5.7.1",
      "2.5.29.20",
      "2.5.29.27",
      "1.3.6.1",
      "1.3.6.1",
      "1.3.6.1",
      "1.3.6.1",
      "4.1.311.21",
      "1.3.36.8",
      "1.3.6.1",
      "5.5.7.48",
      "1.3.6.1",
      "5.5.7.48",
      "2.5.29.29",
      "2.5.29.21",
      "2.5.29.24",
      "2.5.4.3",
      "2.5.4.6",
      "2.5.4.7",
      "2.5.4.8",
      "2.5.4.9",
      "2.5.4.97",
      "2.5.4.10",
      "2.5.4.11",
      "2.5.4.5",
      "2.5.4.4",
      "2.5.4.42",
      "2.5.4.12",
      "2.5.4.43",
      "2.5.4.44",
      "2.5.4.45",
      "2.5.4.46",
      "2.5.4.65",
      "1.3.6.1",
      "4.1.311.60",
      "1.3.6.1",
      "4.1.311.60",
      "1.3.6.1",
      "4.1.311.60",
      "2.5.4.15",
      "2.5.4.16",
      "2.5.4.17",
      "1.2.643.3",
      "1.2.643.100",
      "1.2.643.100",
      "1.3.14.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "2.16.840.1",
      "101.3.4.3",
      "1.3.101.112",
      "1.3.101.113",
      "1.2.643.2",
      "1.2.643.7",
      "1.1.3.2",
      "1.2.643.7",
      "1.1.3.3",
      "1.3.14.3",
      "2.16.840.1",
      "101.3.4.2",
      "2.16.840.1",
      "101.3.4.2",
      "2.16.840.1",
      "101.3.4.2",
      "2.16.840.1",
      "101.3.4.2",
      "1.3.6.1",
      "3.2.1.99",
      "1.3.6.1",
      "3.2.1.99",
      "1.3.6.1",
      "3.2.1.99",
      "1.3.6.1",
      "3.2.1.99",
      "1.3.101.110",
      "1.3.101.111",
      "1.3.101.112",
      "1.3.101.113",
      "1.3.6.1",
      "5.5.7.3",
      "1.3.6.1",
      "5.5.7.3",
      "1.3.6.1",
      "5.5.7.3",
      "1.3.6.1",
      "5.5.7.3",
      "1.3.6.1",
      "5.5.7.3",
      "1.3.6.1",
      "5.5.7.3",
      "2.5.29.37",
      "1.3.6.1",
      "4.1.311.20",
      "1.3.6.1",
      "5.2.3.5",
      "1.3.6.1",
      "5.5.7.3",
      "1.3.6.1",
      "5.5.7.3",
      "1.3.6.1",
      "1.3.6.1",
      "5.5.7.8",
      "1.3.6.1",
      "5.5.7.8",
      "1.3.6.1",
      "5.5.7.8",
      "1.3.6.1",
      "5.5.7.8",
      "1.3.6.1",
      "5.5.7.8",
      "1.3.6.1",
      "5.5.7.8",
      "1.3.6.1",
      "5.5.7.8",
      "1.3.6.1",
      "5.5.7.48",
      "1.3.6.1",
      "5.5.7.48",
      "1.3.6.1",
      "5.5.7.48",
      "1.3.6.1",
      "5.5.7.2",
      "1.3.6.1",
      "5.5.7.2",
      "2.5.29.32"
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\hazmat\\_oid.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.4.1>\n    "
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\x509\\certificate_transparency.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "7.4.1.4"
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\x509\\certificate_transparency.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc4514#page-7\n_NAMEOID_TO_NAME: _OidNameMap = {\n    NameOID.COMMON_NAME: ",
      "https://tools.ietf.org/html/rfc4514#section-2.4\n    val = val.replace(",
      "https://tools.ietf.org/html/rfc4514#section-3\n\n    # special = escaped / SPACE / SHARP / EQUALS\n    # escaped = DQUOTE / PLUS / COMMA / SEMI / LANGLE / RANGLE\n    def sub(m):\n        val = m.group(1)\n        # Regular escape\n        if len(val) == 1:\n            return val\n        # Hex-value scape\n        return chr(int(val, 16))\n\n    return _RFC4514NameParser._PAIR_RE.sub(sub, val)\n\n\nNameAttributeValueType = typing.TypeVar(\n    "
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\x509\\name.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.36.3",
      "3.2.8.1",
      "1.3.36.3",
      "3.2.8.1",
      "1.3.36.3",
      "3.2.8.1",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0",
      "1.3.132.0"
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\hazmat\\primitives\\asymmetric\\ec.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://datatracker.ietf.org/doc/html/rfc5751#section-2.7)\n        content_encryption_algorithm = (\n            self._content_encryption_algorithm or algorithms.AES128\n        )\n\n        options = list(options)\n        if not all(isinstance(x, PKCS7Options) for x in options):\n            raise ValueError("
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\hazmat\\primitives\\serialization\\pkcs7.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugzilla.mindrot.org/show_bug.cgi?id=3553 for\n        # information about how OpenSSH handles AEAD tags\n        if _SSH_CIPHERS[ciphername_bytes].is_aead:\n            tag = bytes(data)\n            if len(tag) != tag_len:\n                raise ValueError(",
      "https://cs.opensource.google/go/x/crypto/+/refs/tags/\n            # v0.4.0:ssh/certs.go;l=445\n            # RFC 8332 defines SHA256 and 512 as options\n            fsig = _FragList()\n            fsig.put_sshstr(_SSH_RSA_SHA512)\n            signature = private_key.sign(\n                f.tobytes(), padding.PKCS1v15(), hashes.SHA512()\n            )\n            fsig.put_sshstr(signature)\n            f.put_sshstr(fsig.tobytes())\n\n        cert_data = binascii.b2a_base64(f.tobytes()).strip()\n        # load_ssh_public_identity returns a union, but this is\n        # guaranteed to be an SSHCertificate, so we cast to make\n        # mypy happy.\n        return typing.cast(\n            SSHCertificate,\n            load_ssh_public_identity(b"
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\hazmat\\primitives\\serialization\\ssh.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "-cert-v01@openssh.com",
      "sk-ssh-ed25519@openssh.com",
      "sk-ecdsa-sha2-nistp256@openssh.com",
      "aes256-gcm@openssh.com",
      "sk-ssh-ed25519@openssh.com",
      "sk-ssh-ed25519@openssh.com",
      "sk-ecdsa-sha2-nistp256@openssh.com",
      "sk-ecdsa-sha2-nistp256@openssh.com"
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\hazmat\\primitives\\serialization\\ssh.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pyca/cryptography/"
    ],
    "file": "venv\\Lib\\site-packages\\cryptography\\hazmat\\bindings\\openssl\\binding.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/3041986/apt-command-line-interface-like-yes-no-input\n    "
    ],
    "file": "venv\\Lib\\site-packages\\charset_normalizer\\cli\\__main__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.mssqltips.com/sqlservertip/1425/\\\n    # working-with-default-constraints-in-sql-server/\n    return "
    ],
    "file": "venv\\Lib\\site-packages\\alembic\\ddl\\mssql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.sqlalchemy.org/en/latest/dialects/postgresql.html#operator-classes",
      "https://github.com/sqlalchemy/sqlalchemy/blob/\n        # 82fa95cfce070fab401d020c6e6e4a6a96cc2578/\n        # lib/sqlalchemy/dialects/postgresql/base.py#L2261\n        if is_index and not isinstance(expr, ColumnClause):\n            expr = expr.self_group()\n\n        return super().render_ddl_sql_expr(\n            expr, is_server_default=is_server_default, is_index=is_index, **kw\n        )\n\n    def render_type(\n        self, type_: TypeEngine, autogen_context: AutogenContext\n    ) -> Union[str, Literal[False]]:\n        mod = type(type_).__module__\n        if not mod.startswith("
    ],
    "file": "venv\\Lib\\site-packages\\alembic\\ddl\\postgresql.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue10740\n    "
    ],
    "file": "venv\\Lib\\site-packages\\alembic\\ddl\\sqlite.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport types\nfrom typing import Union\n\nfrom sqlalchemy.util import inspect_getfullargspec\n\nfrom ..util import sqla_2\n\n\ndef flag_combinations(*combinations):\n    "
    ],
    "file": "venv\\Lib\\site-packages\\alembic\\testing\\util.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n\nimport warnings\n\nfrom sqlalchemy import exc as sa_exc\n\n\ndef setup_filters():\n    "
    ],
    "file": "venv\\Lib\\site-packages\\alembic\\testing\\warnings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://importlib-resources.readthedocs.io/en/latest/migration.html#pkg-resources-resource-filename  # noqa E501\n\n        file_manager = ExitStack()\n        atexit.register(file_manager.close)\n\n        ref = compat.importlib_resources.files(tokens[0])\n        for tok in tokens[1:]:\n            ref = ref / tok\n        fname = file_manager.enter_context(  # type: ignore[assignment]\n            compat.importlib_resources.as_file(ref)\n        )\n    return fname\n\n\ndef pyc_file_from_path(path: str) -> Optional[str]:\n    "
    ],
    "file": "venv\\Lib\\site-packages\\alembic\\util\\pyfiles.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.sqlalchemy.org/en/latest/changelog/changelog_14.html#change-0c6e0cc67dfe6fac5164720e57ef307d\nsqla_14_18 = _vers >= (1, 4, 18)\nsqla_14_26 = _vers >= (1, 4, 26)\nsqla_2 = _vers >= (2,)\nsqlalchemy_version = __version__\n\nif TYPE_CHECKING:\n\n    def compiles(\n        element: Type[ClauseElement], *dialects: str\n    ) -> Callable[[_CompilerProtocol], _CompilerProtocol]: ...\n\nelse:\n    from sqlalchemy.ext.compiler import compiles\n\n\nidentity_has_dialect_kwargs = issubclass(schema.Identity, DialectKWArgs)\n\n\ndef _get_identity_options_dict(\n    identity: Union[Identity, schema.Sequence, None],\n    dialect_kwargs: bool = False,\n) -> Dict[str, Any]:\n    if identity is None:\n        return {}\n    elif identity_has_dialect_kwargs:\n        assert hasattr(identity, "
    ],
    "file": "venv\\Lib\\site-packages\\alembic\\util\\sqla_compat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://json-schema.org/latest/json-schema-core.html#anchor25>`_.\n            ",
      "http://json-schema.org/latest/json-schema-core.html#anchor25>`_.\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jsonref.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.python.org/pypi/ProxyTypes\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\proxytypes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue46342\n    def final(f):\n        ",
      "https://bugs.python.org/issue38834\n    # The standard library TypedDict in Python 3.9.0/1 does not honour the ",
      "https://bugs.python.org/issue42059\n    # The standard library TypedDict below Python 3.11 does not store runtime\n    # information about optional and required keys when using Required or NotRequired.\n    # Generic TypedDicts are also impossible using typing.TypedDict on Python <3.11.\n    # Aaaand on 3.12 we add __orig_bases__ to TypedDict\n    # to enable better runtime introspection.\n    # On 3.13 we deprecate some odd ways of creating TypedDicts.\n    # Also on 3.13, PEP 705 adds the ReadOnly[] qualifier.\n    # PEP 728 (still pending) makes more changes.\n    TypedDict = typing.TypedDict\n    _TypedDictMeta = typing._TypedDictMeta\n    is_typeddict = typing.is_typeddict\nelse:\n    # 3.10.0 and later\n    _TAKES_MODULE = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\typing_extensions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://attribution.omnilib.dev\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\aiosqlite\\__version__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue9253, argparse\n            # behavior changed incompatibly in py3.3\n            self.parser.error("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\alembic\\config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0484/#positional-only-arguments\n\n\nclass SupportsGt(Protocol):\n    def __gt__(self: T, __other: T) -> bool:\n        ...\n\n\nclass SupportsGe(Protocol):\n    def __ge__(self: T, __other: T) -> bool:\n        ...\n\n\nclass SupportsLt(Protocol):\n    def __lt__(self: T, __other: T) -> bool:\n        ...\n\n\nclass SupportsLe(Protocol):\n    def __le__(self: T, __other: T) -> bool:\n        ...\n\n\nclass SupportsMod(Protocol):\n    def __mod__(self: T, __other: T) -> T:\n        ...\n\n\nclass SupportsDiv(Protocol):\n    def __div__(self: T, __other: T) -> T:\n        ...\n\n\nclass BaseMetadata:\n    ",
      "https://pint.readthedocs.io/en/stable/>\n    - ``astropy.units``: <https://docs.astropy.org/en/stable/units/>\n\n    For indicating a quantity with a certain dimensionality but without a specific unit\n    it is recommended to use square brackets, e.g. `Annotated[float, Unit("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\annotated_types\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/encode/httpx/blob/3ba5fe0d7ac70222590e759c31442b1cab263791/httpx/_config.py#L366\n        HTTPX_DEFAULT_TIMEOUT = Timeout(5.0)\n\n\nclass PageInfo:\n    ",
      "https://github.com/microsoft/pyright/issues/3464\n        page = cast(\n            AsyncPageT,\n            await self,  # type: ignore\n        )\n        async for item in page:\n            yield item\n\n\nclass BaseAsyncPage(BasePage[_T], Generic[_T]):\n    _client: AsyncAPIClient = pydantic.PrivateAttr()\n\n    def _set_private_attributes(\n        self,\n        model: Type[_T],\n        client: AsyncAPIClient,\n        options: FinalRequestOptions,\n    ) -> None:\n        self._model = model\n        self._client = client\n        self._options = options\n\n    async def __aiter__(self) -> AsyncIterator[_T]:\n        async for page in self.iter_pages():\n            for item in page._get_page_items():\n                yield item\n\n    async def iter_pages(self: AsyncPageT) -> AsyncIterator[AsyncPageT]:\n        page = self\n        while True:\n            yield page\n            if page.has_next_page():\n                page = await page.get_next_page()\n            else:\n                return\n\n    async def get_next_page(self: AsyncPageT) -> AsyncPageT:\n        info = self.next_page_info()\n        if not info:\n            raise RuntimeError(\n                ",
      "https://www.python-httpx.org/advanced/clients/#multipart-file-encoding\n            if json_data:\n                if not is_dict(json_data):\n                    raise TypeError(\n                        f",
      "https://github.com/encode/httpx/discussions/2399#discussioncomment-3814186\n            if not files:\n                files = cast(HttpxRequestFiles, ForceMultipartDict())\n\n        prepared_url = self._prepare_url(options.url)\n        if ",
      "https://github.com/encode/httpx/discussions/2880\n            kwargs[",
      "https://github.com/microsoft/pyright/issues/3526#event-6715453066\n            params=self.qs.stringify(cast(Mapping[str, Any], params)) if params else None,\n            json=json_data,\n            files=files,\n            **kwargs,\n        )\n\n    def _serialize_multipartform(self, data: Mapping[object, object]) -> dict[str, object]:\n        items = self.qs.stringify_items(\n            # TODO: type ignore is required as stringify_items is well typed but we can",
      "https://github.com/python/cpython/issues/88476\n        return platform_headers(self._version, platform=self._platform)\n\n    def _parse_retry_after_header(self, response_headers: Optional[httpx.Headers] = None) -> float | None:\n        ",
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        See also  https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax\n        ",
      "https://distro.readthedocs.io/en/latest/#distro.id\n        distro_id = distro.id()\n        if distro_id == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_base_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python-httpx.org/api/#client) for more details.\n        http_client: httpx.Client | None = None,\n        # See httpx documentation for [custom transports](https://www.python-httpx.org/advanced/#custom-transports)\n        transport: Transport | None = None,\n        # See httpx documentation for [proxies](https://www.python-httpx.org/advanced/#http-proxying)\n        proxies: ProxiesTypes | None = None,\n        # See httpx documentation for [limits](https://www.python-httpx.org/advanced/#pool-limit-configuration)\n        connection_pool_limits: httpx.Limits | None = None,\n        # Enable or disable schema validation for data returned by the API.\n        # When enabled an error APIResponseValidationError is raised\n        # if the API responds with invalid data for the expected schema.\n        #\n        # This parameter may be removed or changed in the future.\n        # If you rely on this feature, please open a GitHub issue\n        # outlining your use-case to help us decide if it should be\n        # part of our public interface in the future.\n        _strict_response_validation: bool = False,\n    ) -> None:\n        ",
      "https://api.anthropic.com",
      "https://www.python-httpx.org/api/#asyncclient) for more details.\n        http_client: httpx.AsyncClient | None = None,\n        # See httpx documentation for [custom transports](https://www.python-httpx.org/advanced/#custom-transports)\n        transport: AsyncTransport | None = None,\n        # See httpx documentation for [proxies](https://www.python-httpx.org/advanced/#http-proxying)\n        proxies: ProxiesTypes | None = None,\n        # See httpx documentation for [limits](https://www.python-httpx.org/advanced/#pool-limit-configuration)\n        connection_pool_limits: httpx.Limits | None = None,\n        # Enable or disable schema validation for data returned by the API.\n        # When enabled an error APIResponseValidationError is raised\n        # if the API responds with invalid data for the expected schema.\n        #\n        # This parameter may be removed or changed in the future.\n        # If you rely on this feature, please open a GitHub issue\n        # outlining your use-case to help us decide if it should be\n        # part of our public interface in the future.\n        _strict_response_validation: bool = False,\n    ) -> None:\n        ",
      "https://api.anthropic.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/samuelcolvin/pydantic/issues/1168#issuecomment-817742836.\n    @classmethod\n    @override\n    def construct(  # pyright: ignore[reportIncompatibleMethodOverride]\n        cls: Type[ModelT],\n        _fields_set: set[str] | None = None,\n        **values: object,\n    ) -> ModelT:\n        m = cls.__new__(cls)\n        fields_values: dict[str, object] = {}\n\n        config = get_model_config(cls)\n        populate_by_name = (\n            config.allow_population_by_field_name\n            if isinstance(config, _ConfigProtocol)\n            else config.get(",
      "https://docs.pydantic.dev/2.4/concepts/serialization/#modelmodel_dump\n\n            Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\n            Args:\n                mode: The mode in which `to_python` should run.\n                    If mode is ",
      "https://docs.pydantic.dev/2.4/concepts/serialization/#modelmodel_dump_json\n\n            Generates a JSON representation of the model using Pydantic"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_models.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/microsoft/pyright/issues/3555\nData = Union[PrimitiveData, List[Any], Tuple[Any], "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_qs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/florimondmanca/httpx-sse/blob/master/src/httpx_sse/_decoders.py\nfrom __future__ import annotations\n\nimport abc\nimport json\nimport inspect\nimport warnings\nfrom types import TracebackType\nfrom typing import TYPE_CHECKING, Any, Generic, TypeVar, Iterator, AsyncIterator, cast\nfrom typing_extensions import Self, Protocol, TypeGuard, override, get_origin, runtime_checkable\n\nimport httpx\n\nfrom ._utils import is_dict, extract_type_var_from_base\n\nif TYPE_CHECKING:\n    from ._client import Anthropic, AsyncAnthropic\n\n\n_T = TypeVar(",
      "https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation  # noqa: E501\n\n        if not line:\n            if not self._event and not self._data and not self._last_event_id and self._retry is None:\n                return None\n\n            sse = ServerSentEvent(\n                event=self._event,\n                data="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_streaming.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic/blob/32ea570bf96e84234d2992e1ddf40ab8a565925a/pydantic/main.py#L49\nIncEx: TypeAlias = Union[\n    Set[int], Set[str], Mapping[int, Union["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_types.py"
  },
  {
    "pattern": "german",
    "matches": [
      "German"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\charset_normalizer\\constant.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/Ousret/charset_normalizer>.\n:copyright: (c) 2021 by Ahmed TAHRI\n:license: MIT, see LICENSE for more details.\n",
      "https://docs.python.org/3.3/howto/logging.html#configuring-logging-for-a-library\n\nlogging.getLogger("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\charset_normalizer\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://en.wikipedia.org/wiki/ANSI_escape_code\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\colorama\\ansi.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/12632894/why-doesnt-getattr-work-with-exit\n        # thus, contextlib magic methods are not proxied via __getattr__\n        return self.__wrapped.__enter__(*args, **kwargs)\n\n    def __exit__(self, *args, **kwargs):\n        return self.__wrapped.__exit__(*args, **kwargs)\n\n    def __setstate__(self, state):\n        self.__dict__ = state\n\n    def __getstate__(self):\n        return self.__dict__\n\n    def write(self, text):\n        self.__convertor.write(text)\n\n    def isatty(self):\n        stream = self.__wrapped\n        if "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\colorama\\ansitowin32.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ",
      "http://www.freedesktop.org/software/systemd/man/os-release.html>`_.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\distro\\distro.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue1322>`_ for more information.\n",
      "https://github.com/python-distro/distro/issues/162\n            return {}\n\n    @staticmethod\n    def _parse_distro_release_content(line: str) -> Dict[str, str]:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\distro\\distro.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/typeshed/pull/6832.\nStrPath = Union[str, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\dotenv\\main.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/encode/httpx/blob/3ba5fe0d7ac70222590e759c31442b1cab263791/httpx/_config.py#L366\n        HTTPX_DEFAULT_TIMEOUT = Timeout(5.0)\n\n\nclass PageInfo:\n    ",
      "https://github.com/microsoft/pyright/issues/3464\n        page = cast(\n            AsyncPageT,\n            await self,  # type: ignore\n        )\n        async for item in page:\n            yield item\n\n\nclass BaseAsyncPage(BasePage[_T], Generic[_T]):\n    _client: AsyncAPIClient = pydantic.PrivateAttr()\n\n    def _set_private_attributes(\n        self,\n        model: Type[_T],\n        client: AsyncAPIClient,\n        options: FinalRequestOptions,\n    ) -> None:\n        self._model = model\n        self._client = client\n        self._options = options\n\n    async def __aiter__(self) -> AsyncIterator[_T]:\n        async for page in self.iter_pages():\n            for item in page._get_page_items():\n                yield item\n\n    async def iter_pages(self: AsyncPageT) -> AsyncIterator[AsyncPageT]:\n        page = self\n        while True:\n            yield page\n            if page.has_next_page():\n                page = await page.get_next_page()\n            else:\n                return\n\n    async def get_next_page(self: AsyncPageT) -> AsyncPageT:\n        info = self.next_page_info()\n        if not info:\n            raise RuntimeError(\n                ",
      "https://www.python-httpx.org/advanced/#multipart-file-encoding\n            if json_data:\n                if not is_dict(json_data):\n                    raise TypeError(\n                        f",
      "https://github.com/microsoft/pyright/issues/3526#event-6715453066\n            params=self.qs.stringify(cast(Mapping[str, Any], params)) if params else None,\n            json=json_data,\n            files=options.files,\n            **kwargs,\n        )\n\n    def _serialize_multipartform(self, data: Mapping[object, object]) -> dict[str, object]:\n        items = self.qs.stringify_items(\n            # TODO: type ignore is required as stringify_items is well typed but we can",
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        See also  https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax\n        ",
      "https://distro.readthedocs.io/en/latest/#distro.id\n        distro_id = distro.id()\n        if distro_id == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_base_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python-httpx.org/api/#client) for more details.\n        http_client: httpx.Client | None = None,\n        # Enable or disable schema validation for data returned by the API.\n        # When enabled an error APIResponseValidationError is raised\n        # if the API responds with invalid data for the expected schema.\n        #\n        # This parameter may be removed or changed in the future.\n        # If you rely on this feature, please open a GitHub issue\n        # outlining your use-case to help us decide if it should be\n        # part of our public interface in the future.\n        _strict_response_validation: bool = False,\n    ) -> None:\n        ",
      "https://api.groq.com",
      "https://www.python-httpx.org/api/#asyncclient) for more details.\n        http_client: httpx.AsyncClient | None = None,\n        # Enable or disable schema validation for data returned by the API.\n        # When enabled an error APIResponseValidationError is raised\n        # if the API responds with invalid data for the expected schema.\n        #\n        # This parameter may be removed or changed in the future.\n        # If you rely on this feature, please open a GitHub issue\n        # outlining your use-case to help us decide if it should be\n        # part of our public interface in the future.\n        _strict_response_validation: bool = False,\n    ) -> None:\n        ",
      "https://api.groq.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/samuelcolvin/pydantic/issues/1168#issuecomment-817742836.\n    @classmethod\n    @override\n    def construct(\n        cls: Type[ModelT],\n        _fields_set: set[str] | None = None,\n        **values: object,\n    ) -> ModelT:\n        m = cls.__new__(cls)\n        fields_values: dict[str, object] = {}\n\n        config = get_model_config(cls)\n        populate_by_name = (\n            config.allow_population_by_field_name\n            if isinstance(config, _ConfigProtocol)\n            else config.get(",
      "https://docs.pydantic.dev/2.4/concepts/serialization/#modelmodel_dump\n\n            Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\n            Args:\n                mode: The mode in which `to_python` should run.\n                    If mode is ",
      "https://docs.pydantic.dev/2.4/concepts/serialization/#modelmodel_dump_json\n\n            Generates a JSON representation of the model using Pydantic"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_models.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/microsoft/pyright/issues/3555\nData = Union[PrimitiveData, List[Any], Tuple[Any], "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_qs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/florimondmanca/httpx-sse/blob/master/src/httpx_sse/_decoders.py\nfrom __future__ import annotations\n\nimport json\nimport inspect\nfrom types import TracebackType\nfrom typing import TYPE_CHECKING, Any, Generic, TypeVar, Iterator, AsyncIterator, cast\nfrom typing_extensions import Self, Protocol, TypeGuard, override, get_origin, runtime_checkable\n\nimport httpx\n\nfrom ._utils import extract_type_var_from_base\n\nif TYPE_CHECKING:\n    from ._client import Groq, AsyncGroq\n\n\n_T = TypeVar(",
      "https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation  # noqa: E501\n\n        if not line:\n            if not self._event and not self._data and not self._last_event_id and self._retry is None:\n                return None\n\n            sse = ServerSentEvent(\n                event=self._event,\n                data="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_streaming.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic/blob/32ea570bf96e84234d2992e1ddf40ab8a565925a/pydantic/main.py#L49\nIncEx: TypeAlias = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://svn.tools.ietf.org/svn/wg/httpbis/specs/rfc7230.html#whitespace\n#  OWS            = *( SP / HTAB )\n#                 ; optional whitespace\nOWS = r",
      "https://svn.tools.ietf.org/svn/wg/httpbis/specs/rfc7230.html#rule.token.separators\n#   token          = 1*tchar\n#\n#   tchar          = ",
      "https://svn.tools.ietf.org/svn/wg/httpbis/specs/rfc7230.html#header.fields\n#  field-name     = token\nfield_name = token\n\n# The standard says:\n#\n#  field-value    = *( field-content / obs-fold )\n#  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n#  field-vchar    = VCHAR / obs-text\n#  obs-fold       = CRLF 1*( SP / HTAB )\n#                 ; obsolete line folding\n#                 ; see Section 3.2.4\n#\n# https://tools.ietf.org/html/rfc5234#appendix-B.1\n#\n#   VCHAR          =  %x21-7E\n#                  ; visible (printing) characters\n#\n# https://svn.tools.ietf.org/svn/wg/httpbis/specs/rfc7230.html#rule.quoted-string\n#   obs-text       = %x80-FF\n#\n# However, the standard definition of field-content is WRONG! It disallows\n# fields containing a single visible character surrounded by whitespace,\n# e.g. ",
      "https://www.rfc-editor.org/errata_search.php?rfc=7230&eid=4189\n#\n# So our definition of field_content attempts to fix it up...\n#\n# Also, we allow lots of control characters, because apparently people assume\n# that they",
      "https://github.com/python-hyper/h11/issues/57\n# We still don",
      "https://svn.tools.ietf.org/svn/wg/httpbis/specs/rfc7230.html#request.line\n#\n#   request-line   = method SP request-target SP HTTP-version CRLF\n#   method         = token\n#   HTTP-version   = HTTP-name ",
      "https://svn.tools.ietf.org/svn/wg/httpbis/specs/rfc7230.html#status.line\n#\n#   status-line = HTTP-version SP status-code SP reason-phrase CRLF\n#   status-code    = 3DIGIT\n#   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\nstatus_code = r",
      "https://github.com/scrapy/scrapy/issues/345#issuecomment-281756036\n    #   https://github.com/seanmonstar/httparse/issues/29\n    # so make it optional. ?: is a non-capturing group.\n    r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\_abnf.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7230#section-3.3.3\n    #\n    # Step 1: some responses always have an empty body, regardless of what the\n    # headers say.\n    if type(event) is Response:\n        if (\n            event.status_code in (204, 304)\n            or request_method == b",
      "https://tools.ietf.org/html/rfc7231#section-4.3.2 . But it"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\_connection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://python-hyper.org/h2/en/stable/api.html#events\n#\n# Don"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\_events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7230#section-5.3>`_. Always a byte\n       string. :term:`Bytes-like objects <bytes-like object>` and native\n       strings containing only ascii characters will be automatically\n       converted to byte strings.\n\n    .. attribute:: headers\n\n       Request headers, represented as a list of (name, value) pairs. See\n       :ref:`the header normalization rules <headers-format>` for details.\n\n    .. attribute:: http_version\n\n       The HTTP protocol version, represented as a byte string like\n       ``b",
      "https://tools.ietf.org/html/rfc7230#section-5.4\n        host_count = 0\n        for name, value in self.headers:\n            if name == b",
      "https://svn.tools.ietf.org/svn/wg/httpbis/specs/rfc7230.html#chunked.trailer.part\n# Unfortunately, the list of forbidden fields is long and vague :-/\n@dataclass(init=False, frozen=True)\nclass EndOfMessage(Event):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\_events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7230#section-3.3.1\n            if saw_transfer_encoding:\n                raise LocalProtocolError(\n                    ",
      "https://tools.ietf.org/html/rfc7230#section-4\n            value = value.lower()\n            if value != b",
      "https://tools.ietf.org/html/rfc7231#section-5.1.1\n    # "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\_headers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue19087\n#\n# This means that if we only supported 3.4+, we could get rid of the code here\n# involving self._start and self.compress, because it",
      "https://pythonclock.org/\n#\n# (Two things to double-check first though: make sure PyPy also has the\n# optimization, and benchmark to make sure it"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\_receivebuffer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://legacy.python.org/dev/peps/pep-0440/\n# via the use of the "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\_version.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.example.com/",
      "https://www.example.com/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_api.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_models.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.example.com/` forwarded via a proxy\n    at `http://localhost:8080`...\n\n    ```python\n    # Constructs an HTTP request with a complete URL as the target:\n    # GET https://www.example.com/ HTTP/1.1\n    url = httpcore.URL(\n        scheme=b"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_models.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc3986#section-3.2.3\n# * https://url.spec.whatwg.org/#url-miscellaneous\n# * https://url.spec.whatwg.org/#scheme-state\nDEFAULT_PORTS = {\n    b",
      "https://www.example.com/",
      "https://www.example.com/ HTTP/1.1\n    url = httpcore.URL(\n        scheme=b",
      "https://www.example.com/",
      "https://www.example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_models.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://sniffio.readthedocs.io/en/latest/\n    try:\n        import sniffio\n    except ImportError:  # pragma: nocover\n        environment = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_synchronization.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-trio/trio/blob/20ee2b1b7376db637435d80e266212a35837ddcc/trio/_socket.py#L471-L478\n    # See also: https://github.com/encode/httpcore/pull/193#issuecomment-703129316\n\n    # Use select.select on Windows, and when poll is unavailable and select.poll\n    # everywhere else. (E.g. When eventlet is in use. See #327)\n    if (\n        sys.platform == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpbin.org/get"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_api.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "realm@host.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_auth.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://domain.tld/path/to/resource"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0484/#annotating-instance-and-class-methods\nT = typing.TypeVar(",
      "https://www.example.com/subpath",
      "https://www.example.com/subpath/",
      "https://www.example.com/subpath/path",
      "https://tools.ietf.org/html/rfc7231#section-6.4.4\n        if response.status_code == codes.SEE_OTHER and method != ",
      "https://github.com/encode/httpx/issues/771\n        if url.scheme and not url.host:\n            url = url.copy_with(host=request.url.host)\n\n        # Facilitate relative ",
      "https://example.org",
      "https://example.org"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3.10/library/ssl.html#ssl.SSLContext.minimum_version\n        # https://docs.python.org/3.7/library/ssl.html#ssl.SSLContext.minimum_version\n        context.minimum_version = ssl.TLSVersion.TLSv1_2\n\nelse:\n\n    def set_minimum_tls_version_1_2(context: ssl.SSLContext) -> None:\n        # If "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n",
      "https://stackoverflow.com/questions/1838699\n    ",
      "https://stackoverflow.com/questions/1838699\n    ",
      "https://brotlipy.readthedocs.io/\n        or   `pip install brotli`. See https://github.com/google/brotli\n    Supports both ",
      "https://docs.python.org/3/library/stdtypes.html#str.splitlines\n        NEWLINE_CHARS = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_decoders.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_exceptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7230#section-3.2.2\n        ",
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}",
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}",
      "https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.__setitem__\n                info[key] = value\n            return info\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_models.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.rfc-editor.org/rfc/rfc2046#section-5.1.1\n    if b"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_multipart.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://datatracker.ietf.org/doc/html/rfc3986.html#section-2.3\nUNRESERVED_CHARACTERS = (\n    ",
      "https://datatracker.ietf.org/doc/html/rfc3986/#section-3.2.2\n        #\n        # IPv4address = dec-octet ",
      "https://datatracker.ietf.org/doc/html/rfc3986/#section-3.2.2\n        #\n        # ",
      "https://datatracker.ietf.org/doc/html/rfc3986/#section-3.2.2\n        #\n        # reg-name    = *( unreserved / pct-encoded / sub-delims )\n        return quote(host.lower(), safe=SUB_DELIMS)\n\n    # IDNA hostnames\n    try:\n        return idna.encode(host.lower()).decode(",
      "https://tools.ietf.org/html/rfc3986#section-3.2.3\n    #\n    # ",
      "https://url.spec.whatwg.org/#url-miscellaneous\n    default_port = {",
      "https://datatracker.ietf.org/doc/html/rfc3986.html#section-3.3\n    ",
      "https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n    components = path.split(",
      "https://www.rfc-editor.org/rfc/rfc3986#section-2.1\n\n    * `string`: The string to be percent-escaped.\n    * `safe`: A string containing characters that may be treated as safe, and do not\n        need to be escaped. Unreserved characters are always treated as safe.\n        See: https://www.rfc-editor.org/rfc/rfc3986#section-2.3\n    ",
      "https://github.com/python/cpython/blob/b2f7b2ef0b5421e01efb8c7bee2ef95d3bab77eb/Lib/urllib/parse.py#L926\n\n    Note that we use ",
      "https://github.com/encode/httpx/issues/2536\n    - https://github.com/encode/httpx/issues/2721\n    - https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_urlparse.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"a secret\""
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_urls.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://\u4e2d\u56fd.icom.museum",
      "http://xn--fiqs8s.icom.museum",
      "http://\u4e2d\u56fd.icom.museum",
      "http://xn--fiqs8s.icom.museum",
      "http://example.com",
      "http://example.com:80",
      "http://example.com",
      "http://example.com:80",
      "http://www.EXAMPLE.org",
      "http://\u4e2d\u56fd.icom.museum",
      "http://xn--fiqs8s.icom.museum",
      "http://www.EXAMPLE.org",
      "http://\u4e2d\u56fd.icom.museum",
      "http://xn--fiqs8s.icom.museum",
      "http://www.example.com",
      "http://www.example.com:80",
      "http://www.example.com:80",
      "http://example.com/path",
      "http://example.com/path"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_urls.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "HTTPS://jo%40email.com:a%20secret@m\u00fcller.de:1234/pa%20th?search=ab#anchorlink",
      "https://jo%40email.com:a%20secret@m\u00fcller.de:1234/pa%20th?search=ab#anchorlink\n    [scheme]   [  username  ] [password] [ host ][port][ path ] [ query ] [fragment]\n               [       userinfo        ] [   netloc   ][    raw_path    ]\n\n    Note that:\n\n    * `url.scheme` is normalized to always be lowercased.\n\n    * `url.host` is normalized to always be lowercased. Internationalized domain\n      names are represented in unicode, without IDNA encoding applied. For instance:\n\n      url = httpx.URL(",
      "https://[::ffff:192.168.0.1]",
      "https://[::ffff:192.168.0.1]",
      "https://example.com/pa%20th",
      "https://example.com/?filter=some%20search%20terms",
      "https://www.example.com",
      "https://jo%40email.com:a%20secret@www.example.com",
      "https://www.example.com/test",
      "https://www.example.com/new/path",
      "https://github.com/encode/httpx/issues/2536 and\n        https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_urls.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "jo@email.com",
      "jo@email.com",
      "jo@gmail.com",
      "a%20secret@www.example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_urls.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.1",
      "192.168.0.1",
      "192.168.0.1",
      "192.168.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_urls.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://.../back.jpeg>;",
      "http://.../back.jpeg",
      "http://{hostname}",
      "http://example.com",
      "http://example.com",
      "http://example.com",
      "http://example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link\n    The generic syntax of those is:\n    Link: < uri-reference >; param1=value1; param2=",
      "https://peps.python.org/pep-0594/#cgi\n    msg = email.message.Message()\n    msg[",
      "https://curl.haxx.se/libcurl/c/CURLOPT_NOPROXY.html for details\n        # on how names in `NO_PROXY` are handled.\n        if hostname == ",
      "https://example.com",
      "https://example.com",
      "https://example.com",
      "https://other.com",
      "https://example.com",
      "https://other.com",
      "https://example.com:1234",
      "https://example.com:1234",
      "https://example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_utils.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pallets/cachelib>`_\n    -   `python-memcached <https://pypi.org/project/python-memcached/>`_\n\n    (Unfortunately the django cache interface is not compatible because it\n    does not support storing binary data, only text. You can however pass\n    the underlying cache client to the bytecode cache which is available\n    as `django.core.cache.cache._client`.)\n\n    The minimal interface for the client passed to the constructor is this:\n\n    .. class:: MinimalClientInterface\n\n        .. method:: set(key, value[, timeout])\n\n            Stores the bytecode in the cache.  `value` is a string and\n            `timeout` the timeout of the key.  If timeout is not provided\n            a default timeout or no timeout should be assumed, if it"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jinja2\\bccache.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue1692335 Exceptions that take\n        # multiple required arguments have problems with pickling.\n        # Without this, raises TypeError: __init__() missing 1 required\n        # positional argument: "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jinja2\\exceptions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://``, ``https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param value: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param nofollow: Add the ``rel=nofollow`` attribute to links.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior. Defaults to\n        ``env.policies["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jinja2\\filters.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://html.spec.whatwg.org/#attribute-name-state\n_attr_key_re = re.compile(r",
      "https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param value: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param nofollow: Add the ``rel=nofollow`` attribute to links.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior. Defaults to\n        ``env.policies[",
      "https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n\n    .. versionchanged:: 2.8\n       The ``target`` parameter was added.\n    ",
      "https://docs.python.org/library/stdtypes.html\n        #printf-style-string-formatting\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jinja2\\filters.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "address@example.com",
      "copy@example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jinja2\\filters.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://``, ``https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param text: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior.\n\n    .. versionchanged:: 3.0\n        The ``extra_schemes`` parameter was added.\n\n    .. versionchanged:: 3.0\n        Generate ``https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jinja2\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param text: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior.\n\n    .. versionchanged:: 3.0\n        The ``extra_schemes`` parameter was added.\n\n    .. versionchanged:: 3.0\n        Generate ``https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n    ",
      "https://{middle}"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jinja2\\utils.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "address@example.com",
      "copy@example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\jinja2\\utils.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ast.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nfrom mako import util\n\n_cache_plugins = util.PluginLoader("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\cache.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\nfrom argparse import ArgumentParser\nfrom os.path import dirname\nfrom os.path import isfile\nimport sys\n\nfrom mako import exceptions\nfrom mako.lookup import TemplateLookup\nfrom mako.template import Template\n\n\ndef varsplit(var):\n    if "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\cmd.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\codegen.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nimport collections\nfrom importlib import metadata as importlib_metadata\nfrom importlib import util\nimport inspect\nimport sys\n\nwin32 = sys.platform.startswith("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\compat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\exceptions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n\nimport codecs\nfrom html.entities import codepoint2name\nfrom html.entities import name2codepoint\nimport re\nfrom urllib.parse import quote_plus\n\nimport markupsafe\n\nhtml_escape = markupsafe.escape\n\nxml_escapes = {\n    ",
      "http://www.w3.org/TR/2000/REC-xml-20001006#NT-EntityRef\n    __characterrefs = re.compile(\n        r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\filters.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\lexer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nimport os\nimport posixpath\nimport re\nimport stat\nimport threading\n\nfrom mako import exceptions\nfrom mako import util\nfrom mako.template import Template\n\n\nclass TemplateCollection:\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\lookup.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\parsetree.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\pygen.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\pyparser.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\runtime.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\template.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\nfrom ast import parse\nimport codecs\nimport collections\nimport operator\nimport os\nimport re\nimport timeit\n\nfrom .compat import importlib_metadata_get\n\n\ndef update_wrapper(decorated, fn):\n    decorated.__wrapped__ = fn\n    decorated.__name__ = fn.__name__\n    return decorated\n\n\nclass PluginLoader:\n    def __init__(self, group):\n        self.group = group\n        self.impls = {}\n\n    def load(self, name):\n        if name in self.impls:\n            return self.impls[name]()\n\n        for impl in importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n\n        from mako import exceptions\n\n        raise exceptions.RuntimeException(\n            ",
      "http://docs.python.org/ref/encodings.html\n\n    The ``fp`` argument should be a seekable file object in binary mode.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\util.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\_ast_util.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n\n__version__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/encode/httpx/blob/3ba5fe0d7ac70222590e759c31442b1cab263791/httpx/_config.py#L366\n        HTTPX_DEFAULT_TIMEOUT = Timeout(5.0)\n\n\nclass PageInfo:\n    ",
      "https://github.com/microsoft/pyright/issues/3464\n        page = cast(\n            AsyncPageT,\n            await self,  # type: ignore\n        )\n        async for item in page:\n            yield item\n\n\nclass BaseAsyncPage(BasePage[_T], Generic[_T]):\n    _client: AsyncAPIClient = pydantic.PrivateAttr()\n\n    def _set_private_attributes(\n        self,\n        model: Type[_T],\n        client: AsyncAPIClient,\n        options: FinalRequestOptions,\n    ) -> None:\n        self._model = model\n        self._client = client\n        self._options = options\n\n    async def __aiter__(self) -> AsyncIterator[_T]:\n        async for page in self.iter_pages():\n            for item in page._get_page_items():\n                yield item\n\n    async def iter_pages(self: AsyncPageT) -> AsyncIterator[AsyncPageT]:\n        page = self\n        while True:\n            yield page\n            if page.has_next_page():\n                page = await page.get_next_page()\n            else:\n                return\n\n    async def get_next_page(self: AsyncPageT) -> AsyncPageT:\n        info = self.next_page_info()\n        if not info:\n            raise RuntimeError(\n                ",
      "https://www.python-httpx.org/advanced/clients/#multipart-file-encoding\n            if json_data:\n                if not is_dict(json_data):\n                    raise TypeError(\n                        f",
      "https://github.com/encode/httpx/discussions/2399#discussioncomment-3814186\n            if not files:\n                files = cast(HttpxRequestFiles, ForceMultipartDict())\n\n        # TODO: report this error to httpx\n        return self._client.build_request(  # pyright: ignore[reportUnknownMemberType]\n            headers=headers,\n            timeout=self.timeout if isinstance(options.timeout, NotGiven) else options.timeout,\n            method=options.method,\n            url=self._prepare_url(options.url),\n            # the `Query` type that we use is incompatible with qs",
      "https://github.com/microsoft/pyright/issues/3526#event-6715453066\n            params=self.qs.stringify(cast(Mapping[str, Any], params)) if params else None,\n            json=json_data,\n            files=files,\n            **kwargs,\n        )\n\n    def _serialize_multipartform(self, data: Mapping[object, object]) -> dict[str, object]:\n        items = self.qs.stringify_items(\n            # TODO: type ignore is required as stringify_items is well typed but we can",
      "https://github.com/python/cpython/issues/88476\n        return platform_headers(self._version, platform=self._platform)\n\n    def _parse_retry_after_header(self, response_headers: Optional[httpx.Headers] = None) -> float | None:\n        ",
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        See also  https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax\n        ",
      "https://distro.readthedocs.io/en/latest/#distro.id\n        distro_id = distro.id()\n        if distro_id == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_base_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python-httpx.org/api/#client) for more details.\n        http_client: httpx.Client | None = None,\n        # Enable or disable schema validation for data returned by the API.\n        # When enabled an error APIResponseValidationError is raised\n        # if the API responds with invalid data for the expected schema.\n        #\n        # This parameter may be removed or changed in the future.\n        # If you rely on this feature, please open a GitHub issue\n        # outlining your use-case to help us decide if it should be\n        # part of our public interface in the future.\n        _strict_response_validation: bool = False,\n    ) -> None:\n        ",
      "https://api.openai.com/v1",
      "https://www.python-httpx.org/api/#asyncclient) for more details.\n        http_client: httpx.AsyncClient | None = None,\n        # Enable or disable schema validation for data returned by the API.\n        # When enabled an error APIResponseValidationError is raised\n        # if the API responds with invalid data for the expected schema.\n        #\n        # This parameter may be removed or changed in the future.\n        # If you rely on this feature, please open a GitHub issue\n        # outlining your use-case to help us decide if it should be\n        # part of our public interface in the future.\n        _strict_response_validation: bool = False,\n    ) -> None:\n        ",
      "https://api.openai.com/v1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/openai/openai-python/tree/main#file-uploads"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_files.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/samuelcolvin/pydantic/issues/1168#issuecomment-817742836.\n    @classmethod\n    @override\n    def construct(\n        cls: Type[ModelT],\n        _fields_set: set[str] | None = None,\n        **values: object,\n    ) -> ModelT:\n        m = cls.__new__(cls)\n        fields_values: dict[str, object] = {}\n\n        config = get_model_config(cls)\n        populate_by_name = (\n            config.allow_population_by_field_name\n            if isinstance(config, _ConfigProtocol)\n            else config.get(",
      "https://docs.pydantic.dev/2.4/concepts/serialization/#modelmodel_dump\n\n            Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\n            Args:\n                mode: The mode in which `to_python` should run.\n                    If mode is ",
      "https://docs.pydantic.dev/2.4/concepts/serialization/#modelmodel_dump_json\n\n            Generates a JSON representation of the model using Pydantic"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_models.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/microsoft/pyright/issues/3555\nData = Union[PrimitiveData, List[Any], Tuple[Any], "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_qs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/florimondmanca/httpx-sse/blob/master/src/httpx_sse/_decoders.py\nfrom __future__ import annotations\n\nimport json\nimport inspect\nfrom types import TracebackType\nfrom typing import TYPE_CHECKING, Any, Generic, TypeVar, Iterator, AsyncIterator, cast\nfrom typing_extensions import Self, Protocol, TypeGuard, override, get_origin, runtime_checkable\n\nimport httpx\n\nfrom ._utils import is_mapping, extract_type_var_from_base\nfrom ._exceptions import APIError\n\nif TYPE_CHECKING:\n    from ._client import OpenAI, AsyncOpenAI\n\n\n_T = TypeVar(",
      "https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation  # noqa: E501\n\n        if not line:\n            if not self._event and not self._data and not self._last_event_id and self._retry is None:\n                return None\n\n            sse = ServerSentEvent(\n                event=self._event,\n                data="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_streaming.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic/blob/32ea570bf96e84234d2992e1ddf40ab8a565925a/pydantic/main.py#L49\nIncEx: TypeAlias = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/7498.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://fishshell.com/>`_  like auto-suggestion.\n\nWhile a user types input in a certain buffer, suggestions are generated\n(asynchronously.) Usually, they are displayed after the input. When the cursor\npresses the right arrow and the cursor is at the end of the input, the\nsuggestion will be inserted.\n\nIf you want the auto suggestions to be asynchronous (in a background thread),\nbecause they take too much time, and could potentially block the event loop,\nthen wrap the :class:`.AutoSuggest` instance into a\n:class:`.ThreadedAutoSuggest`.\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\auto_suggest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/ipython/ipython/issues/9658)\n                            completions[:] = [\n                                c.new_completion_from_position(len(common_part))\n                                for c in completions\n                            ]\n\n                            self._set_completions(completions=completions)\n                        else:\n                            self.complete_state = None\n                    else:\n                        # When we were asked to insert the "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\buffer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/ipython/ipython/pull/13501/files\n    _NEVER_CHANGE = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\cursor_shapes.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms682119(v=vs.85).aspx\n    ",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms684166(v=vs.85).aspx\n    ",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms684239(v=vs.85).aspx\n    ",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms687093(v=vs.85).aspx\n    ",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms684213(v=vs.85).aspx\n    ",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms683149(v=vs.85).aspx\n    ",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms683499(v=vs.85).aspx\n    ",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/aa379560(v=vs.85).aspx\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\win32_types.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://mail.python.org/pipermail/python-dev/2012-June/120787.html.\n    ",
      "http://mail.python.org/pipermail/python-dev/2012-June/120787.html.\n    ",
      "http://goo.gl/zeJZl.\n\n    >>> bytes2human(10000)\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1948\n                pass\n        return ret\n\n    def cache_activate(proc):\n        ",
      "https://github.com/giampaolo/psutil/issues/2050\n# On Python 2 this also speeds up the reading of big files:\n# (namely /proc/{pid}/smaps and /proc/net/*):\n# https://github.com/giampaolo/psutil/issues/708\nFILE_READ_BUFFER_SIZE = 32 * 1024\n\n\ndef open_binary(fname):\n    return open(fname, ",
      "https://github.com/giampaolo/psutil/issues/675\n    # https://github.com/giampaolo/psutil/pull/733\n    fobj = open(\n        fname,\n        buffering=FILE_READ_BUFFER_SIZE,\n        encoding=ENCODING,\n        errors=ENCODING_ERRS,\n    )\n    try:\n        # Dictates per-line read(2) buffer size. Defaults is 8k. See:\n        # https://github.com/giampaolo/psutil/issues/2050#issuecomment-1013387546\n        fobj._CHUNK_SIZE = FILE_READ_BUFFER_SIZE\n    except AttributeError:\n        pass\n    except Exception:\n        fobj.close()\n        raise\n\n    return fobj\n\n\ndef cat(fname, fallback=_DEFAULT, _open=open_text):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_common.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://code.activestate.com/recipes/578078\n# Credit: Raymond Hettinger\ntry:\n    from functools import lru_cache\nexcept ImportError:\n    try:\n        from threading import RLock\n    except ImportError:\n        from dummy_threading import RLock\n\n    _CacheInfo = collections.namedtuple(\n        ",
      "http://docs.python.org/3/library/functools.html#functools.lru_cache.\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/PythonCharmers/python-future/blob/exceptions/\n    #     src/future/types/exceptions/pep3151.py\n    import platform\n\n    def _instance_checking_exception(base_exception=Exception):\n        def wrapped(instance_checker):\n            class TemporaryClass(base_exception):\n                def __init__(self, *args, **kwargs):\n                    if len(args) == 1 and isinstance(args[0], TemporaryClass):\n                        unwrap_me = args[0]\n                        for attr in dir(unwrap_me):\n                            if not attr.startswith(",
      "https://github.com/giampaolo/psutil/issues/1659"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_compat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.eecs.harvard.edu/~margo/cs161/videos/proc.h.txt\n        # OpenBSD has SRUN and SONPROC: SRUN indicates that a process\n        # is runnable but *not* yet running, i.e. is on a run queue.\n        # SONPROC indicates that the process is actually executing on\n        # a CPU, i.e. it is no longer on a run queue.\n        # As such we",
      "http://manpages.ubuntu.com/manpages/precise/man4/smp.4freebsd.html\n        # We may get None in case "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_psbsd.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/htop-dev/htop/blob/e7f447b/netbsd/NetBSDProcessList.c#L162  # noqa\n        # https://github.com/zabbix/zabbix/blob/af5e0f8/src/libs/zbxsysinfo/netbsd/memory.c#L135  # noqa\n        used = active + wired\n        avail = total - used\n    else:\n        total, free, active, inactive, wired, cached, buffers, shared = mem\n        # matches freebsd-memory CLI:\n        # * https://people.freebsd.org/~rse/dist/freebsd-memory\n        # * https://www.cyberciti.biz/files/scripts/freebsd-memory.pl.txt\n        # matches zabbix:\n        # * https://github.com/zabbix/zabbix/blob/af5e0f8/src/libs/zbxsysinfo/freebsd/memory.c#L143  # noqa\n        avail = inactive + cached + free\n        used = active + wired + cached\n\n    percent = usage_percent((total - avail), total, round_=1)\n    return svmem(\n        total,\n        avail,\n        percent,\n        used,\n        free,\n        active,\n        inactive,\n        buffers,\n        cached,\n        shared,\n        wired,\n    )\n\n\ndef swap_memory():\n    ",
      "https://github.com/giampaolo/psutil/issues/226\n    # If num cpus > 1, on first call we return single cpu times to avoid a\n    # crash at psutil import time.\n    # Next calls will fail with NotImplementedError\n    def per_cpu_times():\n        ",
      "https://github.com/giampaolo/psutil/issues/906.\n    ",
      "https://github.com/giampaolo/psutil/issues/1279\n            if err.errno != errno.ENODEV:\n                raise\n        else:\n            if hasattr(_common, ",
      "https://github.com/giampaolo/psutil/issues/1074\n            return None\n        power_plugged = power_plugged == 1\n        if power_plugged:\n            secsleft = _common.POWER_TIME_UNLIMITED\n        elif minsleft == -1:\n            secsleft = _common.POWER_TIME_UNKNOWN\n        else:\n            secsleft = minsleft * 60\n        return _common.sbattery(percent, secsleft, power_plugged)\n\n    def sensors_temperatures():\n        ",
      "https://chromium.googlesource.com/chromium/src/base/+/\n            #     master/base_paths_posix.cc\n            # We try our best guess by using which against the first\n            # cmdline arg (may return None).\n            cmdline = self.cmdline()\n            if cmdline:\n                return which(cmdline[0]) or ",
      "https://github.com/giampaolo/psutil/issues/586\n            allcpus = tuple(range(len(per_cpu_times())))\n            for cpu in cpus:\n                if cpu not in allcpus:\n                    raise ValueError(\n                        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_psbsd.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://linux.die.net/man/2/ioprio_get\nif enum is None:\n    IOPRIO_CLASS_NONE = 0\n    IOPRIO_CLASS_RT = 1\n    IOPRIO_CLASS_BE = 2\n    IOPRIO_CLASS_IDLE = 3\nelse:\n\n    class IOPriority(enum.IntEnum):\n        IOPRIO_CLASS_NONE = 0\n        IOPRIO_CLASS_RT = 1\n        IOPRIO_CLASS_BE = 2\n        IOPRIO_CLASS_IDLE = 3\n\n    globals().update(IOPriority.__members__)\n\n# See:\n# https://github.com/torvalds/linux/blame/master/fs/proc/array.c\n# ...and (TASK_* constants):\n# https://github.com/torvalds/linux/blob/master/include/linux/sched.h\nPROC_STATUSES = {\n    ",
      "http://askubuntu.com/a/369589\n    #   http://unix.stackexchange.com/a/65852/168884\n    # - MemAvailable has been introduced in kernel 3.14\n    try:\n        avail = mems[b",
      "http://serverfault.com/a/417946\n    ",
      "http://linuxdevcenter.com/pub/a/linux/2000/11/16/LinuxAdmin.html\n        ",
      "http://goo.gl/fmebo.\n\n            /proc/{PID}/smaps does not exist on kernels < 2.6.14 or if\n            CONFIG_MMU kernel configuration option is not enabled.\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_pslinux.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/a/38136179/376587\n# * https://lists.gt.net/linux/kernel/2241060\n# * https://github.com/giampaolo/psutil/issues/1305\n# * https://github.com/torvalds/linux/blob/\n#     4f671fe2f9523a1ea206f63fe60a7c7b3a56d5c7/include/linux/bio.h#L99\n# * https://lkml.org/lkml/2015/8/17/234\nDISK_SECTOR_SIZE = 512\n\nif enum is None:\n    AF_LINK = socket.AF_PACKET\nelse:\n    AddressFamily = enum.IntEnum(\n        ",
      "https://github.com/torvalds/linux/blame/master/fs/proc/array.c\n# ...and (TASK_* constants):\n# https://github.com/torvalds/linux/blob/master/include/linux/sched.h\nPROC_STATUSES = {\n    ",
      "https://github.com/torvalds/linux/blob/master/include/net/tcp_states.h\nTCP_STATUSES = {\n    ",
      "https://github.com/giampaolo/psutil/issues/717\n    path = path.split(",
      "https://github.com/sysstat/sysstat/blob/\n    #     97912938cd476645b267280069e83b1c8dc0e1c7/common.c#L208\n    # Some devices may have a slash in their name (e.g. cciss/c0d0...).\n    name = name.replace(",
      "https://blog.famzah.net/2014/09/24/.\n\n    This code reimplements the algorithm outlined here:\n    https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/\n        commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773\n\n    We use this function also when ",
      "https://github.com/giampaolo/psutil/issues/1915).\n    In that case this routine matches ",
      "https://gitlab.com/procps-ng/procps/issues/42\n    * https://github.com/famzah/linux-memavailable-procfs/issues/2\n    ",
      "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/\n    #     commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773\n    # ...long ago ",
      "https://gitlab.com/procps-ng/procps/blob/\n        24fd2605c51fccc375ab0287cec33aa767f06718/proc/sysinfo.c#L778-791\n    The returned values are supposed to match both ",
      "https://github.com/giampaolo/psutil/issues/1010\n        buffers = 0\n        missing_fields.append(",
      "https://gitlab.com/procps-ng/procps/commit/\n        #     05d751c4f076a2f0118b914c5e51cfbb4762ad8e\n        cached += mems.get(b",
      "https://github.com/giampaolo/psutil/issues/1915\n            # In this case ",
      "https://gitlab.com/procps-ng/procps/blob/\n        #     24fd2605c51fccc375ab0287cec33aa767f06718/proc/sysinfo.c#L764\n        avail = free\n\n    percent = usage_percent((total - avail), total, round_=1)\n\n    # Warn about missing metrics which are set to 0.\n    if missing_fields:\n        msg = ",
      "https://github.com/giampaolo/psutil/issues/1015\n    try:\n        total = mems[b",
      "https://github.com/giampaolo/psutil/issues/722\n        msg = (\n            ",
      "https://github.com/giampaolo/psutil/issues/313\n                msg = ",
      "https://github.com/giampaolo/psutil/issues/200\n        # try to parse /proc/stat as a last resort\n        if num == 0:\n            search = re.compile(r",
      "https://www.kernel.org/doc/Documentation/admin-guide/cputopology.rst\n    # https://github.com/giampaolo/psutil/pull/1727#issuecomment-707624964\n    # https://lkml.org/lkml/2019/2/26/41\n    p1 = ",
      "https://github.com/giampaolo/psutil/issues/1851\n                curr = cpuinfo_freqs[i] * 1000\n            else:\n                curr = bcat(pjoin(path, ",
      "https://github.com/giampaolo/psutil/issues/1071\n                curr = bcat(pjoin(path, ",
      "https://github.com/giampaolo/psutil/issues/201\n            if LITTLE_ENDIAN:\n                ip = socket.inet_ntop(family, base64.b16decode(ip)[::-1])\n            else:\n                ip = socket.inet_ntop(family, base64.b16decode(ip))\n        else:  # IPv6\n            ip = base64.b16decode(ip)\n            try:\n                # see: https://github.com/giampaolo/psutil/issues/201\n                if LITTLE_ENDIAN:\n                    ip = socket.inet_ntop(\n                        socket.AF_INET6,\n                        struct.pack(",
      "https://github.com/giampaolo/psutil/issues/623\n                if not supports_ipv6():\n                    raise _Ipv6UnsupportedError\n                else:\n                    raise\n        return _common.addr(ip, port)\n\n    @staticmethod\n    def process_inet(file, family, type_, inodes, filter_pid=None):\n        ",
      "https://github.com/giampaolo/psutil/issues/766\n                        continue\n                    raise RuntimeError(\n                        ",
      "https://serverfault.com/questions/252723/\n                        raddr = ",
      "https://github.com/giampaolo/psutil/issues/1279\n            if err.errno != errno.ENODEV:\n                raise\n            else:\n                debug(err)\n        else:\n            output_flags = ",
      "https://www.kernel.org/doc/Documentation/iostats.txt\n        # https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats\n        with open_text(",
      "https://github.com/giampaolo/psutil/pull/1313\n            continue\n\n        rbytes *= DISK_SECTOR_SIZE\n        wbytes *= DISK_SECTOR_SIZE\n        retdict[name] = (reads, writes, rbytes, wbytes, rtime, wtime,\n                         reads_merged, writes_merged, busy_time)\n        # fmt: on\n\n    return retdict\n\n\nclass RootFsDeviceFinder:\n    ",
      "https://bootlin.com/blog/find-root-device/\n    https://www.systutorials.com/how-to-find-the-disk-where-root-is-on-in-bash-on-linux/.\n    ",
      "https://github.com/giampaolo/psutil/issues/1307\n    if procfs_path == ",
      "https://github.com/giampaolo/psutil/issues/971\n    # https://github.com/nicolargo/glances/issues/1060\n    basenames.extend(glob.glob(",
      "https://github.com/giampaolo/psutil/issues/1708\n    # https://github.com/giampaolo/psutil/pull/1648\n    basenames2 = glob.glob(\n        ",
      "https://github.com/giampaolo/psutil/issues/1009\n            # https://github.com/giampaolo/psutil/issues/1101\n            # https://github.com/giampaolo/psutil/issues/1129\n            # https://github.com/giampaolo/psutil/issues/1245\n            # https://github.com/giampaolo/psutil/issues/1323\n            continue\n\n        high = bcat(base + ",
      "https://github.com/giampaolo/psutil/issues/971\n        basenames = glob.glob(",
      "https://github.com/giampaolo/psutil/issues/966.\n    ",
      "https://github.com/giampaolo/psutil/issues/1238\n    root = os.path.join(POWER_SUPPLY_PATH, sorted(bats)[0])\n\n    # Base metrics.\n    energy_now = multi_bcat(root + ",
      "https://github.com/thialfihar/dotfiles/blob/\n    #     013937745fd9050c30146290e8f963d65c0179e6/bin/battery.py#L55\n    if power_plugged:\n        secsleft = _common.POWER_TIME_UNLIMITED\n    elif energy_now is not None and power_now is not None:\n        try:\n            secsleft = int(energy_now / power_now * 3600)\n        except ZeroDivisionError:\n            secsleft = _common.POWER_TIME_UNKNOWN\n    elif time_to_empty is not None:\n        secsleft = int(time_to_empty * 60)\n        if secsleft < 0:\n            secsleft = _common.POWER_TIME_UNKNOWN\n    else:\n        secsleft = _common.POWER_TIME_UNKNOWN\n\n    return _common.sbattery(percent, secsleft, power_plugged)\n\n\n# =====================================================================\n# --- other system functions\n# =====================================================================\n\n\ndef users():\n    ",
      "https://github.com/giampaolo/psutil/issues/687\n        try:\n            # Note: already checked that this is faster than using a\n            # regular expr. Also (a lot) faster than doing\n            # ",
      "https://github.com/giampaolo/psutil/issues/1179\n        sep = ",
      "https://github.com/giampaolo/psutil/\n        # issues/1179#issuecomment-552984549\n        if sep == ",
      "https://github.com/giampaolo/psutil/issues/1004\n                    line = line.strip()\n                    if line:\n                        try:\n                            name, value = line.split(b",
      "https://github.com/giampaolo/psutil/issues/1004\n                            continue\n                        else:\n                            fields[name] = int(value)\n            if not fields:\n                raise RuntimeError(",
      "https://github.com/giampaolo/psutil/issues/956\n            data = self._read_status_file()\n            match = _re.findall(data)\n            if match:\n                return list(range(int(match[0][0]), int(match[0][1]) + 1))\n            else:\n                return list(range(len(per_cpu_times())))\n\n        @wrap_exceptions\n        def cpu_affinity_set(self, cpus):\n            try:\n                cext.proc_cpu_affinity_set(self.pid, cpus)\n            except (OSError, ValueError) as err:\n                if isinstance(err, ValueError) or err.errno == errno.EINVAL:\n                    eligible_cpus = self._get_eligible_cpus()\n                    all_cpus = tuple(range(len(per_cpu_times())))\n                    for cpu in cpus:\n                        if cpu not in all_cpus:\n                            raise ValueError(\n                                ",
      "https://travis-ci.org/giampaolo/psutil/jobs/51368273\n                    self._raise_if_zombie()\n                raise\n\n    @wrap_exceptions\n    def status(self):\n        letter = self._parse_stat_file()["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_pslinux.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "10.0.0.5",
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_pslinux.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/zabbix/zabbix/blob/trunk/src/libs/zbxsysinfo/\n    #     osx/memory.c\n    # Also see: https://github.com/giampaolo/psutil/issues/1277\n    avail = inactive + free\n    used = active + wired\n    # This is NOT how Zabbix calculates free mem but it matches ",
      "https://arstechnica.com/civis/viewtopic.php?f=19&t=465002.\n    ",
      "https://github.com/giampaolo/psutil/issues/1279\n            if err.errno != errno.ENODEV:\n                raise\n        else:\n            if hasattr(_common, ",
      "https://travis-ci.org/giampaolo/psutil/jobs/309619941\n        try:\n            Process(0).create_time()\n            ls.insert(0, 0)\n        except NoSuchProcess:\n            pass\n        except AccessDenied:\n            ls.insert(0, 0)\n    return ls\n\n\npid_exists = _psposix.pid_exists\n\n\ndef is_zombie(pid):\n    try:\n        st = cext.proc_kinfo_oneshot(pid)[kinfo_proc_map["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_psosx.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue18695\n        try:\n            st = os.statvfs(path)\n        except UnicodeEncodeError:\n            if isinstance(path, unicode):\n                try:\n                    path = path.encode(sys.getfilesystemencoding())\n                except UnicodeEncodeError:\n                    pass\n                st = os.statvfs(path)\n            else:\n                raise\n\n    # Total space which is only available to root (unless changed\n    # at system level).\n    total = st.f_blocks * st.f_frsize\n    # Remaining free space usable by root.\n    avail_to_root = st.f_bfree * st.f_frsize\n    # Remaining free space usable by user.\n    avail_to_user = st.f_bavail * st.f_frsize\n    # Total space being used in general.\n    used = total - avail_to_root\n    if MACOS:\n        # see: https://github.com/giampaolo/psutil/pull/2152\n        used = _psutil_osx.disk_usage_used(path, used)\n    # Total space which is available to user (same as "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_psposix.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue21076\nif enum is not None and hasattr(signal, ",
      "https://linux.die.net/man/2/waitpid\n    while True:\n        try:\n            retpid, status = os.waitpid(pid, flags)\n        except InterruptedError:\n            interval = sleep(interval)\n        except ChildProcessError:\n            # This has two meanings:\n            # - PID is not a child of os.getpid() in which case\n            #   we keep polling until it",
      "https://github.com/giampaolo/psutil/issues/416\n        # - http://bugs.python.org/issue18695\n        try:\n            st = os.statvfs(path)\n        except UnicodeEncodeError:\n            if isinstance(path, unicode):\n                try:\n                    path = path.encode(sys.getfilesystemencoding())\n                except UnicodeEncodeError:\n                    pass\n                st = os.statvfs(path)\n            else:\n                raise\n\n    # Total space which is only available to root (unless changed\n    # at system level).\n    total = st.f_blocks * st.f_frsize\n    # Remaining free space usable by root.\n    avail_to_root = st.f_bfree * st.f_frsize\n    # Remaining free space usable by user.\n    avail_to_user = st.f_bavail * st.f_frsize\n    # Total space being used in general.\n    used = total - avail_to_root\n    if MACOS:\n        # see: https://github.com/giampaolo/psutil/pull/2152\n        used = _psutil_osx.disk_usage_used(path, used)\n    # Total space which is available to user (same as ",
      "https://github.com/giampaolo/psutil/issues/829#issuecomment-223750462\n    return sdiskusage(\n        total=total, used=used, free=avail_to_user, percent=usage_percent_user\n    )\n\n\n@memoize\ndef get_terminal_map():\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_psposix.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://cvs.opensolaris.org/source/xref/onnv/onnv-gate/\n    #     usr/src/cmd/swap/swap.c\n    # ...nevertheless I can",
      "http://goo.gl/55XgO\n        procfs_path = self._procfs_path\n        try:\n            return os.readlink(",
      "http://goo.gl/55XgO\n                        name = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_pssunos.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1674\n                debug(",
      "https://github.com/giampaolo/psutil/issues/1194\n        return self._proc_basic_info()[proc_info_map[",
      "https://github.com/giampaolo/psutil/issues/857\n                times = (0.0, 0.0, 0.0, 0.0)\n            else:\n                raise\n        return _common.pcputimes(*times)\n\n    @wrap_exceptions\n    def cpu_num(self):\n        return cext.proc_cpu_num(self.pid, self._procfs_path)\n\n    @wrap_exceptions\n    def terminal(self):\n        procfs_path = self._procfs_path\n        hit_enoent = False\n        tty = wrap_exceptions(self._proc_basic_info()[proc_info_map[",
      "https://github.com/giampaolo/psutil/issues/857\n                    continue\n                # ENOENT == thread gone in meantime\n                if err.errno == errno.ENOENT:\n                    hit_enoent = True\n                    continue\n                raise\n            else:\n                nt = _common.pthread(tid, utime, stime)\n                ret.append(nt)\n        if hit_enoent:\n            self._assert_alive()\n        return ret\n\n    @wrap_exceptions\n    def open_files(self):\n        retlist = []\n        hit_enoent = False\n        procfs_path = self._procfs_path\n        pathdir = ",
      "https://github.com/giampaolo/psutil/issues/857\n                return []\n            else:\n                raise\n        hit_enoent = False\n        for item in rawlist:\n            addr, addrsize, perm, name, rss, anon, locked = item\n            addr = toaddr(addr, addrsize)\n            if not name.startswith("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_pssunos.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://msdn.microsoft.com/en-us/library/ms686219(v=vs.85).aspx\n# fmt: off\n__extra__all__ = [\n    ",
      "http://pyxr.sourceforge.net/PyXR/c/python24/lib/site-packages/\n    #       win32/lib/win32serviceutil.py.html#0175\n    # - psutil is typically about ",
      "http://stackoverflow.com/questions/11973228/\n    #     with self._wrap_exceptions():\n    #         return cext.winservice_stop(self.name())\n\n\n# =====================================================================\n# --- processes\n# =====================================================================\n\n\npids = cext.pids\npid_exists = cext.pid_exists\nppid_map = cext.ppid_map  # used internally by Process.children()\n\n\ndef is_permission_err(exc):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_pswindows.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/811\n        msg = ",
      "https://msdn.microsoft.com/en-us/library/windows/desktop/\n    #     aa373232(v=vs.85).aspx\n    acline_status, flags, percent, secsleft = cext.sensors_battery()\n    power_plugged = acline_status == 1\n    no_battery = bool(flags & 128)\n    charging = bool(flags & 8)\n\n    if no_battery:\n        return None\n    if power_plugged or charging:\n        secsleft = _common.POWER_TIME_UNLIMITED\n    elif secsleft == -1:\n        secsleft = _common.POWER_TIME_UNKNOWN\n\n    return _common.sbattery(percent, secsleft, power_plugged)\n\n\n# =====================================================================\n# --- other system functions\n# =====================================================================\n\n\n_last_btime = 0\n\n\ndef boot_time():\n    ",
      "https://github.com/giampaolo/psutil/issues/1007\n    global _last_btime\n    ret = float(cext.boot_time())\n    if abs(ret - _last_btime) <= 1:\n        return _last_btime\n    else:\n        _last_btime = ret\n        return ret\n\n\ndef users():\n    ",
      "https://github.com/giampaolo/psutil/issues/875.\n    See: https://stackoverflow.com/questions/4457745#4457745.\n    ",
      "https://github.com/giampaolo/psutil/pull/1398\n            try:\n                ret = cext.proc_cmdline(self.pid, use_peb=True)\n            except OSError as err:\n                if is_permission_err(err):\n                    ret = cext.proc_cmdline(self.pid, use_peb=False)\n                else:\n                    raise\n        else:\n            ret = cext.proc_cmdline(self.pid, use_peb=True)\n        if PY3:\n            return ret\n        else:\n            return [py2_strencode(s) for s in ret]\n\n    @wrap_exceptions\n    @retry_error_partial_copy\n    def environ(self):\n        ustr = cext.proc_environ(self.pid)\n        if ustr and not PY3:\n            assert isinstance(ustr, unicode), type(ustr)\n        return parse_environ_block(py2_strencode(ustr))\n\n    def ppid(self):\n        try:\n            return ppid_map()[self.pid]\n        except KeyError:\n            raise NoSuchProcess(self.pid, self._name)\n\n    def _get_raw_meminfo(self):\n        try:\n            return cext.proc_memory_info(self.pid)\n        except OSError as err:\n            if is_permission_err(err):\n                # TODO: the C ext can probably be refactored in order\n                # to get this from cext.proc_info()\n                info = self._proc_info()\n                return (\n                    info[pinfo_map[",
      "https://github.com/giampaolo/psutil/issues/1224\n            # We",
      "https://github.com/python/cpython/blob/\n            #     be50a7b627d0aa37e08fa8e2d5568891f19903ce/\n            #     Lib/subprocess.py#L1193-L1194\n            exit_code = None\n\n        # At this point WaitForSingleObject() returned WAIT_OBJECT_0,\n        # meaning the process is gone. Stupidly there are cases where\n        # its PID may still stick around so we do a further internal\n        # polling.\n        delay = 0.0001\n        while True:\n            if not pid_exists(self.pid):\n                return exit_code\n            if stop_at and timer() >= stop_at:\n                raise TimeoutExpired(timeout, pid=self.pid, name=self._name)\n            time.sleep(delay)\n            delay = min(delay * 2, 0.04)  # incremental delay\n\n    @wrap_exceptions\n    def username(self):\n        if self.pid in (0, 4):\n            return "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_pswindows.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\Windows\\systemew\\file.txt"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\_pswindows.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://stackoverflow.com/questions/356722/\n\n        # XXX should we check creation time here rather than in\n        # Process.parent()?\n        self._raise_if_pid_reused()\n        if POSIX:\n            return self._proc.ppid()\n        else:  # pragma: no cover\n            self._ppid = self._ppid or self._proc.ppid()\n            return self._ppid\n\n    def name(self):\n        ",
      "http://stackoverflow.com/questions/1032357\n            # https://github.com/giampaolo/psutil/issues/474\n            single_cpu_percent = overall_cpus_percent * num_cpus\n            return round(single_cpu_percent, 1)\n\n    @memoize_when_activated\n    def cpu_times(self):\n        ",
      "http://unix.stackexchange.com/questions/178045\n        # https://github.com/torvalds/linux/blob/\n        #     447976ef4fd09b1be88b316d1a81553f1aa7cd07/kernel/sched/\n        #     cputime.c#L158\n        tot -= getattr(times, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/564\nif int(__version__.replace(",
      "https://github.com/giampaolo/psutil/issues/321\n        # http://stackoverflow.com/questions/356722/\n\n        # XXX should we check creation time here rather than in\n        # Process.parent()?\n        self._raise_if_pid_reused()\n        if POSIX:\n            return self._proc.ppid()\n        else:  # pragma: no cover\n            self._ppid = self._ppid or self._proc.ppid()\n            return self._ppid\n\n    def name(self):\n        ",
      "https://github.com/giampaolo/psutil/issues/692\n        if WINDOWS and self._name is not None:\n            return self._name\n        name = self._proc.name()\n        if POSIX and len(name) >= 15:\n            # On UNIX the name gets truncated to the first 15 characters.\n            # If it matches the first part of the cmdline we return that\n            # one instead because it",
      "https://github.com/giampaolo/psutil/issues/2239\n                pass\n            else:\n                if cmdline:\n                    extended_name = os.path.basename(cmdline[0])\n                    if extended_name.startswith(name):\n                        name = extended_name\n        self._name = name\n        self._proc._name = name\n        return name\n\n    def exe(self):\n        ",
      "https://github.com/giampaolo/psutil/issues/474\n            single_cpu_percent = overall_cpus_percent * num_cpus\n            return round(single_cpu_percent, 1)\n\n    @memoize_when_activated\n    def cpu_times(self):\n        ",
      "https://github.com/giampaolo/psutil/issues/193\n        self.__subproc = subprocess.Popen(*args, **kwargs)\n        self._init(self.__subproc.pid, _ignore_nsp=True)\n\n    def __dir__(self):\n        return sorted(set(dir(Popen) + dir(subprocess.Popen)))\n\n    def __enter__(self):\n        if hasattr(self.__subproc, ",
      "https://github.com/giampaolo/psutil/pull/940\n        # http://unix.stackexchange.com/questions/178045\n        # https://github.com/torvalds/linux/blob/\n        #     447976ef4fd09b1be88b316d1a81553f1aa7cd07/kernel/sched/\n        #     cputime.c#L158\n        tot -= getattr(times, ",
      "https://github.com/torvalds/linux/blob/\n    #     447976ef4fd09b1be88b316d1a81553f1aa7cd07/kernel/sched/cputime.c#L244\n    busy -= getattr(times, ",
      "https://github.com/giampaolo/psutil/issues/392\n        # https://github.com/giampaolo/psutil/issues/645\n        # https://github.com/giampaolo/psutil/issues/1210\n        # Trim negative deltas to zero to ignore decreasing fields.\n        # top does the same. Reference:\n        # https://gitlab.com/procps-ng/procps/blob/v3.3.12/top/top.c#L5063\n        field_delta = max(0, field_delta)\n        field_deltas.append(field_delta)\n    return _psplatform.scputimes(*field_deltas)\n\n\ndef cpu_percent(interval=None, percpu=False):\n    ",
      "https://github.com/giampaolo/psutil/issues/786\n            separator = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.8/concepts/alias#aliaspath-and-aliaschoices\n\n    A data class used by `validation_alias` as a convenience to create aliases.\n\n    Attributes:\n        path: A list of string or integer aliases.\n    ",
      "https://docs.pydantic.dev/2.8/concepts/alias#aliaspath-and-aliaschoices\n\n    A data class used by `validation_alias` as a convenience to create aliases.\n\n    Attributes:\n        choices: A list containing a string or `AliasPath`.\n    ",
      "https://docs.pydantic.dev/2.8/concepts/alias#using-an-aliasgenerator\n\n    A data class used by `alias_generator` as a convenience to create various aliases.\n\n    Attributes:\n        alias: A callable that takes a field name and returns an alias for it.\n        validation_alias: A callable that takes a field name and returns a validation alias for it.\n        serialization_alias: A callable that takes a field name and returns a serialization alias for it.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\aliases.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/TR/css3-color/#svg-color) specification.\n\nA few colors have multiple names referring to the sames colors, eg. `grey` and `gray` or `aqua` and `cyan`.\n\nIn these cases the _last_ color when sorted alphabetically takes preferences,\neg. `Color((0, 255, 255)).as_named() == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\color.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/latest/api/pydantic_extra_types_color/."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\color.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic/pull/6737) for details.\n    ",
      "https://github.com/pydantic/pydantic/issues/7209) for more details.\n\n    ```py\n    from pydantic import BaseModel, ConfigDict\n\n    class Model(BaseModel):\n        a: str = ",
      "https://docs.rs/regex) Rust crate,\n      which is non-backtracking and therefore more DDoS resistant, but does not support all regex features.\n    - `python-re` use the [`re`](https://docs.python.org/3/library/re.html) module,\n      which supports all regex features, but may be slower.\n\n    !!! note\n        If you use a compiled regex pattern, the python-re engine will be used regardless of this setting.\n        This is so that flags such as `re.IGNORECASE` are respected.\n\n    ```py\n    from pydantic import BaseModel, ConfigDict, Field, ValidationError\n\n    class Model(BaseModel):\n        model_config = ConfigDict(regex_engine=",
      "https://docs.pydantic.dev/2.8/concepts/config/#configuration-with-dataclass-from-the-standard-library-or-typeddict\n\n    A convenience decorator to set a [Pydantic configuration](config.md) on a `TypedDict` or a `dataclass` from the standard library.\n\n    Although the configuration can be set using the `__pydantic_config__` attribute, it does not play well with type checkers,\n    especially with `TypedDict`.\n\n    !!! example "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.8/concepts/dataclasses/\n\n    A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`,\n    but with added validation.\n\n    This function should be used similarly to `dataclasses.dataclass`.\n\n    Args:\n        _cls: The target `dataclass`.\n        init: Included for signature compatibility with `dataclasses.dataclass`, and is passed through to\n            `dataclasses.dataclass` when appropriate. If specified, must be set to `False`, as pydantic inserts its\n            own  `__init__` function.\n        repr: A boolean indicating whether to include the field in the `__repr__` output.\n        eq: Determines if a `__eq__` method should be generated for the class.\n        order: Determines if comparison magic methods should be generated, such as `__lt__`, but not `__eq__`.\n        unsafe_hash: Determines if a `__hash__` method should be included in the class, as in `dataclasses.dataclass`.\n        frozen: Determines if the generated class should be a "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\dataclasses.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://errors.pydantic.dev/{version_short()}/u/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\errors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n__all__ = ",
      "https://docs.pydantic.dev/2.8/concepts/fields\n\n    Create a field for objects that can be configured.\n\n    Used to provide extra information about a field, either for the model schema or complex validation. Some arguments\n    apply only to number fields (`int`, `float`, `Decimal`) and some apply only to `str`.\n\n    Note:\n        - Any `_Unset` objects will be replaced by the corresponding value defined in the `_DefaultValues` dictionary. If a key for the `_Unset` object is not found in the `_DefaultValues` dictionary, it will default to `None`\n\n    Args:\n        default: Default value if the field is not set.\n        default_factory: A callable to generate the default value, such as :func:`~datetime.utcnow`.\n        alias: The name to use for the attribute when validating or serializing by alias.\n            This is often used for things like converting between snake and camel case.\n        alias_priority: Priority of the alias. This affects whether an alias generator is used.\n        validation_alias: Like `alias`, but only affects validation, not serialization.\n        serialization_alias: Like `alias`, but only affects serialization, not validation.\n        title: Human-readable title.\n        field_title_generator: A callable that takes a field name and returns title for it.\n        description: Human-readable description.\n        examples: Example values for this field.\n        exclude: Whether to exclude the field from the model serialization.\n        discriminator: Field name or Discriminator for discriminating the type in a tagged union.\n        deprecated: A deprecation message, an instance of `warnings.deprecated` or the `typing_extensions.deprecated` backport,\n            or a boolean. If `True`, a default deprecation message will be emitted when accessing the field.\n        json_schema_extra: A dict or callable to provide extra JSON schema properties.\n        frozen: Whether the field is frozen. If true, attempts to change the value on an instance will raise an error.\n        validate_default: If `True`, apply validation to the default value every time you create an instance.\n            Otherwise, for performance reasons, the default value of the field is trusted and not validated.\n        repr: A boolean indicating whether to include the field in the `__repr__` output.\n        init: Whether the field should be included in the constructor of the dataclass.\n            (Only applies to dataclasses.)\n        init_var: Whether the field should _only_ be included in the constructor of the dataclass.\n            (Only applies to dataclasses.)\n        kw_only: Whether the field should be a keyword-only argument in the constructor of the dataclass.\n            (Only applies to dataclasses.)\n        coerce_numbers_to_str: Whether to enable coercion of any `Number` type to `str` (not applicable in `strict` mode).\n        strict: If `True`, strict validation is applied to the field.\n            See [Strict Mode](../concepts/strict_mode.md) for details.\n        gt: Greater than. If set, value must be greater than this. Only applicable to numbers.\n        ge: Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.\n        lt: Less than. If set, value must be less than this. Only applicable to numbers.\n        le: Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.\n        multiple_of: Value must be a multiple of this. Only applicable to numbers.\n        min_length: Minimum length for iterables.\n        max_length: Maximum length for iterables.\n        pattern: Pattern for strings (a regular expression).\n        allow_inf_nan: Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n        max_digits: Maximum number of allow digits for strings.\n        decimal_places: Maximum number of decimal places allowed for numbers.\n        union_mode: The strategy to apply when validating a union. Can be `smart` (the default), or `left_to_right`.\n            See [Union Mode](../concepts/unions.md#union-modes) for details.\n        fail_fast: If `True`, validation will stop on the first error. If `False`, all validation errors will be collected.\n            This option can be applied only to iterable types (list, tuple, set, and frozenset).\n        extra: (Deprecated) Extra fields that will be included in the JSON schema.\n\n            !!! warning Deprecated\n                The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n\n    Returns:\n        A new [`FieldInfo`][pydantic.fields.FieldInfo]. The return annotation is `Any` so `Field` can be used on\n            type-annotated fields without causing a type error.\n    ",
      "https://github.com/pydantic/pydantic-core/issues/296)",
      "https://peps.python.org/pep-0487.",
      "https://docs.pydantic.dev/2.8/concepts/models/#private-model-attributes\n\n    Indicates that an attribute is intended for private use and not handled during normal validation/serialization.\n\n    Private attributes are not validated by Pydantic, so it",
      "https://github.com/python/typing/issues/985 and linked issues\nPropertyT = typing.TypeVar(",
      "https://docs.pydantic.dev/2.8/concepts/fields#the-computed_field-decorator\n\n    Decorator to include `property` and `cached_property` when serializing models or dataclasses.\n\n    This is useful for fields that are computed from other fields, or for fields that are expensive to compute and should be cached.\n\n    ```py\n    from pydantic import BaseModel, computed_field\n\n    class Rectangle(BaseModel):\n        width: int\n        length: int\n\n        @computed_field\n        @property\n        def area(self) -> int:\n            return self.width * self.length\n\n    print(Rectangle(width=3, length=2).model_dump())\n    #> {",
      "https://github.com/python/mypy/issues/1362), for more information.\n        To avoid this error message, add `# type: ignore[misc]` to the `@computed_field` line.\n\n        [pyright](https://github.com/microsoft/pyright) supports `@computed_field` without error.\n\n    ```py\n    import random\n\n    from pydantic import BaseModel, computed_field\n\n    class Square(BaseModel):\n        width: float\n\n        @computed_field\n        def area(self) -> float:  # converted to a `property` by `computed_field`\n            return round(self.width**2, 2)\n\n        @area.setter\n        def area(self, new_area: float) -> None:\n            self.width = new_area**0.5\n\n        @computed_field(alias="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\fields.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.8/concepts/validators/#annotated-validators\n\n    A metadata class that indicates that a validation should be applied **after** the inner validation logic.\n\n    Attributes:\n        func: The validator function.\n\n    Example:\n        ```py\n        from typing_extensions import Annotated\n\n        from pydantic import AfterValidator, BaseModel, ValidationError\n\n        MyInt = Annotated[int, AfterValidator(lambda v: v + 1)]\n\n        class Model(BaseModel):\n            a: MyInt\n\n        print(Model(a=1).a)\n        #> 2\n\n        try:\n            Model(a=",
      "https://errors.pydantic.dev/2/v/int_parsing",
      "https://docs.pydantic.dev/2.8/concepts/validators/#annotated-validators\n\n    A metadata class that indicates that a validation should be applied **before** the inner validation logic.\n\n    Attributes:\n        func: The validator function.\n\n    Example:\n        ```py\n        from typing_extensions import Annotated\n\n        from pydantic import BaseModel, BeforeValidator\n\n        MyInt = Annotated[int, BeforeValidator(lambda v: v + 1)]\n\n        class Model(BaseModel):\n            a: MyInt\n\n        print(Model(a=1).a)\n        #> 2\n\n        try:\n            Model(a=",
      "https://docs.pydantic.dev/2.8/concepts/validators/#annotated-validators\n\n    A metadata class that indicates that a validation should be applied **instead** of the inner validation logic.\n\n    Attributes:\n        func: The validator function.\n\n    Example:\n        ```py\n        from typing_extensions import Annotated\n\n        from pydantic import BaseModel, PlainValidator\n\n        MyInt = Annotated[int, PlainValidator(lambda v: int(v) + 1)]\n\n        class Model(BaseModel):\n            a: MyInt\n\n        print(Model(a=",
      "https://docs.pydantic.dev/2.8/concepts/validators/#annotated-validators\n\n    A metadata class that indicates that a validation should be applied **around** the inner validation logic.\n\n    Attributes:\n        func: The validator function.\n\n    ```py\n    from datetime import datetime\n\n    from typing_extensions import Annotated\n\n    from pydantic import BaseModel, ValidationError, WrapValidator\n\n    def validate_timestamp(v, handler):\n        if v == ",
      "https://docs.pydantic.dev/2.8/concepts/validators/#field-validators\n\n    Decorate methods on the class indicating that they should be used to validate fields.\n\n    Example usage:\n    ```py\n    from typing import Any\n\n    from pydantic import (\n        BaseModel,\n        ValidationError,\n        field_validator,\n    )\n\n    class Model(BaseModel):\n        a: str\n\n        @field_validator(",
      "https://docs.pydantic.dev/2.8/concepts/validators/#model-validators\n\n    Decorate model methods for validation purposes.\n\n    Example usage:\n    ```py\n    from typing_extensions import Self\n\n    from pydantic import BaseModel, ValidationError, model_validator\n\n    class Square(BaseModel):\n        width: float\n        height: float\n\n        @model_validator(mode=",
      "https://errors.pydantic.dev/0.38.0/v/is_instance_of"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\functional_validators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.5/concepts/json_schema/\n\nThe `json_schema` module contains classes and functions to allow the way [JSON Schema](https://json-schema.org/)\nis generated to be customized.\n\nIn general you shouldn",
      "https://docs.pydantic.dev/2.8/concepts/json_schema/#customizing-the-json-schema-generation-process\n\n    A class for generating JSON schemas.\n\n    This class generates JSON schemas based on configured parameters. The default schema dialect\n    is [https://json-schema.org/draft/2020-12/schema](https://json-schema.org/draft/2020-12/schema).\n    The class uses `by_alias` to configure how fields with\n    multiple names are handled and `ref_template` to format reference names.\n\n    Attributes:\n        schema_dialect: The JSON schema dialect used to generate the schema. See\n            [Declaring a Dialect](https://json-schema.org/understanding-json-schema/reference/schema.html#id4)\n            in the JSON Schema documentation for more information about dialects.\n        ignored_warning_kinds: Warnings to ignore when generating the schema. `self.render_warning_message` will\n            do nothing if its argument `kind` is in `ignored_warning_kinds`;\n            this value can be modified on subclasses to easily control which warnings are emitted.\n        by_alias: Whether to use field aliases when generating the schema.\n        ref_template: The format string used when generating reference names.\n        core_to_json_refs: A mapping of core refs to JSON refs.\n        core_to_defs_refs: A mapping of core refs to definition refs.\n        defs_to_core_refs: A mapping of definition refs to core refs.\n        json_to_defs_refs: A mapping of JSON refs to definition refs.\n        definitions: Definitions in the schema.\n\n    Args:\n        by_alias: Whether to use field aliases in the generated schemas.\n        ref_template: The format string to use when generating reference names.\n\n    Raises:\n        JsonSchemaError: If the instance of the class is inadvertently re-used after generating a schema.\n    ",
      "https://json-schema.org/draft/2020-12/schema",
      "https://github.com/pydantic/pydantic/issues/8208\n        # TODO: improve type safety here\n        if self.mode == ",
      "https://swagger.io/docs/specification/using-ref/ for a reference about this behavior)\n        ",
      "https://docs.pydantic.dev/2.8/concepts/json_schema/#withjsonschema-annotation\n\n    Add this as an annotation on a field to override the (base) JSON schema that would be generated for that field.\n    This provides a way to set a JSON schema for types that would otherwise raise errors when producing a JSON schema,\n    such as Callable, or types that have an is-instance core schema, without needing to go so far as creating a\n    custom subclass of pydantic.json_schema.GenerateJsonSchema.\n    Note that any _modifications_ to the schema that would normally be made (such as setting the title for model fields)\n    will still be performed.\n\n    If `mode` is set this will only apply to that schema generation mode, allowing you\n    to set different json schemas for validation and serialization.\n    ",
      "https://docs.pydantic.dev/2.8/concepts/json_schema/#skipjsonschema-annotation\n\n        Add this as an annotation on a field to skip generating a JSON schema for that field.\n\n        Example:\n            ```py\n            from typing import Union\n\n            from pydantic import BaseModel\n            from pydantic.json_schema import SkipJsonSchema\n\n            from pprint import pprint\n\n\n            class Model(BaseModel):\n                a: Union[int, None] = None  # (1)!\n                b: Union[int, SkipJsonSchema[None]] = None  # (2)!\n                c: SkipJsonSchema[Union[int, None]] = None  # (3)!\n\n\n            pprint(Model.model_json_schema())\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\json_schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n__all__ = ",
      "https://docs.pydantic.dev/2.8/concepts/models/\n\n    A base class for creating Pydantic models.\n\n    Attributes:\n        __class_vars__: The names of classvars defined on the model.\n        __private_attributes__: Metadata about the private attributes of the model.\n        __signature__: The signature for instantiating the model.\n\n        __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n        __pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n        __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n        __pydantic_decorators__: Metadata containing the decorators defined on the model.\n            This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n        __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n            __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n        __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n        __pydantic_post_init__: The name of the post-init method for the model, if defined.\n        __pydantic_root_model__: Whether the model is a `RootModel`.\n        __pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n        __pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n        __pydantic_extra__: An instance attribute with the values of extra fields from validation when\n            `model_config[",
      "https://docs.pydantic.dev/2.8/concepts/serialization/#model_copy\n\n        Returns a copy of the model.\n\n        Args:\n            update: Values to change/add in the new model. Note: the data is not validated\n                before creating the new model. You should trust this data.\n            deep: Set to `True` to make a deep copy of the model.\n\n        Returns:\n            New model instance.\n        ",
      "https://docs.pydantic.dev/2.8/concepts/serialization/#modelmodel_dump\n\n        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\n        Args:\n            mode: The mode in which `to_python` should run.\n                If mode is ",
      "https://docs.pydantic.dev/2.8/concepts/serialization/#modelmodel_dump_json\n\n        Generates a JSON representation of the model using Pydantic",
      "https://docs.pydantic.dev/2.8/concepts/json/#json-parsing\n\n        Validate the given JSON data against the Pydantic model.\n\n        Args:\n            json_data: The JSON data to validate.\n            strict: Whether to enforce types strictly.\n            context: Extra variables to pass to the validator.\n\n        Returns:\n            The validated Pydantic model.\n\n        Raises:\n            ValueError: If `json_data` is not a JSON string.\n        ",
      "https://github.com/pydantic/pydantic/issues/8643\n\n        def __getattr__(self, item: str) -> Any:\n            private_attributes = object.__getattribute__(self, ",
      "https://docs.pydantic.dev/2.8/concepts/models/#dynamic-model-creation\n\n    Dynamically creates and returns a new Pydantic model, in other words, `create_model` dynamically creates a\n    subclass of [`BaseModel`][pydantic.BaseModel].\n\n    Args:\n        model_name: The name of the newly created model.\n        __config__: The configuration of the new model.\n        __doc__: The docstring of the new model.\n        __base__: The base class or classes for the new model.\n        __module__: The name of the module that the model belongs to;\n            if `None`, the value is taken from `sys._getframe(1)`\n        __validators__: A dictionary of methods that validate fields. The keys are the names of the validation methods to\n            be added to the model, and the values are the validation methods themselves. You can read more about functional\n            validators [here](https://docs.pydantic.dev/2.8/concepts/validators/#field-validators).\n        __cls_kwargs__: A dictionary of keyword arguments for class creation, such as `metaclass`.\n        __slots__: Deprecated. Should not be passed to `create_model`.\n        **field_definitions: Attributes of the new model. They should be passed in the format:\n            `<name>=(<type>, <default value>)`, `<name>=(<type>, <FieldInfo>)`, or `typing.Annotated[<type>, <FieldInfo>]`.\n            Any additional metadata in `typing.Annotated[<type>, <FieldInfo>, ...]` will be ignored.\n\n    Returns:\n        The new [model][pydantic.BaseModel].\n\n    Raises:\n        PydanticUserError: If `__base__` and `__config__` are both passed.\n    ",
      "https://docs.python.org/3/library/typing.html#typing.Annotated\n            from .fields import FieldInfo\n\n            if not isinstance(f_value, FieldInfo):\n                raise PydanticUserError(\n                    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\main.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/dataclasses.html#inheritance\n        #\n        # However, we also want fields defined in the subtype to override ones defined\n        # in the parent. We can implement this via a dict without disrupting the attr order\n        # because dicts preserve insertion order in Python 3.7+.\n        found_fields: dict[str, PydanticModelField] = {}\n        found_class_vars: dict[str, PydanticModelClassVar] = {}\n        for info in reversed(cls.info.mro[1:-1]):  # 0 is the current class, -2 is BaseModel, -1 is object\n            # if BASEMODEL_METADATA_TAG_KEY in info.metadata and BASEMODEL_METADATA_KEY not in info.metadata:\n            #     # We haven",
      "https://github.com/pydantic/pydantic/issues/5191 to hit this branch for test coverage\n                    self._api.defer()\n                else:  # pragma: no cover\n                    # I don",
      "https://github.com/pydantic/pydantic/issues/new/choose"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\mypy.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5432",
      "localhost:5432",
      "localhost:5432",
      "localhost:5432",
      "localhost:5432"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\networks.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://samuel:pass@example.com:8000/the/path/?query=here#fragment=is;this=bit`,\nthe types export the following properties:\n\n- `scheme`: the URL scheme (`http`), always set.\n- `host`: the URL host (`example.com`), always set.\n- `username`: optional username if included (`samuel`).\n- `password`: optional password if included (`pass`).\n- `port`: optional port (`8000`).\n- `path`: optional path (`/the/path/`).\n- `query`: optional URL query (for example, `GET` arguments or ",
      "http://www.example.com",
      "http://www.example.com/\n\ntry:\n    MyModel(url=",
      "http://www.example.com",
      "http://puny\u00a3code.com",
      "http://xn--punycode-eja.com/\nm2 = MyModel(url=",
      "http://exam_ple.com` as a URL, so we",
      "http://www.example.com",
      "http://www.example.com/",
      "http://www.example.com",
      "http://www.example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\networks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Punycode) (see\n[this article](https://www.xudongz.com/blog/2017/idn-phishing/) for a good description of why this is important):\n\n```py\nfrom pydantic import BaseModel, HttpUrl\n\nclass MyModel(BaseModel):\n    url: HttpUrl\n\nm1 = MyModel(url=",
      "https://www.\u0430\u0440\u0440\u04cf\u0435.com/",
      "https://www.xn--80ak6aa92e.com/\nm3 = MyModel(url=",
      "https://www.example.\u73e0\u5b9d/",
      "https://www.example.xn--pbt977c/\n```\n\n\n!!! warning ",
      "https://nats.io\n",
      "https://github.com/JoshData/python-email-validator) package:\n\n            ```bash\n            pip install email-validator\n            ```\n\n        Validate email addresses.\n\n        ```py\n        from pydantic import BaseModel, EmailStr\n\n        class Model(BaseModel):\n            email: EmailStr\n\n        print(Model(email=",
      "https://github.com/JoshData/python-email-validator) package:\n\n        ```bash\n        pip install email-validator\n        ```\n\n    Validate a name and email address combination, as specified by\n    [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4).\n\n    The `NameEmail` has two properties: `name` and `email`.\n    In case the `name` is not provided, it",
      "https://pypi.org/project/email-validator/).\n\n    Note:\n        Note that:\n\n        * Raw IP address (literal) domain parts are not allowed.\n        * `"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\networks.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "pass@example.com",
      "contact@mail.com",
      "contact@mail.com",
      "fred.bloggs@example.com",
      "fred.bloggs@example.com",
      "fred.bloggs@example.com",
      "fred.bloggs@example.com",
      "local_part@domain.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\networks.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1",
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\networks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.8/concepts/models/#rootmodel-and-custom-root-types\n\n    A Pydantic `BaseModel` for the root object of the model.\n\n    Attributes:\n        root: The root object of the model.\n        __pydantic_root_model__: Whether the model is a RootModel.\n        __pydantic_private__: Private fields in the model.\n        __pydantic_extra__: Extra fields in the model.\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\root_model.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password='password1'"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.8/concepts/strict_mode/#strict-mode-with-annotated-strict\n\n    A field metadata class to indicate that a field should be validated in strict mode.\n\n    Attributes:\n        strict: Whether to validate the field in strict mode.\n\n    Example:\n        ```python\n        from typing_extensions import Annotated\n\n        from pydantic.types import Strict\n\n        StrictBool = Annotated[bool, Strict()]\n        ```\n    ",
      "https://docs.python.org/3/library/typing.html#typing.Annotated) with\n        [`Field`][pydantic.fields.Field] instead.\n\n        This function will be **deprecated** in Pydantic 3.0.\n\n        The reason is that `conint` returns a type, which doesn",
      "https://errors.pydantic.dev/2/v/greater_than",
      "https://errors.pydantic.dev/2/v/greater_than",
      "https://errors.pydantic.dev/2/v/less_than",
      "https://errors.pydantic.dev/2/v/less_than_equal",
      "https://errors.pydantic.dev/2/v/greater_than_equal",
      "https://docs.python.org/3/library/typing.html#typing.Annotated) with\n        [`Field`][pydantic.fields.Field] instead.\n\n        This function will be **deprecated** in Pydantic 3.0.\n\n        The reason is that `confloat` returns a type, which doesn",
      "https://errors.pydantic.dev/2/v/greater_than",
      "https://errors.pydantic.dev/2/v/greater_than",
      "https://errors.pydantic.dev/2/v/less_than",
      "https://errors.pydantic.dev/2/v/less_than_equal",
      "https://errors.pydantic.dev/2/v/greater_than_equal",
      "https://docs.pydantic.dev/2.8/concepts/fields/#string-constraints\n\n    Apply constraints to `str` types.\n\n    Attributes:\n        strip_whitespace: Whether to remove leading and trailing whitespace.\n        to_upper: Whether to convert the string to uppercase.\n        to_lower: Whether to convert the string to lowercase.\n        strict: Whether to validate the string in strict mode.\n        min_length: The minimum length of the string.\n        max_length: The maximum length of the string.\n        pattern: A regex pattern that the string must match.\n    ",
      "https://docs.python.org/3/library/typing.html#typing.Annotated) with\n        [`StringConstraints`][pydantic.types.StringConstraints] instead.\n\n        This function will be **deprecated** in Pydantic 3.0.\n\n        The reason is that `constr` returns a type, which doesn",
      "https://github.com/pydantic/pydantic-core/issues/296) for more details.\n\n    Returns:\n        The wrapped list type.\n    ",
      "https://github.com/pydantic/pydantic-core/issues/296)",
      "https://docs.python.org/3/library/typing.html#typing.Annotated) with\n        [`Field`][pydantic.fields.Field] instead.\n\n        This function will be **deprecated** in Pydantic 3.0.\n\n        The reason is that `condecimal` returns a type, which doesn",
      "https://errors.pydantic.dev/2/v/greater_than",
      "https://docs.python.org/3/library/uuid.html) version.",
      "https://docs.python.org/3/library/uuid.html) that must be version 1.\n\n```py\nimport uuid\n\nfrom pydantic import UUID1, BaseModel\n\nclass Model(BaseModel):\n    uuid1: UUID1\n\nModel(uuid1=uuid.uuid1())\n```\n",
      "https://docs.python.org/3/library/uuid.html) that must be version 3.\n\n```py\nimport uuid\n\nfrom pydantic import UUID3, BaseModel\n\nclass Model(BaseModel):\n    uuid3: UUID3\n\nModel(uuid3=uuid.uuid3(uuid.NAMESPACE_DNS, ",
      "https://docs.python.org/3/library/uuid.html) that must be version 4.\n\n```py\nimport uuid\n\nfrom pydantic import UUID4, BaseModel\n\nclass Model(BaseModel):\n    uuid4: UUID4\n\nModel(uuid4=uuid.uuid4())\n```\n",
      "https://docs.python.org/3/library/uuid.html) that must be version 5.\n\n```py\nimport uuid\n\nfrom pydantic import UUID5, BaseModel\n\nclass Model(BaseModel):\n    uuid5: UUID5\n\nModel(uuid5=uuid.uuid5(uuid.NAMESPACE_DNS, ",
      "https://docs.pydantic.dev/latest/api/pydantic_extra_types_payment/#pydantic_extra_types.payment.PaymentCardNumber.",
      "https://en.wikipedia.org/wiki/Payment_card_number.",
      "https://en.wikipedia.org/wiki/Luhn_algorithm.",
      "https://en.wikipedia.org/wiki/Payment_card_number#Issuer_identification_number_(IIN).\n        ",
      "https://en.wikipedia.org/wiki/ISO/IEC_80000) we interpret `",
      "https://docs.pydantic.dev/2.8/concepts/types/#using-getpydanticschema-to-reduce-boilerplate\n\n    A convenience class for creating an annotation that provides pydantic custom type hooks.\n\n    This class is intended to eliminate the need to create a custom ",
      "https://docs.pydantic.dev/2.8/concepts/unions/#discriminated-unions-with-callable-discriminator\n\n    Provides a way to use a custom callable as the way to extract the value of a union discriminator.\n\n    This allows you to get validation behavior like you"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.8/concepts/type_adapter/\n\n    Type adapters provide a flexible way to perform validation and serialization based on a Python type.\n\n    A `TypeAdapter` instance exposes some of the functionality from `BaseModel` instance methods\n    for types that do not have such methods (such as dataclasses, primitive types, and more).\n\n    **Note:** `TypeAdapter` instances are not types, and cannot be used as type annotations for fields.\n\n    **Note:** By default, `TypeAdapter` does not respect the\n    [`defer_build=True`][pydantic.config.ConfigDict.defer_build] setting in the\n    [`model_config`][pydantic.BaseModel.model_config] or in the `TypeAdapter` constructor `config`. You need to also\n    explicitly set [`experimental_defer_build_mode=(",
      "https://github.com/python/typing/pull/1618\n    @overload\n    def __init__(\n        self,\n        type: Any,\n        *,\n        config: ConfigDict | None = ...,\n        _parent_depth: int = ...,\n        module: str | None = ...,\n    ) -> None: ...\n\n    def __init__(\n        self,\n        type: Any,\n        *,\n        config: ConfigDict | None = None,\n        _parent_depth: int = 2,\n        module: str | None = None,\n    ) -> None:\n        ",
      "https://docs.pydantic.dev/2.8/concepts/json/#json-parsing\n\n        Validate a JSON string or bytes against the model.\n\n        Args:\n            data: The JSON data to validate against the model.\n            strict: Whether to strictly check types.\n            context: Additional context to use during validation.\n\n        Returns:\n            The validated object.\n        ",
      "https://docs.pydantic.dev/2.8/concepts/json/#json-serialization\n\n        Serialize an instance of the adapted type to JSON.\n\n        Args:\n            instance: The instance to be serialized.\n            indent: Number of spaces for JSON indentation.\n            include: Fields to include.\n            exclude: Fields to exclude.\n            by_alias: Whether to use alias names for field names.\n            exclude_unset: Whether to exclude unset fields.\n            exclude_defaults: Whether to exclude fields with default values.\n            exclude_none: Whether to exclude fields with a value of `None`.\n            round_trip: Whether to serialize and deserialize the instance to ensure round-tripping.\n            warnings: How to handle serialization errors. False/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\type_adapter.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.8/concepts/validation_decorator/\n\n    Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value.\n\n    Usage may be either as a plain decorator `@validate_call` or with arguments `@validate_call(...)`.\n\n    Args:\n        func: The function to be decorated.\n        config: The configuration dictionary.\n        validate_return: Whether to validate the return value.\n\n    Returns:\n        The decorated function.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\validate_call_decorator.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://errors.pydantic.dev/{version_short()}/migration/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\warnings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/latest/migration/",
      "https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_migration.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.rs/regex) Rust\n              crate, which is non-backtracking and therefore more DDoS\n              resistant, but does not support all regex features.\n            - `python-re` use the [`re`](https://docs.python.org/3/library/re.html) module,\n              which supports all regex features, but may be slower.\n        strict: Whether the value should be a string or a value that can be converted to a string\n        coerce_numbers_to_str: Whether to enable coercion of any `Number` type to `str` (not applicable in `strict` mode).\n        ref: optional unique identifier of the schema, used to reference the schema in other places\n        metadata: Any other information you want to include with the schema, not used by pydantic-core\n        serialization: Custom serialization schema\n    ",
      "https://example.com",
      "https://example.com/\n    ```\n\n    Args:\n        max_length: The maximum length of the URL\n        allowed_schemes: The allowed URL schemes\n        host_required: Whether the URL must have a host\n        default_host: The default host to use if the URL does not have a host\n        default_port: The default port to use if the URL does not have a port\n        default_path: The default path to use if the URL does not have a path\n        strict: Whether to use strict URL parsing\n        ref: optional unique identifier of the schema, used to reference the schema in other places\n        metadata: Any other information you want to include with the schema, not used by pydantic-core\n        serialization: Custom serialization schema\n    ",
      "https://github.com/python/mypy/issues/14034 for details, in summary mypy is extremely slow to process this\n# union which kills performance not just for pydantic, but even for code using pydantic\nif not MYPY:\n    CoreSchema = Union[\n        AnySchema,\n        NoneSchema,\n        BoolSchema,\n        IntSchema,\n        FloatSchema,\n        DecimalSchema,\n        StringSchema,\n        BytesSchema,\n        DateSchema,\n        TimeSchema,\n        DatetimeSchema,\n        TimedeltaSchema,\n        LiteralSchema,\n        EnumSchema,\n        IsInstanceSchema,\n        IsSubclassSchema,\n        CallableSchema,\n        ListSchema,\n        TupleSchema,\n        SetSchema,\n        FrozenSetSchema,\n        GeneratorSchema,\n        DictSchema,\n        AfterValidatorFunctionSchema,\n        BeforeValidatorFunctionSchema,\n        WrapValidatorFunctionSchema,\n        PlainValidatorFunctionSchema,\n        WithDefaultSchema,\n        NullableSchema,\n        UnionSchema,\n        TaggedUnionSchema,\n        ChainSchema,\n        LaxOrStrictSchema,\n        JsonOrPythonSchema,\n        TypedDictSchema,\n        ModelFieldsSchema,\n        ModelSchema,\n        DataclassArgsSchema,\n        DataclassSchema,\n        ArgumentsSchema,\n        CallSchema,\n        CustomErrorSchema,\n        JsonSchema,\n        UrlSchema,\n        MultiHostUrlSchema,\n        DefinitionsSchema,\n        DefinitionReferenceSchema,\n        UuidSchema,\n    ]\nelif False:\n    CoreSchema: TypeAlias = Mapping[str, Any]\n\n\n# to update this, call `pytest -k test_core_schema_type_literal` and copy the output\nCoreSchemaType = Literal[\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic_core\\core_schema.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0",
      "127.0.0.1",
      "0.0.0.0",
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic_core\\core_schema.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "info@pythonware.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\regex\\regex.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.unicode.org/reports/tr18/#Compatibility_Properties\n\n        # Posix in Unicode.\n        chars = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\regex\\test_regex.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.1",
      "64.236.16.20",
      "66.35.250.150"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\regex\\test_regex.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "info@pythonware.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\regex\\_regex_core.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/pull/6710 for more details."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\adapters.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpbin.org/get"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/3772\n        if not 400 <= r.status_code < 500:\n            self._thread_local.num_401_calls = 1\n            return r\n\n        if self._thread_local.pos is not None:\n            # Rewind the file position indicator of the body to where\n            # it was to resend the request.\n            r.request.body.seek(self._thread_local.pos)\n        s_auth = r.headers.get("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\auth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/3578.\nimport encodings.idna  # noqa: F401\nfrom io import UnsupportedOperation\n\nfrom urllib3.exceptions import (\n    DecodeError,\n    LocationParseError,\n    ProtocolError,\n    ReadTimeoutError,\n    SSLError,\n)\nfrom urllib3.fields import RequestField\nfrom urllib3.filepost import encode_multipart_formdata\nfrom urllib3.util import parse_url\n\nfrom ._internal_utils import to_native_string, unicode_is_ascii\nfrom .auth import HTTPBasicAuth\nfrom .compat import (\n    Callable,\n    JSONDecodeError,\n    Mapping,\n    basestring,\n    builtin_str,\n    chardet,\n    cookielib,\n)\nfrom .compat import json as complexjson\nfrom .compat import urlencode, urlsplit, urlunparse\nfrom .cookies import _copy_cookie_jar, cookiejar_from_dict, get_cookie_header\nfrom .exceptions import (\n    ChunkedEncodingError,\n    ConnectionError,\n    ContentDecodingError,\n    HTTPError,\n    InvalidJSONError,\n    InvalidURL,\n)\nfrom .exceptions import JSONDecodeError as RequestsJSONDecodeError\nfrom .exceptions import MissingSchema\nfrom .exceptions import SSLError as RequestsSSLError\nfrom .exceptions import StreamConsumedError\nfrom .hooks import default_hooks\nfrom .status_codes import codes\nfrom .structures import CaseInsensitiveDict\nfrom .utils import (\n    check_header_validity,\n    get_auth_from_url,\n    guess_filename,\n    guess_json_utf,\n    iter_slices,\n    parse_header_links,\n    requote_uri,\n    stream_decode_response_unicode,\n    super_len,\n    to_key_val_list,\n)\n\n#: The set of HTTP status codes that indicate an automatically\n#: processable redirect.\nREDIRECT_STATI = (\n    codes.moved,  # 301\n    codes.found,  # 302\n    codes.other,  # 303\n    codes.temporary_redirect,  # 307\n    codes.permanent_redirect,  # 308\n)\n\nDEFAULT_REDIRECT_LIMIT = 30\nCONTENT_CHUNK_SIZE = 10 * 1024\nITER_CHUNK_SIZE = 512\n\n\nclass RequestEncodingMixin:\n    @property\n    def path_url(self):\n        ",
      "https://httpbin.org/get",
      "https://httpbin.org/get",
      "https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(",
      "https://{url}?"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\models.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://domain.tld/path/to/resource",
      "http://host.name"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\sessions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/1084\n            if resp.status_code not in (\n                codes.temporary_redirect,\n                codes.permanent_redirect,\n            ):\n                # https://github.com/psf/requests/issues/3490\n                purged_headers = (",
      "https://tools.ietf.org/html/rfc7231#section-6.4.4\n        if response.status_code == codes.see_other and method != ",
      "https://httpbin.org/get",
      "https://httpbin.org/get"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\sessions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://.../back.jpeg>; rel=back;type="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue20164 &\n                # https://github.com/psf/requests/issues/1846\n                return\n\n            if os.path.exists(loc):\n                netrc_path = loc\n                break\n\n        # Abort early if there isn",
      "https://www.ietf.org/rfc/rfc4627.txt since the charset was unset\n        return "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\utils.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\foo\\bar.txt"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\utils.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.1.1",
      "192.168.1.0",
      "192.168.1.1",
      "192.168.100.0",
      "255.255.255.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org",
      "https://httpbin.org/post",
      "https://requests.readthedocs.io>.\n\n:copyright: (c) 2017 by Kenneth Reitz.\n:license: Apache 2.0, see LICENSE for more details.\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://requests.readthedocs.io"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\__version__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "me@kennethreitz.org"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\requests\\__version__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring",
      "https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-pushing"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\api.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "debug=True"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://develop.sentry.dev/sdk/performance/span-data-conventions/\n    ",
      "https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/database.md\n    Example: my_user\n    ",
      "https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/database.md\n    Example: findAndModify, HMSET, SELECT\n    ",
      "https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/database.md\n    Example: postgresql\n    ",
      "https://github.com/open-telemetry/semantic-conventions/blob/main/docs/database/mongodb.md#attributes\n    Example: public.users; customers\n    ",
      "https://develop.sentry.dev/sdk/event-payloads/contexts/#trace-context\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\consts.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "10.1.2.80",
      "10.5.3.2"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\consts.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://develop.sentry.dev/sdk/envelopes/#data-model. In particular,\n    each envelope may have at most one Item with type "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\envelope.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.sentry.io/platforms/python/migration/1.x-to-2.x"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\hub.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://sentry.zendesk.com/hc/en-us/articles/26369339769883-Upcoming-API-Changes-to-Metrics",
      "https://develop.sentry.dev/sdk/metrics/#sets\n        if local_aggregator is not None:\n            local_value = float(added if ty == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\metrics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/3004\n        ",
      "https://github.com/python/mypy/issues/3004\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\scope.py"
  },
  {
    "pattern": "debug\\s*=\\s*True",
    "matches": [
      "debug=True"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\serializer.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:8969"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\spotlight.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:8969/stream"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\spotlight.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://develop.sentry.dev/sdk/performance/span-operations/\n        ",
      "https://develop.sentry.dev/sdk/event-payloads/span/",
      "https://develop.sentry.dev/sdk/performance/trace-origin/\n        Default ",
      "https://develop.sentry.dev/sdk/event-payloads/transaction/#transaction-annotations for more information.\n        Default ",
      "https://www.w3.org/TR/baggage/)",
      "https://develop.sentry.dev/sdk/event-payloads/transaction/#transaction-annotations\nTRANSACTION_SOURCE_CUSTOM = ",
      "https://develop.sentry.dev/sdk/event-payloads/contexts/#trace-context\n    ",
      "https://develop.sentry.dev/sdk/performance/span-operations/\n    :param description: A description of what operation is being performed within the span.\n\n        .. deprecated:: 2.15.0\n            Please use the `name` parameter, instead.\n    :param name: A string describing what operation is being performed within the span.\n    :param hub: The hub to use for this span.\n\n        .. deprecated:: 2.0.0\n            Please use the `scope` parameter, instead.\n    :param status: The span",
      "https://develop.sentry.dev/sdk/event-payloads/span/\n    :param containing_transaction: The transaction that this span belongs to.\n    :param start_timestamp: The timestamp when the span started. If omitted, the current time\n        will be used.\n    :param scope: The scope to use for this span. If not provided, we use the current scope.\n    ",
      "https://www.w3.org/TR/baggage/)\n    :param source: A string describing the source of the transaction name.\n        This will be used to determine the transaction",
      "https://develop.sentry.dev/sdk/event-payloads/transaction/#transaction-annotations\n        for more information. Default ",
      "https://stackoverflow.com/questions/52126071/decorator-with-arguments-avoid-parenthesis-when-no-arguments/52126278\n    if func:\n        return start_child_span_decorator(func)\n    else:\n        return start_child_span_decorator\n\n\n# Circular imports\n\nfrom sentry_sdk.tracing_utils import (\n    Baggage,\n    EnvironHeaders,\n    extract_sentrytrace_data,\n    has_tracing_enabled,\n    maybe_create_breadcrumbs_from_span,\n)\n\nwith warnings.catch_warnings():\n    # The code in this file which uses `LocalAggregator` is only called from the deprecated `metrics` module.\n    warnings.simplefilter("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\tracing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Base64#Decoding_Base64_without_padding for\n    # why there",
      "https://www.w3.org/TR/baggage/).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\tracing_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/getsentry/relay/blob/be12cd49a0f06ea932ed9b9f93a655de5d6ad6d1/relay-general/src/types/meta.rs#L407-L423\n    ",
      "https://develop.sentry.dev/sdk/event-payloads/exception/\n    ",
      "https://develop.sentry.dev/sdk/event-payloads/exception/\n    ",
      "https://peps.python.org/pep-0440/#appendix-b-parsing-version-strings-with-regular-expressions\n    ",
      "https://github.com/gevent/gevent/blob/83c9e2ae5b0834b8f84233760aabe82c3ba065b4/src/gevent/monkey.py#L604-L609\n            # Gevent 20.5, that doesn",
      "https://docs.sentry.io/platforms/python/contextvars/ for more information.\n    ",
      "https://docs.sentry.io/platforms/python/contextvars/ for more information.\n",
      "https://github.com/python/cpython/pull/16600\n        partial_method = getattr(func, ",
      "https://github.com/python/cpython/issues/91216\n            # and\n            # https://github.com/python/importlib_metadata/issues/371\n            if name is not None:\n                normalized_name = _normalize_module_name(name)\n                if dist.version is not None and normalized_name not in yielded:\n                    yield normalized_name, dist.version\n                    yielded.add(normalized_name)\n\n    except ImportError:\n        # < py3.8\n        try:\n            import pkg_resources\n        except ImportError:\n            return\n\n        for info in pkg_resources.working_set:\n            yield _normalize_module_name(info.key), info.version\n\n\ndef _normalize_module_name(name):\n    # type: (str) -> str\n    return name.lower()\n\n\ndef _get_installed_modules():\n    # type: () -> Dict[str, str]\n    global _installed_modules\n    if _installed_modules is None:\n        _installed_modules = dict(_generate_installed_modules())\n    return _installed_modules\n\n\ndef package_version(package):\n    # type: (str) -> Optional[Tuple[int, ...]]\n    installed_packages = _get_installed_modules()\n    version = installed_packages.get(package)\n    if version is None:\n        return None\n\n    return parse_version(version)\n\n\ndef reraise(tp, value, tb=None):\n    # type: (Optional[Type[BaseException]], Optional[BaseException], Optional[Any]) -> NoReturn\n    assert value is not None\n    if value.__traceback__ is not tb:\n        raise value.with_traceback(tb)\n    raise value\n\n\ndef _no_op(*_a, **_k):\n    # type: (*Any, **Any) -> None\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\utils.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "pwd@example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/blob/v3.6.12/Lib/queue.py\n\n\nSee also\nhttps://codewithoutrules.com/2017/08/16/concurrency-python/\nhttps://bugs.python.org/issue14976\nhttps://github.com/sqlalchemy/sqlalchemy/blob/4eb747b61f0c1b1c25bdee3856d7195d10a0c227/lib/sqlalchemy/queue.py#L1\n\nWe also vendor the code to evade eventlet",
      "https://github.com/getsentry/sentry-python/pull/484\n\n\nCopyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 Python Software Foundation;\n\nAll Rights Reserved\n\n\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n--------------------------------------------\n\n1. This LICENSE AGREEMENT is between the Python Software Foundation\n("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\_queue.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/5710\n    NotImplementedType = Any\n\n    EventDataCategory = Literal[\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pallets/werkzeug/blob/0.14.1/werkzeug/datastructures.py#L1361\n#\n# We need this function because Django does not give us a ",
      "https://github.com/pallets/werkzeug/blob/1.0.1/src/werkzeug/wsgi.py#L145\n#\ndef get_host(environ, use_x_forwarded_for=False):\n    # type: (Dict[str, str], bool) -> str\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\_werkzeug.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://sqlalche.me/e/{_version_token}/{self.code})",
      "https://sqlalche.me/e/b8d9)"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\exc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\inspection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\log.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "vinay_sajip@yahoo.co.uk"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\log.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\nfrom . import util as _util\nfrom .engine import AdaptedConnection as AdaptedConnection\nfrom .engine import BaseRow as BaseRow\nfrom .engine import BindTyping as BindTyping\nfrom .engine import ChunkedIteratorResult as ChunkedIteratorResult\nfrom .engine import Compiled as Compiled\nfrom .engine import Connection as Connection\nfrom .engine import create_engine as create_engine\nfrom .engine import create_mock_engine as create_mock_engine\nfrom .engine import create_pool_from_url as create_pool_from_url\nfrom .engine import CreateEnginePlugin as CreateEnginePlugin\nfrom .engine import CursorResult as CursorResult\nfrom .engine import Dialect as Dialect\nfrom .engine import Engine as Engine\nfrom .engine import engine_from_config as engine_from_config\nfrom .engine import ExceptionContext as ExceptionContext\nfrom .engine import ExecutionContext as ExecutionContext\nfrom .engine import FrozenResult as FrozenResult\nfrom .engine import Inspector as Inspector\nfrom .engine import IteratorResult as IteratorResult\nfrom .engine import make_url as make_url\nfrom .engine import MappingResult as MappingResult\nfrom .engine import MergedResult as MergedResult\nfrom .engine import NestedTransaction as NestedTransaction\nfrom .engine import Result as Result\nfrom .engine import result_tuple as result_tuple\nfrom .engine import ResultProxy as ResultProxy\nfrom .engine import RootTransaction as RootTransaction\nfrom .engine import Row as Row\nfrom .engine import RowMapping as RowMapping\nfrom .engine import ScalarResult as ScalarResult\nfrom .engine import Transaction as Transaction\nfrom .engine import TwoPhaseTransaction as TwoPhaseTransaction\nfrom .engine import TypeCompiler as TypeCompiler\nfrom .engine import URL as URL\nfrom .inspection import inspect as inspect\nfrom .pool import AssertionPool as AssertionPool\nfrom .pool import AsyncAdaptedQueuePool as AsyncAdaptedQueuePool\nfrom .pool import (\n    FallbackAsyncAdaptedQueuePool as FallbackAsyncAdaptedQueuePool,\n)\nfrom .pool import NullPool as NullPool\nfrom .pool import Pool as Pool\nfrom .pool import PoolProxiedConnection as PoolProxiedConnection\nfrom .pool import PoolResetState as PoolResetState\nfrom .pool import QueuePool as QueuePool\nfrom .pool import SingletonThreadPool as SingletonThreadPool\nfrom .pool import StaticPool as StaticPool\nfrom .schema import BaseDDLElement as BaseDDLElement\nfrom .schema import BLANK_SCHEMA as BLANK_SCHEMA\nfrom .schema import CheckConstraint as CheckConstraint\nfrom .schema import Column as Column\nfrom .schema import ColumnDefault as ColumnDefault\nfrom .schema import Computed as Computed\nfrom .schema import Constraint as Constraint\nfrom .schema import DDL as DDL\nfrom .schema import DDLElement as DDLElement\nfrom .schema import DefaultClause as DefaultClause\nfrom .schema import ExecutableDDLElement as ExecutableDDLElement\nfrom .schema import FetchedValue as FetchedValue\nfrom .schema import ForeignKey as ForeignKey\nfrom .schema import ForeignKeyConstraint as ForeignKeyConstraint\nfrom .schema import Identity as Identity\nfrom .schema import Index as Index\nfrom .schema import insert_sentinel as insert_sentinel\nfrom .schema import MetaData as MetaData\nfrom .schema import PrimaryKeyConstraint as PrimaryKeyConstraint\nfrom .schema import Sequence as Sequence\nfrom .schema import Table as Table\nfrom .schema import UniqueConstraint as UniqueConstraint\nfrom .sql import ColumnExpressionArgument as ColumnExpressionArgument\nfrom .sql import NotNullable as NotNullable\nfrom .sql import Nullable as Nullable\nfrom .sql import SelectLabelStyle as SelectLabelStyle\nfrom .sql.expression import Alias as Alias\nfrom .sql.expression import alias as alias\nfrom .sql.expression import AliasedReturnsRows as AliasedReturnsRows\nfrom .sql.expression import all_ as all_\nfrom .sql.expression import and_ as and_\nfrom .sql.expression import any_ as any_\nfrom .sql.expression import asc as asc\nfrom .sql.expression import between as between\nfrom .sql.expression import BinaryExpression as BinaryExpression\nfrom .sql.expression import bindparam as bindparam\nfrom .sql.expression import BindParameter as BindParameter\nfrom .sql.expression import bitwise_not as bitwise_not\nfrom .sql.expression import BooleanClauseList as BooleanClauseList\nfrom .sql.expression import CacheKey as CacheKey\nfrom .sql.expression import Case as Case\nfrom .sql.expression import case as case\nfrom .sql.expression import Cast as Cast\nfrom .sql.expression import cast as cast\nfrom .sql.expression import ClauseElement as ClauseElement\nfrom .sql.expression import ClauseList as ClauseList\nfrom .sql.expression import collate as collate\nfrom .sql.expression import CollectionAggregate as CollectionAggregate\nfrom .sql.expression import column as column\nfrom .sql.expression import ColumnClause as ColumnClause\nfrom .sql.expression import ColumnCollection as ColumnCollection\nfrom .sql.expression import ColumnElement as ColumnElement\nfrom .sql.expression import ColumnOperators as ColumnOperators\nfrom .sql.expression import CompoundSelect as CompoundSelect\nfrom .sql.expression import CTE as CTE\nfrom .sql.expression import cte as cte\nfrom .sql.expression import custom_op as custom_op\nfrom .sql.expression import Delete as Delete\nfrom .sql.expression import delete as delete\nfrom .sql.expression import desc as desc\nfrom .sql.expression import distinct as distinct\nfrom .sql.expression import except_ as except_\nfrom .sql.expression import except_all as except_all\nfrom .sql.expression import Executable as Executable\nfrom .sql.expression import Exists as Exists\nfrom .sql.expression import exists as exists\nfrom .sql.expression import Extract as Extract\nfrom .sql.expression import extract as extract\nfrom .sql.expression import false as false\nfrom .sql.expression import False_ as False_\nfrom .sql.expression import FromClause as FromClause\nfrom .sql.expression import FromGrouping as FromGrouping\nfrom .sql.expression import func as func\nfrom .sql.expression import funcfilter as funcfilter\nfrom .sql.expression import Function as Function\nfrom .sql.expression import FunctionElement as FunctionElement\nfrom .sql.expression import FunctionFilter as FunctionFilter\nfrom .sql.expression import GenerativeSelect as GenerativeSelect\nfrom .sql.expression import Grouping as Grouping\nfrom .sql.expression import HasCTE as HasCTE\nfrom .sql.expression import HasPrefixes as HasPrefixes\nfrom .sql.expression import HasSuffixes as HasSuffixes\nfrom .sql.expression import Insert as Insert\nfrom .sql.expression import insert as insert\nfrom .sql.expression import intersect as intersect\nfrom .sql.expression import intersect_all as intersect_all\nfrom .sql.expression import Join as Join\nfrom .sql.expression import join as join\nfrom .sql.expression import Label as Label\nfrom .sql.expression import label as label\nfrom .sql.expression import LABEL_STYLE_DEFAULT as LABEL_STYLE_DEFAULT\nfrom .sql.expression import (\n    LABEL_STYLE_DISAMBIGUATE_ONLY as LABEL_STYLE_DISAMBIGUATE_ONLY,\n)\nfrom .sql.expression import LABEL_STYLE_NONE as LABEL_STYLE_NONE\nfrom .sql.expression import (\n    LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL,\n)\nfrom .sql.expression import lambda_stmt as lambda_stmt\nfrom .sql.expression import LambdaElement as LambdaElement\nfrom .sql.expression import Lateral as Lateral\nfrom .sql.expression import lateral as lateral\nfrom .sql.expression import literal as literal\nfrom .sql.expression import literal_column as literal_column\nfrom .sql.expression import modifier as modifier\nfrom .sql.expression import not_ as not_\nfrom .sql.expression import Null as Null\nfrom .sql.expression import null as null\nfrom .sql.expression import nulls_first as nulls_first\nfrom .sql.expression import nulls_last as nulls_last\nfrom .sql.expression import nullsfirst as nullsfirst\nfrom .sql.expression import nullslast as nullslast\nfrom .sql.expression import Operators as Operators\nfrom .sql.expression import or_ as or_\nfrom .sql.expression import outerjoin as outerjoin\nfrom .sql.expression import outparam as outparam\nfrom .sql.expression import Over as Over\nfrom .sql.expression import over as over\nfrom .sql.expression import quoted_name as quoted_name\nfrom .sql.expression import ReleaseSavepointClause as ReleaseSavepointClause\nfrom .sql.expression import ReturnsRows as ReturnsRows\nfrom .sql.expression import (\n    RollbackToSavepointClause as RollbackToSavepointClause,\n)\nfrom .sql.expression import SavepointClause as SavepointClause\nfrom .sql.expression import ScalarSelect as ScalarSelect\nfrom .sql.expression import Select as Select\nfrom .sql.expression import select as select\nfrom .sql.expression import Selectable as Selectable\nfrom .sql.expression import SelectBase as SelectBase\nfrom .sql.expression import SQLColumnExpression as SQLColumnExpression\nfrom .sql.expression import StatementLambdaElement as StatementLambdaElement\nfrom .sql.expression import Subquery as Subquery\nfrom .sql.expression import table as table\nfrom .sql.expression import TableClause as TableClause\nfrom .sql.expression import TableSample as TableSample\nfrom .sql.expression import tablesample as tablesample\nfrom .sql.expression import TableValuedAlias as TableValuedAlias\nfrom .sql.expression import text as text\nfrom .sql.expression import TextAsFrom as TextAsFrom\nfrom .sql.expression import TextClause as TextClause\nfrom .sql.expression import TextualSelect as TextualSelect\nfrom .sql.expression import true as true\nfrom .sql.expression import True_ as True_\nfrom .sql.expression import try_cast as try_cast\nfrom .sql.expression import TryCast as TryCast\nfrom .sql.expression import Tuple as Tuple\nfrom .sql.expression import tuple_ as tuple_\nfrom .sql.expression import type_coerce as type_coerce\nfrom .sql.expression import TypeClause as TypeClause\nfrom .sql.expression import TypeCoerce as TypeCoerce\nfrom .sql.expression import UnaryExpression as UnaryExpression\nfrom .sql.expression import union as union\nfrom .sql.expression import union_all as union_all\nfrom .sql.expression import Update as Update\nfrom .sql.expression import update as update\nfrom .sql.expression import UpdateBase as UpdateBase\nfrom .sql.expression import Values as Values\nfrom .sql.expression import values as values\nfrom .sql.expression import ValuesBase as ValuesBase\nfrom .sql.expression import Visitable as Visitable\nfrom .sql.expression import within_group as within_group\nfrom .sql.expression import WithinGroup as WithinGroup\nfrom .types import ARRAY as ARRAY\nfrom .types import BIGINT as BIGINT\nfrom .types import BigInteger as BigInteger\nfrom .types import BINARY as BINARY\nfrom .types import BLOB as BLOB\nfrom .types import BOOLEAN as BOOLEAN\nfrom .types import Boolean as Boolean\nfrom .types import CHAR as CHAR\nfrom .types import CLOB as CLOB\nfrom .types import DATE as DATE\nfrom .types import Date as Date\nfrom .types import DATETIME as DATETIME\nfrom .types import DateTime as DateTime\nfrom .types import DECIMAL as DECIMAL\nfrom .types import DOUBLE as DOUBLE\nfrom .types import Double as Double\nfrom .types import DOUBLE_PRECISION as DOUBLE_PRECISION\nfrom .types import Enum as Enum\nfrom .types import FLOAT as FLOAT\nfrom .types import Float as Float\nfrom .types import INT as INT\nfrom .types import INTEGER as INTEGER\nfrom .types import Integer as Integer\nfrom .types import Interval as Interval\nfrom .types import JSON as JSON\nfrom .types import LargeBinary as LargeBinary\nfrom .types import NCHAR as NCHAR\nfrom .types import NUMERIC as NUMERIC\nfrom .types import Numeric as Numeric\nfrom .types import NVARCHAR as NVARCHAR\nfrom .types import PickleType as PickleType\nfrom .types import REAL as REAL\nfrom .types import SMALLINT as SMALLINT\nfrom .types import SmallInteger as SmallInteger\nfrom .types import String as String\nfrom .types import TEXT as TEXT\nfrom .types import Text as Text\nfrom .types import TIME as TIME\nfrom .types import Time as Time\nfrom .types import TIMESTAMP as TIMESTAMP\nfrom .types import TupleType as TupleType\nfrom .types import TypeDecorator as TypeDecorator\nfrom .types import Unicode as Unicode\nfrom .types import UnicodeText as UnicodeText\nfrom .types import UUID as UUID\nfrom .types import Uuid as Uuid\nfrom .types import VARBINARY as VARBINARY\nfrom .types import VARCHAR as VARCHAR\n\n__version__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\after.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\before.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\before_sleep.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\nap.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\retry.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\stop.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\tornadoweb.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\wait.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/\n\n    Each retry occurs at a random time in a geometrically expanding interval.\n    It allows for a custom multiplier and an ability to restrict the upper\n    limit of the random interval to some maximum value.\n\n    Example::\n\n        wait_random_exponential(multiplier=0.5,  # initial window 0.5s\n                                max=60)          # max 60s timeout\n\n    When waiting for an unavailable resource to become available again, as\n    opposed to trying to resolve contention for a shared resource, the\n    wait_exponential strategy (which uses a fixed interval) may be preferable.\n\n    ",
      "https://cloud.google.com/storage/docs/retry-strategy\n\n    The wait time is min(initial * 2**n + random.uniform(0, jitter), maximum)\n    where n is the retry count.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\wait.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/English_numerals#Ordinal_numbers\n    if pos_num == 0:\n        return "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\_utils.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://openaipublic.blob.core.windows.net/gpt-2/encodings/main/vocab.bpe",
      "https://openaipublic.blob.core.windows.net/gpt-2/encodings/main/encoder.json",
      "https://openaipublic.blob.core.windows.net/encodings/r50k_base.tiktoken",
      "https://openaipublic.blob.core.windows.net/encodings/p50k_base.tiktoken",
      "https://openaipublic.blob.core.windows.net/encodings/p50k_base.tiktoken",
      "https://openaipublic.blob.core.windows.net/encodings/cl100k_base.tiktoken",
      "https://openaipublic.blob.core.windows.net/encodings/o200k_base.tiktoken"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tiktoken_ext\\openai_public.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://ipywidgets.readthedocs.io/en/stable"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tqdm\\notebook.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tqdm/tqdm#contributions",
      "https://stackoverflow.com/questions/18603270/\\\n        progress-indicator-during-pandas-operations-python>\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tqdm\\std.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tqdm/tqdm/issues/481)"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tqdm\\_monitor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/3267.\n        if self.proxy_is_forwarding:\n            self.is_verified = False\n        else:\n            self.is_verified = sock_and_verified.is_verified\n\n        # If there",
      "https://github.com/pyca/pyopenssl/pull/933\n        or ssl_.IS_PYOPENSSL\n        or not ssl_.HAS_NEVER_CHECK_COMMON_NAME\n    ):\n        context.check_hostname = False\n\n    # Try to load OS default certs if none are given. We need to do the hasattr() check\n    # for custom pyOpenSSL SSLContext objects because they don",
      "https://urllib3.readthedocs.io/en/latest/advanced-usage.html"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\connection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://hg.python.org/cpython/file/7aaba721ebc0/Lib/socket.py#l252\n_blocking_errnos = {errno.EAGAIN, errno.EWOULDBLOCK}\n\n\nclass HTTPConnectionPool(ConnectionPool, RequestMethods):\n    ",
      "http://google.com/",
      "http://bugs.python.org/issue28539\n    if host and host.startswith("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\connectionpool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            # Condition changed later to emit ECONNRESET instead of only EPROTOTYPE.\n            if e.errno != errno.EPROTOTYPE and e.errno != errno.ECONNRESET:\n                raise\n\n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n\n        if not conn.is_closed:\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f",
      "https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n\n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n\n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else",
      "https://github.com/urllib3/urllib3/issues/2791\n        if not conn.is_verified and not conn.proxy_is_verified:\n            warnings.warn(\n                (\n                    f",
      "https://urllib3.readthedocs.io/en/latest/advanced-usage.html"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\connectionpool.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\exceptions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http:// or https://",
      "http:// or https://"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\exceptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc2388#section-4.4>`_.\n\n    :param name:\n        The name of the parameter, a string expected to be ASCII only.\n    :param value:\n        The value of the parameter, provided as ``bytes`` or `str``.\n    :returns:\n        An RFC-2231-formatted unicode string.\n\n    .. deprecated:: 2.0.0\n        Will be removed in urllib3 v2.1.0. This is not valid for\n        ``multipart/form-data`` header parameters.\n    ",
      "https://html.spec.whatwg.org/multipage/\n        form-control-infrastructure.html#multipart-form-data\n\n    :param name:\n        The name of the parameter, an ASCII-only ``str``.\n    :param value:\n        The value of the parameter, a ``str`` or UTF-8 encoded\n        ``bytes``.\n    :returns:\n        A string ``name="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\fields.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:3128"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://google.com/",
      "https://google.com/mail",
      "https://yahoo.com/",
      "https://github.com/urllib3/urllib3/issues/2920",
      "https://localhost:3128/",
      "https://google.com/",
      "https://httpbin.org/",
      "https://httpbin.org/",
      "https://twitter.com/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue16298) do\n                # not properly close the connection in all cases. There is\n                # no harm in redundantly calling close.\n                self._fp.close()\n                if (\n                    self.enforce_content_length\n                    and self.length_remaining is not None\n                    and self.length_remaining != 0\n                ):\n                    # This is an edge case that httplib failed to cover due\n                    # to concerns of backward compatibility. We"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/pull/2624\n    _zstd_version = tuple(\n        map(int, re.search(r",
      "https://www.rfc-editor.org/rfc/rfc8259#section-8.1>`_.\n\n        To use a custom JSON decoder pass the result of :attr:`HTTPResponse.data` to\n        your custom decoder instead.\n\n        If the body of the HTTP response is not decodable to UTF-8, a\n        `UnicodeDecodeError` will be raised. If the body of the HTTP response is not a\n        valid JSON document, a `json.JSONDecodeError` will be raised.\n\n        Read more :ref:`here <json_content>`.\n\n        :returns: The body of the HTTP response as a Python object.\n        ",
      "https://github.com/urllib3/urllib3/issues/2513#issuecomment-1152559900.\n          * urllib3 injected with pyOpenSSL-backed SSL-support.\n          * CPython < 3.10 only when `amt` does not fit 32-bit int.\n        ",
      "https://github.com/python/cpython/issues/113199\n                self._fp.close()\n\n        if data:\n            self._fp_bytes_read += len(data)\n            if self.length_remaining is not None:\n                self.length_remaining -= len(data)\n        return data\n\n    def read(\n        self,\n        amt: int | None = None,\n        decode_content: bool | None = None,\n        cache_content: bool = False,\n    ) -> bytes:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\response.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "8.4.1.3"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/3020",
      "https://github.com/urllib3/urllib3/issues/2168"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "andrey.petrov@shazow.net"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c\n\nThis is an implementation of wcwidth() and wcswidth() (defined in\nIEEE Std 1002.1-2001) for Unicode.\n\nhttp://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html\nhttp://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html\n\nIn fixed-width output devices, Latin characters all occupy a single\n",
      "http://www.unicode.org/unicode/reports/tr11/\n\nLatest version: http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\wcwidth\\wcwidth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/jquast/wcwidth\n\nfrom Markus Kuhn",
      "https://github.com/nedbat/coveragepy/issues/753\n        unicode_versions = list(map(lambda ucs: ucs.encode(), list_versions()))\n    else:\n        unicode_versions = list_versions()\n    latest_version = unicode_versions[-1]\n\n    if given_version in (u"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\wcwidth\\wcwidth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/jquast/wcwidth\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\wcwidth\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://pyyaml.org/wiki/YAMLNonSpecificTag"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\yaml\\parser.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3.8/library/types.html\n__package__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\_yaml\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.pyopenssl.org\n.. _cryptography: https://cryptography.io\n.. _idna: https://github.com/kjd/idna\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\contrib\\pyopenssl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://urllib3.readthedocs.io/en/latest/advanced-usage.html#socks-proxies"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\contrib\\socks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpwg.org/specs/rfc9113.html#n-field-validity)\n\n    `http.client._is_legal_header_name` does not validate the field name according to the\n    HTTP 1.1 spec, so we do that here, in addition to checking for uppercase characters.\n\n    This does not allow for the `:` character in the header name, so should not\n    be used to validate pseudo-headers.\n    ",
      "https://httpwg.org/specs/rfc9113.html#n-field-validity)\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\http2\\connection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/3290"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\http2\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/pull/611\n        # https://bugs.python.org/issue658327\n        try:\n            sock = socket.socket(socket.AF_INET6)\n            sock.bind((host, 0))\n            has_ipv6 = True\n        except Exception:\n            pass\n\n    if sock:\n        sock.close()\n    return has_ipv6\n\n\nHAS_IPV6 = _has_ipv6("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\connection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/800\n\n    # So we ignore the following defects:\n    # - StartBoundaryNotFoundDefect:\n    #     The claimed start boundary was never found.\n    # - MultipartInvariantViolationDefect:\n    #     A message claimed to be a multipart but no subparts were found.\n    defects = [\n        defect\n        for defect in headers.defects\n        if not isinstance(\n            defect, (StartBoundaryNotFoundDefect, MultipartInvariantViolationDefect)\n        )\n    ]\n\n    if defects or unparsed_data:\n        raise HeaderParsingError(defects=defects, unparsed_data=unparsed_data)\n\n\ndef is_response_to_head(response: httplib.HTTPResponse) -> bool:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com/",
      "https://example.com/",
      "https://example.com/",
      "https://tools.ietf.org/html/rfc7230#section-3.2.4\n        if re.match(r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\retry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/2192#issuecomment-821832963\n    https://foss.heptapod.net/pypy/pypy/-/issues/3539\n    ",
      "https://foss.heptapod.net/pypy/pypy/-/issues/3129\n        return pypy_version_info >= (7, 3, 8)  # type: ignore[operator]\n    elif implementation_name == ",
      "https://github.com/urllib3/urllib3/pull/3024\n    is_openssl = openssl_version.startswith(",
      "https://github.com/openssl/openssl/issues/14579\n    # This was released in OpenSSL 1.1.1l+ (>=0x101010cf)\n    is_openssl_issue_14579_fixed = openssl_version_number >= 0x101010CF\n\n    return is_openssl and (\n        is_openssl_issue_14579_fixed\n        or _is_bpo_43522_fixed(implementation_name, version_info, pypy_version_info)\n    )\n\n\nif typing.TYPE_CHECKING:\n    from ssl import VerifyMode\n    from typing import TypedDict\n\n    from .ssltransport import SSLTransport as SSLTransportType\n\n    class _TYPE_PEER_CERT_RET_DICT(TypedDict, total=False):\n        subjectAltName: tuple[tuple[str, str], ...]\n        subject: tuple[tuple[tuple[str, str], ...], ...]\n        serialNumber: str\n\n\n# Mapping from "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\ssl_.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/3/license.html\n# It is modified to remove commonName support.\n\nfrom __future__ import annotations\n\nimport ipaddress\nimport re\nimport typing\nfrom ipaddress import IPv4Address, IPv6Address\n\nif typing.TYPE_CHECKING:\n    from .ssl_ import _TYPE_PEER_CERT_RET_DICT\n\n__version__ = ",
      "http://tools.ietf.org/html/rfc6125#section-6.4.3\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\ssl_match_hostname.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "3.5.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\ssl_match_hostname.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n        None will set an infinite timeout for connection attempts.\n\n    :type connect: int, float, or None\n\n    :param read:\n        The maximum amount of time (in seconds) to wait between consecutive\n        read operations for a response from the server. Omitting the parameter\n        will default the read timeout to the system default, probably `the\n        global default timeout in socket.py\n        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n        None will set an infinite timeout.\n\n    :type read: int, float, or None\n\n    .. note::\n\n        Many factors can affect the total amount of time for urllib3 to return\n        an HTTP response.\n\n        For example, Python"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\timeout.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com/",
      "https://example.com/",
      "https://example.com/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\timeout.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://tools.ietf.org/html/rfc3986#section-5.2.4 for pseudo-code\n    segments = path.split(",
      "http://google.com/mail/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-hyper/rfc3986\n_PERCENT_RE = re.compile(r",
      "https://google.com/mail/",
      "https://google.com/mail/",
      "https://username:password@host.com:80/path?query#fragment"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\url.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "password@host.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\util\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/koenvo/pyodide-http/issues/22\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\contrib\\emscripten\\fetch.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.rfc-editor.org/rfc/rfc8259#section-8.1>`_.\n\n        To use a custom JSON decoder pass the result of :attr:`HTTPResponse.data` to\n        your custom decoder instead.\n\n        If the body of the HTTP response is not decodable to UTF-8, a\n        `UnicodeDecodeError` will be raised. If the body of the HTTP response is not a\n        valid JSON document, a `json.JSONDecodeError` will be raised.\n\n        Read more :ref:`here <json_content>`.\n\n        :returns: The body of the HTTP response as a Python object.\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\urllib3\\contrib\\emscripten\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tqdm.github.io/img/screenshot-discord.png)\n",
      "https://discord.com/api/v10",
      "https://tqdm.github.io, {__version__}) {default_user_agent()}",
      "https://discordpy.readthedocs.io/en/latest/discord.html>\n    - copy the bot `{token}` & `{channel_id}` and paste below\n\n    >>> from tqdm.contrib.discord import tqdm, trange\n    >>> for i in tqdm(iterable, token="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tqdm\\contrib\\discord.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tqdm.github.io/img/screenshot-slack.png)\n",
      "https://api.slack.com/authentication/basics>\n    - copy the bot `{token}` & `{channel}` and paste below\n    >>> from tqdm.contrib.slack import tqdm, trange\n    >>> for i in tqdm(iterable, token="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tqdm\\contrib\\slack.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tqdm.github.io/img/screenshot-telegram.gif)\n",
      "https://api.telegram.org/bot",
      "https://core.telegram.org/bots#6-botfather>\n    - copy its `{token}`\n    - add the bot to a chat and send it a message such as `/start`\n    - go to <https://api.telegram.org/bot`{token}`/getUpdates> to find out\n      the `{chat_id}`\n    - paste the `{token}` & `{chat_id}` below\n\n    >>> from tqdm.contrib.telegram import tqdm, trange\n    >>> for i in tqdm(iterable, token="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tqdm\\contrib\\telegram.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\asyncio\\retry.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\tenacity\\asyncio\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom .asyncio import AsyncAdapt_dbapi_connection\nfrom .asyncio import AsyncAdapt_dbapi_cursor\nfrom .asyncio import AsyncAdapt_dbapi_ss_cursor\nfrom .asyncio import AsyncAdaptFallback_dbapi_connection\nfrom .pyodbc import PyODBCConnector\nfrom .. import pool\nfrom .. import util\nfrom ..util.concurrency import await_fallback\nfrom ..util.concurrency import await_only\n\nif TYPE_CHECKING:\n    from ..engine.interfaces import ConnectArgsType\n    from ..engine.url import URL\n\n\nclass AsyncAdapt_aioodbc_cursor(AsyncAdapt_dbapi_cursor):\n    __slots__ = ()\n\n    def setinputsizes(self, *inputsizes):\n        # see https://github.com/aio-libs/aioodbc/issues/451\n        return self._cursor._impl.setinputsizes(*inputsizes)\n\n        # how it",
      "https://github.com/aio-libs/aioodbc/issues/448\n        # self._connection.autocommit = value\n\n        self._connection._conn.autocommit = value\n\n    def cursor(self, server_side=False):\n        # aioodbc sets connection=None when closed and just fails with\n        # AttributeError here.  Here we use the same ProgrammingError +\n        # message that pyodbc uses, so it triggers is_disconnect() as well.\n        if self._connection.closed:\n            raise self.dbapi.ProgrammingError(\n                "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\connectors\\aioodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n",
      "https://github.com/aio-libs/aioodbc/issues/451\n        # right now\n\n        return self.await_(self._cursor.setinputsizes(*inputsizes))\n\n    def __iter__(self):\n        while self._rows:\n            yield self._rows.popleft()\n\n    def fetchone(self):\n        if self._rows:\n            return self._rows.popleft()\n        else:\n            return None\n\n    def fetchmany(self, size=None):\n        if size is None:\n            size = self.arraysize\n        rr = self._rows\n        return [rr.popleft() for _ in range(min(size, len(rr)))]\n\n    def fetchall(self):\n        retval = list(self._rows)\n        self._rows.clear()\n        return retval\n\n\nclass AsyncAdapt_dbapi_ss_cursor(AsyncAdapt_dbapi_cursor):\n    __slots__ = ()\n    server_side = True\n\n    def __init__(self, adapt_connection):\n        self._adapt_connection = adapt_connection\n        self._connection = adapt_connection._connection\n        self.await_ = adapt_connection.await_\n\n        cursor = self._connection.cursor()\n\n        self._cursor = self.await_(cursor.__aenter__())\n\n    def close(self):\n        if self._cursor is not None:\n            self.await_(self._cursor.close())\n            self._cursor = None\n\n    def fetchone(self):\n        return self.await_(self._cursor.fetchone())\n\n    def fetchmany(self, size=None):\n        return self.await_(self._cursor.fetchmany(size=size))\n\n    def fetchall(self):\n        return self.await_(self._cursor.fetchall())\n\n    def __iter__(self):\n        iterator = self._cursor.__aiter__()\n        while True:\n            try:\n                yield self.await_(iterator.__anext__())\n            except StopAsyncIteration:\n                break\n\n\nclass AsyncAdapt_dbapi_connection(AdaptedConnection):\n    _cursor_cls = AsyncAdapt_dbapi_cursor\n    _ss_cursor_cls = AsyncAdapt_dbapi_ss_cursor\n\n    await_ = staticmethod(await_only)\n    __slots__ = (",
      "https://github.com/aio-libs/aioodbc/issues/448\n        # self._connection.autocommit = value\n\n        self._connection._conn.autocommit = value\n\n    def cursor(self, server_side=False):\n        if server_side:\n            return self._ss_cursor_cls(self)\n        else:\n            return self._cursor_cls(self)\n\n    def rollback(self):\n        self.await_(self._connection.rollback())\n\n    def commit(self):\n        self.await_(self._connection.commit())\n\n    def close(self):\n        self.await_(self._connection.close())\n\n\nclass AsyncAdaptFallback_dbapi_connection(AsyncAdapt_dbapi_connection):\n    __slots__ = ()\n\n    await_ = staticmethod(await_fallback)\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\connectors\\asyncio.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport re\nfrom types import ModuleType\nimport typing\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\nfrom urllib.parse import unquote_plus\n\nfrom . import Connector\nfrom .. import ExecutionContext\nfrom .. import pool\nfrom .. import util\nfrom ..engine import ConnectArgsType\nfrom ..engine import Connection\nfrom ..engine import interfaces\nfrom ..engine import URL\nfrom ..sql.type_api import TypeEngine\n\nif typing.TYPE_CHECKING:\n    from ..engine.interfaces import IsolationLevel\n\n\nclass PyODBCConnector(Connector):\n    driver = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\connectors\\pyodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\nfrom ..engine.interfaces import Dialect\n\n\nclass Connector(Dialect):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\connectors\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\cyextension\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Iterable\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Union\n\nfrom ..sql._typing import _DDLColumnArgument\nfrom ..sql.elements import DQLDMLClauseElement\nfrom ..sql.schema import ColumnCollectionConstraint\nfrom ..sql.schema import Index\n\n\n_OnConflictConstraintT = Union[str, ColumnCollectionConstraint, Index, None]\n_OnConflictIndexElementsT = Optional[Iterable[_DDLColumnArgument]]\n_OnConflictIndexWhereT = Optional[DQLDMLClauseElement]\n_OnConflictSetT = Optional[Mapping[Any, Any]]\n_OnConflictWhereT = Union[DQLDMLClauseElement, str, None]\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\_typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Callable\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TYPE_CHECKING\n\nfrom .. import util\n\nif TYPE_CHECKING:\n    from ..engine.interfaces import Dialect\n\n__all__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n",
      "https://github.com/python/typing/discussions/1095\n\n        @property\n        def pool(self) -> Pool:\n            return self._proxied.pool\n\n        @pool.setter\n        def pool(self, pool: Pool) -> None:\n            self._proxied.pool = pool\n\n        @property\n        def _has_events(self) -> bool:\n            return self._proxied._has_events or self.__dict__.get(\n                "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport abc\nimport typing\nfrom typing import Any\nfrom typing import ClassVar\n\nif typing.TYPE_CHECKING:\n    from .base import Connection\n    from .interfaces import DBAPIConnection\n    from .interfaces import Dialect\n\n\nclass ConnectionCharacteristic(abc.ABC):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\characteristics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport inspect\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Type\nfrom typing import Union\n\nfrom . import base\nfrom . import url as _url\nfrom .interfaces import DBAPIConnection\nfrom .mock import create_mock_engine\nfrom .. import event\nfrom .. import exc\nfrom .. import util\nfrom ..pool import _AdhocProxiedConnection\nfrom ..pool import ConnectionPoolEntry\nfrom ..sql import compiler\nfrom ..util import immutabledict\n\nif typing.TYPE_CHECKING:\n    from .base import Engine\n    from .interfaces import _ExecuteOptions\n    from .interfaces import _ParamStyle\n    from .interfaces import IsolationLevel\n    from .url import URL\n    from ..log import _EchoFlagType\n    from ..pool import _CreatorFnType\n    from ..pool import _CreatorWRecFnType\n    from ..pool import _ResetStyleArgType\n    from ..pool import Pool\n    from ..util.typing import Literal\n\n\n@overload\ndef create_engine(\n    url: Union[str, URL],\n    *,\n    connect_args: Dict[Any, Any] = ...,\n    convert_unicode: bool = ...,\n    creator: Union[_CreatorFnType, _CreatorWRecFnType] = ...,\n    echo: _EchoFlagType = ...,\n    echo_pool: _EchoFlagType = ...,\n    enable_from_linting: bool = ...,\n    execution_options: _ExecuteOptions = ...,\n    future: Literal[True],\n    hide_parameters: bool = ...,\n    implicit_returning: Literal[True] = ...,\n    insertmanyvalues_page_size: int = ...,\n    isolation_level: IsolationLevel = ...,\n    json_deserializer: Callable[..., Any] = ...,\n    json_serializer: Callable[..., Any] = ...,\n    label_length: Optional[int] = ...,\n    logging_name: str = ...,\n    max_identifier_length: Optional[int] = ...,\n    max_overflow: int = ...,\n    module: Optional[Any] = ...,\n    paramstyle: Optional[_ParamStyle] = ...,\n    pool: Optional[Pool] = ...,\n    poolclass: Optional[Type[Pool]] = ...,\n    pool_logging_name: str = ...,\n    pool_pre_ping: bool = ...,\n    pool_size: int = ...,\n    pool_recycle: int = ...,\n    pool_reset_on_return: Optional[_ResetStyleArgType] = ...,\n    pool_timeout: float = ...,\n    pool_use_lifo: bool = ...,\n    plugins: List[str] = ...,\n    query_cache_size: int = ...,\n    use_insertmanyvalues: bool = ...,\n    **kwargs: Any,\n) -> Engine: ...\n\n\n@overload\ndef create_engine(url: Union[str, URL], **kwargs: Any) -> Engine: ...\n\n\n@util.deprecated_params(\n    strategy=(\n        ",
      "https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_\n        to use when rendering bound parameters.  This style defaults to the\n        one recommended by the DBAPI itself, which is retrieved from the\n        ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept\n        more than one paramstyle, and in particular it may be desirable\n        to change a "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\create.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\cursor.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "foo@bar.com",
      "bar@bat.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\cursor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import Union\n\nfrom .base import Connection\nfrom .base import Engine\nfrom .interfaces import ConnectionEventsTarget\nfrom .interfaces import DBAPIConnection\nfrom .interfaces import DBAPICursor\nfrom .interfaces import Dialect\nfrom .. import event\nfrom .. import exc\nfrom ..util.typing import Literal\n\nif typing.TYPE_CHECKING:\n    from .interfaces import _CoreMultiExecuteParams\n    from .interfaces import _CoreSingleExecuteParams\n    from .interfaces import _DBAPIAnyExecuteParams\n    from .interfaces import _DBAPIMultiExecuteParams\n    from .interfaces import _DBAPISingleExecuteParams\n    from .interfaces import _ExecuteOptions\n    from .interfaces import ExceptionContext\n    from .interfaces import ExecutionContext\n    from .result import Result\n    from ..pool import ConnectionPoolEntry\n    from ..sql import Executable\n    from ..sql.elements import BindParameter\n\n\nclass ConnectionEvents(event.Events[ConnectionEventsTarget]):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.python.org/dev/peps/pep-0249/#connection-objects>`_\n        - in :pep:`249`\n\n    ",
      "https://www.python.org/dev/peps/pep-0249/#type-objects>`_\n        - in :pep:`249`\n\n    ",
      "https://www.python.org/dev/peps/pep-0249/#cursor-objects>`_\n        - in :pep:`249`\n\n    ",
      "https://www.python.org/dev/peps/pep-0249/#description>`_\n            - in :pep:`249`\n\n\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\interfaces.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom operator import attrgetter\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Optional\nfrom typing import Type\nfrom typing import Union\n\nfrom . import url as _url\nfrom .. import util\n\n\nif typing.TYPE_CHECKING:\n    from .base import Engine\n    from .interfaces import _CoreAnyExecuteParams\n    from .interfaces import CoreExecuteOptionsParameter\n    from .interfaces import Dialect\n    from .url import URL\n    from ..sql.base import Executable\n    from ..sql.ddl import SchemaDropper\n    from ..sql.ddl import SchemaGenerator\n    from ..sql.schema import HasSchemaAttr\n    from ..sql.schema import SchemaItem\n\n\nclass MockConnection:\n    def __init__(self, dialect: Dialect, execute: Callable[..., Any]):\n        self._dialect = dialect\n        self._execute_impl = execute\n\n    engine: Engine = cast(Any, property(lambda s: s))\n    dialect: Dialect = cast(Any, property(attrgetter("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\mock.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\processors.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "gdementen@gmail.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\processors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\reflection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\result.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\row.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\strategies.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.ietf.org/rfc/rfc1738.txt>`_, with some exceptions.\n\n    A :class:`_engine.URL` object may also be produced directly, either by\n    using the :func:`.make_url` function with a fully formed URL string, or\n    by using the :meth:`_engine.URL.create` constructor in order\n    to construct a :class:`_engine.URL` programmatically given individual\n    fields. The resulting :class:`.URL` object may be passed directly to\n    :func:`_sa.create_engine` in place of a string argument, which will bypass\n    the usage of :func:`.make_url` within the engine",
      "https://www.ietf.org/rfc/rfc1738.txt>`_, with some exceptions, including\n    that underscores, and not dashes or periods, are accepted within the\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Optional\nfrom typing import TypeVar\n\nfrom .. import exc\nfrom .. import util\nfrom ..util._has_cy import HAS_CYEXTENSION\nfrom ..util.typing import Protocol\nfrom ..util.typing import Self\n\nif typing.TYPE_CHECKING or not HAS_CYEXTENSION:\n    from ._py_util import _distill_params_20 as _distill_params_20\n    from ._py_util import _distill_raw_params as _distill_raw_params\nelse:\n    from sqlalchemy.cyextension.util import (  # noqa: F401\n        _distill_params_20 as _distill_params_20,\n    )\n    from sqlalchemy.cyextension.util import (  # noqa: F401\n        _distill_raw_params as _distill_raw_params,\n    )\n\n_C = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\_py_processors.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "gdementen@gmail.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\_py_processors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport operator\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Type\n\nif typing.TYPE_CHECKING:\n    from .result import _KeyType\n    from .result import _ProcessorsType\n    from .result import _RawRowType\n    from .result import _TupleGetterType\n    from .result import ResultMetaData\n\nMD_INDEX = 0  # integer index in cursor.description\n\n\nclass BaseRow:\n    __slots__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\_py_row.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Tuple\n\nfrom .. import exc\n\nif typing.TYPE_CHECKING:\n    from .interfaces import _CoreAnyExecuteParams\n    from .interfaces import _CoreMultiExecuteParams\n    from .interfaces import _DBAPIAnyExecuteParams\n    from .interfaces import _DBAPIMultiExecuteParams\n\n\n_no_tuple: Tuple[Any, ...] = ()\n\n\ndef _distill_params_20(\n    params: Optional[_CoreAnyExecuteParams],\n) -> _CoreMultiExecuteParams:\n    if params is None:\n        return _no_tuple\n    # Assume list is more likely than tuple\n    elif isinstance(params, list) or isinstance(params, tuple):\n        # collections_abc.MutableSequence): # avoid abc.__instancecheck__\n        if params and not isinstance(params[0], (tuple, Mapping)):\n            raise exc.ArgumentError(\n                "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\_py_util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\event\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\event\\attr.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\event\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\event\\legacy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\event\\registry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom .api import CANCEL as CANCEL\nfrom .api import contains as contains\nfrom .api import listen as listen\nfrom .api import listens_for as listens_for\nfrom .api import NO_RETVAL as NO_RETVAL\nfrom .api import remove as remove\nfrom .attr import _InstanceLevelDispatch as _InstanceLevelDispatch\nfrom .attr import RefCollection as RefCollection\nfrom .base import _Dispatch as _Dispatch\nfrom .base import _DispatchCommon as _DispatchCommon\nfrom .base import dispatcher as dispatcher\nfrom .base import Events as Events\nfrom .legacy import _legacy_signature as _legacy_signature\nfrom .registry import _EventKey as _EventKey\nfrom .registry import _ListenerFnType as _ListenerFnType\nfrom .registry import EventTarget as EventTarget\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\event\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\associationproxy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nr",
      "https://sqlsoup.readthedocs.io/en/latest/>`_\nalso tries to solve, that of generating a quick and rudimentary object\nmodel from an existing database on the fly.  By addressing the issue strictly\nat the mapper configuration level, and integrating fully with existing\nDeclarative class techniques, :class:`.AutomapBase` seeks to provide\na well-integrated approach to the issue of expediently auto-generating ad-hoc\nmappings.\n\n.. tip:: The :ref:`automap_toplevel` extension is geared towards a\n   ",
      "https://pypi.org/project/inflect>`_ package::\n\n    import re\n    import inflect\n\n\n    def camelize_classname(base, tablename, table):\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\automap.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "foo@bar.com",
      "foo@bar.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\automap.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\baked.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\compiler.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\horizontal_shard.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nr",
      "https://docs.python.org/3/library/functions.html#property>`_.\nIt is important to note that the way both ``@property`` as well as\n:class:`.hybrid_property` work, a **copy of the descriptor is made each time**.\nThat is, each call to ``@radius.expression``, ``@radius.setter`` etc.\nmake a new object entirely.  This allows the attribute to be re-defined in\nsubclasses without issue (see :ref:`hybrid_reuse_subclass` later in this\nsection for how this is used).\n\nHowever, the above approach is not compatible with typing tools such as\nmypy and pyright.  Python",
      "https://github.com/python/typing/discussions/1102>`_, meaning this syntax\nis not available to SQLAlchemy under :pep:`484` compliance.\n\nIn order to produce a reasonable syntax while remaining typing compliant,\nthe :attr:`.hybrid_property.inplace` decorator allows the same\ndecorator to be re-used with different method names, while still producing\na single decorator under one name::\n\n    # correct use which is also accepted by pep-484 tooling\n\n    class Interval(Base):\n        # ...\n\n        @hybrid_property\n        def radius(self) -> float:\n            return abs(self.length) / 2\n\n        @radius.inplace.setter\n        def _radius_setter(self, value: float) -> None:\n            # for example only\n            self.length = value * 2\n\n        @radius.inplace.expression\n        @classmethod\n        def _radius_expression(cls) -> ColumnElement[float]:\n            return type_coerce(func.abs(cls.length) / 2, Float)\n\nUsing :attr:`.hybrid_property.inplace` further qualifies the use of the\ndecorator that a new copy should not be made, thereby maintaining the\n``Interval.radius`` name while allowing additional methods\n``Interval._radius_setter`` and ``Interval._radius_expression`` to be\ndifferently named.\n\n\n.. versionadded:: 2.0.4 Added :attr:`.hybrid_property.inplace` to allow\n   less verbose construction of composite :class:`.hybrid_property` objects\n   while not having to use repeated method names.   Additionally allowed the\n   use of ``@classmethod`` within :attr:`.hybrid_property.expression`,\n   :attr:`.hybrid_property.update_expression`, and\n   :attr:`.hybrid_property.comparator` to allow typing tools to identify\n   ``cls`` as a class and not an instance in the method signature.\n\n\nDefining Setters\n----------------\n\nThe :meth:`.hybrid_property.setter` modifier allows the construction of a\ncustom setter method, that can modify values on the object::\n\n    class Interval(Base):\n        # ...\n\n        @hybrid_property\n        def length(self) -> int:\n            return self.end - self.start\n\n        @length.inplace.setter\n        def _length_setter(self, value: int) -> None:\n            self.end = self.start + value\n\nThe ``length(self, value)`` method is now called upon set::\n\n    >>> i1 = Interval(5, 10)\n    >>> i1.length\n    5\n    >>> i1.length = 12\n    >>> i1.end\n    17\n\n.. _hybrid_bulk_update:\n\nAllowing Bulk ORM Update\n------------------------\n\nA hybrid can define a custom ",
      "https://techspot.zzzeek.org/2011/10/21/hybrids-and-value-agnostic-types/>`_\n    - on the techspot.zzzeek.org blog\n\n    `Value Agnostic Types, Part II\n    <https://techspot.zzzeek.org/2011/10/29/value-agnostic-types-part-ii/>`_ -\n    on the techspot.zzzeek.org blog\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\hybrid.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\indexable.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\instrumentation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nr",
      "https://github.com/python/mypy/issues/14858\n\n        @overload\n        def setdefault(\n            self: MutableDict[_KT, Optional[_T]], key: _KT, value: None = None\n        ) -> Optional[_T]: ...\n\n        @overload\n        def setdefault(self, key: _KT, value: _VT) -> _VT: ...\n\n        def setdefault(self, key: _KT, value: object = None) -> object: ...\n\n    else:\n\n        def setdefault(self, *arg):  # noqa: F811\n            result = super().setdefault(*arg)\n            self.changed()\n            return result\n\n    def __delitem__(self, key: _KT) -> None:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\mutable.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\orderinglist.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n",
      "https://docs.python.org/3/library/pickle.html>`_ apply.\n\nUsage is nearly the same as that of the standard Python pickle module::\n\n    from sqlalchemy.ext.serializer import loads, dumps\n    metadata = MetaData(bind=some_engine)\n    Session = scoped_session(sessionmaker())\n\n    # ... define mappers\n\n    query = Session.query(MyClass).\n        filter(MyClass.somedata=="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\serializer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom .. import util as _sa_util\n\n\n_sa_util.preloaded.import_prefix("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\future\\engine.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\future\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\attributes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://github.com/python/mypy/issues/14027\n            def _eval_condition(obj):\n                return True\n\n            eval_condition = _eval_condition\n\n        return eval_condition\n\n    @classmethod\n    def _do_pre_synchronize_auto(\n        cls,\n        session,\n        statement,\n        params,\n        execution_options,\n        bind_arguments,\n        update_options,\n    ):\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\bulk_persistence.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\clsregistry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\collections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport itertools\nfrom typing import Any\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import attributes\nfrom . import interfaces\nfrom . import loading\nfrom .base import _is_aliased_class\nfrom .interfaces import ORMColumnDescription\nfrom .interfaces import ORMColumnsClauseRole\nfrom .path_registry import PathRegistry\nfrom .util import _entity_corresponds_to\nfrom .util import _ORMJoin\nfrom .util import _TraceAdaptRole\nfrom .util import AliasedClass\nfrom .util import Bundle\nfrom .util import ORMAdapter\nfrom .util import ORMStatementAdapter\nfrom .. import exc as sa_exc\nfrom .. import future\nfrom .. import inspect\nfrom .. import sql\nfrom .. import util\nfrom ..sql import coercions\nfrom ..sql import expression\nfrom ..sql import roles\nfrom ..sql import util as sql_util\nfrom ..sql import visitors\nfrom ..sql._typing import _TP\nfrom ..sql._typing import is_dml\nfrom ..sql._typing import is_insert_update\nfrom ..sql._typing import is_select_base\nfrom ..sql.base import _select_iterables\nfrom ..sql.base import CacheableOptions\nfrom ..sql.base import CompileState\nfrom ..sql.base import Executable\nfrom ..sql.base import Generative\nfrom ..sql.base import Options\nfrom ..sql.dml import UpdateBase\nfrom ..sql.elements import GroupedElement\nfrom ..sql.elements import TextClause\nfrom ..sql.selectable import CompoundSelectState\nfrom ..sql.selectable import LABEL_STYLE_DISAMBIGUATE_ONLY\nfrom ..sql.selectable import LABEL_STYLE_NONE\nfrom ..sql.selectable import LABEL_STYLE_TABLENAME_PLUS_COL\nfrom ..sql.selectable import Select\nfrom ..sql.selectable import SelectLabelStyle\nfrom ..sql.selectable import SelectState\nfrom ..sql.selectable import TypedReturnsRows\nfrom ..sql.visitors import InternalTraversal\n\nif TYPE_CHECKING:\n    from ._typing import _InternalEntityType\n    from ._typing import OrmExecuteOptionsParameter\n    from .loading import PostLoad\n    from .mapper import Mapper\n    from .query import Query\n    from .session import _BindArguments\n    from .session import Session\n    from ..engine import Result\n    from ..engine.interfaces import _CoreSingleExecuteParams\n    from ..sql._typing import _ColumnsClauseArgument\n    from ..sql.compiler import SQLCompiler\n    from ..sql.dml import _DMLTableElement\n    from ..sql.elements import ColumnElement\n    from ..sql.selectable import _JoinTargetElement\n    from ..sql.selectable import _LabelConventionCallable\n    from ..sql.selectable import _SetupJoinsElement\n    from ..sql.selectable import ExecutableReturnsRows\n    from ..sql.selectable import SelectBase\n    from ..sql.type_api import TypeEngine\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\context.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://github.com/microsoft/pylance-release/issues/3484\n        __tablename__: Any\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\dependency.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://github.com/python/mypy/issues/4266\n        __hash__ = None  # type: ignore\n\n        prop: RODescriptorReference[Composite[_PT]]\n\n        @util.memoized_property\n        def clauses(self) -> ClauseList:\n            return expression.ClauseList(\n                group=False, *self._comparable_elements\n            )\n\n        def __clause_element__(self) -> CompositeProperty.CompositeBundle[_PT]:\n            return self.expression\n\n        @util.memoized_property\n        def expression(self) -> CompositeProperty.CompositeBundle[_PT]:\n            clauses = self.clauses._annotate(\n                {\n                    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\descriptor_props.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\dynamic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\evaluator.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\exc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nimport weakref\n\nfrom . import util as orm_util\nfrom .. import exc as sa_exc\n\nif TYPE_CHECKING:\n    from ._typing import _IdentityKeyType\n    from .state import InstanceState\n\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\identity.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\instrumentation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\interfaces.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\loading.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport operator\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Generic\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import base\nfrom .collections import collection\nfrom .collections import collection_adapter\nfrom .. import exc as sa_exc\nfrom .. import util\nfrom ..sql import coercions\nfrom ..sql import expression\nfrom ..sql import roles\nfrom ..util.langhelpers import Missing\nfrom ..util.langhelpers import MissingOr\nfrom ..util.typing import Literal\n\nif TYPE_CHECKING:\n    from . import AttributeEventToken\n    from . import Mapper\n    from .collections import CollectionAdapter\n    from ..sql.elements import ColumnElement\n\n_KT = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\mapped_collection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\mapper.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\path_registry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\properties.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.postgresql.org/docs/current/static/queries-with.html>`_.\n        Note that, in this example, the ``included_parts`` cte and the\n        ``incl_alias`` alias of it are Core selectables, which\n        means the columns are accessed via the ``.c.`` attribute.  The\n        ``parts_alias`` object is an :func:`_orm.aliased` instance of the\n        ``Part`` entity, so column-mapped attributes are available\n        directly::\n\n            from sqlalchemy.orm import aliased\n\n            class Part(Base):\n                __tablename__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "ed@foo.com",
      "ed@bar.com",
      "ed@foo.com",
      "ed@bar.com",
      "foo@bar.com",
      "ed@foo.com",
      "ed@foo.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://github.com/python/mypy/issues/4266\n        __hash__ = None  # type: ignore\n\n        def __eq__(self, other: Any) -> ColumnElement[bool]:  # type: ignore[override]  # noqa: E501\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\relationships.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom .session import _S\nfrom .session import Session\nfrom .. import exc as sa_exc\nfrom .. import util\nfrom ..util import create_proxy_methods\nfrom ..util import ScopedRegistry\nfrom ..util import ThreadLocalRegistry\nfrom ..util import warn\nfrom ..util import warn_deprecated\nfrom ..util.typing import Protocol\n\nif TYPE_CHECKING:\n    from ._typing import _EntityType\n    from ._typing import _IdentityKeyType\n    from ._typing import OrmExecuteOptionsParameter\n    from .identity import IdentityMap\n    from .interfaces import ORMOption\n    from .mapper import Mapper\n    from .query import Query\n    from .query import RowReturningQuery\n    from .session import _BindArguments\n    from .session import _EntityBindKey\n    from .session import _PKIdentityArgument\n    from .session import _SessionBind\n    from .session import sessionmaker\n    from .session import SessionTransaction\n    from ..engine import Connection\n    from ..engine import CursorResult\n    from ..engine import Engine\n    from ..engine import Result\n    from ..engine import Row\n    from ..engine import RowMapping\n    from ..engine.interfaces import _CoreAnyExecuteParams\n    from ..engine.interfaces import _CoreSingleExecuteParams\n    from ..engine.interfaces import CoreExecuteOptionsParameter\n    from ..engine.result import ScalarResult\n    from ..sql._typing import _ColumnsClauseArgument\n    from ..sql._typing import _T0\n    from ..sql._typing import _T1\n    from ..sql._typing import _T2\n    from ..sql._typing import _T3\n    from ..sql._typing import _T4\n    from ..sql._typing import _T5\n    from ..sql._typing import _T6\n    from ..sql._typing import _T7\n    from ..sql._typing import _TypedColumnClauseArgument as _TCCA\n    from ..sql.base import Executable\n    from ..sql.dml import UpdateBase\n    from ..sql.elements import ClauseElement\n    from ..sql.roles import TypedColumnsClauseRole\n    from ..sql.selectable import ForUpdateParameter\n    from ..sql.selectable import TypedReturnsRows\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.gevent.org/>`_, which can produce ``Timeout`` exceptions\n        that may mean the underlying connection should be discarded::\n\n            import gevent\n\n            try:\n                sess = Session()\n                sess.add(User())\n                sess.commit()\n            except gevent.Timeout:\n                sess.invalidate()\n                raise\n            except:\n                sess.rollback()\n                raise\n\n        The method additionally does everything that :meth:`_orm.Session.close`\n        does, including that all ORM objects are expunged.\n\n        ",
      "https://github.com/python/typing/discussions/1143\n        return_value = loading.get_from_identity(self, mapper, key, passive)\n        return return_value\n\n    @util.non_memoized_property\n    @contextlib.contextmanager\n    def no_autoflush(self) -> Iterator[Session]:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\state.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategies.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategy_options.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "%@aol.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategy_options.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\sync.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport enum\nimport functools\nimport re\nimport types\nimport typing\nfrom typing import AbstractSet\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import FrozenSet\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Match\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\nimport weakref\n\nfrom . import attributes  # noqa\nfrom . import exc\nfrom ._typing import _O\nfrom ._typing import insp_is_aliased_class\nfrom ._typing import insp_is_mapper\nfrom ._typing import prop_is_relationship\nfrom .base import _class_to_mapper as _class_to_mapper\nfrom .base import _MappedAnnotationBase\nfrom .base import _never_set as _never_set  # noqa: F401\nfrom .base import _none_set as _none_set  # noqa: F401\nfrom .base import attribute_str as attribute_str  # noqa: F401\nfrom .base import class_mapper as class_mapper\nfrom .base import DynamicMapped\nfrom .base import InspectionAttr as InspectionAttr\nfrom .base import instance_str as instance_str  # noqa: F401\nfrom .base import Mapped\nfrom .base import object_mapper as object_mapper\nfrom .base import object_state as object_state  # noqa: F401\nfrom .base import opt_manager_of_class\nfrom .base import ORMDescriptor\nfrom .base import state_attribute_str as state_attribute_str  # noqa: F401\nfrom .base import state_class_str as state_class_str  # noqa: F401\nfrom .base import state_str as state_str  # noqa: F401\nfrom .base import WriteOnlyMapped\nfrom .interfaces import CriteriaOption\nfrom .interfaces import MapperProperty as MapperProperty\nfrom .interfaces import ORMColumnsClauseRole\nfrom .interfaces import ORMEntityColumnsClauseRole\nfrom .interfaces import ORMFromClauseRole\nfrom .path_registry import PathRegistry as PathRegistry\nfrom .. import event\nfrom .. import exc as sa_exc\nfrom .. import inspection\nfrom .. import sql\nfrom .. import util\nfrom ..engine.result import result_tuple\nfrom ..sql import coercions\nfrom ..sql import expression\nfrom ..sql import lambdas\nfrom ..sql import roles\nfrom ..sql import util as sql_util\nfrom ..sql import visitors\nfrom ..sql._typing import is_selectable\nfrom ..sql.annotation import SupportsCloneAnnotations\nfrom ..sql.base import ColumnCollection\nfrom ..sql.cache_key import HasCacheKey\nfrom ..sql.cache_key import MemoizedHasCacheKey\nfrom ..sql.elements import ColumnElement\nfrom ..sql.elements import KeyedColumnElement\nfrom ..sql.selectable import FromClause\nfrom ..util.langhelpers import MemoizedSlots\nfrom ..util.typing import de_stringify_annotation as _de_stringify_annotation\nfrom ..util.typing import (\n    de_stringify_union_elements as _de_stringify_union_elements,\n)\nfrom ..util.typing import eval_name_only as _eval_name_only\nfrom ..util.typing import is_origin_of_cls\nfrom ..util.typing import Literal\nfrom ..util.typing import Protocol\nfrom ..util.typing import typing_get_origin\n\nif typing.TYPE_CHECKING:\n    from ._typing import _EntityType\n    from ._typing import _IdentityKeyType\n    from ._typing import _InternalEntityType\n    from ._typing import _ORMCOLEXPR\n    from .context import _MapperEntity\n    from .context import ORMCompileState\n    from .mapper import Mapper\n    from .path_registry import AbstractEntityRegistry\n    from .query import Query\n    from .relationships import RelationshipProperty\n    from ..engine import Row\n    from ..engine import RowMapping\n    from ..sql._typing import _CE\n    from ..sql._typing import _ColumnExpressionArgument\n    from ..sql._typing import _EquivalentColumnMap\n    from ..sql._typing import _FromClauseArgument\n    from ..sql._typing import _OnClauseArgument\n    from ..sql._typing import _PropagateAttrsType\n    from ..sql.annotation import _SA\n    from ..sql.base import ReadOnlyColumnCollection\n    from ..sql.elements import BindParameter\n    from ..sql.selectable import _ColumnsClauseElement\n    from ..sql.selectable import Select\n    from ..sql.selectable import Selectable\n    from ..sql.visitors import anon_map\n    from ..util.typing import _AnnotationScanType\n    from ..util.typing import ArgsTypeProcotol\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\writeonly.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Collection\nfrom typing import Iterable\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import Union\n\nfrom . import mapperlib as mapperlib\nfrom ._typing import _O\nfrom .descriptor_props import Composite\nfrom .descriptor_props import Synonym\nfrom .interfaces import _AttributeOptions\nfrom .properties import MappedColumn\nfrom .properties import MappedSQLExpression\nfrom .query import AliasOption\nfrom .relationships import _RelationshipArgumentType\nfrom .relationships import _RelationshipDeclared\nfrom .relationships import _RelationshipSecondaryArgument\nfrom .relationships import RelationshipProperty\nfrom .session import Session\nfrom .util import _ORMJoin\nfrom .util import AliasedClass\nfrom .util import AliasedInsp\nfrom .util import LoaderCriteriaOption\nfrom .. import sql\nfrom .. import util\nfrom ..exc import InvalidRequestError\nfrom ..sql._typing import _no_kw\nfrom ..sql.base import _NoArg\nfrom ..sql.base import SchemaEventTarget\nfrom ..sql.schema import _InsertSentinelColumnDefault\nfrom ..sql.schema import SchemaConst\nfrom ..sql.selectable import FromClause\nfrom ..util.typing import Annotated\nfrom ..util.typing import Literal\n\nif TYPE_CHECKING:\n    from ._typing import _EntityType\n    from ._typing import _ORMColumnExprArgument\n    from .descriptor_props import _CC\n    from .descriptor_props import _CompositeAttrType\n    from .interfaces import PropComparator\n    from .mapper import Mapper\n    from .query import Query\n    from .relationships import _LazyLoadArgumentType\n    from .relationships import _ORMColCollectionArgument\n    from .relationships import _ORMOrderByArgument\n    from .relationships import _RelationshipJoinConditionArgument\n    from .relationships import ORMBackrefArgument\n    from .session import _SessionBind\n    from ..sql._typing import _AutoIncrementType\n    from ..sql._typing import _ColumnExpressionArgument\n    from ..sql._typing import _FromClauseArgument\n    from ..sql._typing import _InfoType\n    from ..sql._typing import _OnClauseArgument\n    from ..sql._typing import _TypeEngineArgument\n    from ..sql.elements import ColumnElement\n    from ..sql.schema import _ServerDefaultArgument\n    from ..sql.schema import _ServerOnUpdateArgument\n    from ..sql.selectable import Alias\n    from ..sql.selectable import Subquery\n\n\n_T = typing.TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\_orm_constructors.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "foo@bar.com",
      "foo@bar.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\_orm_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport operator\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom ..engine.interfaces import _CoreKnownExecutionOptions\nfrom ..sql import roles\nfrom ..sql._orm_types import DMLStrategyArgument as DMLStrategyArgument\nfrom ..sql._orm_types import (\n    SynchronizeSessionArgument as SynchronizeSessionArgument,\n)\nfrom ..sql._typing import _HasClauseElement\nfrom ..sql.elements import ColumnElement\nfrom ..util.typing import Protocol\nfrom ..util.typing import TypeGuard\n\nif TYPE_CHECKING:\n    from .attributes import AttributeImpl\n    from .attributes import CollectionAttributeImpl\n    from .attributes import HasCollectionAdapter\n    from .attributes import QueryableAttribute\n    from .base import PassiveFlag\n    from .decl_api import registry as _registry_type\n    from .interfaces import InspectionAttr\n    from .interfaces import MapperProperty\n    from .interfaces import ORMOption\n    from .interfaces import UserDefinedOption\n    from .mapper import Mapper\n    from .relationships import RelationshipProperty\n    from .state import InstanceState\n    from .util import AliasedClass\n    from .util import AliasedInsp\n    from ..sql._typing import _CE\n    from ..sql.base import ExecutableOption\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\_typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n",
      "https://stackoverflow.com/a/1938096/34549, Windows time.time() may be\n        # within 16 milliseconds accuracy, so unit tests for connection\n        # invalidation need a sleep of at least this long between initial start\n        # time and invalidation for the logic below to work reliably.\n\n        if self.dbapi_connection is None:\n            self.info.clear()\n            self.__connect()\n        elif (\n            self.__pool._recycle > -1\n            and time.time() - self.starttime > self.__pool._recycle\n        ):\n            self.__pool.logger.info(\n                "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Optional\nfrom typing import Type\nfrom typing import Union\n\nfrom .base import ConnectionPoolEntry\nfrom .base import Pool\nfrom .base import PoolProxiedConnection\nfrom .base import PoolResetState\nfrom .. import event\nfrom .. import util\n\nif typing.TYPE_CHECKING:\n    from ..engine import Engine\n    from ..engine.interfaces import DBAPIConnection\n\n\nclass PoolEvents(event.Events[Pool]):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\pool\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\pool\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\annotation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://github.com/python/mypy/issues/14640 will be fixed\n_Self = TypeVar(",
      "https://github.com/python/mypy/issues/4266\n    __hash__ = None  # type: ignore\n\n    def _populate_separate_keys(\n        self, iter_: Iterable[Tuple[_COLKEY, _COL_co]]\n    ) -> None:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport enum\nfrom itertools import zip_longest\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import MutableMapping\nfrom typing import NamedTuple\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Union\n\nfrom .visitors import anon_map\nfrom .visitors import HasTraversalDispatch\nfrom .visitors import HasTraverseInternals\nfrom .visitors import InternalTraversal\nfrom .visitors import prefix_anon_map\nfrom .. import util\nfrom ..inspection import inspect\nfrom ..util import HasMemoized\nfrom ..util.typing import Literal\nfrom ..util.typing import Protocol\n\nif typing.TYPE_CHECKING:\n    from .elements import BindParameter\n    from .elements import ClauseElement\n    from .elements import ColumnElement\n    from .visitors import _TraverseInternalsType\n    from ..engine.interfaces import _CoreSingleExecuteParams\n\n\nclass _CacheKeyTraversalDispatchType(Protocol):\n    def __call__(\n        s, self: HasCacheKey, visitor: _CacheKeyTraversal\n    ) -> _CacheKeyTraversalDispatchTypeReturn: ...\n\n\nclass CacheConst(enum.Enum):\n    NO_CACHE = 0\n\n\nNO_CACHE = CacheConst.NO_CACHE\n\n\n_CacheKeyTraversalType = Union[\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\cache_key.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport collections.abc as collections_abc\nimport numbers\nimport re\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import operators\nfrom . import roles\nfrom . import visitors\nfrom ._typing import is_from_clause\nfrom .base import ExecutableOption\nfrom .base import Options\nfrom .cache_key import HasCacheKey\nfrom .visitors import Visitable\nfrom .. import exc\nfrom .. import inspection\nfrom .. import util\nfrom ..util.typing import Literal\n\nif typing.TYPE_CHECKING:\n    # elements lambdas schema selectable are set by __init__\n    from . import elements\n    from . import lambdas\n    from . import schema\n    from . import selectable\n    from ._typing import _ColumnExpressionArgument\n    from ._typing import _ColumnsClauseArgument\n    from ._typing import _DDLColumnArgument\n    from ._typing import _DMLTableArgument\n    from ._typing import _FromClauseArgument\n    from .dml import _DMLTableElement\n    from .elements import BindParameter\n    from .elements import ClauseElement\n    from .elements import ColumnClause\n    from .elements import ColumnElement\n    from .elements import DQLDMLClauseElement\n    from .elements import NamedColumn\n    from .elements import SQLCoreOperations\n    from .schema import Column\n    from .selectable import _ColumnsClauseElement\n    from .selectable import _JoinTargetProtocol\n    from .selectable import FromClause\n    from .selectable import HasCTE\n    from .selectable import SelectBase\n    from .selectable import Subquery\n    from .visitors import _TraverseCallableType\n\n_SR = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\coercions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://github.com/python/mypy/issues/14027\n                autoinc_getter = _autoinc_getter\n\n        else:\n            lastrowid_processor = None\n\n        row_fn = result.result_tuple([col.key for col in table.primary_key])\n\n        def get(lastrowid, parameters):\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\crud.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://docs.sqlalchemy.org/en/\n            # latest/core/defaults.html\n            # #associating-a-sequence-as-the-server-side-\n            # default), so have to be dropped after the table is dropped.\n            for column in table.columns:\n                if (\n                    column.default is not None\n                    and column.default not in _ignore_sequences\n                ):\n                    self.traverse_single(column.default)\n\n    def visit_foreign_key_constraint(self, constraint):\n        if not self.dialect.supports_alter:\n            return\n        with self.with_ddl_events(constraint):\n            DropConstraint(constraint)._invoke_with(self.connection)\n\n    def visit_sequence(self, sequence, drop_ok=False):\n        if not drop_ok and not self._can_drop_sequence(sequence):\n            return\n        with self.with_ddl_events(sequence):\n            DropSequence(sequence)._invoke_with(self.connection)\n\n\ndef sort_tables(\n    tables: Iterable[TableClause],\n    skip_fn: Optional[Callable[[ForeignKeyConstraint], bool]] = None,\n    extra_dependencies: Optional[\n        typing_Sequence[Tuple[TableClause, TableClause]]\n    ] = None,\n) -> List[Table]:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\default_comparator.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\dml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://docs.python.org/3/reference/datamodel.html#object.__hash__\n        def __hash__(self) -> int: ...\n\n        def __eq__(self, other: Any) -> ColumnElement[bool]:  # type: ignore[override]  # noqa: E501\n            ...\n\n        def __ne__(self, other: Any) -> ColumnElement[bool]:  # type: ignore[override]  # noqa: E501\n            ...\n\n        def is_distinct_from(self, other: Any) -> ColumnElement[bool]: ...\n\n        def is_not_distinct_from(self, other: Any) -> ColumnElement[bool]: ...\n\n        def __gt__(self, other: Any) -> ColumnElement[bool]: ...\n\n        def __ge__(self, other: Any) -> ColumnElement[bool]: ...\n\n        def __neg__(self) -> UnaryExpression[_T_co]: ...\n\n        def __contains__(self, other: Any) -> ColumnElement[bool]: ...\n\n        def __getitem__(self, index: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __lshift__(self: _SQO[int], other: Any) -> ColumnElement[int]: ...\n\n        @overload\n        def __lshift__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __lshift__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rshift__(self: _SQO[int], other: Any) -> ColumnElement[int]: ...\n\n        @overload\n        def __rshift__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rshift__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def concat(self: _SQO[str], other: Any) -> ColumnElement[str]: ...\n\n        @overload\n        def concat(self, other: Any) -> ColumnElement[Any]: ...\n\n        def concat(self, other: Any) -> ColumnElement[Any]: ...\n\n        def like(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def ilike(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def bitwise_xor(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def bitwise_or(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def bitwise_and(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def bitwise_not(self) -> UnaryExpression[_T_co]: ...\n\n        def bitwise_lshift(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def bitwise_rshift(self, other: Any) -> BinaryExpression[Any]: ...\n\n        def in_(\n            self,\n            other: Union[\n                Iterable[Any], BindParameter[Any], roles.InElementRole\n            ],\n        ) -> BinaryExpression[bool]: ...\n\n        def not_in(\n            self,\n            other: Union[\n                Iterable[Any], BindParameter[Any], roles.InElementRole\n            ],\n        ) -> BinaryExpression[bool]: ...\n\n        def notin_(\n            self,\n            other: Union[\n                Iterable[Any], BindParameter[Any], roles.InElementRole\n            ],\n        ) -> BinaryExpression[bool]: ...\n\n        def not_like(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def notlike(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def not_ilike(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def notilike(\n            self, other: Any, escape: Optional[str] = None\n        ) -> BinaryExpression[bool]: ...\n\n        def is_(self, other: Any) -> BinaryExpression[bool]: ...\n\n        def is_not(self, other: Any) -> BinaryExpression[bool]: ...\n\n        def isnot(self, other: Any) -> BinaryExpression[bool]: ...\n\n        def startswith(\n            self,\n            other: Any,\n            escape: Optional[str] = None,\n            autoescape: bool = False,\n        ) -> ColumnElement[bool]: ...\n\n        def istartswith(\n            self,\n            other: Any,\n            escape: Optional[str] = None,\n            autoescape: bool = False,\n        ) -> ColumnElement[bool]: ...\n\n        def endswith(\n            self,\n            other: Any,\n            escape: Optional[str] = None,\n            autoescape: bool = False,\n        ) -> ColumnElement[bool]: ...\n\n        def iendswith(\n            self,\n            other: Any,\n            escape: Optional[str] = None,\n            autoescape: bool = False,\n        ) -> ColumnElement[bool]: ...\n\n        def contains(self, other: Any, **kw: Any) -> ColumnElement[bool]: ...\n\n        def icontains(self, other: Any, **kw: Any) -> ColumnElement[bool]: ...\n\n        def match(self, other: Any, **kwargs: Any) -> ColumnElement[bool]: ...\n\n        def regexp_match(\n            self, pattern: Any, flags: Optional[str] = None\n        ) -> ColumnElement[bool]: ...\n\n        def regexp_replace(\n            self, pattern: Any, replacement: Any, flags: Optional[str] = None\n        ) -> ColumnElement[str]: ...\n\n        def desc(self) -> UnaryExpression[_T_co]: ...\n\n        def asc(self) -> UnaryExpression[_T_co]: ...\n\n        def nulls_first(self) -> UnaryExpression[_T_co]: ...\n\n        def nullsfirst(self) -> UnaryExpression[_T_co]: ...\n\n        def nulls_last(self) -> UnaryExpression[_T_co]: ...\n\n        def nullslast(self) -> UnaryExpression[_T_co]: ...\n\n        def collate(self, collation: str) -> CollationClause: ...\n\n        def between(\n            self, cleft: Any, cright: Any, symmetric: bool = False\n        ) -> BinaryExpression[bool]: ...\n\n        def distinct(self: _SQO[_T_co]) -> UnaryExpression[_T_co]: ...\n\n        def any_(self) -> CollectionAggregate[Any]: ...\n\n        def all_(self) -> CollectionAggregate[Any]: ...\n\n        # numeric overloads.  These need more tweaking\n        # in particular they all need to have a variant for Optiona[_T]\n        # because Optional only applies to the data side, not the expression\n        # side\n\n        @overload\n        def __add__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __add__(\n            self: _SQO[str],\n            other: Any,\n        ) -> ColumnElement[str]: ...\n\n        @overload\n        def __add__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __add__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __radd__(self: _SQO[_NMT], other: Any) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __radd__(self: _SQO[str], other: Any) -> ColumnElement[str]: ...\n\n        def __radd__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __sub__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __sub__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __sub__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rsub__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __rsub__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rsub__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __mul__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __mul__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __mul__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rmul__(\n            self: _SQO[_NMT],\n            other: Any,\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __rmul__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rmul__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __mod__(self: _SQO[_NMT], other: Any) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __mod__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __mod__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rmod__(self: _SQO[_NMT], other: Any) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __rmod__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rmod__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __truediv__(\n            self: _SQO[int], other: Any\n        ) -> ColumnElement[_NUMERIC]: ...\n\n        @overload\n        def __truediv__(self: _SQO[_NT], other: Any) -> ColumnElement[_NT]: ...\n\n        @overload\n        def __truediv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __truediv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rtruediv__(\n            self: _SQO[_NMT], other: Any\n        ) -> ColumnElement[_NUMERIC]: ...\n\n        @overload\n        def __rtruediv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rtruediv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __floordiv__(\n            self: _SQO[_NMT], other: Any\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __floordiv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __floordiv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        @overload\n        def __rfloordiv__(\n            self: _SQO[_NMT], other: Any\n        ) -> ColumnElement[_NMT]: ...\n\n        @overload\n        def __rfloordiv__(self, other: Any) -> ColumnElement[Any]: ...\n\n        def __rfloordiv__(self, other: Any) -> ColumnElement[Any]: ...\n\n\nclass SQLColumnExpression(\n    SQLCoreOperations[_T_co], roles.ExpressionElementRole[_T_co], TypingOnly\n):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import TYPE_CHECKING\n\nfrom .base import SchemaEventTarget\nfrom .. import event\n\nif TYPE_CHECKING:\n    from .schema import Column\n    from .schema import Constraint\n    from .schema import SchemaItem\n    from .schema import Table\n    from ..engine.base import Connection\n    from ..engine.interfaces import ReflectedColumn\n    from ..engine.reflection import Inspector\n\n\nclass DDLEvents(event.Events[SchemaEventTarget]):\n    ",
      "https://alembic.sqlalchemy.org>`_.\n\n\n    **Attachment Events**\n\n    Attachment events are provided to customize\n    behavior whenever a child schema element is associated\n    with a parent, such as when a :class:`_schema.Column` is associated\n    with its :class:`_schema.Table`, when a\n    :class:`_schema.ForeignKeyConstraint`\n    is associated with a :class:`_schema.Table`, etc.  These events include\n    :meth:`.DDLEvents.before_parent_attach` and\n    :meth:`.DDLEvents.after_parent_attach`.\n\n    **Reflection Events**\n\n    The :meth:`.DDLEvents.column_reflect` event is used to intercept\n    and modify the in-Python definition of database columns when\n    :term:`reflection` of database tables proceeds.\n\n    **Use with Generic DDL**\n\n    DDL events integrate closely with the\n    :class:`.DDL` class and the :class:`.ExecutableDDLElement` hierarchy\n    of DDL clause constructs, which are themselves appropriate\n    as listener callables::\n\n        from sqlalchemy import DDL\n        event.listen(\n            some_table,\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\expression.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\n",
      "https://peps.python.org/pep-0484/#generics>`_,\n    meaning that type checkers and IDEs can be instructed on the types to\n    expect in a :class:`_engine.Result` for this function. See\n    :class:`.GenericFunction` for an example of how this is done.\n\n    .. seealso::\n\n        :ref:`tutorial_functions` - in the :ref:`unified_tutorial`\n\n        :class:`.Function` - named SQL function.\n\n        :data:`.func` - namespace which produces registered or ad-hoc\n        :class:`.Function` instances.\n\n        :class:`.GenericFunction` - allows creation of registered function\n        types.\n\n    ",
      "https://peps.python.org/pep-0484/#generics>`_ can be passed\n    and should match the type seen in a :class:`_engine.Result`. For example::\n\n        class as_utc(GenericFunction[datetime.datetime]):\n            type = DateTime()\n            inherit_cache = True\n\n    The above indicates that the following expression returns a ``datetime``\n    object::\n\n        connection.scalar(select(func.as_utc()))\n\n    .. versionadded:: 1.3.13  The :class:`.quoted_name` construct is now\n       recognized for quoting when used with the "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\functions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport collections.abc as collections_abc\nimport inspect\nimport itertools\nimport operator\nimport threading\nimport types\nfrom types import CodeType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import List\nfrom typing import MutableMapping\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\nimport weakref\n\nfrom . import cache_key as _cache_key\nfrom . import coercions\nfrom . import elements\nfrom . import roles\nfrom . import schema\nfrom . import visitors\nfrom .base import _clone\nfrom .base import Executable\nfrom .base import Options\nfrom .cache_key import CacheConst\nfrom .operators import ColumnOperators\nfrom .. import exc\nfrom .. import inspection\nfrom .. import util\nfrom ..util.typing import Literal\n\n\nif TYPE_CHECKING:\n    from .elements import BindParameter\n    from .elements import ClauseElement\n    from .roles import SQLRole\n    from .visitors import _CloneCallableType\n\n_LambdaCacheType = MutableMapping[\n    Tuple[Any, ...], Union["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\lambdas.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\naming.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n# This module is part of SQLAlchemy and is released under\n# the MIT License: https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://docs.python.org/3/reference/datamodel.html#object.__hash__\n    if TYPE_CHECKING:\n\n        def __hash__(self) -> int: ...\n\n    else:\n        __hash__ = Operators.__hash__\n\n    def __eq__(self, other: Any) -> ColumnOperators:  # type: ignore[override]\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\operators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Generic\nfrom typing import Optional\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nfrom .. import util\nfrom ..util.typing import Literal\n\nif TYPE_CHECKING:\n    from ._typing import _PropagateAttrsType\n    from .elements import Label\n    from .selectable import _SelectIterable\n    from .selectable import FromClause\n    from .selectable import Subquery\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\roles.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.python.org/dev/peps/pep-0249/#lastrowid\n              <https://www.python.org/dev/peps/pep-0249/#lastrowid>`_)\n            * PostgreSQL, SQL Server, Oracle - use RETURNING or an equivalent\n              construct when rendering an INSERT statement, and then retrieving\n              the newly generated primary key values after execution\n            * PostgreSQL, Oracle for :class:`_schema.Table` objects that\n              set :paramref:`_schema.Table.implicit_returning` to False -\n              for a :class:`.Sequence` only, the :class:`.Sequence` is invoked\n              explicitly before the INSERT statement takes place so that the\n              newly generated primary key value is available to the client\n            * SQL Server for :class:`_schema.Table` objects that\n              set :paramref:`_schema.Table.implicit_returning` to False -\n              the ``SELECT scope_identity()`` construct is used after the\n              INSERT statement is invoked to retrieve the newly generated\n              primary key value.\n            * Third-party dialects - consult those dialects",
      "https://www.postgresql.org/docs/current/static/ddl-constraints.html\n                raise exc.ArgumentError(\n                    ",
      "https://github.com/python/mypy/issues/17093\n    @overload\n    def reflect(\n        self,\n        bind: Engine,\n        schema: Optional[str] = ...,\n        views: bool = ...,\n        only: Union[\n            _typing_Sequence[str], Callable[[str, MetaData], bool], None\n        ] = ...,\n        extend_existing: bool = ...,\n        autoload_replace: bool = ...,\n        resolve_fks: bool = ...,\n        **dialect_kwargs: Any,\n    ) -> None: ...\n\n    @overload\n    def reflect(\n        self,\n        bind: Connection,\n        schema: Optional[str] = ...,\n        views: bool = ...,\n        only: Union[\n            _typing_Sequence[str], Callable[[str, MetaData], bool], None\n        ] = ...,\n        extend_existing: bool = ...,\n        autoload_replace: bool = ...,\n        resolve_fks: bool = ...,\n        **dialect_kwargs: Any,\n    ) -> None: ...\n\n    @util.preload_module("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://www.postgresql.org/docs/current/static/queries-with.html,\n        as well as additional examples.\n\n        Example 1, non recursive::\n\n            from sqlalchemy import (Table, Column, String, Integer,\n                                    MetaData, select, func)\n\n            metadata = MetaData()\n\n            orders = Table("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\selectable.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://www.postgresql.org/docs/current/static/functions-datetime.html.\n\n        return {\n            operators.add: {Interval: self.__class__},\n            operators.sub: {Interval: self.__class__, DateTime: Interval},\n        }\n\n\nclass Date(_RenderISO8601NoT, HasExpressionLookup, TypeEngine[dt.date]):\n    ",
      "https://www.postgresql.org/docs/current/static/functions-datetime.html.\n\n        return {\n            operators.add: {\n                Integer: self.__class__,\n                Interval: DateTime,\n                Time: DateTime,\n            },\n            operators.sub: {\n                # date - integer = date\n                Integer: self.__class__,\n                # date - date = integer.\n                Date: Integer,\n                Interval: DateTime,\n                # date - datetime = interval,\n                # this one is not in the PG docs\n                # but works\n                DateTime: Interval,\n            },\n        }\n\n\nclass Time(_RenderISO8601NoT, HasExpressionLookup, TypeEngine[dt.time]):\n    ",
      "https://www.postgresql.org/docs/current/static/functions-datetime.html.\n\n        return {\n            operators.add: {Date: DateTime, Interval: self.__class__},\n            operators.sub: {Time: Interval, Interval: self.__class__},\n        }\n\n    def literal_processor(self, dialect):\n        return self._literal_processor_time(dialect)\n\n\nclass _Binary(TypeEngine[bytes]):\n    ",
      "https://www.postgresql.org/docs/current/static/functions-datetime.html.\n\n        return {\n            operators.add: {\n                Date: DateTime,\n                Interval: self.__class__,\n                DateTime: DateTime,\n                Time: Time,\n            },\n            operators.sub: {Interval: self.__class__},\n            operators.mul: {Numeric: self.__class__},\n            operators.truediv: {Numeric: self.__class__},\n        }\n\n    @util.ro_non_memoized_property\n    def _type_affinity(self) -> Type[Interval]:\n        return Interval\n\n\nclass Interval(Emulated, _AbstractInterval, TypeDecorator[dt.timedelta]):\n    ",
      "https://docs.python.org/3/library/uuid.html>`_\n    module::\n\n        import uuid\n\n        from sqlalchemy import Uuid\n        from sqlalchemy import Table, Column, MetaData, String\n\n\n        metadata_obj = MetaData()\n\n        t = Table(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\sqltypes.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nfrom collections import deque\nimport collections.abc as collections_abc\nimport itertools\nfrom itertools import zip_longest\nimport operator\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Deque\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Type\n\nfrom . import operators\nfrom .cache_key import HasCacheKey\nfrom .visitors import _TraverseInternalsType\nfrom .visitors import anon_map\nfrom .visitors import ExternallyTraversible\nfrom .visitors import HasTraversalDispatch\nfrom .visitors import HasTraverseInternals\nfrom .. import util\nfrom ..util import langhelpers\nfrom ..util.typing import Self\n\n\nSKIP_TRAVERSE = util.symbol("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\traversals.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\type_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom .dml import Delete\nfrom .dml import Insert\nfrom .dml import Update\n\nif TYPE_CHECKING:\n    from ._typing import _DMLTableArgument\n\n\ndef insert(table: _DMLTableArgument) -> Insert:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\_dml_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple as typing_Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import coercions\nfrom . import roles\nfrom .base import _NoArg\nfrom .coercions import _document_text_coercion\nfrom .elements import BindParameter\nfrom .elements import BooleanClauseList\nfrom .elements import Case\nfrom .elements import Cast\nfrom .elements import CollationClause\nfrom .elements import CollectionAggregate\nfrom .elements import ColumnClause\nfrom .elements import ColumnElement\nfrom .elements import Extract\nfrom .elements import False_\nfrom .elements import FunctionFilter\nfrom .elements import Label\nfrom .elements import Null\nfrom .elements import Over\nfrom .elements import TextClause\nfrom .elements import True_\nfrom .elements import TryCast\nfrom .elements import Tuple\nfrom .elements import TypeCoerce\nfrom .elements import UnaryExpression\nfrom .elements import WithinGroup\nfrom .functions import FunctionElement\nfrom ..util.typing import Literal\n\nif typing.TYPE_CHECKING:\n    from ._typing import _ByArgument\n    from ._typing import _ColumnExpressionArgument\n    from ._typing import _ColumnExpressionOrLiteralArgument\n    from ._typing import _ColumnExpressionOrStrLabelArgument\n    from ._typing import _TypeEngineArgument\n    from .elements import BinaryExpression\n    from .selectable import FromClause\n    from .type_api import TypeEngine\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\_elements_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\_orm_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport typing\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Tuple\nfrom typing import Union\n\nfrom ..util.typing import Literal\n\nif typing.TYPE_CHECKING:\n    from .cache_key import CacheConst\n\n\nclass prefix_anon_map(Dict[str, str]):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\_py_util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import coercions\nfrom . import roles\nfrom ._typing import _ColumnsClauseArgument\nfrom ._typing import _no_kw\nfrom .elements import ColumnClause\nfrom .selectable import Alias\nfrom .selectable import CompoundSelect\nfrom .selectable import Exists\nfrom .selectable import FromClause\nfrom .selectable import Join\nfrom .selectable import Lateral\nfrom .selectable import LateralFromClause\nfrom .selectable import NamedFromClause\nfrom .selectable import Select\nfrom .selectable import TableClause\nfrom .selectable import TableSample\nfrom .selectable import Values\n\nif TYPE_CHECKING:\n    from ._typing import _FromClauseArgument\n    from ._typing import _OnClauseArgument\n    from ._typing import _SelectStatementForCompoundArgument\n    from ._typing import _T0\n    from ._typing import _T1\n    from ._typing import _T2\n    from ._typing import _T3\n    from ._typing import _T4\n    from ._typing import _T5\n    from ._typing import _T6\n    from ._typing import _T7\n    from ._typing import _T8\n    from ._typing import _T9\n    from ._typing import _TypedColumnClauseArgument as _TCCA\n    from .functions import Function\n    from .selectable import CTE\n    from .selectable import HasCTE\n    from .selectable import ScalarSelect\n    from .selectable import SelectBase\n\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\_selectable_constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport operator\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Mapping\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import roles\nfrom .. import exc\nfrom .. import util\nfrom ..inspection import Inspectable\nfrom ..util.typing import Literal\nfrom ..util.typing import Protocol\nfrom ..util.typing import TypeAlias\n\nif TYPE_CHECKING:\n    from datetime import date\n    from datetime import datetime\n    from datetime import time\n    from datetime import timedelta\n    from decimal import Decimal\n    from uuid import UUID\n\n    from .base import Executable\n    from .compiler import Compiled\n    from .compiler import DDLCompiler\n    from .compiler import SQLCompiler\n    from .dml import UpdateBase\n    from .dml import ValuesBase\n    from .elements import ClauseElement\n    from .elements import ColumnElement\n    from .elements import KeyedColumnElement\n    from .elements import quoted_name\n    from .elements import SQLCoreOperations\n    from .elements import TextClause\n    from .lambdas import LambdaElement\n    from .roles import FromClauseRole\n    from .schema import Column\n    from .selectable import Alias\n    from .selectable import CTE\n    from .selectable import FromClause\n    from .selectable import Join\n    from .selectable import NamedFromClause\n    from .selectable import ReturnsRows\n    from .selectable import Select\n    from .selectable import Selectable\n    from .selectable import SelectBase\n    from .selectable import Subquery\n    from .selectable import TableClause\n    from .sqltypes import TableValueType\n    from .sqltypes import TupleType\n    from .type_api import TypeEngine\n    from ..engine import Dialect\n    from ..util.typing import TypeGuard\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\_typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom typing import Any\nfrom typing import TYPE_CHECKING\n\nfrom ._typing import ColumnExpressionArgument as ColumnExpressionArgument\nfrom ._typing import NotNullable as NotNullable\nfrom ._typing import Nullable as Nullable\nfrom .base import Executable as Executable\nfrom .compiler import COLLECT_CARTESIAN_PRODUCTS as COLLECT_CARTESIAN_PRODUCTS\nfrom .compiler import FROM_LINTING as FROM_LINTING\nfrom .compiler import NO_LINTING as NO_LINTING\nfrom .compiler import WARN_LINTING as WARN_LINTING\nfrom .ddl import BaseDDLElement as BaseDDLElement\nfrom .ddl import DDL as DDL\nfrom .ddl import DDLElement as DDLElement\nfrom .ddl import ExecutableDDLElement as ExecutableDDLElement\nfrom .expression import Alias as Alias\nfrom .expression import alias as alias\nfrom .expression import all_ as all_\nfrom .expression import and_ as and_\nfrom .expression import any_ as any_\nfrom .expression import asc as asc\nfrom .expression import between as between\nfrom .expression import bindparam as bindparam\nfrom .expression import case as case\nfrom .expression import cast as cast\nfrom .expression import ClauseElement as ClauseElement\nfrom .expression import collate as collate\nfrom .expression import column as column\nfrom .expression import ColumnCollection as ColumnCollection\nfrom .expression import ColumnElement as ColumnElement\nfrom .expression import CompoundSelect as CompoundSelect\nfrom .expression import cte as cte\nfrom .expression import Delete as Delete\nfrom .expression import delete as delete\nfrom .expression import desc as desc\nfrom .expression import distinct as distinct\nfrom .expression import except_ as except_\nfrom .expression import except_all as except_all\nfrom .expression import exists as exists\nfrom .expression import extract as extract\nfrom .expression import false as false\nfrom .expression import False_ as False_\nfrom .expression import FromClause as FromClause\nfrom .expression import func as func\nfrom .expression import funcfilter as funcfilter\nfrom .expression import Insert as Insert\nfrom .expression import insert as insert\nfrom .expression import intersect as intersect\nfrom .expression import intersect_all as intersect_all\nfrom .expression import Join as Join\nfrom .expression import join as join\nfrom .expression import label as label\nfrom .expression import LABEL_STYLE_DEFAULT as LABEL_STYLE_DEFAULT\nfrom .expression import (\n    LABEL_STYLE_DISAMBIGUATE_ONLY as LABEL_STYLE_DISAMBIGUATE_ONLY,\n)\nfrom .expression import LABEL_STYLE_NONE as LABEL_STYLE_NONE\nfrom .expression import (\n    LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL,\n)\nfrom .expression import lambda_stmt as lambda_stmt\nfrom .expression import LambdaElement as LambdaElement\nfrom .expression import lateral as lateral\nfrom .expression import literal as literal\nfrom .expression import literal_column as literal_column\nfrom .expression import modifier as modifier\nfrom .expression import not_ as not_\nfrom .expression import null as null\nfrom .expression import nulls_first as nulls_first\nfrom .expression import nulls_last as nulls_last\nfrom .expression import nullsfirst as nullsfirst\nfrom .expression import nullslast as nullslast\nfrom .expression import or_ as or_\nfrom .expression import outerjoin as outerjoin\nfrom .expression import outparam as outparam\nfrom .expression import over as over\nfrom .expression import quoted_name as quoted_name\nfrom .expression import Select as Select\nfrom .expression import select as select\nfrom .expression import Selectable as Selectable\nfrom .expression import SelectLabelStyle as SelectLabelStyle\nfrom .expression import SQLColumnExpression as SQLColumnExpression\nfrom .expression import StatementLambdaElement as StatementLambdaElement\nfrom .expression import Subquery as Subquery\nfrom .expression import table as table\nfrom .expression import TableClause as TableClause\nfrom .expression import TableSample as TableSample\nfrom .expression import tablesample as tablesample\nfrom .expression import text as text\nfrom .expression import true as true\nfrom .expression import True_ as True_\nfrom .expression import try_cast as try_cast\nfrom .expression import tuple_ as tuple_\nfrom .expression import type_coerce as type_coerce\nfrom .expression import union as union\nfrom .expression import union_all as union_all\nfrom .expression import Update as Update\nfrom .expression import update as update\nfrom .expression import Values as Values\nfrom .expression import values as values\nfrom .expression import within_group as within_group\nfrom .visitors import ClauseVisitor as ClauseVisitor\n\n\ndef __go(lcls: Any) -> None:\n    from .. import util as _sa_util\n\n    from . import base\n    from . import coercions\n    from . import elements\n    from . import lambdas\n    from . import selectable\n    from . import schema\n    from . import traversals\n    from . import type_api\n\n    if not TYPE_CHECKING:\n        base.coercions = elements.coercions = coercions\n        base.elements = elements\n        base.type_api = type_api\n        coercions.elements = elements\n        coercions.lambdas = lambdas\n        coercions.schema = schema\n        coercions.selectable = selectable\n\n    from .annotation import _prepare_annotations\n    from .annotation import Annotated\n    from .elements import AnnotatedColumnElement\n    from .elements import ClauseList\n    from .selectable import AnnotatedFromClause\n\n    _prepare_annotations(ColumnElement, AnnotatedColumnElement)\n    _prepare_annotations(FromClause, AnnotatedFromClause)\n    _prepare_annotations(ClauseList, Annotated)\n\n    _sa_util.preloaded.import_prefix("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nimport contextlib\nfrom copy import copy\nfrom itertools import filterfalse\nimport re\nimport sys\nimport warnings\n\nfrom . import assertsql\nfrom . import config\nfrom . import engines\nfrom . import mock\nfrom .exclusions import db_spec\nfrom .util import fail\nfrom .. import exc as sa_exc\nfrom .. import schema\nfrom .. import sql\nfrom .. import types as sqltypes\nfrom .. import util\nfrom ..engine import default\nfrom ..engine import url\nfrom ..sql.selectable import LABEL_STYLE_TABLENAME_PLUS_COL\nfrom ..util import decorator\n\n\ndef expect_warnings(*messages, **kw):\n    ",
      "https://github.com/python-greenlet/greenlet/issues/242\n    del ec\n\n    # assert outside the block so it works for AssertionError too !\n    assert success, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\assertions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport collections\nimport contextlib\nimport itertools\nimport re\n\nfrom .. import event\nfrom ..engine import url\nfrom ..engine.default import DefaultDialect\nfrom ..schema import BaseDDLElement\n\n\nclass AssertRule:\n    is_consumed = False\n    errormessage = None\n    consume_statement = True\n\n    def process_statement(self, execute_observed):\n        pass\n\n    def no_more_statements(self):\n        assert False, (\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\assertsql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n# functions and wrappers to run tests, fixtures, provisioning and\n# setup/teardown in an asyncio event loop, conditionally based on the\n# current DB driver being used for a test.\n\n# note that SQLAlchemy"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\asyncio.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nfrom argparse import Namespace\nimport collections\nimport inspect\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Iterable\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import mock\nfrom . import requirements as _requirements\nfrom .util import fail\nfrom .. import util\n\n# default requirements; this is replaced by plugin_base when pytest\n# is run\nrequirements = _requirements.SuiteRequirements()\n\ndb = None\ndb_url = None\ndb_opts = None\nfile_config = None\ntest_schema = None\ntest_schema_2 = None\nany_async = False\n_current = None\nident = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport collections\nimport re\nimport typing\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Optional\nimport warnings\nimport weakref\n\nfrom . import config\nfrom .util import decorator\nfrom .util import gc_collect\nfrom .. import event\nfrom .. import pool\nfrom ..util import await_only\nfrom ..util.typing import Literal\n\n\nif typing.TYPE_CHECKING:\n    from ..engine import Engine\n    from ..engine.url import URL\n    from ..ext.asyncio import AsyncEngine\n\n\nclass ConnectionKiller:\n    def __init__(self):\n        self.proxy_refs = weakref.WeakKeyDictionary()\n        self.testing_engines = collections.defaultdict(set)\n        self.dbapi_connections = set()\n\n    def add_pool(self, pool):\n        event.listen(pool, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\engines.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport sqlalchemy as sa\nfrom .. import exc as sa_exc\nfrom ..orm.writeonly import WriteOnlyCollection\n\n_repr_stack = set()\n\n\nclass BasicEntity:\n    def __init__(self, **kw):\n        for key, value in kw.items():\n            setattr(self, key, value)\n\n    def __repr__(self):\n        if id(self) in _repr_stack:\n            return object.__repr__(self)\n        _repr_stack.add(id(self))\n        try:\n            return "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\entities.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport contextlib\nimport operator\nimport re\nimport sys\n\nfrom . import config\nfrom .. import util\nfrom ..util import decorator\nfrom ..util.compat import inspect_getfullargspec\n\n\ndef skip_if(predicate, reason=None):\n    rule = compound()\n    pred = _as_predicate(predicate, reason)\n    rule.skips.add(pred)\n    return rule\n\n\ndef fails_if(predicate, reason=None):\n    rule = compound()\n    pred = _as_predicate(predicate, reason)\n    rule.fails.add(pred)\n    return rule\n\n\nclass compound:\n    def __init__(self):\n        self.fails = set()\n        self.skips = set()\n\n    def __add__(self, other):\n        return self.add(other)\n\n    def as_skips(self):\n        rule = compound()\n        rule.skips.update(self.skips)\n        rule.skips.update(self.fails)\n        return rule\n\n    def add(self, *others):\n        copy = compound()\n        copy.fails.update(self.fails)\n        copy.skips.update(self.skips)\n\n        for other in others:\n            copy.fails.update(other.fails)\n            copy.skips.update(other.skips)\n        return copy\n\n    def not_(self):\n        copy = compound()\n        copy.fails.update(NotPredicate(fail) for fail in self.fails)\n        copy.skips.update(NotPredicate(skip) for skip in self.skips)\n        return copy\n\n    @property\n    def enabled(self):\n        return self.enabled_for_config(config._current)\n\n    def enabled_for_config(self, config):\n        for predicate in self.skips.union(self.fails):\n            if predicate(config):\n                return False\n        else:\n            return True\n\n    def matching_config_reasons(self, config):\n        return [\n            predicate._as_string(config)\n            for predicate in self.skips.union(self.fails)\n            if predicate(config)\n        ]\n\n    def _extend(self, other):\n        self.skips.update(other.skips)\n        self.fails.update(other.fails)\n\n    def __call__(self, fn):\n        if hasattr(fn, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\exclusions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\pickleable.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\profiling.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport collections\nimport logging\n\nfrom . import config\nfrom . import engines\nfrom . import util\nfrom .. import exc\nfrom .. import inspect\nfrom ..engine import url as sa_url\nfrom ..sql import ddl\nfrom ..sql import schema\n\n\nlog = logging.getLogger(__name__)\n\nFOLLOWER_IDENT = None\n\n\nclass register:\n    def __init__(self, decorator=None):\n        self.fns = {}\n        self.decorator = decorator\n\n    @classmethod\n    def init(cls, fn):\n        return register().for_db("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\requirements.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport sys\n\nfrom . import config\nfrom . import exclusions\nfrom .. import event\nfrom .. import schema\nfrom .. import types as sqltypes\nfrom ..orm import mapped_column as _orm_mapped_column\nfrom ..util import OrderedDict\n\n__all__ = ["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nfrom collections import deque\nimport contextlib\nimport decimal\nimport gc\nfrom itertools import chain\nimport random\nimport sys\nfrom sys import getsizeof\nimport time\nimport types\nfrom typing import Any\n\nfrom . import config\nfrom . import mock\nfrom .. import inspect\nfrom ..engine import Connection\nfrom ..schema import Column\nfrom ..schema import DropConstraint\nfrom ..schema import DropTable\nfrom ..schema import ForeignKeyConstraint\nfrom ..schema import MetaData\nfrom ..schema import Table\nfrom ..sql import schema\nfrom ..sql.sqltypes import Integer\nfrom ..util import decorator\nfrom ..util import defaultdict\nfrom ..util import has_refcount_gc\nfrom ..util import inspect_getfullargspec\n\n\nif not has_refcount_gc:\n\n    def non_refcount_gc_collect(*args):\n        gc.collect()\n        gc.collect()\n\n    gc_collect = lazy_gc = non_refcount_gc_collect\nelse:\n    # assume CPython - straight gc.collect, lazy_gc() is a pass\n    gc_collect = gc.collect\n\n    def lazy_gc():\n        pass\n\n\ndef picklers():\n    picklers = set()\n    import pickle\n\n    picklers.add(pickle)\n\n    # yes, this thing needs this much testing\n    for pickle_ in picklers:\n        for protocol in range(-2, pickle.HIGHEST_PROTOCOL + 1):\n            yield pickle_.loads, lambda d: pickle_.dumps(d, protocol)\n\n\ndef random_choices(population, k=1):\n    return random.choices(population, k=k)\n\n\ndef round_decimal(value, prec):\n    if isinstance(value, float):\n        return round(value, prec)\n\n    # can also use shift() here but that is 2.6 only\n    return (value * decimal.Decimal(",
      "https://code.activestate.com/recipes/577504/\n\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport warnings\n\nfrom . import assertions\nfrom .. import exc\nfrom .. import exc as sa_exc\nfrom ..exc import SATestSuiteWarning\nfrom ..util.langhelpers import _warnings_warn\n\n\ndef warn_test_suite(message):\n    _warnings_warn(message, category=SATestSuiteWarning)\n\n\ndef setup_filters():\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\warnings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom unittest import mock\n\nfrom . import config\nfrom .assertions import assert_raises\nfrom .assertions import assert_raises_context_ok\nfrom .assertions import assert_raises_message\nfrom .assertions import assert_raises_message_context_ok\nfrom .assertions import assert_warns\nfrom .assertions import assert_warns_message\nfrom .assertions import AssertsCompiledSQL\nfrom .assertions import AssertsExecutionResults\nfrom .assertions import ComparesIndexes\nfrom .assertions import ComparesTables\nfrom .assertions import emits_warning\nfrom .assertions import emits_warning_on\nfrom .assertions import eq_\nfrom .assertions import eq_ignore_whitespace\nfrom .assertions import eq_regex\nfrom .assertions import expect_deprecated\nfrom .assertions import expect_deprecated_20\nfrom .assertions import expect_raises\nfrom .assertions import expect_raises_message\nfrom .assertions import expect_warnings\nfrom .assertions import in_\nfrom .assertions import int_within_variance\nfrom .assertions import is_\nfrom .assertions import is_false\nfrom .assertions import is_instance_of\nfrom .assertions import is_none\nfrom .assertions import is_not\nfrom .assertions import is_not_\nfrom .assertions import is_not_none\nfrom .assertions import is_true\nfrom .assertions import le_\nfrom .assertions import ne_\nfrom .assertions import not_in\nfrom .assertions import not_in_\nfrom .assertions import startswith_\nfrom .assertions import uses_deprecated\nfrom .config import add_to_marker\nfrom .config import async_test\nfrom .config import combinations\nfrom .config import combinations_list\nfrom .config import db\nfrom .config import fixture\nfrom .config import requirements as requires\nfrom .config import skip_test\nfrom .config import Variation\nfrom .config import variation\nfrom .config import variation_fixture\nfrom .exclusions import _is_excluded\nfrom .exclusions import _server_version\nfrom .exclusions import against as _against\nfrom .exclusions import db_spec\nfrom .exclusions import exclude\nfrom .exclusions import fails\nfrom .exclusions import fails_if\nfrom .exclusions import fails_on\nfrom .exclusions import fails_on_everything_except\nfrom .exclusions import future\nfrom .exclusions import only_if\nfrom .exclusions import only_on\nfrom .exclusions import skip\nfrom .exclusions import skip_if\nfrom .schema import eq_clause_element\nfrom .schema import eq_type_affinity\nfrom .util import adict\nfrom .util import fail\nfrom .util import flag_combinations\nfrom .util import force_drop_names\nfrom .util import lambda_combinations\nfrom .util import metadata_fixture\nfrom .util import provide_metadata\nfrom .util import resolve_lambda\nfrom .util import rowset\nfrom .util import run_as_contextmanager\nfrom .util import skip_if_timeout\nfrom .util import teardown_events\nfrom .warnings import assert_warnings\nfrom .warnings import warn_test_suite\n\n\ndef against(*queries):\n    return _against(config._current, *queries)\n\n\ncrashes = skip\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://github.com/python/cpython/pull/8895"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport asyncio  # noqa\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Coroutine\nfrom typing import TypeVar\n\nhave_greenlet = False\ngreenlet_error = None\ntry:\n    import greenlet  # type: ignore[import-untyped,unused-ignore]  # noqa: F401,E501\nexcept ImportError as e:\n    greenlet_error = str(e)\n    pass\nelse:\n    have_greenlet = True\n    from ._concurrency_py3k import await_only as await_only\n    from ._concurrency_py3k import await_fallback as await_fallback\n    from ._concurrency_py3k import in_greenlet as in_greenlet\n    from ._concurrency_py3k import greenlet_spawn as greenlet_spawn\n    from ._concurrency_py3k import is_exit_exception as is_exit_exception\n    from ._concurrency_py3k import AsyncAdaptedLock as AsyncAdaptedLock\n    from ._concurrency_py3k import _Runner\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\concurrency.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://mypy.readthedocs.io/en/stable/generics.html#declaring-decorators\n_F = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\deprecations.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://docs.python.org/3/howto/annotations.html#annotations-howto\n        if isinstance(obj, type):\n            ann = obj.__dict__.get(",
      "https://docs.python.org/3/library/inspect.html\n        # The flags are specific to CPython, and may not be defined in other\n        # Python implementations. Furthermore, the flags are an implementation\n        # detail, and can be removed or deprecated in future Python releases.\n        spec = compat.inspect_getfullargspec(fn)\n        return spec[0], bool(spec[2])\n    else:\n        # use fn.__code__ plus flags to reduce method call overhead\n        co = fn.__code__\n        nargs = co.co_argcount\n        return (\n            list(co.co_varnames[:nargs]),\n            bool(co.co_flags & co_varkeywords),\n        )\n\n\n@overload\ndef get_cls_kwargs(\n    cls: type,\n    *,\n    _set: Optional[Set[str]] = None,\n    raiseerr: Literal[True] = ...,\n) -> Set[str]: ...\n\n\n@overload\ndef get_cls_kwargs(\n    cls: type, *, _set: Optional[Set[str]] = None, raiseerr: bool = False\n) -> Optional[Set[str]]: ...\n\n\ndef get_cls_kwargs(\n    cls: type, *, _set: Optional[Set[str]] = None, raiseerr: bool = False\n) -> Optional[Set[str]]:\n    r",
      "https://github.com/python/mypy/issues/12440\nif TYPE_CHECKING:\n    # allow memoized and non-memoized to be freely mixed by having them\n    # be the same class\n    memoized_property = generic_fn_descriptor\n    non_memoized_property = generic_fn_descriptor\n\n    # for read only situations, mypy only sees @property as read only.\n    # read only is needed when a subtype specializes the return type\n    # of a property, meaning assignment needs to be disallowed\n    ro_memoized_property = property\n    ro_non_memoized_property = property\n\nelse:\n    memoized_property = ro_memoized_property = _memoized_property\n    non_memoized_property = ro_non_memoized_property = _non_memoized_property\n\n\ndef memoized_instancemethod(fn: _F) -> _F:\n    ",
      "https://github.com/python/cpython/issues/99304"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://bugs.python.org/issue38884, these modules\n    are added to the system module cache by importing them after the packages\n    has finished initialization.\n\n    A global instance is provided under the name :attr:`.preloaded`. Use\n    the function :func:`.preload_module` to register modules to load and\n    :meth:`.import_prefix` to load all the modules that start with the\n    given path.\n\n    While the modules are loaded in the global module cache, it"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\preloaded.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\queue.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\tool_support.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n",
      "https://neopythonic.blogspot.com/2009/01/detecting-cycles-in-directed-graph.html\n\n    edges: DefaultDict[_T, Set[_T]] = util.defaultdict(set)\n    for parent, child in tuples:\n        edges[parent].add(child)\n    nodes_to_test = set(edges)\n\n    output = set()\n\n    # we"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\topological.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport builtins\nimport collections.abc as collections_abc\nimport re\nimport sys\nimport typing\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import ForwardRef\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Mapping\nfrom typing import NewType\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import compat\n\nif True:  # zimports removes the tailing comments\n    from typing_extensions import Annotated as Annotated  # 3.8\n    from typing_extensions import Concatenate as Concatenate  # 3.10\n    from typing_extensions import (\n        dataclass_transform as dataclass_transform,  # 3.11,\n    )\n    from typing_extensions import Final as Final  # 3.8\n    from typing_extensions import final as final  # 3.8\n    from typing_extensions import get_args as get_args  # 3.10\n    from typing_extensions import get_origin as get_origin  # 3.10\n    from typing_extensions import Literal as Literal  # 3.8\n    from typing_extensions import NotRequired as NotRequired  # 3.11\n    from typing_extensions import ParamSpec as ParamSpec  # 3.10\n    from typing_extensions import Protocol as Protocol  # 3.8\n    from typing_extensions import SupportsIndex as SupportsIndex  # 3.8\n    from typing_extensions import TypeAlias as TypeAlias  # 3.10\n    from typing_extensions import TypedDict as TypedDict  # 3.8\n    from typing_extensions import TypeGuard as TypeGuard  # 3.10\n    from typing_extensions import Self as Self  # 3.11\n    from typing_extensions import TypeAliasType as TypeAliasType  # 3.12\n\n_T = TypeVar(",
      "https://github.com/microsoft/pyright/issues/3025\n_LiteralStar = Literal["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\n",
      "https://gist.github.com/zzzeek/89de958cf0803d148e74861bd682ebae\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\_collections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nimport asyncio\nfrom contextvars import Context\nimport sys\nimport typing\nfrom typing import Any\nfrom typing import Awaitable\nfrom typing import Callable\nfrom typing import Coroutine\nfrom typing import Optional\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom .langhelpers import memoized_property\nfrom .. import exc\nfrom ..util import py311\nfrom ..util.typing import Literal\nfrom ..util.typing import Protocol\nfrom ..util.typing import Self\nfrom ..util.typing import TypeGuard\n\n_T = TypeVar(",
      "https://github.com/python-greenlet/greenlet/pull/198\n_has_gr_context = hasattr(getcurrent(), ",
      "https://gist.github.com/snaury/202bf4f22c41ca34e56297bae5f33fef\n# Issue for context: https://github.com/python-greenlet/greenlet/issues/173\n\n\nclass _AsyncIoGreenlet(greenlet):\n    dead: bool\n\n    __sqlalchemy_greenlet_provider__ = True\n\n    def __init__(self, fn: Callable[..., Any], driver: greenlet):\n        greenlet.__init__(self, fn, driver)\n        if _has_gr_context:\n            self.gr_context = driver.gr_context\n\n\n_T_co = TypeVar(",
      "https://docs.python.org/3/reference/datamodel.html#coroutine.close\n\n    if iscoroutine(awaitable):\n        awaitable.close()\n\n\ndef in_greenlet() -> bool:\n    current = getcurrent()\n    return getattr(current, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\_concurrency_py3k.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport os\nimport typing\n\n\ndef _import_cy_extensions():\n    # all cython extension extension modules are treated as optional by the\n    # setup, so to ensure that all are compiled, all should be imported here\n    from ..cyextension import collections\n    from ..cyextension import immutabledict\n    from ..cyextension import processors\n    from ..cyextension import resultproxy\n    from ..cyextension import util\n\n    return (collections, immutabledict, processors, resultproxy, util)\n\n\n_CYEXTENSION_MSG: str\nif not typing.TYPE_CHECKING:\n    if os.environ.get("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\_has_cy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: allow-untyped-defs, allow-untyped-calls\n\nfrom __future__ import annotations\n\nfrom itertools import filterfalse\nfrom typing import AbstractSet\nfrom typing import Any\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Collection\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Mapping\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom ..util.typing import Self\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\_py_collections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n\nfrom collections import defaultdict as defaultdict\nfrom functools import partial as partial\nfrom functools import update_wrapper as update_wrapper\nfrom typing import TYPE_CHECKING\n\nfrom . import preloaded as preloaded\nfrom ._collections import coerce_generator_arg as coerce_generator_arg\nfrom ._collections import coerce_to_immutabledict as coerce_to_immutabledict\nfrom ._collections import column_dict as column_dict\nfrom ._collections import column_set as column_set\nfrom ._collections import EMPTY_DICT as EMPTY_DICT\nfrom ._collections import EMPTY_SET as EMPTY_SET\nfrom ._collections import FacadeDict as FacadeDict\nfrom ._collections import flatten_iterator as flatten_iterator\nfrom ._collections import has_dupes as has_dupes\nfrom ._collections import has_intersection as has_intersection\nfrom ._collections import IdentitySet as IdentitySet\nfrom ._collections import immutabledict as immutabledict\nfrom ._collections import LRUCache as LRUCache\nfrom ._collections import merge_lists_w_ordering as merge_lists_w_ordering\nfrom ._collections import NONE_SET as NONE_SET\nfrom ._collections import ordered_column_set as ordered_column_set\nfrom ._collections import OrderedDict as OrderedDict\nfrom ._collections import OrderedIdentitySet as OrderedIdentitySet\nfrom ._collections import OrderedProperties as OrderedProperties\nfrom ._collections import OrderedSet as OrderedSet\nfrom ._collections import PopulateDict as PopulateDict\nfrom ._collections import Properties as Properties\nfrom ._collections import ReadOnlyContainer as ReadOnlyContainer\nfrom ._collections import ReadOnlyProperties as ReadOnlyProperties\nfrom ._collections import ScopedRegistry as ScopedRegistry\nfrom ._collections import sort_dictionary as sort_dictionary\nfrom ._collections import ThreadLocalRegistry as ThreadLocalRegistry\nfrom ._collections import to_column_set as to_column_set\nfrom ._collections import to_list as to_list\nfrom ._collections import to_set as to_set\nfrom ._collections import unique_list as unique_list\nfrom ._collections import UniqueAppender as UniqueAppender\nfrom ._collections import update_copy as update_copy\nfrom ._collections import WeakPopulateDict as WeakPopulateDict\nfrom ._collections import WeakSequence as WeakSequence\nfrom .compat import anext_ as anext_\nfrom .compat import arm as arm\nfrom .compat import b as b\nfrom .compat import b64decode as b64decode\nfrom .compat import b64encode as b64encode\nfrom .compat import cmp as cmp\nfrom .compat import cpython as cpython\nfrom .compat import dataclass_fields as dataclass_fields\nfrom .compat import decode_backslashreplace as decode_backslashreplace\nfrom .compat import dottedgetter as dottedgetter\nfrom .compat import has_refcount_gc as has_refcount_gc\nfrom .compat import inspect_getfullargspec as inspect_getfullargspec\nfrom .compat import is64bit as is64bit\nfrom .compat import local_dataclass_fields as local_dataclass_fields\nfrom .compat import osx as osx\nfrom .compat import py310 as py310\nfrom .compat import py311 as py311\nfrom .compat import py312 as py312\nfrom .compat import py38 as py38\nfrom .compat import py39 as py39\nfrom .compat import pypy as pypy\nfrom .compat import win32 as win32\nfrom .concurrency import await_fallback as await_fallback\nfrom .concurrency import await_only as await_only\nfrom .concurrency import greenlet_spawn as greenlet_spawn\nfrom .concurrency import is_exit_exception as is_exit_exception\nfrom .deprecations import became_legacy_20 as became_legacy_20\nfrom .deprecations import deprecated as deprecated\nfrom .deprecations import deprecated_cls as deprecated_cls\nfrom .deprecations import deprecated_params as deprecated_params\nfrom .deprecations import moved_20 as moved_20\nfrom .deprecations import warn_deprecated as warn_deprecated\nfrom .langhelpers import add_parameter_text as add_parameter_text\nfrom .langhelpers import as_interface as as_interface\nfrom .langhelpers import asbool as asbool\nfrom .langhelpers import asint as asint\nfrom .langhelpers import assert_arg_type as assert_arg_type\nfrom .langhelpers import attrsetter as attrsetter\nfrom .langhelpers import bool_or_str as bool_or_str\nfrom .langhelpers import chop_traceback as chop_traceback\nfrom .langhelpers import class_hierarchy as class_hierarchy\nfrom .langhelpers import classproperty as classproperty\nfrom .langhelpers import clsname_as_plain_name as clsname_as_plain_name\nfrom .langhelpers import coerce_kw_type as coerce_kw_type\nfrom .langhelpers import constructor_copy as constructor_copy\nfrom .langhelpers import constructor_key as constructor_key\nfrom .langhelpers import counter as counter\nfrom .langhelpers import create_proxy_methods as create_proxy_methods\nfrom .langhelpers import decode_slice as decode_slice\nfrom .langhelpers import decorator as decorator\nfrom .langhelpers import dictlike_iteritems as dictlike_iteritems\nfrom .langhelpers import duck_type_collection as duck_type_collection\nfrom .langhelpers import ellipses_string as ellipses_string\nfrom .langhelpers import EnsureKWArg as EnsureKWArg\nfrom .langhelpers import FastIntFlag as FastIntFlag\nfrom .langhelpers import format_argspec_init as format_argspec_init\nfrom .langhelpers import format_argspec_plus as format_argspec_plus\nfrom .langhelpers import generic_fn_descriptor as generic_fn_descriptor\nfrom .langhelpers import generic_repr as generic_repr\nfrom .langhelpers import get_annotations as get_annotations\nfrom .langhelpers import get_callable_argspec as get_callable_argspec\nfrom .langhelpers import get_cls_kwargs as get_cls_kwargs\nfrom .langhelpers import get_func_kwargs as get_func_kwargs\nfrom .langhelpers import getargspec_init as getargspec_init\nfrom .langhelpers import has_compiled_ext as has_compiled_ext\nfrom .langhelpers import HasMemoized as HasMemoized\nfrom .langhelpers import (\n    HasMemoized_ro_memoized_attribute as HasMemoized_ro_memoized_attribute,\n)\nfrom .langhelpers import hybridmethod as hybridmethod\nfrom .langhelpers import hybridproperty as hybridproperty\nfrom .langhelpers import inject_docstring_text as inject_docstring_text\nfrom .langhelpers import iterate_attributes as iterate_attributes\nfrom .langhelpers import map_bits as map_bits\nfrom .langhelpers import md5_hex as md5_hex\nfrom .langhelpers import memoized_instancemethod as memoized_instancemethod\nfrom .langhelpers import memoized_property as memoized_property\nfrom .langhelpers import MemoizedSlots as MemoizedSlots\nfrom .langhelpers import method_is_overridden as method_is_overridden\nfrom .langhelpers import methods_equivalent as methods_equivalent\nfrom .langhelpers import (\n    monkeypatch_proxied_specials as monkeypatch_proxied_specials,\n)\nfrom .langhelpers import non_memoized_property as non_memoized_property\nfrom .langhelpers import NoneType as NoneType\nfrom .langhelpers import only_once as only_once\nfrom .langhelpers import (\n    parse_user_argument_for_enum as parse_user_argument_for_enum,\n)\nfrom .langhelpers import PluginLoader as PluginLoader\nfrom .langhelpers import portable_instancemethod as portable_instancemethod\nfrom .langhelpers import quoted_token_parser as quoted_token_parser\nfrom .langhelpers import ro_memoized_property as ro_memoized_property\nfrom .langhelpers import ro_non_memoized_property as ro_non_memoized_property\nfrom .langhelpers import rw_hybridproperty as rw_hybridproperty\nfrom .langhelpers import safe_reraise as safe_reraise\nfrom .langhelpers import set_creation_order as set_creation_order\nfrom .langhelpers import string_or_unprintable as string_or_unprintable\nfrom .langhelpers import symbol as symbol\nfrom .langhelpers import TypingOnly as TypingOnly\nfrom .langhelpers import (\n    unbound_method_to_callable as unbound_method_to_callable,\n)\nfrom .langhelpers import walk_subclasses as walk_subclasses\nfrom .langhelpers import warn as warn\nfrom .langhelpers import warn_exception as warn_exception\nfrom .langhelpers import warn_limited as warn_limited\nfrom .langhelpers import wrap_callable as wrap_callable\nfrom .preloaded import preload_module as preload_module\nfrom .typing import is_non_string_iterable as is_non_string_iterable\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\util\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport sqlalchemy as sa\nfrom .. import assertions\nfrom .. import config\nfrom ..assertions import eq_\nfrom ..util import drop_all_tables_from_metadata\nfrom ... import Column\nfrom ... import func\nfrom ... import Integer\nfrom ... import select\nfrom ... import Table\nfrom ...orm import DeclarativeBase\nfrom ...orm import MappedAsDataclass\nfrom ...orm import registry\n\n\n@config.mark_base_test_class()\nclass TestBase:\n    # A sequence of requirement names matching testing.requires decorators\n    __requires__ = ()\n\n    # A sequence of dialect names to exclude from the test class.\n    __unsupported_on__ = ()\n\n    # If present, test class is only runnable for the *single* specified\n    # dialect.  If you need multiple, use __unsupported_on__ and invert.\n    __only_on__ = None\n\n    # A sequence of no-arg callables. If any are True, the entire testcase is\n    # skipped.\n    __skip_if__ = None\n\n    # if True, the testing reaper will not attempt to touch connection\n    # state after a test is completed and before the outer teardown\n    # starts\n    __leave_connections_for_teardown__ = False\n\n    def assert_(self, val, msg=None):\n        assert val, msg\n\n    @config.fixture()\n    def nocache(self):\n        _cache = config.db._compiled_cache\n        config.db._compiled_cache = None\n        yield\n        config.db._compiled_cache = _cache\n\n    @config.fixture()\n    def connection_no_trans(self):\n        eng = getattr(self, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport inspect\nimport os\nfrom pathlib import Path\nimport re\nimport shutil\nimport sys\nimport tempfile\n\nfrom .base import TestBase\nfrom .. import config\nfrom ..assertions import eq_\nfrom ... import util\n\n\n@config.add_to_marker.mypy\nclass MypyTest(TestBase):\n    __requires__ = (",
      "https://github.com/python/mypy/blob/304997bfb85200fb521ac727ee0ce3e6085e5278/mypy/options.py#L363  # noqa: E501\n\n                        # skip first character which could be capitalized\n                        # ",
      "https://github.com/python/mypy/blob/304997bfb85200fb521ac727ee0ce3e6085e5278/mypy/options.py#L368  # noqa: E501\n                        expected_msg = re.sub(\n                            r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\mypy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nfrom typing import Any\n\nimport sqlalchemy as sa\nfrom .base import TestBase\nfrom .sql import TablesTest\nfrom .. import assertions\nfrom .. import config\nfrom .. import schema\nfrom ..entities import BasicEntity\nfrom ..entities import ComparableEntity\nfrom ..util import adict\nfrom ... import orm\nfrom ...orm import DeclarativeBase\nfrom ...orm import events as orm_events\nfrom ...orm import registry\n\n\nclass ORMTest(TestBase):\n    @config.fixture\n    def fixture_session(self):\n        return fixture_session()\n\n\nclass MappedTest(ORMTest, TablesTest, assertions.AssertsExecutionResults):\n    # "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\orm.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nimport itertools\nimport random\nimport re\nimport sys\n\nimport sqlalchemy as sa\nfrom .base import TestBase\nfrom .. import config\nfrom .. import mock\nfrom ..assertions import eq_\nfrom ..assertions import ne_\nfrom ..util import adict\nfrom ..util import drop_all_tables_from_metadata\nfrom ... import event\nfrom ... import util\nfrom ...schema import sort_tables_and_constraints\nfrom ...sql import visitors\nfrom ...sql.elements import ClauseElement\n\n\nclass TablesTest(TestBase):\n    # "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\sql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom .base import FutureEngineMixin as FutureEngineMixin\nfrom .base import TestBase as TestBase\nfrom .mypy import MypyTest as MypyTest\nfrom .orm import after_test as after_test\nfrom .orm import close_all_sessions as close_all_sessions\nfrom .orm import DeclarativeMappedTest as DeclarativeMappedTest\nfrom .orm import fixture_session as fixture_session\nfrom .orm import MappedTest as MappedTest\nfrom .orm import ORMTest as ORMTest\nfrom .orm import RemoveORMEventsGlobally as RemoveORMEventsGlobally\nfrom .orm import (\n    stop_test_class_inside_fixtures as stop_test_class_inside_fixtures,\n)\nfrom .sql import CacheKeyFixture as CacheKeyFixture\nfrom .sql import (\n    ComputedReflectionFixtureTest as ComputedReflectionFixtureTest,\n)\nfrom .sql import insertmanyvalues_fixture as insertmanyvalues_fixture\nfrom .sql import NoCache as NoCache\nfrom .sql import RemovesEvents as RemovesEvents\nfrom .sql import TablesTest as TablesTest\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\bootstrap.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport abc\nfrom argparse import Namespace\nimport configparser\nimport logging\nimport os\nfrom pathlib import Path\nimport re\nimport sys\nfrom typing import Any\n\nfrom sqlalchemy.testing import asyncio\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\plugin_base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom __future__ import annotations\n\nimport argparse\nimport collections\nfrom functools import update_wrapper\nimport inspect\nimport itertools\nimport operator\nimport os\nimport re\nimport sys\nfrom typing import TYPE_CHECKING\nimport uuid\n\nimport pytest\n\ntry:\n    # installed by bootstrap.py\n    if not TYPE_CHECKING:\n        import sqla_plugin_base as plugin_base\nexcept ImportError:\n    # assume we",
      "https://github.com/pytest-dev/pytest/issues/9343\n    global _current_class, _current_report\n\n    if _current_class is not None and (\n        # last test or a new class\n        nextitem is None\n        or nextitem.getparent(pytest.Class) is not _current_class\n    ):\n        _current_class = None\n\n        try:\n            asyncio._maybe_async_provisioning(\n                plugin_base.stop_test_class_outside_fixtures, item.cls\n            )\n        except Exception as e:\n            # in case of an exception during teardown attach the original\n            # error to the exception message, otherwise it will get lost\n            if _current_report.failed:\n                if not e.args:\n                    e.args = (\n                        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\pytestplugin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import ForeignKey\nfrom ... import Integer\nfrom ... import select\nfrom ... import String\nfrom ... import testing\n\n\nclass CTETest(fixtures.TablesTest):\n    __backend__ = True\n    __requires__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_cte.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport random\n\nfrom . import testing\nfrom .. import config\nfrom .. import fixtures\nfrom .. import util\nfrom ..assertions import eq_\nfrom ..assertions import is_false\nfrom ..assertions import is_true\nfrom ..config import requirements\nfrom ..schema import Table\nfrom ... import CheckConstraint\nfrom ... import Column\nfrom ... import ForeignKeyConstraint\nfrom ... import Index\nfrom ... import inspect\nfrom ... import Integer\nfrom ... import schema\nfrom ... import String\nfrom ... import UniqueConstraint\n\n\nclass TableDDLTest(fixtures.TestBase):\n    __backend__ = True\n\n    def _simple_fixture(self, schema=None):\n        return Table(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_ddl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import Integer\nfrom ... import select\nfrom ... import testing\nfrom ... import union\n\n\nclass DeprecatedCompoundSelectTest(fixtures.TablesTest):\n    __backend__ = True\n\n    @classmethod\n    def define_tables(cls, metadata):\n        Table(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_deprecations.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport importlib\n\nfrom . import testing\nfrom .. import assert_raises\nfrom .. import config\nfrom .. import engines\nfrom .. import eq_\nfrom .. import fixtures\nfrom .. import is_not_none\nfrom .. import is_true\nfrom .. import ne_\nfrom .. import provide_metadata\nfrom ..assertions import expect_raises\nfrom ..assertions import expect_raises_message\nfrom ..config import requirements\nfrom ..provision import set_default_schema_on_connection\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import bindparam\nfrom ... import dialects\nfrom ... import event\nfrom ... import exc\nfrom ... import Integer\nfrom ... import literal_column\nfrom ... import select\nfrom ... import String\nfrom ...sql.compiler import Compiled\nfrom ...util import inspect_getfullargspec\n\n\nclass PingTest(fixtures.TestBase):\n    __backend__ = True\n\n    def test_do_ping(self):\n        with testing.db.connect() as conn:\n            is_true(\n                testing.db.dialect.do_ping(conn.connection.dbapi_connection)\n            )\n\n\nclass ArgSignatureTest(fixtures.TestBase):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_dialect.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom decimal import Decimal\nimport uuid\n\nfrom . import testing\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..config import requirements\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import Double\nfrom ... import Float\nfrom ... import Identity\nfrom ... import Integer\nfrom ... import literal\nfrom ... import literal_column\nfrom ... import Numeric\nfrom ... import select\nfrom ... import String\nfrom ...types import LargeBinary\nfrom ...types import UUID\nfrom ...types import Uuid\n\n\nclass LastrowidTest(fixtures.TablesTest):\n    run_deletes = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_insert.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport operator\nimport re\n\nimport sqlalchemy as sa\nfrom .. import config\nfrom .. import engines\nfrom .. import eq_\nfrom .. import expect_raises\nfrom .. import expect_raises_message\nfrom .. import expect_warnings\nfrom .. import fixtures\nfrom .. import is_\nfrom ..provision import get_temp_table_name\nfrom ..provision import temp_table_keyword_args\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import event\nfrom ... import ForeignKey\nfrom ... import func\nfrom ... import Identity\nfrom ... import inspect\nfrom ... import Integer\nfrom ... import MetaData\nfrom ... import String\nfrom ... import testing\nfrom ... import types as sql_types\nfrom ...engine import Inspector\nfrom ...engine import ObjectKind\nfrom ...engine import ObjectScope\nfrom ...exc import NoSuchTableError\nfrom ...exc import UnreflectableTableError\nfrom ...schema import DDL\nfrom ...schema import Index\nfrom ...sql.elements import quoted_name\nfrom ...sql.schema import BLANK_SCHEMA\nfrom ...testing import ComparesIndexes\nfrom ...testing import ComparesTables\nfrom ...testing import is_false\nfrom ...testing import is_true\nfrom ...testing import mock\n\n\nmetadata, users = None, None\n\n\nclass OneConnectionTablesTest(fixtures.TablesTest):\n    @classmethod\n    def setup_bind(cls):\n        # TODO: when temp tables are subject to server reset,\n        # this will also have to disable that server reset from\n        # happening\n        if config.requirements.independent_connections.enabled:\n            from sqlalchemy import pool\n\n            return engines.testing_engine(\n                options=dict(poolclass=pool.StaticPool, scope=",
      "https://www.arbinada.com/en/node/1645\n            sa.UniqueConstraint("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_reflection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport datetime\nimport re\n\nfrom .. import engines\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..config import requirements\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import DateTime\nfrom ... import func\nfrom ... import Integer\nfrom ... import select\nfrom ... import sql\nfrom ... import String\nfrom ... import testing\nfrom ... import text\n\n\nclass RowFetchTest(fixtures.TablesTest):\n    __backend__ = True\n\n    @classmethod\n    def define_tables(cls, metadata):\n        Table(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_results.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom sqlalchemy import bindparam\nfrom sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import select\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import testing\nfrom sqlalchemy import text\nfrom sqlalchemy.testing import eq_\nfrom sqlalchemy.testing import fixtures\n\n\nclass RowCountTest(fixtures.TablesTest):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_rowcount.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport collections.abc as collections_abc\nimport itertools\n\nfrom .. import AssertsCompiledSQL\nfrom .. import AssertsExecutionResults\nfrom .. import config\nfrom .. import fixtures\nfrom ..assertions import assert_raises\nfrom ..assertions import eq_\nfrom ..assertions import in_\nfrom ..assertsql import CursorSQL\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import bindparam\nfrom ... import case\nfrom ... import column\nfrom ... import Computed\nfrom ... import exists\nfrom ... import false\nfrom ... import ForeignKey\nfrom ... import func\nfrom ... import Identity\nfrom ... import Integer\nfrom ... import literal\nfrom ... import literal_column\nfrom ... import null\nfrom ... import select\nfrom ... import String\nfrom ... import table\nfrom ... import testing\nfrom ... import text\nfrom ... import true\nfrom ... import tuple_\nfrom ... import TupleType\nfrom ... import union\nfrom ... import values\nfrom ...exc import DatabaseError\nfrom ...exc import ProgrammingError\n\n\nclass CollateTest(fixtures.TablesTest):\n    __backend__ = True\n\n    @classmethod\n    def define_tables(cls, metadata):\n        Table(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_select.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .. import config\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..assertions import is_true\nfrom ..config import requirements\nfrom ..provision import normalize_sequence\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import inspect\nfrom ... import Integer\nfrom ... import MetaData\nfrom ... import Sequence\nfrom ... import String\nfrom ... import testing\n\n\nclass SequenceTest(fixtures.TablesTest):\n    __requires__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_sequence.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport datetime\nimport decimal\nimport json\nimport re\nimport uuid\n\nfrom .. import config\nfrom .. import engines\nfrom .. import fixtures\nfrom .. import mock\nfrom ..assertions import eq_\nfrom ..assertions import is_\nfrom ..assertions import ne_\nfrom ..config import requirements\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import and_\nfrom ... import ARRAY\nfrom ... import BigInteger\nfrom ... import bindparam\nfrom ... import Boolean\nfrom ... import case\nfrom ... import cast\nfrom ... import Date\nfrom ... import DateTime\nfrom ... import Enum\nfrom ... import Float\nfrom ... import Integer\nfrom ... import Interval\nfrom ... import JSON\nfrom ... import literal\nfrom ... import literal_column\nfrom ... import MetaData\nfrom ... import null\nfrom ... import Numeric\nfrom ... import select\nfrom ... import String\nfrom ... import testing\nfrom ... import Text\nfrom ... import Time\nfrom ... import TIMESTAMP\nfrom ... import type_coerce\nfrom ... import TypeDecorator\nfrom ... import Unicode\nfrom ... import UnicodeText\nfrom ... import UUID\nfrom ... import Uuid\nfrom ...orm import declarative_base\nfrom ...orm import Session\nfrom ...sql import sqltypes\nfrom ...sql.sqltypes import LargeBinary\nfrom ...sql.sqltypes import PickleType\n\n\nclass _LiteralRoundTripFixture:\n    supports_whereclause = True\n\n    @testing.fixture\n    def literal_round_trip(self, metadata, connection):\n        ",
      "https://bugs.python.org/issue16535\n\n            # inserting as strings to avoid a new fixture around the\n            # dialect which would have idiosyncrasies for different\n            # backends.\n\n            class DecimalEncoder(json.JSONEncoder):\n                def default(self, o):\n                    if isinstance(o, decimal.Decimal):\n                        return str(o)\n                    return super().default(o)\n\n            json_data = json.dumps(data_element, cls=DecimalEncoder)\n\n            # take the quotes out.  yup, there is *literally* no other\n            # way to get Python"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom sqlalchemy import desc\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import testing\nfrom sqlalchemy.testing import eq_\nfrom sqlalchemy.testing import fixtures\nfrom sqlalchemy.testing.schema import Column\nfrom sqlalchemy.testing.schema import Table\n\n\nclass UnicodeSchemaTest(fixtures.TablesTest):\n    __requires__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_unicode_ddl.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .. import fixtures\nfrom ..assertions import eq_\nfrom ..schema import Column\nfrom ..schema import Table\nfrom ... import Integer\nfrom ... import String\nfrom ... import testing\n\n\nclass SimpleUpdateDeleteTest(fixtures.TablesTest):\n    run_deletes = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_update_delete.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom .test_cte import *  # noqa\nfrom .test_ddl import *  # noqa\nfrom .test_deprecations import *  # noqa\nfrom .test_dialect import *  # noqa\nfrom .test_insert import *  # noqa\nfrom .test_reflection import *  # noqa\nfrom .test_results import *  # noqa\nfrom .test_rowcount import *  # noqa\nfrom .test_select import *  # noqa\nfrom .test_sequence import *  # noqa\nfrom .test_types import *  # noqa\nfrom .test_unicode_ddl import *  # noqa\nfrom .test_update_delete import *  # noqa\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport abc\nimport functools\nfrom typing import Any\nfrom typing import AsyncGenerator\nfrom typing import AsyncIterator\nfrom typing import Awaitable\nfrom typing import Callable\nfrom typing import ClassVar\nfrom typing import Dict\nfrom typing import Generator\nfrom typing import Generic\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import TypeVar\nimport weakref\n\nfrom . import exc as async_exc\nfrom ... import util\nfrom ...util.typing import Literal\nfrom ...util.typing import Self\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport asyncio\nimport contextlib\nfrom typing import Any\nfrom typing import AsyncIterator\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Generator\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import exc as async_exc\nfrom .base import asyncstartablecontext\nfrom .base import GeneratorStartableContext\nfrom .base import ProxyComparable\nfrom .base import StartableContext\nfrom .result import _ensure_sync_result\nfrom .result import AsyncResult\nfrom .result import AsyncScalarResult\nfrom ... import exc\nfrom ... import inspection\nfrom ... import util\nfrom ...engine import Connection\nfrom ...engine import create_engine as _create_engine\nfrom ...engine import create_pool_from_url as _create_pool_from_url\nfrom ...engine import Engine\nfrom ...engine.base import NestedTransaction\nfrom ...engine.base import Transaction\nfrom ...exc import ArgumentError\nfrom ...util.concurrency import greenlet_spawn\nfrom ...util.typing import Concatenate\nfrom ...util.typing import ParamSpec\n\nif TYPE_CHECKING:\n    from ...engine.cursor import CursorResult\n    from ...engine.interfaces import _CoreAnyExecuteParams\n    from ...engine.interfaces import _CoreSingleExecuteParams\n    from ...engine.interfaces import _DBAPIAnyExecuteParams\n    from ...engine.interfaces import _ExecuteOptions\n    from ...engine.interfaces import CompiledCacheType\n    from ...engine.interfaces import CoreExecuteOptionsParameter\n    from ...engine.interfaces import Dialect\n    from ...engine.interfaces import IsolationLevel\n    from ...engine.interfaces import SchemaTranslateMapType\n    from ...engine.result import ScalarResult\n    from ...engine.url import URL\n    from ...pool import Pool\n    from ...pool import PoolProxiedConnection\n    from ...sql._typing import _InfoType\n    from ...sql.base import Executable\n    from ...sql.selectable import TypedReturnsRows\n\n_P = ParamSpec("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\engine.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom ... import exc\n\n\nclass AsyncMethodRequired(exc.InvalidRequestError):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\exc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport operator\nfrom typing import Any\nfrom typing import AsyncIterator\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nfrom . import exc as async_exc\nfrom ... import util\nfrom ...engine import Result\nfrom ...engine.result import _NO_ROW\nfrom ...engine.result import _R\nfrom ...engine.result import _WithKeys\nfrom ...engine.result import FilterResult\nfrom ...engine.result import FrozenResult\nfrom ...engine.result import ResultMetaData\nfrom ...engine.row import Row\nfrom ...engine.row import RowMapping\nfrom ...sql.base import _generative\nfrom ...util.concurrency import greenlet_spawn\nfrom ...util.typing import Literal\nfrom ...util.typing import Self\n\nif TYPE_CHECKING:\n    from ...engine import CursorResult\n    from ...engine.result import _KeyIndexType\n    from ...engine.result import _UniqueFilterType\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\result.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom .session import _AS\nfrom .session import async_sessionmaker\nfrom .session import AsyncSession\nfrom ... import exc as sa_exc\nfrom ... import util\nfrom ...orm.session import Session\nfrom ...util import create_proxy_methods\nfrom ...util import ScopedRegistry\nfrom ...util import warn\nfrom ...util import warn_deprecated\n\nif TYPE_CHECKING:\n    from .engine import AsyncConnection\n    from .result import AsyncResult\n    from .result import AsyncScalarResult\n    from .session import AsyncSessionTransaction\n    from ...engine import Connection\n    from ...engine import CursorResult\n    from ...engine import Engine\n    from ...engine import Result\n    from ...engine import Row\n    from ...engine import RowMapping\n    from ...engine.interfaces import _CoreAnyExecuteParams\n    from ...engine.interfaces import CoreExecuteOptionsParameter\n    from ...engine.result import ScalarResult\n    from ...orm._typing import _IdentityKeyType\n    from ...orm._typing import _O\n    from ...orm._typing import OrmExecuteOptionsParameter\n    from ...orm.interfaces import ORMOption\n    from ...orm.session import _BindArguments\n    from ...orm.session import _EntityBindKey\n    from ...orm.session import _PKIdentityArgument\n    from ...orm.session import _SessionBind\n    from ...sql.base import Executable\n    from ...sql.dml import UpdateBase\n    from ...sql.elements import ClauseElement\n    from ...sql.selectable import ForUpdateParameter\n    from ...sql.selectable import TypedReturnsRows\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\scoping.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport asyncio\nfrom typing import Any\nfrom typing import Awaitable\nfrom typing import Callable\nfrom typing import cast\nfrom typing import Dict\nfrom typing import Generic\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom . import engine\nfrom .base import ReversibleProxy\nfrom .base import StartableContext\nfrom .result import _ensure_sync_result\nfrom .result import AsyncResult\nfrom .result import AsyncScalarResult\nfrom ... import util\nfrom ...orm import close_all_sessions as _sync_close_all_sessions\nfrom ...orm import object_session\nfrom ...orm import Session\nfrom ...orm import SessionTransaction\nfrom ...orm import state as _instance_state\nfrom ...util.concurrency import greenlet_spawn\nfrom ...util.typing import Concatenate\nfrom ...util.typing import ParamSpec\n\n\nif TYPE_CHECKING:\n    from .engine import AsyncConnection\n    from .engine import AsyncEngine\n    from ...engine import Connection\n    from ...engine import CursorResult\n    from ...engine import Engine\n    from ...engine import Result\n    from ...engine import Row\n    from ...engine import RowMapping\n    from ...engine import ScalarResult\n    from ...engine.interfaces import _CoreAnyExecuteParams\n    from ...engine.interfaces import CoreExecuteOptionsParameter\n    from ...event import dispatcher\n    from ...orm._typing import _IdentityKeyType\n    from ...orm._typing import _O\n    from ...orm._typing import OrmExecuteOptionsParameter\n    from ...orm.identity import IdentityMap\n    from ...orm.interfaces import ORMOption\n    from ...orm.session import _BindArguments\n    from ...orm.session import _EntityBindKey\n    from ...orm.session import _PKIdentityArgument\n    from ...orm.session import _SessionBind\n    from ...orm.session import _SessionBindKey\n    from ...sql._typing import _InfoType\n    from ...sql.base import Executable\n    from ...sql.dml import UpdateBase\n    from ...sql.elements import ClauseElement\n    from ...sql.selectable import ForUpdateParameter\n    from ...sql.selectable import TypedReturnsRows\n\n_AsyncSessionBind = Union["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\session.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom .engine import async_engine_from_config as async_engine_from_config\nfrom .engine import AsyncConnection as AsyncConnection\nfrom .engine import AsyncEngine as AsyncEngine\nfrom .engine import AsyncTransaction as AsyncTransaction\nfrom .engine import create_async_engine as create_async_engine\nfrom .engine import create_async_pool_from_url as create_async_pool_from_url\nfrom .result import AsyncMappingResult as AsyncMappingResult\nfrom .result import AsyncResult as AsyncResult\nfrom .result import AsyncScalarResult as AsyncScalarResult\nfrom .result import AsyncTupleResult as AsyncTupleResult\nfrom .scoping import async_scoped_session as async_scoped_session\nfrom .session import async_object_session as async_object_session\nfrom .session import async_session as async_session\nfrom .session import async_sessionmaker as async_sessionmaker\nfrom .session import AsyncAttrs as AsyncAttrs\nfrom .session import AsyncSession as AsyncSession\nfrom .session import AsyncSessionTransaction as AsyncSessionTransaction\nfrom .session import close_all_sessions as close_all_sessions\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\declarative\\extensions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom .extensions import AbstractConcreteBase\nfrom .extensions import ConcreteBase\nfrom .extensions import DeferredReflection\nfrom ... import util\nfrom ...orm.decl_api import as_declarative as _as_declarative\nfrom ...orm.decl_api import declarative_base as _declarative_base\nfrom ...orm.decl_api import DeclarativeMeta\nfrom ...orm.decl_api import declared_attr\nfrom ...orm.decl_api import has_inherited_table as _has_inherited_table\nfrom ...orm.decl_api import synonym_for as _synonym_for\n\n\n@util.moved_20(\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\declarative\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\nfrom typing import Union\n\nfrom mypy.nodes import ARG_NAMED_OPT\nfrom mypy.nodes import Argument\nfrom mypy.nodes import AssignmentStmt\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import ClassDef\nfrom mypy.nodes import MDEF\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import RefExpr\nfrom mypy.nodes import StrExpr\nfrom mypy.nodes import SymbolTableNode\nfrom mypy.nodes import TempNode\nfrom mypy.nodes import TypeInfo\nfrom mypy.nodes import Var\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.plugins.common import add_method_to_class\nfrom mypy.types import AnyType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import NoneTyp\nfrom mypy.types import ProperType\nfrom mypy.types import TypeOfAny\nfrom mypy.types import UnboundType\nfrom mypy.types import UnionType\n\nfrom . import infer\nfrom . import util\nfrom .names import expr_to_mapped_constructor\nfrom .names import NAMED_TYPE_SQLA_MAPPED\n\n\ndef apply_mypy_mapped_attr(\n    cls: ClassDef,\n    api: SemanticAnalyzerPluginInterface,\n    item: Union[NameExpr, StrExpr],\n    attributes: List[util.SQLAlchemyAttribute],\n) -> None:\n    if isinstance(item, NameExpr):\n        name = item.name\n    elif isinstance(item, StrExpr):\n        name = item.value\n    else:\n        return None\n\n    for stmt in cls.defs.body:\n        if (\n            isinstance(stmt, AssignmentStmt)\n            and isinstance(stmt.lvalues[0], NameExpr)\n            and stmt.lvalues[0].name == name\n        ):\n            break\n    else:\n        util.fail(api, f"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\apply.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\nfrom typing import Union\n\nfrom mypy.nodes import AssignmentStmt\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import ClassDef\nfrom mypy.nodes import Decorator\nfrom mypy.nodes import LambdaExpr\nfrom mypy.nodes import ListExpr\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import PlaceholderNode\nfrom mypy.nodes import RefExpr\nfrom mypy.nodes import StrExpr\nfrom mypy.nodes import SymbolNode\nfrom mypy.nodes import SymbolTableNode\nfrom mypy.nodes import TempNode\nfrom mypy.nodes import TypeInfo\nfrom mypy.nodes import Var\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.types import AnyType\nfrom mypy.types import CallableType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import NoneType\nfrom mypy.types import ProperType\nfrom mypy.types import Type\nfrom mypy.types import TypeOfAny\nfrom mypy.types import UnboundType\nfrom mypy.types import UnionType\n\nfrom . import apply\nfrom . import infer\nfrom . import names\nfrom . import util\n\n\ndef scan_declarative_assignments_and_apply_types(\n    cls: ClassDef,\n    api: SemanticAnalyzerPluginInterface,\n    is_mixin_scan: bool = False,\n) -> Optional[List[util.SQLAlchemyAttribute]]:\n    info = util.info_for_cls(cls, api)\n\n    if info is None:\n        # this can occur during cached passes\n        return None\n    elif cls.fullname.startswith("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\decl_class.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Optional\nfrom typing import Sequence\n\nfrom mypy.maptype import map_instance_to_supertype\nfrom mypy.nodes import AssignmentStmt\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import Expression\nfrom mypy.nodes import FuncDef\nfrom mypy.nodes import LambdaExpr\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import RefExpr\nfrom mypy.nodes import StrExpr\nfrom mypy.nodes import TypeInfo\nfrom mypy.nodes import Var\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.subtypes import is_subtype\nfrom mypy.types import AnyType\nfrom mypy.types import CallableType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import NoneType\nfrom mypy.types import ProperType\nfrom mypy.types import TypeOfAny\nfrom mypy.types import UnionType\n\nfrom . import names\nfrom . import util\n\n\ndef infer_type_from_right_hand_nameexpr(\n    api: SemanticAnalyzerPluginInterface,\n    stmt: AssignmentStmt,\n    node: Var,\n    left_hand_explicit_type: Optional[ProperType],\n    infer_from_right_side: RefExpr,\n) -> Optional[ProperType]:\n    type_id = names.type_id_for_callee(infer_from_right_side)\n    if type_id is None:\n        return None\n    elif type_id is names.MAPPED:\n        python_type_for_type = _infer_type_from_mapped(\n            api, stmt, node, left_hand_explicit_type, infer_from_right_side\n        )\n    elif type_id is names.COLUMN:\n        python_type_for_type = _infer_type_from_decl_column(\n            api, stmt, node, left_hand_explicit_type\n        )\n    elif type_id is names.RELATIONSHIP:\n        python_type_for_type = _infer_type_from_relationship(\n            api, stmt, node, left_hand_explicit_type\n        )\n    elif type_id is names.COLUMN_PROPERTY:\n        python_type_for_type = _infer_type_from_decl_column_property(\n            api, stmt, node, left_hand_explicit_type\n        )\n    elif type_id is names.SYNONYM_PROPERTY:\n        python_type_for_type = infer_type_from_left_hand_type_only(\n            api, node, left_hand_explicit_type\n        )\n    elif type_id is names.COMPOSITE_PROPERTY:\n        python_type_for_type = _infer_type_from_decl_composite_property(\n            api, stmt, node, left_hand_explicit_type\n        )\n    else:\n        return None\n\n    return python_type_for_type\n\n\ndef _infer_type_from_relationship(\n    api: SemanticAnalyzerPluginInterface,\n    stmt: AssignmentStmt,\n    node: Var,\n    left_hand_explicit_type: Optional[ProperType],\n) -> Optional[ProperType]:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\infer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Union\n\nfrom mypy.nodes import ARG_POS\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import ClassDef\nfrom mypy.nodes import Decorator\nfrom mypy.nodes import Expression\nfrom mypy.nodes import FuncDef\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import OverloadedFuncDef\nfrom mypy.nodes import SymbolNode\nfrom mypy.nodes import TypeAlias\nfrom mypy.nodes import TypeInfo\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.types import CallableType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import UnboundType\n\nfrom ... import util\n\nCOLUMN: int = util.symbol("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\names.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\plugin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport re\nfrom typing import Any\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import Type as TypingType\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom mypy import version\nfrom mypy.messages import format_type as _mypy_format_type\nfrom mypy.nodes import CallExpr\nfrom mypy.nodes import ClassDef\nfrom mypy.nodes import CLASSDEF_NO_INFO\nfrom mypy.nodes import Context\nfrom mypy.nodes import Expression\nfrom mypy.nodes import FuncDef\nfrom mypy.nodes import IfStmt\nfrom mypy.nodes import JsonDict\nfrom mypy.nodes import MemberExpr\nfrom mypy.nodes import NameExpr\nfrom mypy.nodes import Statement\nfrom mypy.nodes import SymbolTableNode\nfrom mypy.nodes import TypeAlias\nfrom mypy.nodes import TypeInfo\nfrom mypy.options import Options\nfrom mypy.plugin import ClassDefContext\nfrom mypy.plugin import DynamicClassDefContext\nfrom mypy.plugin import SemanticAnalyzerPluginInterface\nfrom mypy.plugins.common import deserialize_and_fixup_type\nfrom mypy.typeops import map_type_from_supertype\nfrom mypy.types import CallableType\nfrom mypy.types import get_proper_type\nfrom mypy.types import Instance\nfrom mypy.types import NoneType\nfrom mypy.types import Type\nfrom mypy.types import TypeVarType\nfrom mypy.types import UnboundType\nfrom mypy.types import UnionType\n\n_vers = tuple(\n    [int(x) for x in version.__version__.split("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nr",
      "https://pypi.org/project/aioodbc/\n\n\nSupport for the SQL Server database in asyncio style, using the aioodbc\ndriver which itself is a thread-wrapper around pyodbc.\n\n.. versionadded:: 2.0.23  Added the mssql+aioodbc dialect which builds\n   on top of the pyodbc and general aio* dialect architecture.\n\nUsing a special asyncio mediation layer, the aioodbc dialect is usable\nas the backend for the :ref:`SQLAlchemy asyncio <asyncio_toplevel>`\nextension package.\n\nMost behaviors and caveats for this driver are the same as that of the\npyodbc dialect used on SQL Server; see :ref:`mssql_pyodbc` for general\nbackground.\n\nThis dialect should normally be used only with the\n:func:`_asyncio.create_async_engine` engine creation function; connection\nstyles are otherwise equivalent to those documented in the pyodbc section::\n\n    from sqlalchemy.ext.asyncio import create_async_engine\n    engine = create_async_engine(\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\aioodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n",
      "https://technet.microsoft.com/en-us/library/ms187993.aspx>`_,\nthe ``NTEXT``, ``TEXT`` and ``IMAGE`` datatypes are to be removed from SQL\nServer in a future release.   SQLAlchemy normally relates these types to the\n:class:`.UnicodeText`, :class:`_expression.TextClause` and\n:class:`.LargeBinary` datatypes.\n\nIn order to accommodate this change, a new flag ``deprecate_large_types``\nis added to the dialect, which will be automatically set based on detection\nof the server version in use, if not otherwise set by the user.  The\nbehavior of this flag is as follows:\n\n* When this flag is ``True``, the :class:`.UnicodeText`,\n  :class:`_expression.TextClause` and\n  :class:`.LargeBinary` datatypes, when used to render DDL, will render the\n  types ``NVARCHAR(max)``, ``VARCHAR(max)``, and ``VARBINARY(max)``,\n  respectively.  This is a new behavior as of the addition of this flag.\n\n* When this flag is ``False``, the :class:`.UnicodeText`,\n  :class:`_expression.TextClause` and\n  :class:`.LargeBinary` datatypes, when used to render DDL, will render the\n  types ``NTEXT``, ``TEXT``, and ``IMAGE``,\n  respectively.  This is the long-standing behavior of these types.\n\n* The flag begins with the value ``None``, before a database connection is\n  established.   If the dialect is used to render DDL without the flag being\n  set, it is interpreted the same as ``False``.\n\n* On first connection, the dialect detects if SQL Server version 2012 or\n  greater is in use; if the flag is still at ``None``, it sets it to ``True``\n  or ``False`` based on whether 2012 or greater is detected.\n\n* The flag can be set to either ``True`` or ``False`` when the dialect\n  is created, typically via :func:`_sa.create_engine`::\n\n        eng = create_engine(",
      "https://msdn.microsoft.com/en-us/library/ms175095.aspx.\n\n",
      "https://sqlserverbuilds.blogspot.com/\nMS_2017_VERSION = (14,)\nMS_2016_VERSION = (13,)\nMS_2014_VERSION = (12,)\nMS_2012_VERSION = (11,)\nMS_2008_VERSION = (10,)\nMS_2005_VERSION = (9,)\nMS_2000_VERSION = (8,)\n\nRESERVED_WORDS = {\n    ",
      "https://github.com/mkleehammer/pyodbc/wiki/Tips-and-Tricks-by-Database-Platform#time-columns\n                pass TIME value as string\n                ",
      "https://stackoverflow.com/a/30403242/34549\n                    value = int(codecs.encode(value, ",
      "https://stackoverflow.com/questions/8311959/\n        # specifying-schema-for-temporary-tables\n\n        try:\n            return connection.execute(\n                sql.text(\n                    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import cast\nfrom ... import Column\nfrom ... import MetaData\nfrom ... import Table\nfrom ...ext.compiler import compiles\nfrom ...sql import expression\nfrom ...types import Boolean\nfrom ...types import Integer\nfrom ...types import Numeric\nfrom ...types import NVARCHAR\nfrom ...types import String\nfrom ...types import TypeDecorator\nfrom ...types import Unicode\n\n\nischema = MetaData()\n\n\nclass CoerceUnicode(TypeDecorator):\n    impl = Unicode\n    cache_ok = True\n\n    def bind_expression(self, bindvalue):\n        return _cast_on_2005(bindvalue)\n\n\nclass _cast_on_2005(expression.ColumnElement):\n    def __init__(self, bindvalue):\n        self.bindvalue = bindvalue\n\n\n@compiles(_cast_on_2005)\ndef _compile(element, compiler, **kw):\n    from . import base\n\n    if (\n        compiler.dialect.server_version_info is None\n        or compiler.dialect.server_version_info < base.MS_2005_VERSION\n    ):\n        return compiler.process(element.bindvalue, **kw)\n    else:\n        return compiler.process(cast(element.bindvalue, Unicode), **kw)\n\n\nschemata = Table(\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\information_schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import types as sqltypes\n\n# technically, all the dialect-specific datatypes that don"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom sqlalchemy import inspect\nfrom sqlalchemy import Integer\nfrom ... import create_engine\nfrom ... import exc\nfrom ...schema import Column\nfrom ...schema import DropConstraint\nfrom ...schema import ForeignKeyConstraint\nfrom ...schema import MetaData\nfrom ...schema import Table\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_all_schema_objects_pre_tables\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import generate_driver_url\nfrom ...testing.provision import get_temp_table_name\nfrom ...testing.provision import log\nfrom ...testing.provision import normalize_sequence\nfrom ...testing.provision import run_reap_dbs\nfrom ...testing.provision import temp_table_keyword_args\n\n\n@generate_driver_url.for_db("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://www.freetds.org/>`_.\n\n.. versionchanged:: 2.0.5\n\n    pymssql was restored to SQLAlchemy"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\pymssql.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"tiger\"",
      "password=\"tiger\"",
      "password=\"tiger\""
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\pyodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/pyodbc/\n\nConnecting to PyODBC\n--------------------\n\nThe URL here is to be translated to PyODBC connection strings, as\ndetailed in `ConnectionStrings <https://code.google.com/p/pyodbc/wiki/ConnectionStrings>`_.\n\nDSN Connections\n^^^^^^^^^^^^^^^\n\nA DSN connection in ODBC means that a pre-existing ODBC datasource is\nconfigured on the client machine.   The application then specifies the name\nof this datasource, which encompasses details such as the specific ODBC driver\nin use as well as the network address of the database.   Assuming a datasource\nis configured on the client, a basic DSN-based connection looks like::\n\n    engine = create_engine(",
      "https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-databases>`_,\nusing the parameter ``odbc_connect``.  A :class:`_sa.engine.URL` object\ncan help make this easier::\n\n    from sqlalchemy.engine import URL\n    connection_string = ",
      "https://docs.microsoft.com/en-us/azure/developer/python/azure-sdk-authenticate?tabs=bash>`_.\n\nAfter getting an engine, the credentials need to be sent to ``pyodbc.connect``\neach time a connection is requested. One way to do this is to set up an event\nlistener on the engine that adds the credential token to the dialect",
      "https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token>`_.\n\nThe following code snippet will create an engine that connects to an Azure SQL\ndatabase using Azure credentials::\n\n    import struct\n    from sqlalchemy import create_engine, event\n    from sqlalchemy.engine.url import URL\n    from azure import identity\n\n    SQL_COPT_SS_ACCESS_TOKEN = 1256  # Connection option for access tokens, as defined in msodbcsql.h\n    TOKEN_URL = ",
      "https://database.windows.net/",
      "https://docs.microsoft.com/en-us/sql/connect/odbc/using-azure-active-directory#authenticating-with-an-access-token>`_,\n    stating that a connection string when using an access token must not contain\n    ``UID``, ``PWD``, ``Authentication`` or ``Trusted_Connection`` parameters.\n\n.. _azure_synapse_ignore_no_transaction_on_rollback:\n\nAvoiding transaction-related exceptions on Azure Synapse Analytics\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAzure Synapse Analytics has a significant difference in its transaction\nhandling compared to plain SQL Server; in some cases an error within a Synapse\ntransaction can cause it to be arbitrarily terminated on the server side, which\nthen causes the DBAPI ``.rollback()`` method (as well as ``.commit()``) to\nfail. The issue prevents the usual DBAPI contract of allowing ``.rollback()``\nto pass silently if no transaction is present as the driver does not expect\nthis condition. The symptom of this failure is an exception with a message\nresembling ",
      "https://github.com/mkleehammer/pyodbc/issues/835>`_.\n\nStarting with ODBC Driver 18 for SQL Server we can override the legacy\nbehavior and pass long strings as varchar(max)/nvarchar(max) using the\n``LongAsMax=Yes`` connection string parameter::\n\n    connection_url = sa.engine.URL.create(\n        ",
      "https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling>`_ by\ndefault, which means connections will be longer lived than they are within\nSQLAlchemy itself.  As SQLAlchemy has its own pooling behavior, it is often\npreferable to disable this behavior.  This behavior can only be disabled\nglobally at the PyODBC module level, **before** any connections are made::\n\n    import pyodbc\n\n    pyodbc.pooling = False\n\n    # don",
      "https://github.com/mkleehammer/pyodbc/wiki/The-pyodbc-Module#pooling>`_ -\n    in the PyODBC documentation.\n\nDriver / Unicode Support\n-------------------------\n\nPyODBC works best with Microsoft ODBC drivers, particularly in the area\nof Unicode support on both Python 2 and Python 3.\n\nUsing the FreeTDS ODBC drivers on Linux or OSX with PyODBC is **not**\nrecommended; there have been historically many Unicode-related issues\nin this area, including before Microsoft offered ODBC drivers for Linux\nand OSX.   Now that Microsoft offers drivers for all platforms, for\nPyODBC support these are recommended.  FreeTDS remains relevant for\nnon-ODBC drivers such as pymssql where it works very well.\n\n\nRowcount Support\n----------------\n\nPrevious limitations with the SQLAlchemy ORM",
      "https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany>`_\n    - on github\n\n.. _mssql_pyodbc_setinputsizes:\n\nSetinputsizes Support\n-----------------------\n\nAs of version 2.0, the pyodbc ``cursor.setinputsizes()`` method is used for\nall statement executions, except for ``cursor.executemany()`` calls when\nfast_executemany=True where it is not supported (assuming\n:ref:`insertmanyvalues <engine_insertmanyvalues>` is kept enabled,\n",
      "https://msdn.microsoft.com/en-us/library/ms190315.aspx\n\n        Background on why we attempt to embed ",
      "https://code.google.com/p/pyodbc/wiki/FAQs#How_do_I_retrieve_autogenerated/identity_values?\n\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\pyodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom . import aioodbc  # noqa\nfrom . import base  # noqa\nfrom . import pymssql  # noqa\nfrom . import pyodbc  # noqa\nfrom .base import BIGINT\nfrom .base import BINARY\nfrom .base import BIT\nfrom .base import CHAR\nfrom .base import DATE\nfrom .base import DATETIME\nfrom .base import DATETIME2\nfrom .base import DATETIMEOFFSET\nfrom .base import DECIMAL\nfrom .base import DOUBLE_PRECISION\nfrom .base import FLOAT\nfrom .base import IMAGE\nfrom .base import INTEGER\nfrom .base import JSON\nfrom .base import MONEY\nfrom .base import NCHAR\nfrom .base import NTEXT\nfrom .base import NUMERIC\nfrom .base import NVARCHAR\nfrom .base import REAL\nfrom .base import ROWVERSION\nfrom .base import SMALLDATETIME\nfrom .base import SMALLINT\nfrom .base import SMALLMONEY\nfrom .base import SQL_VARIANT\nfrom .base import TEXT\nfrom .base import TIME\nfrom .base import TIMESTAMP\nfrom .base import TINYINT\nfrom .base import UNIQUEIDENTIFIER\nfrom .base import VARBINARY\nfrom .base import VARCHAR\nfrom .base import XML\nfrom ...sql import try_cast\n\n\nbase.dialect = dialect = pyodbc.dialect\n\n\n__all__ = (\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://github.com/aio-libs/aiomysql\n\nThe aiomysql dialect is SQLAlchemy",
      "https://github.com/aio-libs/aiomysql/issues/543\n        self._cursor = self.await_(cursor.__aenter__())\n        self._rows = deque()\n\n    @property\n    def description(self):\n        return self._cursor.description\n\n    @property\n    def rowcount(self):\n        return self._cursor.rowcount\n\n    @property\n    def arraysize(self):\n        return self._cursor.arraysize\n\n    @arraysize.setter\n    def arraysize(self, value):\n        self._cursor.arraysize = value\n\n    @property\n    def lastrowid(self):\n        return self._cursor.lastrowid\n\n    def close(self):\n        # note we aren"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\aiomysql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://github.com/long2ice/asyncmy\n\nUsing a special asyncio mediation layer, the asyncmy dialect is usable\nas the backend for the :ref:`SQLAlchemy asyncio <asyncio_toplevel>`\nextension package.\n\nThis dialect should normally be used only with the\n:func:`_asyncio.create_async_engine` engine creation function::\n\n    from sqlalchemy.ext.asyncio import create_async_engine\n    engine = create_async_engine("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\asyncmy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html>`_ - \\\n    in the MySQL documentation\n\n.. _mysql_binary_introducer:\n\nDealing with Binary Data Warnings and Unicode\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMySQL versions 5.6, 5.7 and later (not MariaDB at the time of this writing) now\nemit a warning when attempting to pass binary data to the database, while a\ncharacter set encoding is also in place, when the binary data itself is not\nvalid for that encoding::\n\n    default.py:509: Warning: (1300, ",
      "https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html>`_ - on the MySQL website\n\n\nANSI Quoting Style\n------------------\n\nMySQL / MariaDB feature two varieties of identifier ",
      "https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html>`_  for\nboth Servers and Clients. To change the ``sql_mode`` for a given application, a\ndeveloper can leverage SQLAlchemy",
      "https://dev.mysql.com/doc/refman/5.0/en/create-index.html>`_ - MySQL documentation\n\nIndex Types\n~~~~~~~~~~~~~\n\nSome MySQL storage engines permit you to specify an index type when creating\nan index or primary key constraint. SQLAlchemy provides this feature via the\n``mysql_using`` parameter on :class:`.Index`::\n\n    Index(",
      "https://dev.mysql.com/doc/refman/5.0/en/create-index.html\n\nhttps://dev.mysql.com/doc/refman/5.0/en/create-table.html\n\nIndex Parsers\n~~~~~~~~~~~~~\n\nCREATE FULLTEXT INDEX in MySQL also supports a ",
      "https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html\n#sysvar_explicit_defaults_for_timestamp>`_ which disables the above behavior,\nand in MySQL 8 this flag defaults to true, meaning in order to get a MySQL\n",
      "https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html\n#sysvar_explicit_defaults_for_timestamp>`_ configuration flag introduced in\nMySQL 5.6.  With this server setting enabled, TIMESTAMP columns behave like\nany other datatype on the MySQL side with regards to defaults and nullability.\n\nHowever, to accommodate the vast majority of MySQL databases that do not\nspecify this new flag, SQLAlchemy emits the ",
      "https://dev.mysql.com/doc/refman/5.0/en/select.html\n            if limit_clause is None:\n                # TODO: remove ??\n                # hardwire the upper limit.  Currently\n                # needed consistent with the usage of the upper\n                # bound as part of MySQL",
      "https://docs.sqlalchemy.org/en/latest/dialects/mysql.html#mysql_timestamp_null  # noqa\n        elif column.nullable and is_timestamp:\n            colspec.append(",
      "https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html  # noqa: E501\n            # there are a lot of codes that *may* pop up here at some point\n            # but we continue to be fairly conservative.  We include:\n            # 1146: Table ",
      "https://mariadb.com/kb/en/mariadb-1045-release-notes/\n            return self.server_version_info >= (10, 4, 5)\n        else:\n            # ref https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-17.html#mysqld-8-0-17-feature  # noqa\n            return self.server_version_info >= (8, 0, 17)\n\n    @property\n    def _is_mariadb(self):\n        return self.is_mariadb\n\n    @property\n    def _is_mysql(self):\n        return not self.is_mariadb\n\n    @property\n    def _is_mariadb_102(self):\n        return self.is_mariadb and self._mariadb_normalized_version_info > (\n            10,\n            2,\n        )\n\n    @reflection.cache\n    def get_schema_names(self, connection, **kw):\n        rp = connection.exec_driver_sql(",
      "https://bugs.mysql.com/bug.php?id=88718\n        # issue #4344 for SQLAlchemy\n\n        # table name also for MySQL 8.0\n        # https://bugs.mysql.com/bug.php?id=96365\n        # issue #4751 for SQLAlchemy\n\n        # for lower_case_table_names=2, information_schema.columns\n        # preserves the original table/schema casing, but SHOW CREATE\n        # TABLE does not.   this problem is not in lower_case_table_names=1,\n        # but use case-insensitive matching for these two modes in any case.\n\n        if self._casing in (1, 2):\n\n            def lower(s):\n                return s.lower()\n\n        else:\n            # if on case sensitive, there can be two tables referenced\n            # with the same name different casing, so we need to use\n            # case-sensitive matching.\n            def lower(s):\n                return s\n\n        default_schema_name = connection.dialect.default_schema_name\n        col_tuples = [\n            (\n                lower(rec[",
      "https://dev.mysql.com/doc/refman/en/identifier-case-sensitivity.html\n\n        setting = self._fetch_setting(connection, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://github.com/nakagami/CyMySQL\n\n.. note::\n\n    The CyMySQL dialect is **not tested as part of SQLAlchemy"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\cymysql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import List\nfrom typing import Mapping\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\n\nfrom ... import exc\nfrom ... import util\nfrom ...sql._typing import _DMLTableArgument\nfrom ...sql.base import _exclusive_against\nfrom ...sql.base import _generative\nfrom ...sql.base import ColumnCollection\nfrom ...sql.base import ReadOnlyColumnCollection\nfrom ...sql.dml import Insert as StandardInsert\nfrom ...sql.elements import ClauseElement\nfrom ...sql.elements import KeyedColumnElement\nfrom ...sql.expression import alias\nfrom ...sql.selectable import NamedFromClause\nfrom ...util.typing import Self\n\n\n__all__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\dml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport re\n\nfrom .types import _StringType\nfrom ... import exc\nfrom ... import sql\nfrom ... import util\nfrom ...sql import sqltypes\n\n\nclass ENUM(sqltypes.NativeForEmulated, sqltypes.Enum, _StringType):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\enumerated.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom ... import exc\nfrom ... import util\nfrom ...sql import coercions\nfrom ...sql import elements\nfrom ...sql import operators\nfrom ...sql import roles\nfrom ...sql.base import _generative\nfrom ...sql.base import Generative\nfrom ...util.typing import Self\n\n\nclass match(Generative, elements.BinaryExpression):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\expression.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import types as sqltypes\n\n\nclass JSON(sqltypes.JSON):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom .base import MariaDBIdentifierPreparer\nfrom .base import MySQLDialect\n\n\nclass MariaDBDialect(MySQLDialect):\n    is_mariadb = True\n    supports_statement_cache = True\n    name = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mariadb.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://pypi.org/project/mariadb/\n\nDriver Status\n-------------\n\nMariaDB Connector/Python enables Python programs to access MariaDB and MySQL\ndatabases using an API which is compliant with the Python DB API 2.0 (PEP-249).\nIt is written in C and uses MariaDB Connector/C client library for client server\ncommunication.\n\nNote that the default driver for a ``mariadb://`` connection URI continues to\nbe ``mysqldb``. ``mariadb+mariadbconnector://`` is required to use this driver.\n\n.. mariadb: https://github.com/mariadb-corporation/mariadb-connector-python\n\n",
      "https://jira.mariadb.org/browse/CONPY-270.  When that issue is fixed,\n    # this type can be removed.\n    def result_processor(self, dialect, coltype):\n        if self.as_uuid:\n\n            def process(value):\n                if value is not None:\n                    if hasattr(value, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mariadbconnector.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://pypi.org/project/mysql-connector-python/\n\n.. note::\n\n    The MySQL Connector/Python DBAPI has had many issues since its release,\n    some of which may remain unresolved, and the mysqlconnector dialect is\n    **not tested as part of SQLAlchemy"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqlconnector.py"
  },
  {
    "pattern": "mysql\\+mysqlconnector://",
    "matches": [
      "mysql+mysqlconnector://"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqlconnector.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"passwd\""
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://pypi.org/project/mysqlclient/\n\nDriver Status\n-------------\n\nThe mysqlclient DBAPI is a maintained fork of the\n`MySQL-Python <https://sourceforge.net/projects/mysql-python>`_ DBAPI\nthat is no longer maintained.  `mysqlclient`_ supports Python 2 and Python 3\nand is very stable.\n\n.. _mysqlclient: https://github.com/PyMySQL/mysqlclient-python\n\n.. _mysqldb_unicode:\n\nUnicode\n-------\n\nPlease see :ref:`mysql_unicode` for current recommendations on unicode\nhandling.\n\n.. _mysqldb_ssl:\n\nSSL Connections\n----------------\n\nThe mysqlclient and PyMySQL DBAPIs accept an additional dictionary under the\nkey ",
      "https://github.com/farcepest/MySQLdb1/commit/cd44524fef63bd3fcb71947392326e9742d520e8\n        # specific issue w/ the utf8mb4_bin collation and unicode returns\n\n        collation = connection.exec_driver_sql(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/gord/client-ssl/ca.pem",
      "/home/gord/client-ssl/client-cert.pem",
      "/home/gord/client-ssl/client-key.pem",
      "/home/gord/client-ssl/ca.pem",
      "/home/gord/client-ssl/client-cert.pem",
      "/home/gord/client-ssl/client-key.pem"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.134",
      "192.168.0.134"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import exc\nfrom ...testing.provision import configure_follower\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import generate_driver_url\nfrom ...testing.provision import temp_table_keyword_args\nfrom ...testing.provision import upsert\n\n\n@generate_driver_url.for_db("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://pymysql.readthedocs.io/\n\nUnicode\n-------\n\nPlease see :ref:`mysql_unicode` for current recommendations on unicode\nhandling.\n\n.. _pymysql_ssl:\n\nSSL Connections\n------------------\n\nThe PyMySQL DBAPI accepts the same SSL arguments as that of MySQLdb,\ndescribed at :ref:`mysqldb_ssl`.   See that section for additional examples.\n\nIf the server uses an automatically-generated certificate that is self-signed\nor does not match the host name (as seen from the client), it may also be\nnecessary to indicate ``ssl_check_hostname=false`` in PyMySQL::\n\n    connection_uri = (\n        ",
      "https://github.com/PyMySQL/mysqlclient/discussions/651#discussioncomment-7308971\n        for background.\n\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pymysql.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/gord/client-ssl/ca.pem",
      "/home/gord/client-ssl/client-cert.pem",
      "/home/gord/client-ssl/client-key.pem"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pymysql.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.134"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pymysql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://pypi.org/project/pyodbc/\n\n.. note::\n\n    The PyODBC for MySQL dialect is **not tested as part of\n    SQLAlchemy",
      "https://github.com/mkleehammer/pyodbc/wiki/Unicode\n            pyodbc_SQL_CHAR = 1  # pyodbc.SQL_CHAR\n            pyodbc_SQL_WCHAR = -8  # pyodbc.SQL_WCHAR\n            conn.setdecoding(pyodbc_SQL_CHAR, encoding="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pyodbc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport re\n\nfrom .enumerated import ENUM\nfrom .enumerated import SET\nfrom .types import DATETIME\nfrom .types import TIME\nfrom .types import TIMESTAMP\nfrom ... import log\nfrom ... import types as sqltypes\nfrom ... import util\n\n\nclass ReflectedState:\n    ",
      "https://forums.mysql.com/read.php?20,567102,567111#msg-567111\n        # It means if the MySQL version >= \\d+, execute what"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\reflection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\n# generated using:\n# https://gist.github.com/kkirsche/4f31f2153ed7a3248be1ec44ca6ddbc9\n#\n# https://mariadb.com/kb/en/reserved-words/\n# includes: Reserved Words, Oracle Mode (separate set unioned)\n# excludes: Exceptions, Function Names\n# mypy: ignore-errors\n\nRESERVED_WORDS_MARIADB = {\n    ",
      "https://dev.mysql.com/doc/refman/8.3/en/keywords.html\n# https://dev.mysql.com/doc/refman/8.0/en/keywords.html\n# https://dev.mysql.com/doc/refman/5.7/en/keywords.html\n# https://dev.mysql.com/doc/refman/5.6/en/keywords.html\n# includes: MySQL x.0 Keywords and Reserved Words\n# excludes: MySQL x.0 New Keywords and Reserved Words,\n#       MySQL x.0 Removed Keywords and Reserved Words\nRESERVED_WORDS_MYSQL = {\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\reserved_words.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport datetime\n\nfrom ... import exc\nfrom ... import util\nfrom ...sql import sqltypes\n\n\nclass _NumericType:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom . import aiomysql  # noqa\nfrom . import asyncmy  # noqa\nfrom . import base  # noqa\nfrom . import cymysql  # noqa\nfrom . import mariadbconnector  # noqa\nfrom . import mysqlconnector  # noqa\nfrom . import mysqldb  # noqa\nfrom . import pymysql  # noqa\nfrom . import pyodbc  # noqa\nfrom .base import BIGINT\nfrom .base import BINARY\nfrom .base import BIT\nfrom .base import BLOB\nfrom .base import BOOLEAN\nfrom .base import CHAR\nfrom .base import DATE\nfrom .base import DATETIME\nfrom .base import DECIMAL\nfrom .base import DOUBLE\nfrom .base import ENUM\nfrom .base import FLOAT\nfrom .base import INTEGER\nfrom .base import JSON\nfrom .base import LONGBLOB\nfrom .base import LONGTEXT\nfrom .base import MEDIUMBLOB\nfrom .base import MEDIUMINT\nfrom .base import MEDIUMTEXT\nfrom .base import NCHAR\nfrom .base import NUMERIC\nfrom .base import NVARCHAR\nfrom .base import REAL\nfrom .base import SET\nfrom .base import SMALLINT\nfrom .base import TEXT\nfrom .base import TIME\nfrom .base import TIMESTAMP\nfrom .base import TINYBLOB\nfrom .base import TINYINT\nfrom .base import TINYTEXT\nfrom .base import VARBINARY\nfrom .base import VARCHAR\nfrom .base import YEAR\nfrom .dml import Insert\nfrom .dml import insert\nfrom .expression import match\nfrom ...util import compat\n\n# default dialect\nbase.dialect = dialect = mysqldb.dialect\n\n__all__ = (\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://blogs.oracle.com/oraclemagazine/on-rownum-and-limiting-results .\n\n* the ",
      "https://asktom.oracle.com/tkyte/update_cascade/index.html .\n\nWhen using the SQLAlchemy ORM, the ORM has limited ability to manually issue\ncascading updates - specify ForeignKey objects using the\n",
      "https://www.oracletutorial.com/oracle-basics/oracle-float/\n                estimated_binary_precision = int(precision / 0.30103)\n                raise exc.ArgumentError(\n                    ",
      "https://docs.oracle.com/database/121/SQLRF/queries006.htm#SQLRF52354\n                # ",
      "https://blogs.oracle.com/oraclemagazine/\\\n                # on-rownum-and-limiting-results\n\n                orig_select = select\n                select = select._generate()\n                select._oracle_visit = True\n\n                # add expressions to accommodate FOR UPDATE OF\n                for_update = select._for_update_arg\n                if for_update is not None and for_update.of:\n                    for_update = for_update._clone()\n                    for_update._copy_internals()\n\n                    for elem in for_update.of:\n                        if not select.selected_columns.contains_column(elem):\n                            select = select.add_columns(elem)\n\n                # Wrap the middle select and add the hint\n                inner_subquery = select.alias()\n                limitselect = sql.select(\n                    *[\n                        c\n                        for c in inner_subquery.c\n                        if orig_select.selected_columns.corresponding_column(c)\n                        is not None\n                    ]\n                )\n\n                if (\n                    limit_clause is not None\n                    and self.dialect.optimize_limits\n                    and select._simple_int_clause(limit_clause)\n                ):\n                    limitselect = limitselect.prefix_with(\n                        expression.text(\n                            ",
      "https://asktom.oracle.com/tkyte/update_cascade/index.html\n        if constraint.onupdate is not None:\n            util.warn(\n                ",
      "https://docs.oracle.com/cd/A87860_01/doc/index.htm\n\n        # so does Oracle8:\n        # https://docs.oracle.com/cd/A64702_01/doc/index.htm\n\n        if self._is_oracle_8:\n            self.colspecs = self.colspecs.copy()\n            self.colspecs.pop(sqltypes.Interval)\n            self.use_ansi = False\n\n        self.supports_identity_columns = self.server_version_info >= (12,)\n        self._supports_offset_fetch = (\n            self.enable_offset_fetch and self.server_version_info >= (12,)\n        )\n\n    def _get_effective_compat_server_version_info(self, connection):\n        # dialect does not need compat levels below 12.2, so don",
      "https://docs.oracle.com/cd/B14117_01/server.101/b10758/sqlqr06.htm\n                if precision == 126:\n                    # The DOUBLE PRECISION datatype is a floating-point\n                    # number with binary precision 126.\n                    coltype = DOUBLE_PRECISION()\n                elif precision == 63:\n                    # The REAL datatype is a floating-point number with a\n                    # binary precision of 63, or 18 decimal.\n                    coltype = REAL()\n                else:\n                    # non standard precision\n                    coltype = FLOAT(binary_precision=precision)\n\n            elif coltype in ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\base.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"tiger\"",
      "password=\"tiger\""
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\cx_oracle.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://oracle.github.io/python-cx_Oracle/\n\nDSN vs. Hostname connections\n-----------------------------\n\ncx_Oracle provides several methods of indicating the target database.  The\ndialect translates from a series of different URL forms.\n\nHostname Connections with Easy Connect Syntax\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGiven a hostname, port and service name of the target Oracle Database, for\nexample from Oracle",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#easy-connect-syntax-for-connection-strings>`_,\nthen connect in SQLAlchemy using the ``service_name`` query string parameter::\n\n    engine = create_engine(",
      "https://www.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-B0437826-43C1-49EC-A94D-B650B6A4A6EE>`_\nis not supported.  Instead, use a ``tnsnames.ora`` file and connect using a\nDSN.\n\nConnections with tnsnames.ora or Oracle Cloud\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAlternatively, if no port, database name, or ``service_name`` is provided, the\ndialect will use an Oracle DSN ",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#net-service-names-for-connection-strings>`_\nof ``myalias`` as below::\n\n    myalias =\n      (DESCRIPTION =\n        (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.example.com)(PORT = 1521))\n        (CONNECT_DATA =\n          (SERVER = DEDICATED)\n          (SERVICE_NAME = orclpdb1)\n        )\n      )\n\nThe cx_Oracle dialect connects to this database service when ``myalias`` is the\nhostname portion of the URL, without specifying a port, database name or\n``service_name``::\n\n    engine = create_engine(",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#connecting-to-autononmous-databases>`_.\n\nSID Connections\n^^^^^^^^^^^^^^^\n\nTo use Oracle",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/ha.html#application-continuity-ac>`_.\n\nUsing Oracle Database Resident Connection Pooling (DRCP)\n--------------------------------------------------------\n\nWhen using Oracle",
      "https://www.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-015CA8C1-2386-4626-855D-CC546DDC1086>`_,\nthe best practice is to pass a connection class and ",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#database-resident-connection-pooling-drcp>`_.\n\nThis can be achieved by wrapping ``pool.acquire()``::\n\n    import cx_Oracle\n    from sqlalchemy import create_engine\n    from sqlalchemy.pool import NullPool\n\n    pool = cx_Oracle.SessionPool(\n        user=",
      "https://www.oracle.com/database/technologies/faq-nls-lang.html>`_\nenvironment variable.   cx_Oracle like most other Oracle drivers will use\nthis environment variable as the source of its encoding configuration.  The\nformat of this variable is idiosyncratic; a typical value would be\n``AMERICAN_AMERICA.AL32UTF8``.\n\nThe cx_Oracle driver also supports a programmatic alternative which is to\npass the ``encoding`` and ``nencoding`` parameters directly to its\n``.connect()`` function.  These can be present in the URL as follows::\n\n    engine = create_engine(",
      "https://cx-oracle.readthedocs.io/en/latest/user_guide/globalization.html#globalization>`_.\n\n.. seealso::\n\n    `Characters Sets and National Language Support (NLS) <https://cx-oracle.readthedocs.io/en/latest/user_guide/globalization.html#globalization>`_\n    - in the cx_Oracle documentation.\n\n\nUnicode-specific Column datatypes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Core expression language handles unicode data by use of the :class:`.Unicode`\nand :class:`.UnicodeText`\ndatatypes.  These types correspond to the  VARCHAR2 and CLOB Oracle datatypes by\ndefault.   When using these datatypes with Unicode data, it is expected that\nthe Oracle database is configured with a Unicode-aware character set, as well\nas that the ``NLS_LANG`` environment variable is set appropriately, so that\nthe VARCHAR2 and CLOB datatypes can accommodate the data.\n\nIn the case that the Oracle database is not configured with a Unicode character\nset, the two options are to use the :class:`_types.NCHAR` and\n:class:`_oracle.NCLOB` datatypes explicitly, or to pass the flag\n``use_nchar_for_unicode=True`` to :func:`_sa.create_engine`,\nwhich will cause the\nSQLAlchemy dialect to use NCHAR/NCLOB for the :class:`.Unicode` /\n:class:`.UnicodeText` datatypes instead of VARCHAR/CLOB.\n\n.. versionchanged:: 1.3  The :class:`.Unicode` and :class:`.UnicodeText`\n   datatypes now correspond to the ``VARCHAR2`` and ``CLOB`` Oracle datatypes\n   unless the ``use_nchar_for_unicode=True`` is passed to the dialect\n   when :func:`_sa.create_engine` is called.\n\n\n.. _cx_oracle_unicode_encoding_errors:\n\nEncoding Errors\n^^^^^^^^^^^^^^^\n\nFor the unusual case that data in the Oracle database is present with a broken\nencoding, the dialect accepts a parameter ``encoding_errors`` which will be\npassed to Unicode decoding functions in order to affect how decoding errors are\nhandled.  The value is ultimately consumed by the Python `decode\n<https://docs.python.org/3/library/stdtypes.html#bytes.decode>`_ function, and\nis passed both via cx_Oracle",
      "https://cx-oracle.readthedocs.io/en/latest/api_manual/module.html#database-types.\nNote that in some cases, significant performance degradation can occur when\nusing these types vs. not, in particular when specifying ``cx_Oracle.CLOB``.\n\nOn the SQLAlchemy side, the :meth:`.DialectEvents.do_setinputsizes` event can\nbe used both for runtime visibility (e.g. logging) of the setinputsizes step as\nwell as to fully control how ``setinputsizes()`` is used on a per-statement\nbasis.\n\n.. versionadded:: 1.2.9 Added :meth:`.DialectEvents.setinputsizes`\n\n\nExample 1 - logging all setinputsizes calls\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following example illustrates how to log the intermediary values from a\nSQLAlchemy perspective before they are converted to the raw ``setinputsizes()``\nparameter dictionary.  The keys of the dictionary are :class:`.BindParameter`\nobjects which have a ``.key`` and a ``.type`` attribute::\n\n    from sqlalchemy import create_engine, event\n\n    engine = create_engine(",
      "https://github.com/oracle/python-cx_Oracle/issues/596#issuecomment-999243649\n_CX_ORACLE_MAGIC_LOB_SIZE = 131072\n\n\nclass _OracleInteger(sqltypes.Integer):\n    def get_dbapi_type(self, dbapi):\n        # see https://github.com/oracle/python-cx_Oracle/issues/\n        # 208#issuecomment-409715955\n        return int\n\n    def _cx_oracle_var(self, dialect, cursor, arraysize=None):\n        cx_Oracle = dialect.dbapi\n        return cursor.var(\n            cx_Oracle.STRING,\n            255,\n            arraysize=arraysize if arraysize is not None else cursor.arraysize,\n            outconverter=int,\n        )\n\n    def _cx_oracle_outputtypehandler(self, dialect):\n        def handler(cursor, name, default_type, size, precision, scale):\n            return self._cx_oracle_var(dialect, cursor)\n\n        return handler\n\n\nclass _OracleNumeric(sqltypes.Numeric):\n    is_number = False\n\n    def bind_processor(self, dialect):\n        if self.scale == 0:\n            return None\n        elif self.asdecimal:\n            processor = processors.to_decimal_processor_factory(\n                decimal.Decimal, self._effective_decimal_return_scale\n            )\n\n            def process(value):\n                if isinstance(value, (int, float)):\n                    return processor(value)\n                elif value is not None and value.is_infinite():\n                    return float(value)\n                else:\n                    return value\n\n            return process\n        else:\n            return processors.to_float\n\n    def result_processor(self, dialect, coltype):\n        return None\n\n    def _cx_oracle_outputtypehandler(self, dialect):\n        cx_Oracle = dialect.dbapi\n\n        def handler(cursor, name, default_type, size, precision, scale):\n            outconverter = None\n\n            if precision:\n                if self.asdecimal:\n                    if default_type == cx_Oracle.NATIVE_FLOAT:\n                        # receiving float and doing Decimal after the fact\n                        # allows for float(",
      "https://stackoverflow.com/questions/10711204/how-to-check-isoloation-level\n\n        # how to decode xid cols from v$transaction to match\n        # https://asktom.oracle.com/pls/apex/f?p=100:11:0::::P11_QUESTION_ID:9532779900346079444\n\n        # Oracle tuple comparison without using IN:\n        # https://www.sql-workbench.eu/comparison/tuple_comparison.html\n\n        with dbapi_connection.cursor() as cursor:\n            # this is the only way to ensure a transaction is started without\n            # actually running DML.   There"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\cx_oracle.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .types import DATE\nfrom .types import LONG\nfrom .types import NUMBER\nfrom .types import RAW\nfrom .types import VARCHAR2\nfrom ... import Column\nfrom ... import MetaData\nfrom ... import Table\nfrom ... import table\nfrom ...sql.sqltypes import CHAR\n\n# constants\nDB_LINK_PLACEHOLDER = ",
      "https://docs.oracle.com/en/database/oracle/oracle-database/21/refrn/ALL_DB_LINKS.html\n# original note:\n# using user_db_links here since all_db_links appears\n# to have more restricted permissions.\n# https://docs.oracle.com/cd/B28359_01/server.111/b28310/ds_admin005.htm\n# will need to hear from more users if we are doing\n# the right thing here.  See [ticket:2619]\nall_db_links = Table(\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\dictionary.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://oracle.github.io/python-oracledb/\n\nDescription\n-----------\n\npython-oracledb is released by Oracle to supersede the cx_Oracle driver.\nIt is fully compatible with cx_Oracle and features both a ",
      "https://python-oracledb.readthedocs.io/en/latest/api_manual/module.html#oracledb.init_oracle_client\n\nTwo Phase Transactions Supported\n--------------------------------\n\nTwo phase transactions are fully supported under oracledb. Starting with\noracledb 2.3 two phase transactions are supported also in thin mode.    APIs\nfor two phase transactions are provided at the Core level via\n:meth:`_engine.Connection.begin_twophase` and :paramref:`_orm.Session.twophase`\nfor transparent ORM use.\n\n.. versionchanged:: 2.0.32 added support for two phase transactions\n\n.. versionadded:: 2.0.0 added support for oracledb driver.\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\oracledb.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"xe\""
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import create_engine\nfrom ... import exc\nfrom ... import inspect\nfrom ...engine import url as sa_url\nfrom ...testing.provision import configure_follower\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_all_schema_objects_post_tables\nfrom ...testing.provision import drop_all_schema_objects_pre_tables\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import follower_url_from_main\nfrom ...testing.provision import log\nfrom ...testing.provision import post_configure_engine\nfrom ...testing.provision import run_reap_dbs\nfrom ...testing.provision import set_default_schema_on_connection\nfrom ...testing.provision import stop_test_class_outside_fixtures\nfrom ...testing.provision import temp_table_keyword_args\nfrom ...testing.provision import update_db_opts\n\n\n@create_db.for_db(",
      "https://github.com/oracle/python-cx_Oracle/issues/519\n\n    for cx_oracle_conn in _all_conns:\n        try:\n            sc = cx_oracle_conn.stmtcachesize\n        except db.dialect.dbapi.InterfaceError:\n            # connection closed\n            pass\n        else:\n            cx_oracle_conn.stmtcachesize = 0\n            cx_oracle_conn.stmtcachesize = sc\n    _all_conns.clear()\n\n\ndef _purge_recyclebin(eng, schema=None):\n    with eng.begin() as conn:\n        if schema is None:\n            # run magic command to get rid of identity sequences\n            # https://floo.bar/2019/11/29/drop-the-underlying-sequence-of-an-identity-column/  # noqa: E501\n            conn.exec_driver_sql(",
      "https://community.oracle.com/tech/developers/discussion/2255402/how-to-clear-dba-recyclebin-for-a-particular-user  # noqa: E501\n            for owner, object_name, type_ in conn.exec_driver_sql(\n                ",
      "https://github.com/oracle/python-cx_Oracle/issues/530\n        # invalidate oracle connections that had 2pc set up\n        if "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nimport datetime as dt\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TYPE_CHECKING\n\nfrom ... import exc\nfrom ...sql import sqltypes\nfrom ...types import NVARCHAR\nfrom ...types import VARCHAR\n\nif TYPE_CHECKING:\n    from ...engine.interfaces import Dialect\n    from ...sql.type_api import _LiteralProcessorType\n\n\nclass RAW(sqltypes._Binary):\n    __visit_name__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom types import ModuleType\n\nfrom . import base  # noqa\nfrom . import cx_oracle  # noqa\nfrom . import oracledb  # noqa\nfrom .base import BFILE\nfrom .base import BINARY_DOUBLE\nfrom .base import BINARY_FLOAT\nfrom .base import BLOB\nfrom .base import CHAR\nfrom .base import CLOB\nfrom .base import DATE\nfrom .base import DOUBLE_PRECISION\nfrom .base import FLOAT\nfrom .base import INTERVAL\nfrom .base import LONG\nfrom .base import NCHAR\nfrom .base import NCLOB\nfrom .base import NUMBER\nfrom .base import NVARCHAR\nfrom .base import NVARCHAR2\nfrom .base import RAW\nfrom .base import REAL\nfrom .base import ROWID\nfrom .base import TIMESTAMP\nfrom .base import VARCHAR\nfrom .base import VARCHAR2\n\n# Alias oracledb also as oracledb_async\noracledb_async = type(\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom __future__ import annotations\n\nimport re\nfrom typing import Any\nfrom typing import Optional\nfrom typing import TypeVar\n\nfrom .operators import CONTAINED_BY\nfrom .operators import CONTAINS\nfrom .operators import OVERLAP\nfrom ... import types as sqltypes\nfrom ... import util\nfrom ...sql import expression\nfrom ...sql import operators\nfrom ...sql._typing import _TypeEngineArgument\n\n\n_T = TypeVar("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\array.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://magicstack.github.io/asyncpg/\n\nThe asyncpg dialect is SQLAlchemy",
      "https://github.com/MagicStack/asyncpg/issues/837\n\n   https://github.com/sqlalchemy/sqlalchemy/issues/6467\n\n.. warning:: When using PGBouncer, to prevent a buildup of useless prepared statements in\n   your application, it",
      "https://www.postgresql.org/docs/current/sql-discard.html>`_\n   when returning connections.  The DISCARD command is used to release resources held by the db connection,\n   including prepared statements. Without proper setup, prepared statements can\n   accumulate quickly and cause performance issues.\n\nDisabling the PostgreSQL JIT to improve ENUM datatype handling\n---------------------------------------------------------------\n\nAsyncpg has an `issue <https://github.com/MagicStack/asyncpg/issues/727>`_ when\nusing PostgreSQL ENUM datatypes, where upon the creation of new database\nconnections, an expensive query may be emitted in order to retrieve metadata\nregarding custom types which has been shown to negatively affect performance.\nTo mitigate this issue, the PostgreSQL ",
      "https://github.com/MagicStack/asyncpg/issues/727\n\n",
      "https://github.com/MagicStack/asyncpg/issues/623 for\n        notes on JSON/JSONB implementation.\n\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\asyncpg.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH>`_\nvariable ``search_path``, which in modern PostgreSQL versions defaults to this::\n\n    test=> show search_path;\n    search_path\n    -----------------\n    ",
      "https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH>`_\n    - on the PostgreSQL website.\n\nINSERT/UPDATE...RETURNING\n-------------------------\n\nThe dialect supports PG 8.2",
      "https://www.postgresql.org/docs/current/static/sql-insert.html#SQL-ON-CONFLICT>`_\n    - in the PostgreSQL documentation.\n\nSpecifying the Target\n^^^^^^^^^^^^^^^^^^^^^\n\nBoth methods supply the ",
      "https://www.postgresql.org/docs/current/textsearch-controls.html>`_ - in the PostgreSQL documentation\n\n\nFROM ONLY ...\n-------------\n\nThe dialect supports PostgreSQL",
      "https://www.postgresql.org/docs/current/interactive/indexes-opclass.html).\nThe :class:`.Index` construct allows these to be specified via the\n``postgresql_ops`` keyword argument::\n\n    Index(\n        ",
      "https://www.postgresql.org/docs/current/static/indexes-types.html). These can be\nspecified on :class:`.Index` using the ``postgresql_using`` keyword argument::\n\n    Index(",
      "https://www.postgresql.org/docs/current/static/sql-createtable.html>`_ -\n    in the PostgreSQL documentation.\n\n.. _postgresql_constraint_options:\n\nPostgreSQL Constraint Options\n-----------------------------\n\nThe following option(s) are supported by the PostgreSQL dialect in conjunction\nwith selected constraint constructs:\n\n* ``NOT VALID``:  This option applies towards CHECK and FOREIGN KEY constraints\n  when the constraint is being added to an existing table via ALTER TABLE,\n  and has the effect that existing rows are not scanned during the ALTER\n  operation against the constraint being added.\n\n  When using a SQL migration tool such as `Alembic <https://alembic.sqlalchemy.org>`_\n  that renders ALTER TABLE constructs, the ``postgresql_not_valid`` argument\n  may be specified as an additional keyword argument within the operation\n  that creates the constraint, as in the following Alembic example::\n\n        def update():\n            op.create_foreign_key(\n                ",
      "https://www.postgresql.org/docs/current/static/sql-altertable.html>`_ -\n      in the PostgreSQL documentation.\n\n.. _postgresql_table_valued_overview:\n\nTable values, Table and Column valued functions, Row and Tuple objects\n-----------------------------------------------------------------------\n\nPostgreSQL makes great use of modern SQL forms such as table-valued functions,\ntables and rows as values.   These constructs are commonly used as part\nof PostgreSQL",
      "https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS>`_\n\n    `PostgreSQL Row Constructor Comparison\n    <https://www.postgresql.org/docs/current/functions-comparisons.html#ROW-WISE-COMPARISON>`_\n\nTable Types passed to Functions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPostgreSQL supports passing a table as an argument to a function, which is\nknown as a ",
      "https://www.postgresql.org/docs/9.3/static/release-9-2.html#AEN116689\n        self.supports_smallserial = self.server_version_info >= (9, 2)\n\n        self._set_backslash_escapes(connection)\n\n        self._supports_drop_index_concurrently = self.server_version_info >= (\n            9,\n            2,\n        )\n        self.supports_identity_columns = self.server_version_info >= (10,)\n\n    def get_isolation_level_values(self, dbapi_conn):\n        # note the generic dialect doesn",
      "https://stackoverflow.com/questions/3523028/\n                    # valid-characters-of-a-hostname\n                    host_port_match = re.match(\n                        r",
      "https://www.postgresql.org/docs/current/static/sql-createtable.html\n        return re.compile(\n            r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "a@b.com",
      "%@gmail.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Optional\n\nfrom . import ext\nfrom .._typing import _OnConflictConstraintT\nfrom .._typing import _OnConflictIndexElementsT\nfrom .._typing import _OnConflictIndexWhereT\nfrom .._typing import _OnConflictSetT\nfrom .._typing import _OnConflictWhereT\nfrom ... import util\nfrom ...sql import coercions\nfrom ...sql import roles\nfrom ...sql import schema\nfrom ...sql._typing import _DMLTableArgument\nfrom ...sql.base import _exclusive_against\nfrom ...sql.base import _generative\nfrom ...sql.base import ColumnCollection\nfrom ...sql.base import ReadOnlyColumnCollection\nfrom ...sql.dml import Insert as StandardInsert\nfrom ...sql.elements import ClauseElement\nfrom ...sql.elements import KeyedColumnElement\nfrom ...sql.expression import alias\nfrom ...util.typing import Self\n\n\n__all__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\dml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\n\nfrom . import types\nfrom .array import ARRAY\nfrom ...sql import coercions\nfrom ...sql import elements\nfrom ...sql import expression\nfrom ...sql import functions\nfrom ...sql import roles\nfrom ...sql import schema\nfrom ...sql.schema import ColumnCollectionConstraint\nfrom ...sql.sqltypes import TEXT\nfrom ...sql.visitors import InternalTraversal\n\n_T = TypeVar(",
      "https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE\n\n    ",
      "https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE\n        if len(args) < 2:\n            # invalid args; don"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\ext.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nimport re\n\nfrom .array import ARRAY\nfrom .operators import CONTAINED_BY\nfrom .operators import CONTAINS\nfrom .operators import GETITEM\nfrom .operators import HAS_ALL\nfrom .operators import HAS_ANY\nfrom .operators import HAS_KEY\nfrom ... import types as sqltypes\nfrom ...sql import functions as sqlfunc\n\n\n__all__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\hstore.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom .array import ARRAY\nfrom .array import array as _pg_array\nfrom .operators import ASTEXT\nfrom .operators import CONTAINED_BY\nfrom .operators import CONTAINS\nfrom .operators import DELETE_PATH\nfrom .operators import HAS_ALL\nfrom .operators import HAS_ANY\nfrom .operators import HAS_KEY\nfrom .operators import JSONPATH_ASTEXT\nfrom .operators import PATH_EXISTS\nfrom .operators import PATH_MATCH\nfrom ... import types as sqltypes\nfrom ...sql import cast\n\n__all__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nfrom typing import Any\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import Union\n\nfrom ... import schema\nfrom ... import util\nfrom ...sql import coercions\nfrom ...sql import elements\nfrom ...sql import roles\nfrom ...sql import sqltypes\nfrom ...sql import type_api\nfrom ...sql.base import _NoArg\nfrom ...sql.ddl import InvokeCreateDDLBase\nfrom ...sql.ddl import InvokeDropDDLBase\n\nif TYPE_CHECKING:\n    from ...sql._typing import _TypeEngineArgument\n\n\nclass NamedType(sqltypes.TypeEngine):\n    ",
      "https://www.postgresql.org/docs/current/sql-createdomain.html\n\n    .. versionadded:: 2.0\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\named_types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom ...sql import operators\n\n\n_getitem_precedence = operators._PRECEDENCE[operators.json_getitem_op]\n_eq_precedence = operators._PRECEDENCE[operators.eq]\n\n# JSON + JSONB\nASTEXT = operators.custom_op(\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\operators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/pg8000/\n\n.. versionchanged:: 1.4  The pg8000 dialect has been updated for version\n   1.16.6 and higher, and is again part of SQLAlchemy"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\pg8000.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.199",
      "192.168.0.199"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\pg8000.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom .array import ARRAY\nfrom .types import OID\nfrom .types import REGCLASS\nfrom ... import Column\nfrom ... import func\nfrom ... import MetaData\nfrom ... import Table\nfrom ...types import BigInteger\nfrom ...types import Boolean\nfrom ...types import CHAR\nfrom ...types import Float\nfrom ...types import Integer\nfrom ...types import SmallInteger\nfrom ...types import String\nfrom ...types import Text\nfrom ...types import TypeDecorator\n\n\n# types\nclass NAME(TypeDecorator):\n    impl = String(64, collation="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\pg_catalog.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport time\n\nfrom ... import exc\nfrom ... import inspect\nfrom ... import text\nfrom ...testing import warn_test_suite\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_all_schema_objects_post_tables\nfrom ...testing.provision import drop_all_schema_objects_pre_tables\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import log\nfrom ...testing.provision import post_configure_engine\nfrom ...testing.provision import prepare_for_drop_tables\nfrom ...testing.provision import set_default_schema_on_connection\nfrom ...testing.provision import temp_table_keyword_args\nfrom ...testing.provision import upsert\n\n\n@create_db.for_db("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/psycopg/\n\n``psycopg`` is the package and module name for version 3 of the ``psycopg``\ndatabase driver, formerly known as ``psycopg2``.  This driver is different\nenough from its ``psycopg2`` predecessor that SQLAlchemy supports it\nvia a totally separate dialect; support for ``psycopg2`` is expected to remain\nfor as long as that package continues to function for modern Python versions,\nand also remains the default dialect for the ``postgresql://`` dialect\nseries.\n\nThe SQLAlchemy ``psycopg`` dialect provides both a sync and an async\nimplementation under the same dialect name. The proper version is\nselected depending on how the engine is created:\n\n* calling :func:`_sa.create_engine` with ``postgresql+psycopg://...`` will\n  automatically select the sync version, e.g.::\n\n    from sqlalchemy import create_engine\n    sync_engine = create_engine(",
      "https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors>`_\n\n",
      "https://github.com/psycopg/psycopg/issues/83\n        cargs, cparams = super().create_connect_args(url)\n\n        if self._psycopg_adapters_map:\n            cparams["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/psycopg2/\n\n.. _psycopg2_toplevel:\n\npsycopg2 Connect Arguments\n--------------------------\n\nKeyword arguments that are specific to the SQLAlchemy psycopg2 dialect\nmay be passed to :func:`_sa.create_engine()`, and include the following:\n\n\n* ``isolation_level``: This option, available for all PostgreSQL dialects,\n  includes the ``AUTOCOMMIT`` isolation level when using the psycopg2\n  dialect.   This option sets the **default** isolation level for the\n  connection that is set immediately upon connection to the database before\n  the connection is pooled.  This option is generally superseded by the more\n  modern :paramref:`_engine.Connection.execution_options.isolation_level`\n  execution option, detailed at :ref:`dbapi_autocommit`.\n\n  .. seealso::\n\n    :ref:`psycopg2_isolation_level`\n\n    :ref:`dbapi_autocommit`\n\n\n* ``client_encoding``: sets the client encoding in a libpq-agnostic way,\n  using psycopg2",
      "https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS>`_\n\n.. _psycopg2_multi_host:\n\nSpecifying multiple fallback hosts\n-----------------------------------\n\npsycopg2 supports multiple connection points in the connection string.\nWhen the ``host`` parameter is used multiple times in the query section of\nthe URL, SQLAlchemy will create a single string of the host and port\ninformation provided to make the connections.  Tokens may consist of\n``host::port`` or just ``host``; in the latter case, the default port\nis selected by libpq.  In the example below, three host connections\nare specified, for ``HostA::PortA``, ``HostB`` connecting to the default port,\nand ``HostC::PortC``::\n\n    create_engine(\n        ",
      "https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING>`_.\n\nFor example, to indicate two hosts using the ``primary`` strategy::\n\n    create_engine(\n        ",
      "https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING>`_ - please refer\n    to this section in the libpq documentation for complete background on multiple host support.\n\n\nEmpty DSN Connections / Environment Variable Connections\n---------------------------------------------------------\n\nThe psycopg2 DBAPI can connect to PostgreSQL by passing an empty DSN to the\nlibpq client library, which by default indicates to connect to a localhost\nPostgreSQL database that is open for ",
      "https://www.postgresql.org/docs/current/libpq-envars.html>`_ -\n    PostgreSQL documentation on how to use ``PG_...``\n    environment variables for connections.\n\n.. _psycopg2_execution_options:\n\nPer-Statement/Connection Execution Options\n-------------------------------------------\n\nThe following DBAPI-specific options are respected when used with\n:meth:`_engine.Connection.execution_options`,\n:meth:`.Executable.execution_options`,\n:meth:`_query.Query.execution_options`,\nin addition to those not specific to DBAPIs:\n\n* ``isolation_level`` - Set the transaction isolation level for the lifespan\n  of a :class:`_engine.Connection` (can only be set on a connection,\n  not a statement\n  or query).   See :ref:`psycopg2_isolation_level`.\n\n* ``stream_results`` - Enable or disable usage of psycopg2 server side\n  cursors - this feature makes use of ",
      "https://www.psycopg.org/docs/extras.html#fast-execution-helpers>`_, which\nhave been shown in benchmarking to improve psycopg2",
      "https://docs.python.org/3/howto/logging.html>`_ - on the python.org website\n\n.. _psycopg2_hstore:\n\nHSTORE type\n------------\n\nThe ``psycopg2`` DBAPI includes an extension to natively handle marshalling of\nthe HSTORE type.   The SQLAlchemy psycopg2 dialect will enable this extension\nby default when psycopg2 version 2.4 or greater is used, and\nit is detected that the target database has the HSTORE type set up for use.\nIn other words, when the dialect makes the first\nconnection, a sequence like the following is performed:\n\n1. Request the available HSTORE oids using\n   ``psycopg2.extras.HstoreAdapter.get_oids()``.\n   If this function returns a list of HSTORE identifiers, we then determine\n   that the ``HSTORE`` extension is present.\n   This function is **skipped** if the version of psycopg2 installed is\n   less than version 2.4.\n\n2. If the ``use_native_hstore`` flag is at its default of ``True``, and\n   we",
      "https://www.openssl.org/docs/man1.1.1/man3/SSL_get_error.html#BUGS\n            # It may also occur in newer OpenSSL for a non-recoverable I/O\n            # error as a result of a system call that does not set "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg2.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.0.199"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg2.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nr",
      "https://pypi.org/project/psycopg2cffi/\n\n``psycopg2cffi`` is an adaptation of ``psycopg2``, using CFFI for the C\nlayer. This makes it suitable for use in e.g. PyPy. Documentation\nis as per ``psycopg2``.\n\n.. seealso::\n\n    :mod:`sqlalchemy.dialects.postgresql.psycopg2`\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg2cffi.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n\nfrom __future__ import annotations\n\nimport dataclasses\nfrom datetime import date\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom decimal import Decimal\nfrom typing import Any\nfrom typing import cast\nfrom typing import Generic\nfrom typing import List\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom typing import TypeVar\nfrom typing import Union\n\nfrom .operators import ADJACENT_TO\nfrom .operators import CONTAINED_BY\nfrom .operators import CONTAINS\nfrom .operators import NOT_EXTEND_LEFT_OF\nfrom .operators import NOT_EXTEND_RIGHT_OF\nfrom .operators import OVERLAP\nfrom .operators import STRICTLY_LEFT_OF\nfrom .operators import STRICTLY_RIGHT_OF\nfrom ... import types as sqltypes\nfrom ...sql import operators\nfrom ...sql.type_api import TypeEngine\nfrom ...util import py310\nfrom ...util.typing import Literal\n\nif TYPE_CHECKING:\n    from ...sql.elements import ColumnElement\n    from ...sql.type_api import _TE\n    from ...sql.type_api import TypeEngineMixin\n\n_T = TypeVar(",
      "https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-DISCRETE\n        # for the rationale\n\n        if isinstance(self.lower, int) or isinstance(self.upper, int):\n            return 1\n        elif isinstance(self.lower, datetime) or isinstance(\n            self.upper, datetime\n        ):\n            # This is required, because a `isinstance(datetime.now(), date)`\n            # is True\n            return None\n        elif isinstance(self.lower, date) or isinstance(self.upper, date):\n            return timedelta(days=1)\n        else:\n            return None\n\n    def _compare_edges(\n        self,\n        value1: Optional[_T],\n        bound1: str,\n        value2: Optional[_T],\n        bound2: str,\n        only_values: bool = False,\n    ) -> int:\n        ",
      "https://www.postgresql.org/docs/current/static/functions-range.html>`_\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\ranges.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport datetime as dt\nfrom typing import Any\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Type\nfrom typing import TYPE_CHECKING\nfrom uuid import UUID as _python_UUID\n\nfrom ...sql import sqltypes\nfrom ...sql import type_api\nfrom ...util.typing import Literal\n\nif TYPE_CHECKING:\n    from ...engine.interfaces import Dialect\n    from ...sql.operators import OperatorType\n    from ...sql.type_api import _LiteralProcessorType\n    from ...sql.type_api import TypeEngine\n\n_DECIMAL_TYPES = (1231, 1700)\n_FLOAT_TYPES = (700, 701, 1021, 1022)\n_INT_TYPES = (20, 21, 23, 26, 1005, 1007, 1016)\n\n\nclass PGUuid(sqltypes.UUID[sqltypes._UUID_RETURN]):\n    render_bind_cast = True\n    render_literal_cast = True\n\n    if TYPE_CHECKING:\n\n        @overload\n        def __init__(\n            self: PGUuid[_python_UUID], as_uuid: Literal[True] = ...\n        ) -> None: ...\n\n        @overload\n        def __init__(\n            self: PGUuid[str], as_uuid: Literal[False] = ...\n        ) -> None: ...\n\n        def __init__(self, as_uuid: bool = True) -> None: ...\n\n\nclass BYTEA(sqltypes.LargeBinary):\n    __visit_name__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\nfrom __future__ import annotations\n\nimport decimal\n\nfrom .array import ARRAY as PGARRAY\nfrom .base import _DECIMAL_TYPES\nfrom .base import _FLOAT_TYPES\nfrom .base import _INT_TYPES\nfrom .base import PGDialect\nfrom .base import PGExecutionContext\nfrom .hstore import HSTORE\nfrom .pg_catalog import _SpaceVector\nfrom .pg_catalog import INT2VECTOR\nfrom .pg_catalog import OIDVECTOR\nfrom ... import exc\nfrom ... import types as sqltypes\nfrom ... import util\nfrom ...engine import processors\n\n_server_side_id = util.counter()\n\n\nclass _PsycopgNumeric(sqltypes.Numeric):\n    def bind_processor(self, dialect):\n        return None\n\n    def result_processor(self, dialect, coltype):\n        if self.asdecimal:\n            if coltype in _FLOAT_TYPES:\n                return processors.to_decimal_processor_factory(\n                    decimal.Decimal, self._effective_decimal_return_scale\n                )\n            elif coltype in _DECIMAL_TYPES or coltype in _INT_TYPES:\n                # psycopg returns Decimal natively for 1700\n                return None\n            else:\n                raise exc.InvalidRequestError(\n                    ",
      "https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#server-side-cursors\n        # psycopg2\n        # https://www.psycopg.org/docs/usage.html#server-side-cursors\n        ident = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\_psycopg_common.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom types import ModuleType\n\nfrom . import array as arraylib  # noqa # keep above base and other dialects\nfrom . import asyncpg  # noqa\nfrom . import base\nfrom . import pg8000  # noqa\nfrom . import psycopg  # noqa\nfrom . import psycopg2  # noqa\nfrom . import psycopg2cffi  # noqa\nfrom .array import All\nfrom .array import Any\nfrom .array import ARRAY\nfrom .array import array\nfrom .base import BIGINT\nfrom .base import BOOLEAN\nfrom .base import CHAR\nfrom .base import DATE\nfrom .base import DOMAIN\nfrom .base import DOUBLE_PRECISION\nfrom .base import FLOAT\nfrom .base import INTEGER\nfrom .base import NUMERIC\nfrom .base import REAL\nfrom .base import SMALLINT\nfrom .base import TEXT\nfrom .base import UUID\nfrom .base import VARCHAR\nfrom .dml import Insert\nfrom .dml import insert\nfrom .ext import aggregate_order_by\nfrom .ext import array_agg\nfrom .ext import ExcludeConstraint\nfrom .ext import phraseto_tsquery\nfrom .ext import plainto_tsquery\nfrom .ext import to_tsquery\nfrom .ext import to_tsvector\nfrom .ext import ts_headline\nfrom .ext import websearch_to_tsquery\nfrom .hstore import HSTORE\nfrom .hstore import hstore\nfrom .json import JSON\nfrom .json import JSONB\nfrom .json import JSONPATH\nfrom .named_types import CreateDomainType\nfrom .named_types import CreateEnumType\nfrom .named_types import DropDomainType\nfrom .named_types import DropEnumType\nfrom .named_types import ENUM\nfrom .named_types import NamedType\nfrom .ranges import AbstractMultiRange\nfrom .ranges import AbstractRange\nfrom .ranges import AbstractSingleRange\nfrom .ranges import DATEMULTIRANGE\nfrom .ranges import DATERANGE\nfrom .ranges import INT4MULTIRANGE\nfrom .ranges import INT4RANGE\nfrom .ranges import INT8MULTIRANGE\nfrom .ranges import INT8RANGE\nfrom .ranges import MultiRange\nfrom .ranges import NUMMULTIRANGE\nfrom .ranges import NUMRANGE\nfrom .ranges import Range\nfrom .ranges import TSMULTIRANGE\nfrom .ranges import TSRANGE\nfrom .ranges import TSTZMULTIRANGE\nfrom .ranges import TSTZRANGE\nfrom .types import BIT\nfrom .types import BYTEA\nfrom .types import CIDR\nfrom .types import CITEXT\nfrom .types import INET\nfrom .types import INTERVAL\nfrom .types import MACADDR\nfrom .types import MACADDR8\nfrom .types import MONEY\nfrom .types import OID\nfrom .types import REGCLASS\nfrom .types import REGCONFIG\nfrom .types import TIME\nfrom .types import TIMESTAMP\nfrom .types import TSQUERY\nfrom .types import TSVECTOR\n\n\n# Alias psycopg also as psycopg_async\npsycopg_async = type(\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://pypi.org/project/aiosqlite/\n\nThe aiosqlite dialect provides support for the SQLAlchemy asyncio interface\nrunning on top of pysqlite.\n\naiosqlite is a wrapper around pysqlite that uses a background thread for\neach connection.   It does not actually use non-blocking IO, as SQLite\ndatabases are not socket-based.  However it does provide a working asyncio\ninterface that",
      "https://github.com/omnilib/aiosqlite/pull/238, so we can be\n            # assured this will not become some other kind of exception,\n            # since it doesn"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\aiosqlite.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://www.sqlite.org/datatype3.html#affinity>`_ -\n    in the SQLite documentation\n\n.. _sqlite_autoincrement:\n\nSQLite Auto Incrementing Behavior\n----------------------------------\n\nBackground on SQLite",
      "https://sqlite.org/autoinc.html\n\nKey concepts:\n\n* SQLite has an implicit ",
      "https://sqlite.org/datatype3.html>`_\n\n.. _sqlite_concurrency:\n\nDatabase Locking Behavior / Concurrency\n---------------------------------------\n\nSQLite is not designed for a high level of write concurrency. The database\nitself, being a file, is locked completely during write operations within\ntransactions, meaning exactly one ",
      "https://www.sqlite.org/whentouse.html>`_ near the bottom of the page.\n\nThe following subsections introduce areas that are impacted by SQLite",
      "https://www.sqlite.org/pragma.html#pragma_read_uncommitted>`_\ninstruction.   This setting can essentially switch SQLite between its\ndefault mode of ``SERIALIZABLE`` isolation, and a ",
      "https://sqlite.org/lang_transaction.html>`_.   A straight\n``BEGIN`` statement uses the ",
      "https://www.sqlite.org/foreignkeys.html>`_\n    - on the SQLite web site.\n\n    :ref:`event_toplevel` - SQLAlchemy event API.\n\n    :ref:`use_alter` - more information on SQLAlchemy",
      "https://www.sqlite.org/lang_conflict.html>`_ - in the SQLite\n    documentation\n\n.. versionadded:: 1.3\n\n\nThe ``sqlite_on_conflict`` parameters accept a  string argument which is just\nthe resolution name to be chosen, which on SQLite can be one of ROLLBACK,\nABORT, FAIL, IGNORE, and REPLACE.   For example, to add a UNIQUE constraint\nthat specifies the IGNORE algorithm::\n\n    some_table = Table(\n        ",
      "https://sqlite.org/lang_UPSERT.html>`_\n    - in the SQLite documentation.\n\n\nSpecifying the Target\n^^^^^^^^^^^^^^^^^^^^^\n\nBoth methods supply the ",
      "https://www.sqlite.org/datatype3.html section 2.1.\n\nThe provided typemap will make direct associations from an exact string\nname match for the following types:\n\n:class:`_types.BIGINT`, :class:`_types.BLOB`,\n:class:`_types.BOOLEAN`, :class:`_types.BOOLEAN`,\n:class:`_types.CHAR`, :class:`_types.DATE`,\n:class:`_types.DATETIME`, :class:`_types.FLOAT`,\n:class:`_types.DECIMAL`, :class:`_types.FLOAT`,\n:class:`_types.INTEGER`, :class:`_types.INTEGER`,\n:class:`_types.NUMERIC`, :class:`_types.REAL`,\n:class:`_types.SMALLINT`, :class:`_types.TEXT`,\n:class:`_types.TIME`, :class:`_types.TIMESTAMP`,\n:class:`_types.VARCHAR`, :class:`_types.NVARCHAR`,\n:class:`_types.NCHAR`\n\nWhen a type name does not match one of the above types, the ",
      "https://www.sqlite.org/lang_createtable.html>`_\n\n\n.. _sqlite_include_internal:\n\nReflecting internal schema tables\n----------------------------------\n\nReflection methods that return lists of tables will omit so-called\n",
      "https://www.sqlite.org/fileformat2.html#intschema>`_ - in the SQLite\n    documentation.\n\n",
      "https://github.com/python/cpython/issues/93421\n    # note this parameter is no longer used by the ORM or default dialect\n    # see #9414\n    supports_sane_rowcount_returning = False\n\n    supports_empty_insert = False\n    supports_cast = True\n    supports_multivalues_insert = True\n    use_insertmanyvalues = True\n    tuple_in_values = True\n    supports_statement_cache = True\n    insert_null_pk_still_autoincrements = True\n    insert_returning = True\n    update_returning = True\n    update_returning_multifrom = True\n    delete_returning = True\n    update_returning_multifrom = True\n\n    supports_default_metavalue = True\n    ",
      "https://www.sqlite.org/releaselog/3_7_11.html\n                self.dbapi.sqlite_version_info\n                >= (3, 7, 11)\n            )\n            # see https://www.sqlalchemy.org/trac/ticket/2568\n            # as well as https://www.sqlite.org/src/info/600482d161\n            self._broken_fk_pragma_quotes = self.dbapi.sqlite_version_info < (\n                3,\n                6,\n                14,\n            )\n\n            if self.dbapi.sqlite_version_info < (3, 35) or util.pypy:\n                self.update_returning = self.delete_returning = (\n                    self.insert_returning\n                ) = False\n\n            if self.dbapi.sqlite_version_info < (3, 32, 0):\n                # https://www.sqlite.org/limits.html\n                self.insertmanyvalues_max_parameters = 999\n\n    _isolation_lookup = util.immutabledict(\n        {",
      "https://www.sqlite.org/changes.html#version_3_3_3\n            # ",
      "https://www.sqlite.org/src/info/069351b85f9a706f60d3e98fbc8aaf40c374356b967c0464aede30ead3d9d18b\n            if hidden == 1:\n                continue\n\n            generated = bool(hidden)\n            persisted = hidden == 3\n\n            if tablesql is None and generated:\n                tablesql = self._get_table_sql(\n                    connection, table_name, schema, **kw\n                )\n                # remove create table\n                match = re.match(\n                    r",
      "https://www.sqlite.org/datatype3.html section 2.1.\n\n        This method allows SQLAlchemy to support that algorithm, while still\n        providing access to smarter reflection utilities by recognizing\n        column definitions that SQLite only supports through affinity (like\n        DATE and DOUBLE).\n\n        ",
      "https://www.mail-archive.com/sqlite-users@sqlite.org/msg30517.html\n            if not include_auto_indexes and row[1].startswith(\n                ",
      "https://www.sqlite.org/cvstrac/tktview?tn=1884\n                result = cursor.fetchall()\n            else:\n                result = []\n            if result:\n                return result\n        else:\n            return []\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "a@b.com",
      "%@gmail.com",
      "%@gmail.com",
      "sqlite-users@sqlite.org"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nfrom typing import Any\n\nfrom .._typing import _OnConflictIndexElementsT\nfrom .._typing import _OnConflictIndexWhereT\nfrom .._typing import _OnConflictSetT\nfrom .._typing import _OnConflictWhereT\nfrom ... import util\nfrom ...sql import coercions\nfrom ...sql import roles\nfrom ...sql._typing import _DMLTableArgument\nfrom ...sql.base import _exclusive_against\nfrom ...sql.base import _generative\nfrom ...sql.base import ColumnCollection\nfrom ...sql.base import ReadOnlyColumnCollection\nfrom ...sql.dml import Insert as StandardInsert\nfrom ...sql.elements import ClauseElement\nfrom ...sql.elements import KeyedColumnElement\nfrom ...sql.expression import alias\nfrom ...util.typing import Self\n\n__all__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\dml.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nfrom ... import types as sqltypes\n\n\nclass JSON(sqltypes.JSON):\n    ",
      "https://www.sqlite.org/loadext.html>`_ and as such\n    may not be available, or may require run-time loading.\n\n    :class:`_sqlite.JSON` is used automatically whenever the base\n    :class:`_types.JSON` datatype is used against a SQLite backend.\n\n    .. seealso::\n\n        :class:`_types.JSON` - main documentation for the generic\n        cross-platform JSON datatype.\n\n    The :class:`_sqlite.JSON` type supports persistence of JSON values\n    as well as the core index operations provided by :class:`_types.JSON`\n    datatype, by adapting the operations to render the ``JSON_EXTRACT``\n    function wrapped in the ``JSON_QUOTE`` function at the database level.\n    Extracted values are quoted in order to ensure that the results are\n    always JSON string values.\n\n\n    .. versionadded:: 1.3\n\n\n    .. _JSON1: https://www.sqlite.org/json1.html\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\json.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password=\"test\""
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\nimport os\nimport re\n\nfrom ... import exc\nfrom ...engine import url as sa_url\nfrom ...testing.provision import create_db\nfrom ...testing.provision import drop_db\nfrom ...testing.provision import follower_url_from_main\nfrom ...testing.provision import generate_driver_url\nfrom ...testing.provision import log\nfrom ...testing.provision import post_configure_engine\nfrom ...testing.provision import run_reap_dbs\nfrom ...testing.provision import stop_test_class_outside_fixtures\nfrom ...testing.provision import temp_table_keyword_args\nfrom ...testing.provision import upsert\n\n\n# TODO: I can"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\provision.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\n",
      "https://www.zetetic.net/sqlcipher>`_ backend.\n\n\nDriver\n------\n\nCurrent dialect selection logic is:\n\n* If the :paramref:`_sa.create_engine.module` parameter supplies a DBAPI module,\n  that module is used.\n* Otherwise for Python 3, choose https://pypi.org/project/sqlcipher3/\n* If not available, fall back to https://pypi.org/project/pysqlcipher3/\n* For Python 2, https://pypi.org/project/pysqlcipher/ is used.\n\n.. warning:: The ``pysqlcipher3`` and ``pysqlcipher`` DBAPI drivers are no\n   longer maintained; the ``sqlcipher3`` driver as of this writing appears\n   to be current.  For future compatibility, any pysqlcipher-compatible DBAPI\n   may be used as follows::\n\n        import sqlcipher_compatible_driver\n\n        from sqlalchemy import create_engine\n\n        e = create_engine(\n            ",
      "https://www.zetetic.net/sqlcipher/sqlcipher-api/ can be passed\nin the query string, and will result in that PRAGMA being called for each\nnew connection.  Currently, ``cipher``, ``kdf_iter``\n``cipher_page_size`` and ``cipher_use_hmac`` are supported::\n\n    e = create_engine("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlcipher.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nr",
      "https://docs.python.org/library/sqlite3.html\n\n    Note that ``pysqlite`` is the same driver as the ``sqlite3``\n    module included with the Python distribution.\n\nDriver\n------\n\nThe ``sqlite3`` Python DBAPI is standard on all modern Python versions;\nfor cPython and Pypy, no additional installation is necessary.\n\n\nConnect Strings\n---------------\n\nThe file specification for the SQLite database is taken as the ",
      "https://www.sqlite.org/uri.html>`_, which has the  advantage\nthat additional driver-level arguments can be passed including options such as\n",
      "https://www.sqlite.org/uri.html>`_ - in\n    the SQLite documentation\n\n.. _pysqlite_regexp:\n\nRegular Expression Support\n---------------------------\n\n.. versionadded:: 1.4\n\nSupport for the :meth:`_sql.ColumnOperators.regexp_match` operator is provided\nusing Python",
      "https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function\n\n.. _re.search: https://docs.python.org/3/library/re.html#re.search\n\n.. _Python regular expressions: https://docs.python.org/3/library/re.html#re.search\n\n\n\nCompatibility with sqlite3 ",
      "https://sqlite.org/lang_transaction.html>`_,\nby adding the desired locking mode to our ``",
      "https://sqlite.org/lang_transaction.html>`_ -\n    on the SQLite site\n\n    `sqlite3 SELECT does not BEGIN a transaction <https://bugs.python.org/issue9924>`_ -\n    on the Python bug tracker\n\n    `sqlite3 module breaks transactions and potentially corrupts data <https://bugs.python.org/issue10740>`_ -\n    on the Python bug tracker\n\n.. _pysqlite_udfs:\n\nUser-Defined Functions\n----------------------\n\npysqlite supports a `create_function() <https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function>`_\nmethod that allows us to create our own user-defined functions (UDFs) in Python and use them directly in SQLite queries.\nThese functions are registered with a specific DBAPI Connection.\n\nSQLAlchemy uses connection pooling with file-based SQLite databases, so we need to ensure that the UDF is attached to the\nconnection when it is created. That is accomplished with an event listener::\n\n    from sqlalchemy import create_engine\n    from sqlalchemy import event\n    from sqlalchemy import text\n\n\n    def udf():\n        return ",
      "https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function\n            # the check is more conservative since there were still issues\n            # with following 3.8 sqlite versions\n            create_func_kw = {",
      "https://www.sqlite.org/lang_mathfunc.html\n            dbapi_connection.create_function(\n                "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlite.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\path\\\\to\\\\database.db"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlite.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.opensource.org/licenses/mit-license.php\n# mypy: ignore-errors\n\n\nfrom . import aiosqlite  # noqa\nfrom . import base  # noqa\nfrom . import pysqlcipher  # noqa\nfrom . import pysqlite  # noqa\nfrom .base import BLOB\nfrom .base import BOOLEAN\nfrom .base import CHAR\nfrom .base import DATE\nfrom .base import DATETIME\nfrom .base import DECIMAL\nfrom .base import FLOAT\nfrom .base import INTEGER\nfrom .base import JSON\nfrom .base import NUMERIC\nfrom .base import REAL\nfrom .base import SMALLINT\nfrom .base import TEXT\nfrom .base import TIME\nfrom .base import TIMESTAMP\nfrom .base import VARCHAR\nfrom .dml import Insert\nfrom .dml import insert\n\n# default dialect\nbase.dialect = dialect = pysqlite.dialect\n\n\n__all__ = (\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-trio/sniffio/pull/42)"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sniffio\\_tests\\test_sniffio.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/encode/sentry-asgi>`.\n",
      "https://docs.sentry.io/platforms/python/guides/asgi/ for more information."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\asgi.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.aws.amazon.com/lambda/latest/dg/python-handler.html,\n        # `event` here is *likely* a dictionary, but also might be a number of\n        # other types (str, int, float, None).\n        #\n        # In some cases, it is a list (if the user is batch-invoking their\n        # function, for example), in which case we",
      "https://console.{domain}/cloudwatch/home?region={region}",
      "https://github.com/aws/aws-lambda-python-runtime-interface-client/blob/2.2.1/awslambdaric/bootstrap.py#L479\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\aws_lambda.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/a/71944042/300572\nif TYPE_CHECKING:\n    from typing import ParamSpec, Callable\nelse:\n    # Fake ParamSpec\n    class ParamSpec:\n        def __init__(self, _):\n            self.args = None\n            self.kwargs = None\n\n    # Callable[anything] will return None\n    class _Callable:\n        def __getitem__(self, _):\n            return None\n\n    # Make instances\n    Callable = _Callable()\n\n\ntry:\n    import clickhouse_driver  # type: ignore[import-not-found]\n\nexcept ImportError:\n    raise DidNotEnable("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\clickhouse_driver.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://{}/latest/api/token",
      "http://{}/latest/dynamic/instance-identity/document",
      "http://{}/computeMetadata/v1/?recursive=true"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\cloud_resource_context.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/cloud/\n    ",
      "https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/cloud/\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\cloud_resource_context.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "169.254.169.254"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\cloud_resource_context.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/jacobsvante and later donated to the Sentry\n    project.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\dramatiq.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/getsentry/sentry-python/issues/3097\n        if integration is None:\n            return old_excepthook(type_, value, traceback)\n\n        if _should_send(integration.always_run):\n            with capture_internal_exceptions():\n                event, hint = event_from_exception(\n                    (type_, value, traceback),\n                    client_options=sentry_sdk.get_client().options,\n                    mechanism={"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\excepthook.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/lingthio/Flask-User/blob/a379fa0a281789618c484b459cb41236779b95b1/docs/source/data_models.rst#fixed-data-model-property-names\n\n        try:\n            user_info.setdefault("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\flask.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://console.cloud.google.com/logs/viewer?project={project}&resource=cloud_function"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\gcp.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.litestar.dev/2/usage/applications.html#after-exception\n    - https://docs.litestar.dev/2/usage/middleware/using-middleware.html\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\litestar.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/getsentry/sentry-python/issues/904\n        if record.exc_info and record.exc_info[0] is not None:\n            event, hint = event_from_exception(\n                record.exc_info,\n                client_options=client_options,\n                mechanism={"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\logging.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.ray.io/en/latest/ray-core/actors.html)\n            # are not supported\n            # (Only Ray Tasks are supported)\n            return old_remote(f, *args, *kwargs)\n\n        def _f(*f_args, _tracing=None, **f_kwargs):\n            # type: (Any, Optional[dict[str, Any]],  Any) -> Any\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\ray.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/huge-success/sanic/issues/1332\n            ignore_logger(",
      "https://github.com/sanic-org/sanic/issues/2297\n    self.signal(",
      "https://github.com/sanic-org/sanic/issues/2297 is resolved\n            if SanicIntegration.version and SanicIntegration.version == (21, 9):\n                await _context_exit(request)\n\n    return sentry_wrapped_error_handler\n\n\nasync def _legacy_handle_request(self, request, *args, **kwargs):\n    # type: (Any, Request, *Any, **Any) -> Any\n    if sentry_sdk.get_client().get_integration(SanicIntegration) is None:\n        return await old_handle_request(self, request, *args, **kwargs)\n\n    weak_request = weakref.ref(request)\n\n    with sentry_sdk.isolation_scope() as scope:\n        scope.clear_breadcrumbs()\n        scope.add_event_processor(_make_request_processor(weak_request))\n\n        response = old_handle_request(self, request, *args, **kwargs)\n        if isawaitable(response):\n            response = await response\n\n        return response\n\n\ndef _legacy_router_get(self, *args):\n    # type: (Any, Union[Any, Request]) -> Any\n    rv = old_router_get(self, *args)\n    if sentry_sdk.get_client().get_integration(SanicIntegration) is not None:\n        with capture_internal_exceptions():\n            scope = sentry_sdk.get_isolation_scope()\n            if SanicIntegration.version and SanicIntegration.version >= (21, 3):\n                # Sanic versions above and including 21.3 append the app name to the\n                # route name, and so we need to remove it from Route name so the\n                # transaction name is consistent across all versions\n                sanic_app_name = self.ctx.app.name\n                sanic_route = rv[0].name\n\n                if sanic_route.startswith("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\sanic.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.sqlalchemy.org/en/20/dialects/index.html\ndef _get_db_system(name):\n    # type: (str) -> Optional[str]\n    name = str(name)\n\n    if "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\sqlalchemy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/encode/starlette/discussions/1933\n        # Calling `.form()` without calling `.body()` first will\n        # potentially break the users project.\n        await self.request.body()\n\n        return await self.request.form()\n\n    def is_json(self):\n        # type: (StarletteRequestExtractor) -> bool\n        return _is_json_content_type(self.request.headers.get("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\starlette.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://starlite-api.github.io/starlite/usage/0-the-starlite-app/5-application-hooks/#after-exception\n    - https://starlite-api.github.io/starlite/usage/7-middleware/0-middleware-intro/\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\starlite.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/getsentry/sentry-python/pull/434\n            #\n            # In threading module, using current_thread API will access current thread instance\n            # without holding it to avoid a reference cycle in an easier way.\n            with capture_internal_exceptions():\n                new_run = _wrap_run(\n                    isolation_scope,\n                    current_scope,\n                    getattr(self.run, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\threading.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/getsentry/sentry-python/issues/3097\n        if integration is None:\n            return old_excepthook(type_, value, traceback)\n\n        with capture_internal_exceptions():\n            event, hint = event_from_exception(\n                (type_, value, traceback),\n                client_options=sentry_sdk.get_client().options,\n                mechanism={"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\typer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/unbit/uwsgi/issues/1950\n\n    client_ip = get_client_ip(environ)\n    request_url = get_request_url(environ, use_x_forwarded_for)\n    query_string = environ.get("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\wsgi.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/nylas/nylas-perftools,\nwhich is published under the following license:\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Nylas\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\profiler\\transaction_profiler.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/celery/celery/issues/4875\n            #\n            # Need to setdefault the inner headers too since other\n            # tracing tools (dd-trace-py) also employ this exact\n            # workaround and we don",
      "https://github.com/getsentry/sentry-python/issues/421\n    @ensure_integration_enabled(CeleryIntegration, f)\n    def _inner(*args, **kwargs):\n        # type: (*Any, **Any) -> Any\n        try:\n            with sentry_sdk.start_span(\n                op=OP.QUEUE_PROCESS,\n                name=task.name,\n                origin=CeleryIntegration.origin,\n            ) as span:\n                _set_messaging_destination_name(task, span)\n\n                latency = None\n                with capture_internal_exceptions():\n                    if (\n                        task.request.headers is not None\n                        and "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\celery\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/django/asgiref/blob/main/asgiref/sync.py\nif hasattr(inspect, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\django\\asgi.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.djangoproject.com/en/5.0/topics/cache/#redis\n    #       GitHub issue: https://github.com/getsentry/sentry-python/issues/3062\n    if not isinstance(location, str):\n        return None, None\n\n    if "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\django\\caching.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/django/django/blob/21382e2743d06efbf5623e7c9b6dccf2a325669b/django/urls/resolvers.py#L245-L247\n    _optional_group_matcher = re.compile(r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\django\\transactions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/a/71944042/300572\nif TYPE_CHECKING:\n    from typing import ParamSpec, Callable\nelse:\n    # Fake ParamSpec\n    class ParamSpec:\n        def __init__(self, _):\n            self.args = None\n            self.kwargs = None\n\n    # Callable[anything] will return None\n    class _Callable:\n        def __getitem__(self, _):\n            return None\n\n    # Make instances\n    Callable = _Callable()\n\nP = ParamSpec("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\grpc\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://develop.sentry.dev/sdk/performance/opentelemetry/#step-5-add-opentelemetry-context\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\opentelemetry\\span_processor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/getsentry/rb\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\redis\\rb.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/redis/redis-py\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\redis\\redis.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/redis/redis-py/blob/master/redis/cluster.py\n",
      "https://github.com/redis/redis-py/blame/v5.0.0/redis/asyncio/cluster.py#L1386\n            async_redis_cluster_pipeline_instance._client,  # type: ignore[attr-defined]\n        )\n\n\ndef _set_cluster_db_data(span, redis_cluster_instance):\n    # type: (Span, RedisCluster[Any]) -> None\n    default_node = redis_cluster_instance.get_default_node()\n\n    if default_node is not None:\n        connection_params = {\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\redis\\redis_cluster.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/grokzen/redis-py-cluster\n",
      "https://github.com/Grokzen/redis-py-cluster/blob/master/docs/release-notes.rst\n    if (0, 2, 0) < version < (2, 0, 0):\n        pipeline_cls = rediscluster.pipeline.StrictClusterPipeline\n        patch_redis_client(\n            rediscluster.StrictRedisCluster,\n            is_cluster=True,\n            set_db_data_fn=_set_db_data,\n        )\n    else:\n        pipeline_cls = rediscluster.pipeline.ClusterPipeline\n\n    patch_redis_pipeline(\n        pipeline_cls,\n        is_cluster=True,\n        get_command_args_fn=_parse_rediscluster_command,\n        set_db_data_fn=_set_db_data,\n    )\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\redis\\redis_py_cluster_legacy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/grpc/grpc/issues/34298.\n            client_call_details = client_call_details._replace(\n                metadata=Metadata.from_tuple(client_call_details.metadata)\n            )\n        for (\n            key,\n            value,\n        ) in sentry_sdk.get_current_scope().iter_trace_propagation_headers():\n            client_call_details.metadata.add(key, value)\n        return client_call_details\n\n\nclass SentryUnaryUnaryClientInterceptor(ClientInterceptor, UnaryUnaryClientInterceptor):  # type: ignore\n    async def intercept_unary_unary(\n        self,\n        continuation: Callable[[ClientCallDetails, Message], UnaryUnaryCall],\n        client_call_details: ClientCallDetails,\n        request: Message,\n    ) -> Union[UnaryUnaryCall, Message]:\n        method = client_call_details.method\n\n        with sentry_sdk.start_span(\n            op=OP.GRPC_CLIENT,\n            name="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\sentry_sdk\\integrations\\grpc\\aio\\client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n\n@deprecated(\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\deprecated\\class_validators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n__all__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\deprecated\\config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n__all__ = ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\deprecated\\decorator.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n__all__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\deprecated\\json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n\nclass Protocol(str, Enum):\n    json = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\deprecated\\parse.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n__all__ = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\deprecated\\tools.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic/pull/9459#discussion_r1628197626\n# Also, make this frozen eventually, but that doesn"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\experimental\\pipeline.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pytest-dev/pluggy/blob/1.3.0/src/pluggy/_manager.py#L376-L402\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\plugin\\_loader.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/2.8/concepts/plugins#build-a-plugin\n\nPlugin interface for Pydantic plugins, and related types.\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\plugin\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/11030\n    typeddict_cls: Type[",
      "https://bugs.python.org/issue38834).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\annotated_types.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/TR/css3-color/#svg-color\n\nA few colors have multiple names referring to the sames colors, eg. `grey` and `gray` or `aqua` and `cyan`.\n\nIn these cases the LAST color when sorted alphabetically takes preferences,\neg. Color((0, 255, 255)).as_named() == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\color.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/cython/cython/issues/4003\n# Fixed in Cython 3 and Pydantic v1 won"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://raw.githubusercontent.com/django/django/main/django/utils/dateparse.py at\n9718fa2e8abe430c3526a9278dd976443d4ae3c6\n\nChanged to:\n* use standard python datetime types not django.utils.timezone\n* raise ValueError when regex doesn"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\datetime_parse.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pydantic-docs.helpmanual.io/usage/settings/#environment-variable-names"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\env_settings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0585\n            origin_type = getattr(typing, type_._name)\n        assert origin_type is not None\n        # PEP-604 syntax (Ex.: list | str) is represented with a types.UnionType object that does not have __getitem__.\n        # We also cannot use isinstance() since we have to compare types.\n        if sys.version_info >= (3, 10) and origin_type is types.UnionType:  # noqa: E721\n            return _UnionGenericAlias(origin_type, resolved_type_args)\n        return origin_type[resolved_type_args]\n\n    # We handle pydantic generic models separately as they don",
      "https://github.com/nedbat/coveragepy/issues/198\n            continue  # pragma: no cover\n\n        assert field.type_.__class__ is DeferredType, field.type_.__class__\n\n        field_type_hint = instance_type_hints[key]\n        concrete_type = replace_types(field_type_hint, typevars_map)\n        field.type_ = concrete_type\n        field.outer_type_ = concrete_type\n        field.prepare()\n        created_model.__annotations__[key] = concrete_type\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\generics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0487\n        # for attributes not in `new_namespace` (e.g. private attributes)\n        for name, obj in namespace.items():\n            if name not in new_namespace:\n                set_name = getattr(obj, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\main.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic/issues/5191 to hit this branch for test coverage\n                    ctx.api.defer()\n                else:  # pragma: no cover\n                    # I don",
      "https://github.com/pydantic/pydantic/issues/new/choose",
      "https://github.com/python/mypy/issues/7301 is merged\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\mypy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc3986#appendix-A\n_user_info_regex = r",
      "https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\n    max_length = 2083\n    hidden_parts = {",
      "https://pypi.org/project/email-validator/\n    Notes:\n    * raw ip address (literal) domain parts are not allowed.\n    * "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\networks.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "local_part@domain.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\networks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#discriminator-object\n        field_has_discriminator: bool = field.discriminator_key is not None\n        if field_has_discriminator:\n            assert field.sub_fields_mapping is not None\n\n            discriminator_models_refs: Dict[str, Union[str, Dict[str, Any]]] = {}\n\n            for discriminator_value, sub_field in field.sub_fields_mapping.items():\n                if isinstance(discriminator_value, Enum):\n                    discriminator_value = str(discriminator_value.value)\n                # sub_field is either a `BaseModel` or directly an `Annotated` `Union` of many\n                if is_union(get_origin(sub_field.type_)):\n                    sub_models = get_sub_types(sub_field.type_)\n                    discriminator_models_refs[discriminator_value] = {\n                        model_name_map[sub_model]: get_schema_ref(\n                            model_name_map[sub_model], ref_prefix, ref_template, False\n                        )\n                        for sub_model in sub_models\n                    }\n                else:\n                    sub_field_type = sub_field.type_\n                    if hasattr(sub_field_type, ",
      "https://github.com/pydantic/pydantic/issues/1209\n                sub_schema = sub_schema[",
      "https://docs.pydantic.dev/usage/schema/#unenforced-field-constraints"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/cython/cython/issues/2753).\n    ",
      "https://en.wikipedia.org/wiki/Payment_card_number\n    ",
      "https://en.wikipedia.org/wiki/Luhn_algorithm\n        ",
      "https://en.wikipedia.org/wiki/Payment_card_number#Issuer_identification_number_(IIN)\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\types.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/9496\nAnyArgTCallable = TypingCallable[..., _T]\n\n\n# Annotated[...] is implemented by returning an instance of one of these classes, depending on\n# python/typing_extensions version.\nAnnotatedTypeNames = {",
      "https://github.com/cython/cython/issues/3537 is\n        solved and https://github.com/pydantic/pydantic/pull/1753 is merged.\n        ",
      "https://github.com/pydantic/pydantic/issues/2363\n            pass\n        else:\n            base_globals = module.__dict__\n\n    annotations = {}\n    for name, value in raw_annotations.items():\n        if isinstance(value, str):\n            if (3, 10) > sys.version_info >= (3, 9, 8) or sys.version_info >= (3, 10, 1):\n                value = ForwardRef(value, is_argument=False, is_class=True)\n            else:\n                value = ForwardRef(value, is_argument=False)\n        try:\n            if sys.version_info >= (3, 13):\n                value = _eval_type(value, base_globals, None, type_params=())\n            else:\n                value = _eval_type(value, base_globals, None)\n        except NameError:\n            # this is ok, it can be fixed with update_forward_refs\n            pass\n        annotations[name] = value\n    return annotations\n\n\ndef is_callable_type(type_: Type[Any]) -> bool:\n    return type_ is Callable or get_origin(type_) is Callable\n\n\ndef is_literal_type(type_: Type[Any]) -> bool:\n    return Literal is not None and get_origin(type_) in LITERAL_TYPES\n\n\ndef literal_values(type_: Type[Any]) -> Tuple[Any, ...]:\n    return get_args(type_)\n\n\ndef all_literal_values(type_: Type[Any]) -> Tuple[Any, ...]:\n    ",
      "https://www.python.org/dev/peps/pep-0586)\n    e.g. `Literal[Literal[Literal[1, 2, 3], ",
      "https://docs.python.org/3.10/library/typing.html#typing.is_typeddict)\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\typing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://python-devtools.helpmanual.io/) to provide human readable representations\n    of objects.\n    ",
      "https://python-devtools.helpmanual.io/) to provide a human readable representations of objects\n        ",
      "https://mypy.readthedocs.io/en/latest/literal_types.html#exhaustive-checks\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/pull/96500\nmax_str_int = 4_300\n\n\ndef int_validator(v: Any) -> int:\n    if isinstance(v, int) and not (v is True or v is False):\n        return v\n\n    # see https://github.com/pydantic/pydantic/issues/1477 and in turn, https://github.com/python/cpython/issues/95778\n    # this check should be unnecessary once patch releases are out for 3.7, 3.8, 3.9 and 3.10\n    # but better to check here until then.\n    # NOTICE: this does not fully protect user from the DOS risk since the standard library JSON implementation\n    # (and other std lib modules like xml) use `int()` and are likely called before this, the best workaround is to\n    # 1. update to the latest patch release of python once released, 2. use a different JSON library like ujson\n    if isinstance(v, (str, bytes, bytearray)) and len(v) > max_str_int:\n        raise errors.IntegerError()\n\n    try:\n        return int(v)\n    except (TypeError, ValueError, OverflowError):\n        raise errors.IntegerError()\n\n\ndef strict_int_validator(v: Any) -> int:\n    if isinstance(v, int) and not (v is True or v is False):\n        return v\n    raise errors.IntegerError()\n\n\ndef float_validator(v: Any) -> float:\n    if isinstance(v, float):\n        return v\n\n    try:\n        return float(v)\n    except (TypeError, ValueError):\n        raise errors.FloatError()\n\n\ndef strict_float_validator(v: Any) -> float:\n    if isinstance(v, float):\n        return v\n    raise errors.FloatError()\n\n\ndef float_finite_validator(v: ",
      "https://docs.python.org/library/ipaddress.html#ipaddress.IPv4Network\n    ",
      "https://docs.python.org/library/ipaddress.html#ipaddress.IPv6Network\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\validators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://hypothesis.readthedocs.io/en/latest/strategies.html#registering-strategies-via-setuptools-entry-points\nhttps://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.register_type_strategy\nhttps://hypothesis.readthedocs.io/en/latest/strategies.html#interaction-with-pytest-cov\nhttps://docs.pydantic.dev/usage/types/#pydantic-types\n\nNote that because our motivation is to *improve user experience*, the strategies\nare always sound (never generate invalid data) but sacrifice completeness for\nmaintainability (ie may be unable to generate some tricky but valid data).\n\nFinally, this module makes liberal use of `# type: ignore[<code>]` pragmas.\nThis is because Hypothesis annotates `register_type_strategy()` with\n`(T, SearchStrategy[T])`, but in most cases we register e.g. `ConstrainedInt`\nto generate instances of the builtin `int` type which match the constraints.\n",
      "https://en.wikipedia.org/wiki/Luhn_algorithm\n    for digit in "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\_hypothesis_plugin.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "0@A0--0.ac"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\v1\\_hypothesis_plugin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\nif TYPE_CHECKING:\n    from .._internal._schema_generation_shared import GenerateSchema\n    from ..fields import ComputedFieldInfo, FieldInfo\n\nDEPRECATION_MESSAGE = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic-core/issues/619\n            core_schema.none_schema(ref=ref, metadata={HAS_INVALID_SCHEMAS_METADATA_KEY: True})\n            for ref in expected_missing_refs\n        ]\n        return core_schema.definitions_schema(schema, definitions)\n    return None\n\n\ndef collect_invalid_schemas(schema: core_schema.CoreSchema) -> bool:\n    invalid = False\n\n    def _is_schema_valid(s: core_schema.CoreSchema, recurse: Recurse) -> core_schema.CoreSchema:\n        nonlocal invalid\n        if ",
      "https://github.com/pydantic/pydantic-core/issues/615\n\n\nclass _WalkCoreSchema:\n    def __init__(self):\n        self._schema_type_to_method = self._build_schema_type_to_method()\n\n    def _build_schema_type_to_method(self) -> dict[core_schema.CoreSchemaType, Recurse]:\n        mapping: dict[core_schema.CoreSchemaType, Recurse] = {}\n        key: core_schema.CoreSchemaType\n        for key in get_args(core_schema.CoreSchemaType):\n            method_name = f"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_core_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n\n\ndef set_dataclass_fields(\n    cls: type[StandardDataclass],\n    types_namespace: dict[str, Any] | None = None,\n    config_wrapper: _config.ConfigWrapper | None = None,\n) -> None:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_dataclasses.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/download/releases/2.3/mro/\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_decorators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic/issues/2363\n            pass\n    return get_type_hints(obj, globalns=globalns, localns=localns, include_extras=include_extras)\n\n\nclass PydanticMetadata(Representation):\n    ",
      "https://docs.python.org/3/howto/annotations.html#accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older\n    # annotations is only used for finding fields in parent classes\n    annotations = cls.__dict__.get(",
      "https://github.com/pydantic/pydantic/issues/5470\n            continue\n\n        if isinstance(dataclass_field.default, FieldInfo):\n            if dataclass_field.default.init_var:\n                if dataclass_field.default.init is False:\n                    raise PydanticUserError(\n                        f"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_fields.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.pydantic.dev/{version_short()}/concepts/serialization/#custom-serializers for alternatives",
      "https://github.com/miss-islington/cpython/blob/1e9939657dd1f8eb9f596f77c1084d2d351172fc/Doc/library/typing.rst?plain=1#L1546-L1548)\n        however it is buggy\n        (https://github.com/python/typing_extensions/blob/ac52ac5f2cb0e00e7988bae1e2a1b8257ac88d6d/src/typing_extensions.py#L657-L666).\n\n        On 3.11 but < 3.12 TypedDict does not preserve inheritance information.\n\n        Hence to avoid creating validators that do not do what users expect we only\n        support typing.TypedDict on Python >= 3.12 or typing_extension.TypedDict on all versions\n        ",
      "https://github.com/pydantic/pydantic/issues/5952\n                raise ValueError("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/collections.html#collections.ChainMap,\n        with some light modifications for this use case.\n        ",
      "https://www.python.org/dev/peps/pep-0585\n            origin_type = getattr(typing, type_._name)\n        assert origin_type is not None\n        # PEP-604 syntax (Ex.: list | str) is represented with a types.UnionType object that does not have __getitem__.\n        # We also cannot use isinstance() since we have to compare types.\n        if sys.version_info >= (3, 10) and origin_type is types.UnionType:\n            return _UnionGenericAlias(origin_type, resolved_type_args)\n        # NotRequired[T] and Required[T] don",
      "https://github.com/python/cpython/issues/86483 for reference.)\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/blob/master/mypy/git.py)."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_git.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://youtrack.jetbrains.com/issue/PY-21915\n    # and https://youtrack.jetbrains.com/issue/PY-51428\n    DeprecationWarning = PydanticDeprecatedSince20\n    PydanticModelField = object()\n    PydanticModelPrivateAttr = object()\n\nobject_setattr = object.__setattr__\n\n\nclass _ModelNamespaceDict(dict):\n    ",
      "https://peps.python.org/pep-0487\n            # for attributes not in `new_namespace` (e.g. private attributes)\n            for name, obj in private_attributes.items():\n                obj.__set_name__(cls, name)\n\n            if __pydantic_reset_parent_namespace__:\n                cls.__pydantic_parent_namespace__ = build_lenient_weakvaluedict(parent_frame_namespace())\n            parent_namespace = getattr(cls, ",
      "https://github.com/pydantic/pydantic/issues/6763 for context.\n\n    Semantics:\n        - If not pickled, behaves the same as a `weakref.ref`.\n        - If pickled along with the referenced object, the same `weakref.ref` behavior\n          will be maintained between them after unpickling.\n        - If pickled without the referenced object, after unpickling the underlying\n          reference will be cleared (`__call__` will always return `None`).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_model_construction.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://python-devtools.helpmanual.io/).\n    # `__rich_repr__` is used by [rich](https://rich.readthedocs.io/en/stable/pretty.html).\n    # (this is not a docstring to avoid adding a docstring to classes which inherit from Representation)\n\n    # we don",
      "https://python-devtools.helpmanual.io/) to pretty print objects.",
      "https://rich.readthedocs.io/en/stable/pretty.html) to pretty print objects."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_repr.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0586)\n    e.g. `Literal[Literal[Literal[1, 2, 3], ",
      "https://github.com/pydantic/pydantic/issues/2678#issuecomment-1008139014 -> Scope\n    and suggestion at the end of the next comment by @gvanrossum.\n\n    WARNING 1: it matters exactly where this is called. By default, this function will build a namespace from the\n    parent of where it is called.\n\n    WARNING 2: this only looks in the parent namespace, not other parents since (AFAIK) there",
      "https://discuss.python.org/t/is-there-a-way-to-access-parent-nested-namespaces/20659.\n    ",
      "https://github.com/pydantic/pydantic/issues/2363\n            pass\n        else:\n            if globalns:\n                return {**module_globalns, **globalns}\n            else:\n                # copy module globals to make sure it can",
      "https://github.com/python/cpython/pull/28560 for some background.\n        The backport happened on 3.9.8, see:\n        https://github.com/pydantic/pydantic/discussions/6244#discussioncomment-6275458,\n        and on 3.10.1 for the 3.10 branch, see:\n        https://github.com/pydantic/pydantic/issues/6912\n\n        Implemented as EAFP with memory.\n        ",
      "https://github.com/python/cpython/blob/aaaf5174241496afca7ce4d4584570190ff972fe/Lib/typing.py#L1773-L1875\n\n        DO NOT CHANGE THIS METHOD UNLESS ABSOLUTELY NECESSARY.\n        ======================================================\n\n        Return type hints for an object.\n\n        This is often the same as obj.__annotations__, but it handles\n        forward references encoded as string literals, adds Optional[t] if a\n        default value equal to None is set and recursively replaces all\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_typing_extra.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/13713\n    # https://github.com/python/typeshed/pull/8785\n    # Since this is typing-only, hide it in a typing.TYPE_CHECKING block\n    if typing.TYPE_CHECKING:\n\n        def __contains__(self, key: str, /) -> bool:\n            return self.wrapped.__contains__(key)\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pydantic/pydantic/issues/5595\n    if issubclass(value_type, (str, bytes)):\n        raise PydanticCustomError(\n            ",
      "https://docs.python.org/library/ipaddress.html#ipaddress.IPv4Network\n    ",
      "https://docs.python.org/library/ipaddress.html#ipaddress.IPv6Network\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pydantic\\_internal\\_validators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/cgoldberg/concurrencytest/issues/11\n        orig_fdopen = os.fdopen\n        concurrencytest.os.fdopen = fdopen\n        forker = concurrencytest.fork_for_tests(NWORKERS)\n        return concurrencytest.ConcurrentTestSuite(suite, forker)\n\n    @staticmethod\n    def _split_suite(suite):\n        serial = unittest.TestSuite()\n        parallel = unittest.TestSuite()\n        for test in suite:\n            if test.countTestCases() == 0:\n                continue\n            if isinstance(test, unittest.TestSuite):\n                test_class = test._tests[0].__class__\n            elif isinstance(test, unittest.TestCase):\n                test_class = test\n            else:\n                raise TypeError("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\runner.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1074\n        with self.assertRaises(RuntimeError):\n            sysctl("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_bsd.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue30204\n        self.assertEqual(\n            conn.type, sock.getsockopt(socket.SOL_SOCKET, socket.SO_TYPE)\n        )\n\n        # local address\n        laddr = sock.getsockname()\n        if not laddr and PY3 and isinstance(laddr, bytes):\n            # See: http://bugs.python.org/issue30205\n            laddr = laddr.decode()\n        if sock.family == AF_INET6:\n            laddr = laddr[:2]\n        self.assertEqual(conn.laddr, laddr)\n\n        # XXX Solaris can"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_connections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1013\n        with create_sockets() as socks:\n            expected = len(socks)\n        pids = []\n        times = 10\n        fnames = []\n        for _ in range(times):\n            fname = self.get_testfn()\n            fnames.append(fname)\n            src = textwrap.dedent("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_connections.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1",
      "127.0.0.1",
      "127.0.0.1",
      "127.0.0.1",
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_connections.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1039.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_contracts.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/538#issuecomment-57059946\n    out = sh([",
      "https://gitlab.com/procps-ng/procps/commit/\n        #     05d751c4f076a2f0118b914c5e51cfbb4762ad8e\n        if get_free_version_info() < (3, 3, 12):\n            raise self.skipTest(",
      "https://github.com/giampaolo/psutil/issues/538#issuecomment-147192098\n        out = sh([",
      "https://gitlab.com/procps-ng/procps/commit/\n        #     05d751c4f076a2f0118b914c5e51cfbb4762ad8e\n        if get_free_version_info() < (3, 3, 12):\n            raise self.skipTest(",
      "https://github.com/giampaolo/psutil/issues/722\n        with mock_open_exception(\n            ",
      "https://github.com/giampaolo/psutil/issues/1015\n        if not self.meminfo_has_swap_info():\n            return unittest.skip(",
      "https://github.com/giampaolo/psutil/issues/981\n        def path_exists_mock(path):\n            if path.startswith(",
      "https://github.com/giampaolo/psutil/issues/1071\n        def open_mock(name, *args, **kwargs):\n            if name.endswith(",
      "https://github.com/giampaolo/psutil/issues/623\n        try:\n            s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n            self.addCleanup(s.close)\n            s.bind((",
      "https://github.com/giampaolo/psutil/issues/1307\n        try:\n            with mock.patch(\n                ",
      "https://github.com/giampaolo/psutil/issues/767\n        content = ",
      "https://github.com/giampaolo/psutil/issues/767\n        content = ",
      "https://github.com/giampaolo/psutil/issues/767\n        with mock_open_content({",
      "https://github.com/giampaolo/psutil/pull/1313#issuecomment-408626842\n        content = textwrap.dedent(",
      "https://github.com/giampaolo/psutil/pull/1313#issuecomment-408626842\n        content = textwrap.dedent(",
      "https://github.com/giampaolo/psutil/issues/687\n        with ThreadTask():\n            p = psutil.Process()\n            threads = p.threads()\n            self.assertEqual(len(threads), 2)\n            tid = sorted(threads, key=lambda x: x.id)[1].id\n            self.assertNotEqual(p.pid, tid)\n            pt = psutil.Process(tid)\n            pt.as_dict()\n            self.assertNotIn(tid, psutil.pids())\n\n    def test_pid_exists_no_proc_status(self):\n        # Internally pid_exists relies on /proc/{pid}/status.\n        # Emulate a case where this file is empty in which case\n        # psutil is supposed to fall back on using pids().\n        with mock_open_content({",
      "https://github.com/giampaolo/psutil/issues/1222\n        content = textwrap.dedent(",
      "https://travis-ci.org/giampaolo/psutil/jobs/225694530\n        p = psutil.Process()\n        files = p.open_files()\n        with open(self.get_testfn(), ",
      "https://github.com/giampaolo/psutil/issues/1940\n        p = psutil.Process()\n        files = p.open_files()\n        with open(self.get_testfn(), ",
      "https://github.com/giampaolo/psutil/issues/639\n        p = psutil.Process()\n        fake_file = io.StringIO(u(",
      "https://github.com/giampaolo/psutil/issues/1179\n        p = psutil.Process()\n        fake_file = io.StringIO(u(",
      "https://github.com/giampaolo/psutil/issues/\n        #    1179#issuecomment-552984549\n        p = psutil.Process()\n        fake_file = io.StringIO(u(",
      "https://travis-ci.org/giampaolo/psutil/jobs/51368273\n        with mock.patch(\n            ",
      "https://github.com/giampaolo/psutil/issues/1940\n        with mock.patch(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_linux.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/home/foo (deleted)",
      "/home/foo",
      "/home/foo"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_linux.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_linux.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/656\n        # Can",
      "https://github.com/giampaolo/psutil/issues/813\n        p = psutil.Process()\n        p.foo = ",
      "https://github.com/pypa/setuptools/pull/2896\n    # @unittest.skipIf(APPVEYOR, ",
      "https://github.com/giampaolo/psutil/issues/564\n        with mock.patch(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_misc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1082\n    # AIX has the same issue\n    @unittest.skipIf(SUNOS, ",
      "https://travis-ci.org/giampaolo/psutil/jobs/138338464\n                # https://travis-ci.org/giampaolo/psutil/jobs/138343361\n                err = str(err).lower()\n                if (\n                    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_posix.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1087\n        with mock.patch(",
      "https://github.com/giampaolo/psutil/issues/759\n                            with open_text(",
      "https://github.com/giampaolo/psutil/issues/2239\n            try:\n                self.assertEqual(p.name(), os.path.basename(pyexe))\n            except AssertionError:\n                if p.status() == psutil.STATUS_ZOMBIE:\n                    assert os.path.basename(pyexe).startswith(p.name())\n                else:\n                    raise\n        else:\n            self.assertEqual(p.name(), os.path.basename(pyexe))\n\n    # XXX\n    @unittest.skipIf(SUNOS, ",
      "https://github.com/giampaolo/psutil/issues/628\n        pyexe = create_py_exe(self.get_testfn(suffix=",
      "https://github.com/giampaolo/psutil/issues/956\n        p.cpu_affinity([])\n        if LINUX:\n            self.assertEqual(p.cpu_affinity(), p._proc._get_eligible_cpus())\n        else:\n            self.assertEqual(p.cpu_affinity(), all_cpus)\n        if hasattr(os, ",
      "https://github.com/giampaolo/psutil/issues/1373\n        p1, p2 = self.spawn_children_pair()\n        p1_ppid = p1.ppid()\n        p2_ppid = p2.ppid()\n        self.assertNotEqual(p1_ppid, p2_ppid)\n        with p1.oneshot():\n            self.assertEqual(p1.ppid(), p1_ppid)\n            self.assertEqual(p2.ppid(), p2_ppid)\n        with p2.oneshot():\n            self.assertEqual(p1.ppid(), p1_ppid)\n            self.assertEqual(p2.ppid(), p2_ppid)\n\n    def test_halfway_terminated_process(self):\n        # Test that NoSuchProcess exception gets raised in case the\n        # process dies after we create the Process object.\n        # Example:\n        # >>> proc = Process(1234)\n        # >>> time.sleep(2)  # time-consuming task, process dies in meantime\n        # >>> proc.name()\n        # Refers to Issue #15\n        def assert_raises_nsp(fun, fun_name):\n            try:\n                ret = fun()\n            except psutil.ZombieProcess:  # differentiate from NSP\n                raise\n            except psutil.NoSuchProcess:\n                pass\n            except psutil.AccessDenied:\n                if OPENBSD and fun_name in ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_process.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://stackoverflow.com/questions/3112546/os-path-exists-lies\n            if POSIX and os.path.isfile(ret):\n                if hasattr(os, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_process_all.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/2104\n        if USE_PROC_POOL:\n            self.pool = multiprocessing.Pool()\n\n    def tearDown(self):\n        if USE_PROC_POOL:\n            self.pool.terminate()\n            self.pool.join()\n\n    def iter_proc_info(self):\n        # Fixes ",
      "https://github.com/giampaolo/psutil/issues/2338\n            return\n        # on AIX, ",
      "https://github.com/giampaolo/psutil/issues/2338\n            return\n        self.assertGreaterEqual(ret, 1)\n\n    def threads(self, ret, info):\n        self.assertIsInstance(ret, list)\n        for t in ret:\n            assert is_namedtuple(t)\n            self.assertGreaterEqual(t.id, 0)\n            self.assertGreaterEqual(t.user_time, 0)\n            self.assertGreaterEqual(t.system_time, 0)\n            for field in t:\n                self.assertIsInstance(field, (int, float))\n\n    def cpu_times(self, ret, info):\n        assert is_namedtuple(ret)\n        for n in ret:\n            self.assertIsInstance(n, float)\n            self.assertGreaterEqual(n, 0)\n        # TODO: check ntuple fields\n\n    def cpu_percent(self, ret, info):\n        self.assertIsInstance(ret, float)\n        assert 0.0 <= ret <= 100.0, ret\n\n    def cpu_num(self, ret, info):\n        self.assertIsInstance(ret, int)\n        if FREEBSD and ret == -1:\n            return\n        self.assertGreaterEqual(ret, 0)\n        if psutil.cpu_count() == 1:\n            self.assertEqual(ret, 0)\n        self.assertIn(ret, list(range(psutil.cpu_count())))\n\n    def memory_info(self, ret, info):\n        assert is_namedtuple(ret)\n        for value in ret:\n            self.assertIsInstance(value, (int, long))\n            self.assertGreaterEqual(value, 0)\n        if WINDOWS:\n            self.assertGreaterEqual(ret.peak_wset, ret.wset)\n            self.assertGreaterEqual(ret.peak_paged_pool, ret.paged_pool)\n            self.assertGreaterEqual(ret.peak_nonpaged_pool, ret.nonpaged_pool)\n            self.assertGreaterEqual(ret.peak_pagefile, ret.pagefile)\n\n    def memory_full_info(self, ret, info):\n        assert is_namedtuple(ret)\n        total = psutil.virtual_memory().total\n        for name in ret._fields:\n            value = getattr(ret, name)\n            self.assertIsInstance(value, (int, long))\n            self.assertGreaterEqual(value, 0, msg=(name, value))\n            if LINUX or OSX and name in (",
      "https://github.com/giampaolo/psutil/issues/595\n                continue\n            assert os.path.isabs(f.path), f\n            try:\n                st = os.stat(f.path)\n            except FileNotFoundError:\n                pass\n            else:\n                assert stat.S_ISREG(st.st_mode), f\n\n    def num_fds(self, ret, info):\n        self.assertIsInstance(ret, int)\n        self.assertGreaterEqual(ret, 0)\n\n    def connections(self, ret, info):\n        with create_sockets():\n            self.assertEqual(len(ret), len(set(ret)))\n            for conn in ret:\n                assert is_namedtuple(conn)\n                check_connection_ntuple(conn)\n\n    def cwd(self, ret, info):\n        self.assertIsInstance(ret, (str, unicode))\n        self.assertEqual(ret.strip(), ret)\n        if ret:\n            assert os.path.isabs(ret), ret\n            try:\n                st = os.stat(ret)\n            except OSError as err:\n                if WINDOWS and psutil._psplatform.is_permission_err(err):\n                    pass\n                # directory has been removed in mean time\n                elif err.errno != errno.ENOENT:\n                    raise\n            else:\n                assert stat.S_ISDIR(st.st_mode)\n\n    def memory_percent(self, ret, info):\n        self.assertIsInstance(ret, float)\n        assert 0 <= ret <= 100, ret\n\n    def is_running(self, ret, info):\n        self.assertIsInstance(ret, bool)\n\n    def cpu_affinity(self, ret, info):\n        self.assertIsInstance(ret, list)\n        self.assertNotEqual(ret, [])\n        cpus = list(range(psutil.cpu_count()))\n        for n in ret:\n            self.assertIsInstance(n, int)\n            self.assertIn(n, cpus)\n\n    def terminal(self, ret, info):\n        self.assertIsInstance(ret, (str, type(None)))\n        if ret is not None:\n            assert os.path.isabs(ret), ret\n            assert os.path.exists(ret), ret\n\n    def memory_maps(self, ret, info):\n        for nt in ret:\n            self.assertIsInstance(nt.addr, str)\n            self.assertIsInstance(nt.perms, str)\n            self.assertIsInstance(nt.path, str)\n            for fname in nt._fields:\n                value = getattr(nt, fname)\n                if fname == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_process_all.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue12442\n            shutil_usage = shutil.disk_usage(os.getcwd())\n            tolerance = 5 * 1024 * 1024  # 5MB\n            self.assertEqual(usage.total, shutil_usage.total)\n            self.assertAlmostEqual(\n                usage.free, shutil_usage.free, delta=tolerance\n            )\n            if not MACOS_12PLUS:\n                # see https://github.com/giampaolo/psutil/issues/2147\n                self.assertAlmostEqual(\n                    usage.used, shutil_usage.used, delta=tolerance\n                )\n\n        # if path does not exist OSError ENOENT is expected across\n        # all platforms\n        fname = self.get_testfn()\n        with self.assertRaises(FileNotFoundError):\n            psutil.disk_usage(fname)\n\n    @unittest.skipIf(not ASCII_FS, ",
      "http://goo.gl/p9c43\n                disk.device  # noqa\n            # on modern systems mount points can also be files\n            assert os.path.exists(disk.mountpoint), disk\n            assert disk.fstype, disk\n\n        # all = True\n        ls = psutil.disk_partitions(all=True)\n        self.assertTrue(ls, msg=ls)\n        for disk in psutil.disk_partitions(all=True):\n            check_ntuple(disk)\n            if not WINDOWS and disk.mountpoint:\n                try:\n                    os.stat(disk.mountpoint)\n                except OSError as err:\n                    if GITHUB_ACTIONS and MACOS and err.errno == errno.EIO:\n                        continue\n                    # http://mail.python.org/pipermail/python-dev/\n                    #     2012-June/120787.html\n                    if err.errno not in (errno.EPERM, errno.EACCES):\n                        raise\n                else:\n                    assert os.path.exists(disk.mountpoint), disk\n\n        # ---\n\n        def find_mount_point(path):\n            path = os.path.abspath(path)\n            while not os.path.ismount(path):\n                path = os.path.dirname(path)\n            return path.lower()\n\n        mount = find_mount_point(__file__)\n        mounts = [\n            x.mountpoint.lower()\n            for x in psutil.disk_partitions(all=True)\n            if x.mountpoint\n        ]\n        self.assertIn(mount, mounts)\n\n    @unittest.skipIf(\n        LINUX and not os.path.exists("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_system.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1085\n        for val in (-1, 0, None):\n            with mock.patch(\n                ",
      "https://github.com/giampaolo/psutil/issues/392\n        # https://github.com/giampaolo/psutil/issues/645\n        # if not WINDOWS:\n        #     last = psutil.cpu_times()\n        #     for x in range(100):\n        #         new = psutil.cpu_times()\n        #         for field in new._fields:\n        #             new_t = getattr(new, field)\n        #             last_t = getattr(last, field)\n        #             self.assertGreaterEqual(new_t, last_t,\n        #                                     msg=",
      "https://github.com/giampaolo/psutil/issues/392\n        # ...but it turns out also Linux (rarely) behaves the same.\n        # last = psutil.cpu_times(percpu=True)\n        # for x in range(100):\n        #     new = psutil.cpu_times(percpu=True)\n        #     for index in range(len(new)):\n        #         newcpu = new[index]\n        #         lastcpu = last[index]\n        #         for field in newcpu._fields:\n        #             new_t = getattr(newcpu, field)\n        #             last_t = getattr(lastcpu, field)\n        #             self.assertGreaterEqual(\n        #                 new_t, last_t, msg=",
      "https://github.com/giampaolo/psutil/issues/645\n        psutil.cpu_times_percent(percpu=True)\n        zero_times = [\n            x._make([0 for x in range(len(x._fields))])\n            for x in psutil.cpu_times(percpu=True)\n        ]\n        with mock.patch(",
      "https://github.com/giampaolo/psutil/issues/2147\n                self.assertAlmostEqual(\n                    usage.used, shutil_usage.used, delta=tolerance\n                )\n\n        # if path does not exist OSError ENOENT is expected across\n        # all platforms\n        fname = self.get_testfn()\n        with self.assertRaises(FileNotFoundError):\n            psutil.disk_usage(fname)\n\n    @unittest.skipIf(not ASCII_FS, ",
      "https://github.com/giampaolo/psutil/issues/416\n        with self.assertRaises(UnicodeEncodeError):\n            psutil.disk_usage(UNICODE_SUFFIX)\n\n    def test_disk_usage_bytes(self):\n        psutil.disk_usage(b",
      "https://github.com/giampaolo/psutil/issues/1062\n        with mock.patch(\n            ",
      "https://github.com/giampaolo/psutil/issues/1062\n        with mock.patch(\n            ",
      "https://github.com/giampaolo/psutil/issues/786\n        if POSIX:\n            ret = [(",
      "https://github.com/giampaolo/psutil/issues/1279\n        with mock.patch(\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_system.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue30204\n                types[s.getsockopt(socket.SOL_SOCKET, socket.SO_TYPE)] += 1\n            self.assertGreaterEqual(fams[socket.AF_INET], 2)\n            if supports_ipv6():\n                self.assertGreaterEqual(fams[socket.AF_INET6], 2)\n            if POSIX and HAS_CONNECTIONS_UNIX:\n                self.assertGreaterEqual(fams[socket.AF_UNIX], 2)\n            self.assertGreaterEqual(types[socket.SOCK_STREAM], 2)\n            self.assertGreaterEqual(types[socket.SOCK_DGRAM], 2)\n\n\n@serialrun\nclass TestMemLeakClass(TestMemoryLeak):\n    @retry_on_failure()\n    def test_times(self):\n        def fun():\n            cnt["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_testutils.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_testutils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/issues/1040\nThe notes below apply to *any* API returning a string such as\nprocess exe(), cwd() or username():\n\n* all strings are encoded by using the OS filesystem encoding\n  (sys.getfilesystemencoding()) which varies depending on the platform\n  (e.g. ",
      "https://ci.appveyor.com/project/giampaolo/psutil/build/job/\n        #     jiq2cgd6stsbtn60\n        # safe_rmpath() happens after reap_children() so this is weird\n        # Perhaps wait_procs() on Windows is broken? Maybe because\n        # of STILL_ACTIVE?\n        # https://github.com/giampaolo/psutil/blob/\n        #     68c7a70728a31d8b8b58f4be6c4c0baa2f449eda/psutil/arch/\n        #     windows/process_info.c#L146\n        from psutil.tests import safe_rmpath as rm\n\n        try:\n            return rm(path)\n        except WindowsError:\n            traceback.print_exc()\n\n\ndef try_unicode(suffix):\n    ",
      "https://github.com/giampaolo/psutil/issues/595\n            return self.skipTest("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_unicode.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://msdn.microsoft.com/en-us/library/aa394372(VS.85).aspx\n        # ...claims that PageFileUsage is represented in Kilo\n        # bytes but funnily enough on certain platforms bytes are\n        # returned instead.\n        wmi_usage = int(w.PageFileUsage)\n        if vms not in (wmi_usage, wmi_usage * 1024):\n            raise self.fail("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_windows.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/giampaolo/psutil/pull/1762#issuecomment-632892692\n@unittest.skipIf(GITHUB_ACTIONS and not PY3, ",
      "https://stackoverflow.com/questions/31209256\n        num_cpus = int(os.environ[",
      "https://stackoverflow.com/questions/31209256\n        sys_value = win32api.GetSystemInfo()[5]\n        psutil_value = psutil.cpu_count()\n        self.assertEqual(sys_value, psutil_value)\n\n    def test_cpu_count_logical_vs_wmi(self):\n        w = wmi.WMI()\n        procs = sum(\n            proc.NumberOfLogicalProcessors for proc in w.Win32_Processor()\n        )\n        self.assertEqual(psutil.cpu_count(), procs)\n\n    def test_cpu_count_cores_vs_wmi(self):\n        w = wmi.WMI()\n        cores = sum(proc.NumberOfCores for proc in w.Win32_Processor())\n        self.assertEqual(psutil.cpu_count(logical=False), cores)\n\n    def test_cpu_count_vs_cpu_times(self):\n        self.assertEqual(\n            psutil.cpu_count(), len(psutil.cpu_times(percpu=True))\n        )\n\n    def test_cpu_freq(self):\n        w = wmi.WMI()\n        proc = w.Win32_Processor()[0]\n        self.assertEqual(proc.CurrentClockSpeed, psutil.cpu_freq().current)\n        self.assertEqual(proc.MaxClockSpeed, psutil.cpu_freq().max)\n\n\nclass TestSystemAPIs(WindowsTestCase):\n    def test_nic_names(self):\n        out = sh(",
      "https://github.com/giampaolo/psutil/issues/1007\n        with mock.patch(",
      "https://msdn.microsoft.com/en-us/library/aa394074(v=vs.85).aspx\n        self.assertEqual(\n            battery_psutil.power_plugged, battery_wmi.BatteryStatus == 2\n        )\n\n    def test_emulate_no_battery(self):\n        with mock.patch(\n            ",
      "https://github.com/giampaolo/psutil/issues/875\n        exc = WindowsError()\n        exc.winerror = 299\n        with mock.patch(",
      "https://github.com/giampaolo/psutil/issues/304.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_windows.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\Python*\\python.exe"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\test_windows.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue30286\n            # - http://stackoverflow.com/questions/23522055\n            if cfile is not None:\n                FreeLibrary = ctypes.windll.kernel32.FreeLibrary\n                FreeLibrary.argtypes = [wintypes.HMODULE]\n                ret = FreeLibrary(cfile._handle)\n                if ret == 0:\n                    WinError()\n            safe_rmpath(dst)\n\n\n# ===================================================================\n# --- Exit funs (first is executed last)\n# ===================================================================\n\n\n# this is executed first\n@atexit.register\ndef cleanup_test_procs():\n    reap_children(recursive=True)\n\n\n# atexit module does not execute exit functions in case of SIGTERM, which\n# gets sent to test subprocesses, which is a problem if they import this\n# module. With this it will. See:\n# https://gmpy.dev/blog/2016/how-to-always-execute-exit-functions-in-python\nif POSIX:\n    signal.signal(signal.SIGTERM, lambda sig, _: sys.exit(sig))\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue33240\n        stop_at = time.time() + GLOBAL_TIMEOUT\n        while time.time() < stop_at:\n            try:\n                return fun()\n            except FileNotFoundError:\n                pass\n            except WindowsError as _:\n                err = _\n                warn(",
      "https://github.com/giampaolo/psutil/issues/2287\n        self.assertEqual(proc, clone)\n        if not (OPENBSD or NETBSD):\n            self.assertEqual(hash(proc), hash(clone))\n        # Its status always be querable.\n        self.assertEqual(proc.status(), psutil.STATUS_ZOMBIE)\n        # It should be considered ",
      "https://github.com/giampaolo/psutil/pull/2288\n            with self.assertRaises(psutil.ZombieProcess) as cm:\n                proc.cmdline()\n            self._check_proc_exc(proc, cm.exception)\n            with self.assertRaises(psutil.ZombieProcess) as cm:\n                proc.exe()\n            self._check_proc_exc(proc, cm.exception)\n            with self.assertRaises(psutil.ZombieProcess) as cm:\n                proc.memory_maps()\n            self._check_proc_exc(proc, cm.exception)\n        # Zombie cannot be signaled or terminated.\n        proc.suspend()\n        proc.resume()\n        proc.terminate()\n        proc.kill()\n        assert proc.is_running()\n        assert psutil.pid_exists(proc.pid)\n        self.assertIn(proc.pid, psutil.pids())\n        self.assertIn(proc.pid, [x.pid for x in psutil.process_iter()])\n        psutil._pmap = {}\n        self.assertIn(proc.pid, [x.pid for x in psutil.process_iter()])\n\n        # Its parent should ",
      "https://gmpy.dev/blog/2016/real-process-memory-and-environ-in-python\n    If not, RSS memory is used. mallinfo() on Linux and _heapwalk() on\n    Windows may give even more precision, but at the moment are not\n    implemented.\n\n    PyPy appears to be completely unstable for this framework, probably\n    because of its JIT, so tests on PYPY are skipped.\n\n    Usage:\n\n        class TestLeaks(psutil.tests.TestMemoryLeak):\n\n            def test_fun(self):\n                self.execute(some_function)\n    ",
      "https://github.com/giampaolo/psutil/issues/2338\n    @memoize\n    def get_procs():\n        ret = {}\n        out = sh(",
      "https://ci.appveyor.com/project/giampaolo/psutil/build/1207/\n            #       job/o53330pbnri9bcw7\n            # - http://bugs.python.org/issue30286\n            # - http://stackoverflow.com/questions/23522055\n            if cfile is not None:\n                FreeLibrary = ctypes.windll.kernel32.FreeLibrary\n                FreeLibrary.argtypes = [wintypes.HMODULE]\n                ret = FreeLibrary(cfile._handle)\n                if ret == 0:\n                    WinError()\n            safe_rmpath(dst)\n\n\n# ===================================================================\n# --- Exit funs (first is executed last)\n# ===================================================================\n\n\n# this is executed first\n@atexit.register\ndef cleanup_test_procs():\n    reap_children(recursive=True)\n\n\n# atexit module does not execute exit functions in case of SIGTERM, which\n# gets sent to test subprocesses, which is a problem if they import this\n# module. With this it will. See:\n# https://gmpy.dev/blog/2016/how-to-always-execute-exit-functions-in-python\nif POSIX:\n    signal.signal(signal.SIGTERM, lambda sig, _: sys.exit(sig))\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\__init__.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1",
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\psutil\\tests\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/dbcli/mycli/issues/797\n            return\n\n        # `invalidate()` called if we don",
      "https://github.com/prompt-toolkit/python-prompt-toolkit/issues/1553\n            handle_sigint = False\n\n        async def _run_async(f: asyncio.Future[_AppResult]) -> _AppResult:\n            context = contextvars.copy_context()\n            self.context = context\n\n            # Counter for cancelling ",
      "https://github.com/prompt-toolkit/python-prompt-toolkit/issues/1576\n                    loop.add_signal_handler(\n                        signal.SIGINT,\n                        lambda *_: loop.call_soon_threadsafe(\n                            self.key_processor.send_sigint\n                        ),\n                    )\n                    try:\n                        yield\n                    finally:\n                        loop.remove_signal_handler(signal.SIGINT)\n            else:\n                yield\n\n        @contextmanager\n        def set_exception_handler_ctx(loop: AbstractEventLoop) -> Iterator[None]:\n            if set_exception_handler:\n                previous_exc_handler = loop.get_exception_handler()\n                loop.set_exception_handler(self._handle_exception)\n                try:\n                    yield\n                finally:\n                    loop.set_exception_handler(previous_exc_handler)\n\n            else:\n                yield\n\n        @contextmanager\n        def set_callback_duration(loop: AbstractEventLoop) -> Iterator[None]:\n            # Set slow_callback_duration.\n            original_slow_callback_duration = loop.slow_callback_duration\n            loop.slow_callback_duration = slow_callback_duration\n            try:\n                yield\n            finally:\n                # Reset slow_callback_duration.\n                loop.slow_callback_duration = original_slow_callback_duration\n\n        @contextmanager\n        def create_future(\n            loop: AbstractEventLoop,\n        ) -> Iterator[asyncio.Future[_AppResult]]:\n            f = loop.create_future()\n            self.future = f  # XXX: make sure to set this before calling ",
      "https://github.com/python/mypy/issues/7726\n        assert False, ",
      "https://github.com/ipython/ipython/pull/14241 is merged.\n            # IPython was setting the input hook by installing an event loop\n            # previously.\n            try:\n                # See whether a loop was installed already. If so, use that.\n                # That",
      "https://docs.python.org/3/c-api/sys.html#c.PyOS_getsig\n    # Inline import: these are not available on Pypy.\n    try:\n        from ctypes import c_int, c_void_p, pythonapi\n    except ImportError:\n        # Any of the above imports don"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\application\\application.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://blog.amjith.com/fuzzyfinder-in-10-lines-of-python\n\n    :param completer: A :class:`~.Completer` instance.\n    :param WORD: When True, use WORD characters.\n    :param pattern: Regex pattern which selects the characters before the\n        cursor that are considered for the fuzzy matching.\n    :param enable_fuzzy: (bool or `Filter`) Enabled the fuzzy behavior. For\n        easily turning fuzzyness on or off according to a certain condition.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\completion\\fuzzy_completer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.gevent.org/gevent.os.html\n\n            # Note: On Windows, this is apparently not an issue.\n            #       However, if we would ever want to add a select call, it\n            #       should use `windll.kernel32.WaitForMultipleObjects`,\n            #       because `select.select` can"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\eventloop\\inputhook.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue34014\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\eventloop\\utils.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms687025(v=vs.85).aspx\n\n    Note that handles should be a list of `HANDLE` objects, not integers. See\n    this comment in the patch by @quark-zju for the reason why:\n\n        ",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms682396(v=vs.85).aspx\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\eventloop\\win32.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.ibb.net/~anne/keyboard.html\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\input\\ansi_escape_sequences.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/mintty/mintty/blob/master/wiki/Keycodes.md\n",
      "https://invisible-island.net/xterm/modified-keys.html\n    # These are currently unsupported, so just re-map some common ones to the\n    # unmodified versions\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\input\\ansi_escape_sequences.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/jonathanslenders/python-prompt-toolkit/pull/393\n    #      https://github.com/jonathanslenders/python-prompt-toolkit/issues/392\n\n    # 2. Related, when stdin is an SSH pipe, and no full terminal was allocated.\n    #    See: https://github.com/jonathanslenders/python-prompt-toolkit/pull/165\n    def __init__(self, fileno: int) -> None:\n        self.fileno = fileno\n        self.attrs_before: list[int | list[bytes | int]] | None\n        try:\n            self.attrs_before = termios.tcgetattr(fileno)\n        except termios.error:\n            # Ignore attribute errors.\n            self.attrs_before = None\n\n    def __enter__(self) -> None:\n        # NOTE: On os X systems, using pty.setraw() fails. Therefor we are using this:\n        try:\n            newattr = termios.tcgetattr(self.fileno)\n        except termios.error:\n            pass\n        else:\n            newattr[tty.LFLAG] = self._patch_lflag(newattr[tty.LFLAG])\n            newattr[tty.IFLAG] = self._patch_iflag(newattr[tty.IFLAG])\n\n            # VMIN defines the number of characters read at a time in\n            # non-canonical mode. It seems to default to 1 on Linux, but on\n            # Solaris and derived operating systems it defaults to 4. (This is\n            # because the VMIN slot is the same as the VEOF slot, which\n            # defaults to ASCII EOT = Ctrl-D = 4.)\n            newattr[tty.CC][termios.VMIN] = 1\n\n            termios.tcsetattr(self.fileno, termios.TCSANOW, newattr)\n\n    @classmethod\n    def _patch_lflag(cls, attrs: int) -> int:\n        return attrs & ~(termios.ECHO | termios.ICANON | termios.IEXTEN | termios.ISIG)\n\n    @classmethod\n    def _patch_iflag(cls, attrs: int) -> int:\n        return attrs & ~(\n            # Disable XON/XOFF flow control on output and input.\n            # (Don"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\input\\vt100.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms684961(v=vs.85).aspx\n        ",
      "http://gooseberrycreative.com/cmder/] can return "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\input\\win32.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.microsoft.com/en-us/windows/console/mouse-event-record-str\nFROM_LEFT_1ST_BUTTON_PRESSED = 0x1\nRIGHTMOST_BUTTON_PRESSED = 0x2\nMOUSE_MOVED = 0x0001\nMOUSE_WHEELED = 0x0004\n\n\nclass _Win32InputBase(Input):\n    ",
      "https://github.com/ipython/ipython/issues/10004\n        # https://github.com/jonathanslenders/python-prompt-toolkit/issues/389\n\n        if u_char == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\input\\win32.py"
  },
  {
    "pattern": "/home/[^\"\\']+",
    "matches": [
      "/Home/End (need to do this first)\n        if (\n            (\n                control_key_state & self.LEFT_CTRL_PRESSED\n                or control_key_state & self.RIGHT_CTRL_PRESSED\n            )\n            and control_key_state & self.SHIFT_PRESSED\n            and result\n        ):\n            mapping: dict[str, str] = {\n                Keys.Left: Keys.ControlShiftLeft,\n                Keys.Right: Keys.ControlShiftRight,\n                Keys.Up: Keys.ControlShiftUp,\n                Keys.Down: Keys.ControlShiftDown,\n                Keys.Home: Keys.ControlShiftHome,\n                Keys.End: Keys.ControlShiftEnd,\n                Keys.Insert: Keys.ControlShiftInsert,\n                Keys.PageUp: Keys.ControlShiftPageUp,\n                Keys.PageDown: Keys.ControlShiftPageDown,\n            }\n            result.key = mapping.get(result.key, result.key)\n\n        # Correctly handle Control-Arrow/Home/End and Control-Insert/Delete keys.\n        if (\n            control_key_state & self.LEFT_CTRL_PRESSED\n            or control_key_state & self.RIGHT_CTRL_PRESSED\n        ) and result:\n            mapping = {\n                Keys.Left: Keys.ControlLeft,\n                Keys.Right: Keys.ControlRight,\n                Keys.Up: Keys.ControlUp,\n                Keys.Down: Keys.ControlDown,\n                Keys.Home: Keys.ControlHome,\n                Keys.End: Keys.ControlEnd,\n                Keys.Insert: Keys.ControlInsert,\n                Keys.Delete: Keys.ControlDelete,\n                Keys.PageUp: Keys.ControlPageUp,\n                Keys.PageDown: Keys.ControlPageDown,\n            }\n            result.key = mapping.get(result.key, result.key)\n\n        # Turn "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\input\\win32.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://raw.githubusercontent.com/neovim/neovim/master/src/nvim/digraph.c\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\key_binding\\digraphs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.gnu.org/software/bash/manual/html_node/Readline-Arguments.html\n        self.arg: str | None = None\n\n        # Start the processor coroutine.\n        self._process_coroutine = self._process()\n        self._process_coroutine.send(None)  # type: ignore\n\n    def _get_matches(self, key_presses: list[KeyPress]) -> list[Binding]:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\key_binding\\key_processor.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Unicode_equivalence\n                        # Merge it in the previous cell.\n                        elif char_width == 0:\n                            # Handle all character widths. If the previous\n                            # character is a multiwidth character, then\n                            # merge it two positions back.\n                            for pw in [2, 1]:  # Previous character width.\n                                if (\n                                    x - pw >= 0\n                                    and new_buffer_row[x + xpos - pw].width == pw\n                                ):\n                                    prev_char = new_buffer_row[x + xpos - pw]\n                                    char2 = _CHAR_CACHE[\n                                        prev_char.char + c, prev_char.style\n                                    ]\n                                    new_buffer_row[x + xpos - pw] = char2\n\n                        # Keep track of write position for each character.\n                        current_rowcol_to_yx[lineno, col + skipped] = (\n                            y + ypos,\n                            x + xpos,\n                        )\n\n                    col += 1\n                    x += char_width\n            return x, y\n\n        # Copy content.\n        def copy() -> int:\n            y = -vertical_scroll_2\n            lineno = vertical_scroll\n\n            while y < write_position.height and lineno < line_count:\n                # Take the next line and copy it in the real screen.\n                line = ui_content.get_line(lineno)\n\n                visible_line_to_row_col[y] = (lineno, horizontal_scroll)\n\n                # Copy margin and actual line.\n                x = 0\n                x, y = copy_line(line, lineno, x, y, is_input=True)\n\n                lineno += 1\n                y += 1\n            return y\n\n        copy()\n\n        def cursor_pos_to_screen_pos(row: int, col: int) -> Point:\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\layout\\containers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://vt100.net/docs/vt100-ug/chapter3.html\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\output\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://no-color.org/\n        if os.environ.get("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\output\\color_depth.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://conemu.github.io/\n    http://gooseberrycreative.com/cmder/\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\output\\conemu.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://pygments.org/\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\output\\vt100.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/ipython/ipython/issues/10071\n            rows, columns = (None, None)\n\n            # It is possible that `stdout` is no longer a TTY device at this\n            # point. In that case we get an `OSError` in the ioctl call in\n            # `get_size`. See:\n            # https://github.com/prompt-toolkit/python-prompt-toolkit/pull/1021\n            try:\n                rows, columns = _get_size(stdout.fileno())\n            except OSError:\n                pass\n            return Size(rows=rows or 24, columns=columns or 80)\n\n        return cls(\n            stdout,\n            get_size,\n            term=term,\n            default_color_depth=default_color_depth,\n            enable_bell=enable_bell,\n        )\n\n    def get_size(self) -> Size:\n        return self._get_size()\n\n    def fileno(self) -> int:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\output\\vt100.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms686025(v=vs.85).aspx\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\output\\win32.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/ipython/ipython/issues/10070\n        #    - https://github.com/jonathanslenders/python-prompt-toolkit/issues/406\n        #    - https://github.com/jonathanslenders/python-prompt-toolkit/issues/86\n\n        self.flush()\n        sbinfo = CONSOLE_SCREEN_BUFFER_INFO()\n        success = windll.kernel32.GetConsoleScreenBufferInfo(\n            self.hconsole, byref(sbinfo)\n        )\n\n        # success = self._winapi(windll.kernel32.GetConsoleScreenBufferInfo,\n        #                        self.hconsole, byref(sbinfo))\n\n        if success:\n            return sbinfo\n        else:\n            raise NoConsoleScreenBufferError\n\n    def set_title(self, title: str) -> None:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\output\\win32.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://msdn.microsoft.com/pl-pl/library/windows/desktop/ms686033(v=vs.85).aspx\nENABLE_PROCESSED_INPUT = 0x0001\nENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x0004\n\n\nclass Windows10_Output:\n    ",
      "https://devblogs.microsoft.com/commandline/24-bit-color-in-the-windows-console/\n        return ColorDepth.TRUE_COLOR\n\n\nOutput.register(Windows10_Output)\n\n\ndef is_win_vt100_enabled() -> bool:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\output\\windows10.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.w3schools.com/colors/colors_names.asp\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\styles\\named_colors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/ipython/ipython/issues/9737\n        data = data.replace("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\key_binding\\bindings\\basic.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.catonmat.net/download/readline-emacs-editing-mode-cheat-sheet.pdf\n    key_bindings = KeyBindings()\n    handle = key_bindings.add\n\n    insert_mode = emacs_insert_mode\n\n    @handle("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\key_binding\\bindings\\emacs.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.delorie.com/gnu/docs/readline/rlman_13.html\n",
      "http://www.delorie.com/gnu/docs/readline/rlman_14.html\n#\n\n\n@register(",
      "http://www.delorie.com/gnu/docs/readline/rlman_15.html\n#\n\n\n@register("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\key_binding\\bindings\\named_commands.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.catonmat.net/download/bash-vi-editing-mode-cheat-sheet.pdf\n    ",
      "http://hea-www.harvard.edu/~fine/Tech/vi.html\n\n    @handle("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\key_binding\\bindings\\vi.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://en.wikipedia.org/wiki/Regular_language)\n\nExample\n-------\n\nLet"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\contrib\\regular_languages\\__init__.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\prompt_toolkit\\contrib\\telnet\\server.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/7296\n        key_parts[",
      "https://github.com/pypa/pip/pull/10564 is merged.\n                if origin.url != download_info.url:\n                    logger.warning(\n                        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\cache.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/4963\n                raise ConfigurationFileCouldNotBeLoaded(\n                    reason=f",
      "https://github.com/pypa/pip/issues/4893\n                raise ConfigurationFileCouldNotBeLoaded(error=error)\n        return parser\n\n    def _load_environment_vars(self) -> None:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\configuration.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/7498.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\main.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://discuss.python.org/t/pip-without-setuptools-could-the-experience-be-improved/11810/9\n    # https://github.com/pypa/pip/issues/8559\n    elif use_pep517 is None:\n        use_pep517 = (\n            has_pyproject\n            or not importlib.util.find_spec("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\pyproject.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/7498.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue46342\n    def final(f):\n        ",
      "https://bugs.python.org/issue38834\n    # The standard library TypedDict in Python 3.9.0/1 does not honour the ",
      "https://bugs.python.org/issue42059\n    # The standard library TypedDict below Python 3.11 does not store runtime\n    # information about optional and required keys when using Required or NotRequired.\n    # Generic TypedDicts are also impossible using typing.TypedDict on Python <3.11.\n    # Aaaand on 3.12 we add __orig_bases__ to TypedDict\n    # to enable better runtime introspection.\n    # On 3.13 we deprecate some odd ways of creating TypedDicts.\n    # Also on 3.13, PEP 705 adds the ReadOnly[] qualifier.\n    # PEP 728 (still pending) makes more changes.\n    TypedDict = typing.TypedDict\n    _TypedDictMeta = typing._TypedDictMeta\n    is_typeddict = typing.is_typeddict\nelse:\n    # 3.10.0 and later\n    _TAKES_MODULE = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/kennethreitz/requests/pull/2567.\ndef vendored(modulename):\n    vendored_name = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://tools.ietf.org/html/draft-ietf-httpbis-p4-conditional-26#section-4.1\n        #\n        # The server isn"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7234#section-5.2\n            ",
      "https://tools.ietf.org/html/rfc7231#section-6.4.2\n        #\n        # Client can try to refresh the value by repeating the request\n        # with cache busting headers as usual (ie no-cache).\n        if int(resp.status) in PERMANENT_REDIRECT_STATUSES:\n            msg = (\n                ",
      "https://tools.ietf.org/html/rfc7234#section-4.1:\n        # A Vary header field-value of "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/2/reference/expressions.html#atom-identifiers\n        fp = self.__getattribute__("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\filewrapper.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://tools.ietf.org/html/rfc7234#section-5.5.4 where we need\n        to explicitly say response is over 24 hours old.\n        ",
      "http://tools.ietf.org/html/rfc7234#section-4.2.2\n    to calculate a reasonable value.\n\n    Firefox also does something like this per\n    https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ\n    http://lxr.mozilla.org/mozilla-release/source/netwerk/protocol/http/nsHttpResponseHead.cpp#397\n    Unlike mozilla we limit this to 24-hr.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\heuristics.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ\n    http://lxr.mozilla.org/mozilla-release/source/netwerk/protocol/http/nsHttpResponseHead.cpp#397\n    Unlike mozilla we limit this to 24-hr.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\heuristics.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "eric@ionrock.org"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\__init__.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://tools.ietf.org/html/rfc6125#section-6.4.3\n        ",
      "http://code.activestate.com/recipes/576693/ (r9)\n    # Backport of OrderedDict() class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.\n    # Passes Python2.7"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\compat.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/reference/datamodel#object.__hash__\n    __hash__ = object.__hash__\n\n\nclass EggInfoDistribution(BaseInstalledDistribution):\n    ",
      "http://docs.python.org/reference/datamodel#object.__hash__\n    __hash__ = object.__hash__\n\n\nnew_dist_class = InstalledDistribution\nold_dist_class = EggInfoDistribution\n\n\nclass DependencyGraph(object):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://code.activestate.com/recipes/146306\n\n        parts = []\n        boundary = self.boundary\n        for k, values in fields:\n            if not isinstance(values, (list, tuple)):\n                values = [values]\n\n            for v in values:\n                parts.extend((\n                    b"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\index.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/pypi"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\index.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://, archives\n        from PyPI over those from other locations, wheel compatibility (if a\n        wheel) and then the archive name.\n        ",
      "http://peak.telecommunity.com/DevCenter/EasyInstall#package-index-api\n        scheme, netloc, path, _, _, _ = urlparse(url)\n        if scheme == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\locators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/pypi",
      "https:// URLs over http://, archives\n        from PyPI over those from other locations, wheel compatibility (if a\n        wheel) and then the archive name.\n        ",
      "https://pypi.org/simple/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\locators.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/distutils/sourcedist.html#commands\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\manifest.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0566/#id17\n_ATTR2FIELD = {name.lower().replace(",
      "https://www.python.org/dev/peps/pep-0566/#id17.\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.in-ulm.de/~mascheck/various/shebang/#length\n                  https://hg.mozilla.org/mozilla-central/file/tip/mach\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\scripts.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/12666.\n# When updating pip, we rename the old pip in place before installing the\n# new version. If we try to fetch a wrapper *after* that rename, the finder\n# machinery will be confused as the package is no longer available at the\n# location where it was imported from. So we load everything into memory in\n# advance.\n\nif os.name == ",
      "https://hg.mozilla.org/mozilla-central/file/tip/mach\n        ",
      "https://bitbucket.org/vinay.sajip/simple_launcher/\n\n        def _get_launcher(self, kind):\n            if struct.calcsize("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\scripts.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\scripts.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\n        index_counter = [0]\n        stack = []\n        lowlinks = {}\n        index = {}\n        result = []\n\n        graph = self._succs\n\n        def strongconnect(node):\n            # set the depth index for this node to the smallest unused index\n            index[node] = index_counter[0]\n            lowlinks[node] = index_counter[0]\n            index_counter[0] += 1\n            stack.append(node)\n\n            # Consider successors\n            try:\n                successors = graph[node]\n            except Exception:\n                successors = []\n            for successor in successors:\n                if successor not in lowlinks:\n                    # Successor has not yet been visited\n                    strongconnect(successor)\n                    lowlinks[node] = min(lowlinks[node], lowlinks[successor])\n                elif successor in stack:\n                    # the successor is in the stack and hence in the current\n                    # strongly connected component (SCC)\n                    lowlinks[node] = min(lowlinks[node], index[successor])\n\n            # If `node` is a root node, pop the stack and generate an SCC\n            if lowlinks[node] == index[node]:\n                connected_component = []\n\n                while True:\n                    successor = stack.pop()\n                    connected_component.append(successor)\n                    if successor == node:\n                        break\n                component = tuple(connected_component)\n                # storing the result\n                result.append(component)\n\n        for node in graph:\n            if node not in lowlinks:\n                strongconnect(node)\n\n        return result\n\n    @property\n    def dot(self):\n        result = [",
      "http://xyz link when it should be https://xyz),\n    # you can use the following handler class, which does not allow HTTP traffic.\n    #\n    # It works by inheriting from HTTPHandler - so build_opener won"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.red-dove.com/pypi/projects/",
      "https://docs.python.org/3/library/tarfile.html#extraction-filters\n        def extraction_filter(member, path):\n            ",
      "https://xyz),\n    # you can use the following handler class, which does not allow HTTP traffic.\n    #\n    # It works by inheriting from HTTPHandler - so build_opener won",
      "https://www.python.org/dev/peps/pep-0503/#normalized-names\n    return re.sub(",
      "https://upload.pypi.org/legacy/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/reference/datamodel#object.__hash__\n    def __hash__(self):\n        return hash(self._parts)\n\n    def __repr__(self):\n        return ",
      "http://docs.python.org/reference/datamodel#object.__hash__\n    def __hash__(self):\n        return hash(self.key) + hash(self._parts)\n\n    def __repr__(self):\n        return "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.2.3.4",
      "1.4.5.0",
      "1.4.5.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly\n    if imp:\n        return imp.load_dynamic(name, path)\n    else:\n        spec = importlib.util.spec_from_file_location(name, path)\n        module = importlib.util.module_from_spec(spec)\n        sys.modules[name] = module\n        spec.loader.exec_module(module)\n        return module\n\n\nclass Mounter(object):\n\n    def __init__(self):\n        self.impure_wheels = {}\n        self.libs = {}\n\n    def add(self, pathname, extensions):\n        self.impure_wheels[pathname] = extensions\n        self.libs.update(extensions)\n\n    def remove(self, pathname):\n        extensions = self.impure_wheels.pop(pathname)\n        for k, v in extensions:\n            if k in self.libs:\n                del self.libs[k]\n\n    def find_module(self, fullname, path=None):\n        if fullname in self.libs:\n            result = self\n        else:\n            result = None\n        return result\n\n    def load_module(self, fullname):\n        if fullname in sys.modules:\n            result = sys.modules[fullname]\n        else:\n            if fullname not in self.libs:\n                raise ImportError(",
      "https://github.com/pypa/wheel/issues/294\n        # https://github.com/pypa/wheel/issues/287\n        # https://github.com/pypa/wheel/pull/289\n        #\n        return arcname.endswith((",
      "https://www.thetopsites.net/article/53834422.shtml\n                        # So ... manually preserve permission bits as given in zinfo\n                        if os.name == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ",
      "http://www.freedesktop.org/software/systemd/man/os-release.html>`_.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue1322>`_ for more information.\n",
      "https://github.com/python-distro/distro/issues/162\n            return {}\n\n    @staticmethod\n    def _parse_distro_release_content(line: str) -> Dict[str, str]:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0685/\n    # > When comparing extra names, tools MUST normalize the names being\n    # > compared using the semantics outlined in PEP 503 for names\n    if key == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\markers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/pull/13475#pullrequestreview-1079784515\n    @property  # type: ignore[override]\n    def prereleases(self) -> bool:\n        # If there is an explicit prereleases set for this, then we"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.2.3.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/3383#issuecomment-173267692\n    has_ext = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\tags.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca\nELF header: https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_elffile.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://static.docs.arm.com/ihi0044/g/aaelf32.pdf\n    with _parse_elf(executable) as f:\n        return (\n            f is not None\n            and f.capacity == EIClass.C32\n            and f.encoding == EIData.Lsb\n            and f.machine == EMachine.Arm\n            and f.flags & EF_ARM_ABIMASK == EF_ARM_ABI_VER5\n            and f.flags & EF_ARM_ABI_FLOAT_HARD == EF_ARM_ABI_FLOAT_HARD\n        )\n\n\ndef _is_linux_i686(executable: str) -> bool:\n    with _parse_elf(executable) as f:\n        return (\n            f is not None\n            and f.capacity == EIClass.C32\n            and f.encoding == EIData.Lsb\n            and f.machine == EMachine.I386\n        )\n\n\ndef _have_compatible_abi(executable: str, archs: Sequence[str]) -> bool:\n    if ",
      "https://github.com/python/cpython/blob/fcf1d003bf4f0100c/Lib/platform.py#L175-L183\n    try:\n        # Should be a string like ",
      "https://sourceware.org/bugzilla/show_bug.cgi?id=24636\n    #\n    # Build a list of maximum glibc versions so that we can\n    # output the canonical list of all glibc from current_glibc\n    # down to too_old_glibc2, including all intermediary versions.\n    for glibc_major in range(current_glibc.major - 1, 1, -1):\n        glibc_minor = _LAST_GLIBC_MINOR[glibc_major]\n        glibc_max_list.append(_GLibCVersion(glibc_major, glibc_minor))\n    for arch in archs:\n        for glibc_max in glibc_max_list:\n            if glibc_max.major == too_old_glibc2.major:\n                min_minor = too_old_glibc2.minor\n            else:\n                # For other glibc major versions oldest supported is (x, 0).\n                min_minor = -1\n            for glibc_minor in range(glibc_max.minor, min_minor, -1):\n                glibc_version = _GLibCVersion(glibc_max.major, glibc_minor)\n                tag = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_manylinux.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/packaging"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "donald@stufft.io"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/12243\n\n\n_T = TypeVar(",
      "https://github.com/python/typeshed/pull/11890\nclass _LoaderProtocol(Protocol):\n    def load_module(self, fullname: str, /) -> types.ModuleType: ...\n\n\nclass _ZipLoaderModule(Protocol):\n    __loader__: zipimport.zipimporter\n\n\n_PEP440_FALLBACK = re.compile(r",
      "https://setuptools.pypa.io/en/latest/pkg_resources.html#basic-resource-access\n\n        >>> warned = getfixture(",
      "https://setuptools.pypa.io/en/latest/references/",
      "https://github.com/python/mypy/issues/16261\n    # https://github.com/python/typeshed/issues/6347\n    @overload\n    def _normalize_cached(filename: StrPath) -> str: ...\n    @overload\n    def _normalize_cached(filename: BytesPath) -> bytes: ...\n    def _normalize_cached(filename: StrOrBytesPath) -> str | bytes: ...\nelse:\n\n    @functools.lru_cache(maxsize=None)\n    def _normalize_cached(filename):\n        return normalize_path(filename)\n\n\ndef _is_egg_path(path):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\foo/bar.txt"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://android.stackexchange.com/a/216132>`_.\n\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `version\n    <platformdirs.api.PlatformDirsABC.version>`, `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    ",
      "https://stackoverflow.com/a/61394121\n    if not TYPE_CHECKING:\n        try:\n            # First try to get a path to android app using python4android (if available)...\n            from android import mActivity  # noqa: PLC0415\n\n            context = cast("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>`_).\n\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`,\n    `version <platformdirs.api.PlatformDirsABC.version>`,\n    `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    ",
      "https://brew.sh>`_, the directory\n          will be under the Homebrew prefix, e.g. ``/opt/homebrew/share/$appname/$version``.\n          If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we",
      "https://brew.sh>`_, the directory\n          will be under the Homebrew prefix, e.g. ``/opt/homebrew/var/cache/$appname/$version``.\n          If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://specifications.freedesktop.org/basedir-spec/basedir-spec-\n    latest.html>`_.\n\n    The spec allows overriding directories with environment variables. The examples shown are the default values,\n    alongside the name of the environment variable that overrides them. Makes use of the `appname\n    <platformdirs.api.PlatformDirsABC.appname>`, `version <platformdirs.api.PlatformDirsABC.version>`, `multipath\n    <platformdirs.api.PlatformDirsABC.multipath>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n    <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    ",
      "https://freedesktop.org/wiki/Software/xdg-user-dirs/.\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid>`_.\n\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `appauthor\n    <platformdirs.api.PlatformDirsABC.appauthor>`, `version <platformdirs.api.PlatformDirsABC.version>`, `roaming\n    <platformdirs.api.PlatformDirsABC.roaming>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n    <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    ",
      "https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid\n\n    import ctypes  # noqa: PLC0415\n\n    csidl_const = {\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\ProgramData\\\\$appauthor\\\\$appname``",
      "C:\\\\ProgramData\\\\$appauthor\\\\$appname\\\\Cache\\\\$version``"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/platformdirs/platformdirs> for details and usage.\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pygments/pygments/issues>."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\cmdline.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\lexer.py -- return to normal load path in that case\n                        name = None\n\n                if filename and name:\n                    lexer = load_lexer_from_file(filename, name,\n                                                 **parsed_opts)\n                else:\n                    lexer = load_lexer_from_file(lexername, **parsed_opts)\n            except ClassNotFound as err:\n                print("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\cmdline.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://chardet.feedparser.org/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexer.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.unicode.org/book/ch03.pdf\n    return (0xd7c0 + (c >> 10), (0xdc00 + (c & 0x3ff)))\n\n\ndef format_lines(var_name, seq, raw=False, indent_level=0):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\util.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\Python2.4\\\\Python.exe"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\util.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pygments/pygments/archive/master.zip#egg=Pygments-dev\n\n    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/pull/6710 for more details."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\adapters.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpbin.org/get"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/3772\n        if not 400 <= r.status_code < 500:\n            self._thread_local.num_401_calls = 1\n            return r\n\n        if self._thread_local.pos is not None:\n            # Rewind the file position indicator of the body to where\n            # it was to resend the request.\n            r.request.body.seek(self._thread_local.pos)\n        s_auth = r.headers.get("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\auth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/3578.\nimport encodings.idna  # noqa: F401\nfrom io import UnsupportedOperation\n\nfrom pip._vendor.urllib3.exceptions import (\n    DecodeError,\n    LocationParseError,\n    ProtocolError,\n    ReadTimeoutError,\n    SSLError,\n)\nfrom pip._vendor.urllib3.fields import RequestField\nfrom pip._vendor.urllib3.filepost import encode_multipart_formdata\nfrom pip._vendor.urllib3.util import parse_url\n\nfrom ._internal_utils import to_native_string, unicode_is_ascii\nfrom .auth import HTTPBasicAuth\nfrom .compat import (\n    Callable,\n    JSONDecodeError,\n    Mapping,\n    basestring,\n    builtin_str,\n    chardet,\n    cookielib,\n)\nfrom .compat import json as complexjson\nfrom .compat import urlencode, urlsplit, urlunparse\nfrom .cookies import _copy_cookie_jar, cookiejar_from_dict, get_cookie_header\nfrom .exceptions import (\n    ChunkedEncodingError,\n    ConnectionError,\n    ContentDecodingError,\n    HTTPError,\n    InvalidJSONError,\n    InvalidURL,\n)\nfrom .exceptions import JSONDecodeError as RequestsJSONDecodeError\nfrom .exceptions import MissingSchema\nfrom .exceptions import SSLError as RequestsSSLError\nfrom .exceptions import StreamConsumedError\nfrom .hooks import default_hooks\nfrom .status_codes import codes\nfrom .structures import CaseInsensitiveDict\nfrom .utils import (\n    check_header_validity,\n    get_auth_from_url,\n    guess_filename,\n    guess_json_utf,\n    iter_slices,\n    parse_header_links,\n    requote_uri,\n    stream_decode_response_unicode,\n    super_len,\n    to_key_val_list,\n)\n\n#: The set of HTTP status codes that indicate an automatically\n#: processable redirect.\nREDIRECT_STATI = (\n    codes.moved,  # 301\n    codes.found,  # 302\n    codes.other,  # 303\n    codes.temporary_redirect,  # 307\n    codes.permanent_redirect,  # 308\n)\n\nDEFAULT_REDIRECT_LIMIT = 30\nCONTENT_CHUNK_SIZE = 10 * 1024\nITER_CHUNK_SIZE = 512\n\n\nclass RequestEncodingMixin:\n    @property\n    def path_url(self):\n        ",
      "https://httpbin.org/get",
      "https://httpbin.org/get",
      "https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(",
      "https://{url}?"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://domain.tld/path/to/resource",
      "http://host.name"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\sessions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/requests/issues/1084\n            if resp.status_code not in (\n                codes.temporary_redirect,\n                codes.permanent_redirect,\n            ):\n                # https://github.com/psf/requests/issues/3490\n                purged_headers = (",
      "https://tools.ietf.org/html/rfc7231#section-6.4.4\n        if response.status_code == codes.see_other and method != ",
      "https://httpbin.org/get",
      "https://httpbin.org/get"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\sessions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://.../back.jpeg>; rel=back;type="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue20164 &\n                # https://github.com/psf/requests/issues/1846\n                return\n\n            if os.path.exists(loc):\n                netrc_path = loc\n                break\n\n        # Abort early if there isn",
      "https://www.ietf.org/rfc/rfc4627.txt since the charset was unset\n        return "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\foo\\bar.txt"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "192.168.1.1",
      "192.168.1.0",
      "192.168.1.1",
      "192.168.100.0",
      "255.255.255.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org",
      "https://httpbin.org/post",
      "https://requests.readthedocs.io>.\n\n:copyright: (c) 2017 by Kenneth Reitz.\n:license: Apache 2.0, see LICENSE for more details.\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://requests.readthedocs.io"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__version__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "me@kennethreitz.org"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__version__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue37871\n                            # https://github.com/python/cpython/issues/82052\n                            # We need to avoid writing more than 32Kb in a single write, due to the above bug\n                            write = self.file.write\n                            # Worse case scenario, every character is 4 bytes of utf-8\n                            MAX_WRITE = 32 * 1024 // 4\n                            try:\n                                if len(text) <= MAX_WRITE:\n                                    write(text)\n                                else:\n                                    batch: List[str] = []\n                                    batch_append = batch.append\n                                    size = 0\n                                    for line in text.splitlines(True):\n                                        if size + len(line) > MAX_WRITE and batch:\n                                            write("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/PyFilesystem/pyfilesystem2\n\nThe functions declared in this module should cover the different\nuse cases needed to generate a string representation of a file size\nusing several different units. Since there are many standards regarding\nfile size units, three different functions have been implemented.\n\nSee Also:\n    * `Wikipedia: Binary prefix <https://en.wikipedia.org/wiki/Binary_prefix>`_\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\filesize.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html\n    ",
      "https://example.org?foo=bar#header"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\highlighter.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.1.1",
      "192.168.1.4"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\highlighter.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\logging.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\logging.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\logging.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.willmcgugan.com]here[/link] to visit my Blog"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\markup.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tqdm/tqdm/blob/master/tqdm/std.py\n        minutes, seconds = divmod(int(task_time), 60)\n        hours, minutes = divmod(minutes, 60)\n\n        if self.compact and not hours:\n            formatted = f"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pygments/pygments/blob/master/pygments/formatters/terminal.py\n# A few modifications were made\n\nANSI_LIGHT: Dict[TokenType, Style] = {\n    Token: Style(),\n    Whitespace: Style(color=",
      "https://pygments.org/docs/lexers/)\n        theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to ",
      "https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py"
  },
  {
    "pattern": "german",
    "matches": [
      "german",
      "german"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_emoji_codes.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/2000/svg"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_export_format.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.textualize.io -->\n    <style>\n\n    @font-face {{\n        font-family: ",
      "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2",
      "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff",
      "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2",
      "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_export_format.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/ANSI_escape_code (Windows 10 column)\nWINDOWS_PALETTE = Palette(\n    [\n        (12, 12, 12),\n        (197, 15, 31),\n        (19, 161, 14),\n        (193, 156, 0),\n        (0, 55, 218),\n        (136, 23, 152),\n        (58, 150, 221),\n        (204, 204, 204),\n        (118, 118, 118),\n        (231, 72, 86),\n        (22, 198, 12),\n        (249, 241, 165),\n        (59, 120, 255),\n        (180, 0, 158),\n        (97, 214, 214),\n        (242, 242, 242),\n    ]\n)\n\n# # The standard ansi colors (including bright variants)\nSTANDARD_PALETTE = Palette(\n    [\n        (0, 0, 0),\n        (170, 0, 0),\n        (0, 170, 0),\n        (170, 85, 0),\n        (0, 0, 170),\n        (170, 0, 170),\n        (0, 170, 170),\n        (170, 170, 170),\n        (85, 85, 85),\n        (255, 85, 85),\n        (85, 255, 85),\n        (255, 255, 85),\n        (85, 85, 255),\n        (255, 85, 255),\n        (85, 255, 255),\n        (255, 255, 255),\n    ]\n)\n\n\n# The 256 color palette\nEIGHT_BIT_PALETTE = Palette(\n    [\n        (0, 0, 0),\n        (128, 0, 0),\n        (0, 128, 0),\n        (128, 128, 0),\n        (0, 0, 128),\n        (128, 0, 128),\n        (0, 128, 128),\n        (192, 192, 192),\n        (128, 128, 128),\n        (255, 0, 0),\n        (0, 255, 0),\n        (255, 255, 0),\n        (0, 0, 255),\n        (255, 0, 255),\n        (0, 255, 255),\n        (255, 255, 255),\n        (0, 0, 0),\n        (0, 0, 95),\n        (0, 0, 135),\n        (0, 0, 175),\n        (0, 0, 215),\n        (0, 0, 255),\n        (0, 95, 0),\n        (0, 95, 95),\n        (0, 95, 135),\n        (0, 95, 175),\n        (0, 95, 215),\n        (0, 95, 255),\n        (0, 135, 0),\n        (0, 135, 95),\n        (0, 135, 135),\n        (0, 135, 175),\n        (0, 135, 215),\n        (0, 135, 255),\n        (0, 175, 0),\n        (0, 175, 95),\n        (0, 175, 135),\n        (0, 175, 175),\n        (0, 175, 215),\n        (0, 175, 255),\n        (0, 215, 0),\n        (0, 215, 95),\n        (0, 215, 135),\n        (0, 215, 175),\n        (0, 215, 215),\n        (0, 215, 255),\n        (0, 255, 0),\n        (0, 255, 95),\n        (0, 255, 135),\n        (0, 255, 175),\n        (0, 255, 215),\n        (0, 255, 255),\n        (95, 0, 0),\n        (95, 0, 95),\n        (95, 0, 135),\n        (95, 0, 175),\n        (95, 0, 215),\n        (95, 0, 255),\n        (95, 95, 0),\n        (95, 95, 95),\n        (95, 95, 135),\n        (95, 95, 175),\n        (95, 95, 215),\n        (95, 95, 255),\n        (95, 135, 0),\n        (95, 135, 95),\n        (95, 135, 135),\n        (95, 135, 175),\n        (95, 135, 215),\n        (95, 135, 255),\n        (95, 175, 0),\n        (95, 175, 95),\n        (95, 175, 135),\n        (95, 175, 175),\n        (95, 175, 215),\n        (95, 175, 255),\n        (95, 215, 0),\n        (95, 215, 95),\n        (95, 215, 135),\n        (95, 215, 175),\n        (95, 215, 215),\n        (95, 215, 255),\n        (95, 255, 0),\n        (95, 255, 95),\n        (95, 255, 135),\n        (95, 255, 175),\n        (95, 255, 215),\n        (95, 255, 255),\n        (135, 0, 0),\n        (135, 0, 95),\n        (135, 0, 135),\n        (135, 0, 175),\n        (135, 0, 215),\n        (135, 0, 255),\n        (135, 95, 0),\n        (135, 95, 95),\n        (135, 95, 135),\n        (135, 95, 175),\n        (135, 95, 215),\n        (135, 95, 255),\n        (135, 135, 0),\n        (135, 135, 95),\n        (135, 135, 135),\n        (135, 135, 175),\n        (135, 135, 215),\n        (135, 135, 255),\n        (135, 175, 0),\n        (135, 175, 95),\n        (135, 175, 135),\n        (135, 175, 175),\n        (135, 175, 215),\n        (135, 175, 255),\n        (135, 215, 0),\n        (135, 215, 95),\n        (135, 215, 135),\n        (135, 215, 175),\n        (135, 215, 215),\n        (135, 215, 255),\n        (135, 255, 0),\n        (135, 255, 95),\n        (135, 255, 135),\n        (135, 255, 175),\n        (135, 255, 215),\n        (135, 255, 255),\n        (175, 0, 0),\n        (175, 0, 95),\n        (175, 0, 135),\n        (175, 0, 175),\n        (175, 0, 215),\n        (175, 0, 255),\n        (175, 95, 0),\n        (175, 95, 95),\n        (175, 95, 135),\n        (175, 95, 175),\n        (175, 95, 215),\n        (175, 95, 255),\n        (175, 135, 0),\n        (175, 135, 95),\n        (175, 135, 135),\n        (175, 135, 175),\n        (175, 135, 215),\n        (175, 135, 255),\n        (175, 175, 0),\n        (175, 175, 95),\n        (175, 175, 135),\n        (175, 175, 175),\n        (175, 175, 215),\n        (175, 175, 255),\n        (175, 215, 0),\n        (175, 215, 95),\n        (175, 215, 135),\n        (175, 215, 175),\n        (175, 215, 215),\n        (175, 215, 255),\n        (175, 255, 0),\n        (175, 255, 95),\n        (175, 255, 135),\n        (175, 255, 175),\n        (175, 255, 215),\n        (175, 255, 255),\n        (215, 0, 0),\n        (215, 0, 95),\n        (215, 0, 135),\n        (215, 0, 175),\n        (215, 0, 215),\n        (215, 0, 255),\n        (215, 95, 0),\n        (215, 95, 95),\n        (215, 95, 135),\n        (215, 95, 175),\n        (215, 95, 215),\n        (215, 95, 255),\n        (215, 135, 0),\n        (215, 135, 95),\n        (215, 135, 135),\n        (215, 135, 175),\n        (215, 135, 215),\n        (215, 135, 255),\n        (215, 175, 0),\n        (215, 175, 95),\n        (215, 175, 135),\n        (215, 175, 175),\n        (215, 175, 215),\n        (215, 175, 255),\n        (215, 215, 0),\n        (215, 215, 95),\n        (215, 215, 135),\n        (215, 215, 175),\n        (215, 215, 215),\n        (215, 215, 255),\n        (215, 255, 0),\n        (215, 255, 95),\n        (215, 255, 135),\n        (215, 255, 175),\n        (215, 255, 215),\n        (215, 255, 255),\n        (255, 0, 0),\n        (255, 0, 95),\n        (255, 0, 135),\n        (255, 0, 175),\n        (255, 0, 215),\n        (255, 0, 255),\n        (255, 95, 0),\n        (255, 95, 95),\n        (255, 95, 135),\n        (255, 95, 175),\n        (255, 95, 215),\n        (255, 95, 255),\n        (255, 135, 0),\n        (255, 135, 95),\n        (255, 135, 135),\n        (255, 135, 175),\n        (255, 135, 215),\n        (255, 135, 255),\n        (255, 175, 0),\n        (255, 175, 95),\n        (255, 175, 135),\n        (255, 175, 175),\n        (255, 175, 215),\n        (255, 175, 255),\n        (255, 215, 0),\n        (255, 215, 95),\n        (255, 215, 135),\n        (255, 215, 175),\n        (255, 215, 215),\n        (255, 215, 255),\n        (255, 255, 0),\n        (255, 255, 95),\n        (255, 255, 135),\n        (255, 255, 175),\n        (255, 255, 215),\n        (255, 255, 255),\n        (8, 8, 8),\n        (18, 18, 18),\n        (28, 28, 28),\n        (38, 38, 38),\n        (48, 48, 48),\n        (58, 58, 58),\n        (68, 68, 68),\n        (78, 78, 78),\n        (88, 88, 88),\n        (98, 98, 98),\n        (108, 108, 108),\n        (118, 118, 118),\n        (128, 128, 128),\n        (138, 138, 138),\n        (148, 148, 148),\n        (158, 158, 158),\n        (168, 168, 168),\n        (178, 178, 178),\n        (188, 188, 188),\n        (198, 198, 198),\n        (208, 208, 208),\n        (218, 218, 218),\n        (228, 228, 228),\n        (238, 238, 238),\n    ]\n)\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_palettes.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "sindresorhus@gmail.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_spinners.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.microsoft.com/en-us/windows/console/console-functions\n",
      "https://docs.microsoft.com/en-us/windows/console/getconsolemode#parameters\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_win32_console.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/textualize]https://github.com/textualize",
      "https://twitter.com/willmcgugan]https://twitter.com/willmcgugan",
      "https://www.textualize.io]Textualize.io[/]\n\n- Will McGugan"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\rich\\__main__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/xybp888/iOS-SDKs/blob/master/iPhoneOS13.0.sdk/System/Library/Frameworks/Security.framework/Headers/SecTrust.h#L84\n    if (\n        ssl_context.verify_mode == ssl.CERT_REQUIRED\n        and sec_trust_result_type_as_int not in (1, 4)\n    ):\n        # Note that we"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_macos.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tiran/certifi-system-store by Christian Heimes\n_CA_FILE_CANDIDATES = [\n    # Alpine, Arch, Fedora 34+, OpenWRT, RHEL 9+, BSD\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_openssl.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.3.6.1",
      "5.5.7.3"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_windows.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/497 ",
      "https://github.com/urllib3/urllib3/issues/497 "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connection.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://hg.python.org/cpython/file/7aaba721ebc0/Lib/socket.py#l252\n_blocking_errnos = {errno.EAGAIN, errno.EWOULDBLOCK}\n\n\nclass HTTPConnectionPool(ConnectionPool, RequestMethods):\n    ",
      "http://bugs.python.org/issue10272\n        if ",
      "http://proxy",
      "http://google.com/",
      "http://bugs.python.org/issue28539\n    if host.startswith("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connectionpool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            if e.errno not in {\n                errno.EPIPE,\n                errno.ESHUTDOWN,\n                errno.EPROTOTYPE,\n                errno.ECONNRESET,\n            }:\n                raise\n\n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n\n        # App Engine doesn",
      "https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n\n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n\n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else",
      "https://proxy",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connectionpool.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\exceptions.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http:// or https://",
      "http:// or https://"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\exceptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc2388#section-4.4>`_.\n\n    :param name:\n        The name of the parameter, a string expected to be ASCII only.\n    :param value:\n        The value of the parameter, provided as ``bytes`` or `str``.\n    :ret:\n        An RFC-2231-formatted unicode string.\n    ",
      "https://w3c.github.io/html/sec-forms.html#multipart-form-data\n\n    :param name:\n        The name of the parameter, a string expected to be ASCII only.\n    :param value:\n        The value of the parameter, provided as ``bytes`` or `str``.\n    :ret:\n        A unicode string, stripped of troublesome characters.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\fields.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "4.10.22.7",
      "4.10.22.7"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\fields.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:3128"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://google.com/",
      "http://google.com/mail",
      "http://yahoo.com/",
      "http://localhost:3128/",
      "http://google.com/",
      "http://httpbin.org/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://httpbin.org/",
      "https://twitter.com/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\poolmanager.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://urllib3.readthedocs.io/en/stable/v2-migration-guide.html"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\request.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue16298) do\n                    # not properly close the connection in all cases. There is\n                    # no harm in redundantly calling close.\n                    self._fp.close()\n                    flush_decoder = True\n                    if self.enforce_content_length and self.length_remaining not in (\n                        0,\n                        None,\n                    ):\n                        # This is an edge case that httplib failed to cover due\n                        # to concerns of backward compatibility. We"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/2513#issuecomment-1152559900.\n          * urllib3 injected with pyOpenSSL-backed SSL-support.\n          * CPython < 3.10 only when `amt` does not fit 32-bit int.\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/2680\ntry:\n    import urllib3_secure_extra  # type: ignore # noqa: F401\nexcept ImportError:\n    pass\nelse:\n    warnings.warn(\n        ",
      "https://github.com/urllib3/urllib3/issues/2680"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\__init__.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "andrey.petrov@shazow.net"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cloud.google.com/appengine/docs/python/urlfetch>`_.\n\nExample usage::\n\n    from pip._vendor.urllib3 import PoolManager\n    from pip._vendor.urllib3.contrib.appengine import AppEngineManager, is_appengine_sandbox\n\n    if is_appengine_sandbox():\n        # AppEngineManager uses AppEngine",
      "https://google.com/",
      "https://cloud.google.com/appengine/docs/python/\\\nurlfetch/#Python_Quotas_and_limits>`_ to the URLFetch service and it may not be\nthe best choice for your application. There are three options for using\nurllib3 on Google App Engine:\n\n1. You can use :class:`AppEngineManager` with URLFetch. URLFetch is\n   cost-effective in many circumstances as long as your usage is within the\n   limitations.\n2. You can use a normal :class:`~urllib3.PoolManager` by enabling sockets.\n   Sockets also have `limitations and restrictions\n   <https://cloud.google.com/appengine/docs/python/sockets/\\\n   #limitations-and-restrictions>`_ and have a lower free quota than URLFetch.\n   To use sockets, be sure to specify the following in your ``app.yaml``::\n\n        env_variables:\n            GAE_USE_SOCKETS_HTTPLIB : ",
      "https://cloud.google.com/appengine/docs/flexible/>`_, you can use the standard\n:class:`PoolManager` without any configuration or special environment variables.\n",
      "https://cloud.google.com/appengine/docs/python/urlfetch>`_.\n\n    Notably it will raise an :class:`AppEnginePlatformError` if:\n        * URLFetch is not available.\n        * If you attempt to use this on App Engine Flexible, as full socket\n          support is available.\n        * If a request size is more than 10 megabytes.\n        * If a response size is more than 32 megabytes.\n        * If you use an unsupported request method such as OPTIONS.\n\n    Beyond those cases, it will raise normal urllib3 errors.\n    ",
      "https://urllib3.readthedocs.io/en/1.26.x/reference/urllib3.contrib.html."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\appengine.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://code.google.com/p/urllib3/issues/detail?id=10\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\ntlmpool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/2282. ",
      "https://%s%s"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\ntlmpool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Server_Name_Indication\n.. _crime attack: https://en.wikipedia.org/wiki/CRIME_(security_exploit)\n.. _pyopenssl: https://www.pyopenssl.org\n.. _cryptography: https://cryptography.io\n.. _idna: https://github.com/kjd/idna\n",
      "https://github.com/urllib3/urllib3/issues/2680"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "will@wbond.net"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://urllib3.readthedocs.io/en/1.26.x/contrib.html#socks-proxies"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\socks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cloud.google.com/appengine/docs/standard/runtimes\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_appengine_environ.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "benjamin@python.org"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\six.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/1446\n    if _appengine_environ.is_appengine_sandbox():\n        return False\n\n    if socket.has_ipv6:\n        # has_ipv6 returns true if cPython was compiled with IPv6 support.\n        # It does not tell us if the system has IPv6 support enabled. To\n        # determine that we must bind to an IPv6 address.\n        # https://github.com/urllib3/urllib3/pull/611\n        # https://bugs.python.org/issue658327\n        try:\n            sock = socket.socket(socket.AF_INET6)\n            sock.bind((host, 0))\n            has_ipv6 = True\n        except Exception:\n            pass\n\n    if sock:\n        sock.close()\n    return has_ipv6\n\n\nHAS_IPV6 = _has_ipv6("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\connection.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/urllib3/urllib3/issues/800\n\n        # So we ignore the following defects:\n        # - StartBoundaryNotFoundDefect:\n        #     The claimed start boundary was never found.\n        # - MultipartInvariantViolationDefect:\n        #     A message claimed to be a multipart but no subparts were found.\n        defects = [\n            defect\n            for defect in defects\n            if not isinstance(\n                defect, (StartBoundaryNotFoundDefect, MultipartInvariantViolationDefect)\n            )\n        ]\n\n    if defects or unparsed_data:\n        raise HeaderParsingError(defects=defects, unparsed_data=unparsed_data)\n\n\ndef is_response_to_head(response):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\response.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/",
      "http://example.com/",
      "http://example.com/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7230#section-3.2.4\n        if re.match(r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://wiki.mozilla.org/Security/Server_Side_TLS\n# - https://www.ssllabs.com/projects/best-practices/index.html\n# - https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/\n#\n# The general intent is:\n# - prefer cipher suites that offer perfect forward secrecy (DHE/ECDHE),\n# - prefer ECDHE over DHE for better performance,\n# - prefer any AES-GCM and ChaCha20 over any AES-CBC for better performance and\n#   security,\n# - prefer AES-GCM over ChaCha20 because hardware-accelerated AES is common,\n# - disable NULL authentication, MD5 MACs, DSS, and other\n#   insecure ciphers for security reasons.\n# - NOTE: TLS 1.3 cipher suites are managed through a different interface\n#   not exposed by CPython (yet!) and are enabled by default if they",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html",
      "https://bugs.python.org/issue37428\n    if (cert_reqs == ssl.CERT_REQUIRED or sys.version_info >= (3, 7, 4)) and getattr(\n        context, ",
      "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs.python.org/3/license.html\n\nimport re\nimport sys\n\n# ipaddress has been backported to 2.6+ in pypi.  If it is installed on the\n# system, use it to handle IPAddress ServerAltnames (this was added in\n# python-3.5) otherwise only do DNS matching.  This allows\n# util.ssl_match_hostname to continue to be used in Python 2.7.\ntry:\n    import ipaddress\nexcept ImportError:\n    ipaddress = None\n\n__version__ = ",
      "http://tools.ietf.org/html/rfc6125#section-6.4.3\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_match_hostname.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "3.5.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_match_hostname.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/",
      "http://example.com/",
      "http://example.com/, timeout=no_timeout)\n\n\n    :param total:\n        This combines the connect and read timeouts into one; the read timeout\n        will be set to the time leftover from the connect attempt. In the\n        event that both a connect timeout and a total are specified, or a read\n        timeout and a total are specified, the shorter timeout will be applied.\n\n        Defaults to None.\n\n    :type total: int, float, or None\n\n    :param connect:\n        The maximum amount of time (in seconds) to wait for a connection\n        attempt to a server to succeed. Omitting the parameter will default the\n        connect timeout to the system default, probably `the global default\n        timeout in socket.py\n        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n        None will set an infinite timeout for connection attempts.\n\n    :type connect: int, float, or None\n\n    :param read:\n        The maximum amount of time (in seconds) to wait between consecutive\n        read operations for a response from the server. Omitting the parameter\n        will default the read timeout to the system default, probably `the\n        global default timeout in socket.py\n        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n        None will set an infinite timeout.\n\n    :type read: int, float, or None\n\n    .. note::\n\n        Many factors can affect the total amount of time for urllib3 to return\n        an HTTP response.\n\n        For example, Python"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://google.com/mail/",
      "http://google.com/mail/",
      "http://username:password@host.com:80/path?query#fragment",
      "http://tools.ietf.org/html/rfc3986#section-5.2.4 for pseudo-code\n    segments = path.split(",
      "http://google.com/mail/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-hyper/rfc3986\nPERCENT_RE = re.compile(r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "password@host.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://developer.apple.com/documentation/security/1550981-ssl_cipher_suite_values\n    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0xC02C\n    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0xC030\n    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0xC02B\n    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0xC02F\n    TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 0xCCA9\n    TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 0xCCA8\n    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 0x009F\n    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 0x009E\n    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 0xC024\n    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 0xC028\n    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0xC00A\n    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0xC014\n    TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 0x006B\n    TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 0x0039\n    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 0xC023\n    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 0xC027\n    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0xC009\n    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0xC013\n    TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 0x0067\n    TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 0x0033\n    TLS_RSA_WITH_AES_256_GCM_SHA384 = 0x009D\n    TLS_RSA_WITH_AES_128_GCM_SHA256 = 0x009C\n    TLS_RSA_WITH_AES_256_CBC_SHA256 = 0x003D\n    TLS_RSA_WITH_AES_128_CBC_SHA256 = 0x003C\n    TLS_RSA_WITH_AES_256_CBC_SHA = 0x0035\n    TLS_RSA_WITH_AES_128_CBC_SHA = 0x002F\n    TLS_AES_128_GCM_SHA256 = 0x1301\n    TLS_AES_256_GCM_SHA384 = 0x1302\n    TLS_AES_128_CCM_8_SHA256 = 0x1305\n    TLS_AES_128_CCM_SHA256 = 0x1304\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\bindings.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "will@wbond.net"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\bindings.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/TR/html4/strict.dtd",
      "http://www.w3.org/TR/html4/strict.dtd"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pygments.org/>\nCopyright 2006-2024 by the Pygments team.\nLicensed under the BSD license, see LICENSE for details.\n*/\n%(styledefs)s\n",
      "https://pygments.org/>\nCopyright 2006-2024 by the Pygments team.\nLicensed under the BSD license, see LICENSE for details.\n-->\n<html>\n<head>\n  <title>%(title)s</title>\n  <meta http-equiv="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pillow.readthedocs.io/en/stable/releasenotes/9.2.0.html#font-size-and-offset-methods\n                if hasattr(draw, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\img.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.documentfoundation.org/show_bug.cgi?id=144050\n        lines.append("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\rtf.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/",
      "http://www.w3.org/2000/svg"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\svg.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://frexx.de/xterm-256-notes/data/xterm256-conv2.tar.bz2)\n    by Wolfgang Frisch.\n\n    Formatter version 1.\n\n    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\terminal256.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://pyos.github.io/dg"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\python.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org",
      "https://bugs.python.org/issue36817)\n             r",
      "https://bugs.python.org/issue36817)\n             r",
      "https://docs.python.org/3/reference/expressions.html\n            (words((\n                ",
      "https://www.python.org",
      "https://python.org",
      "https://python.org",
      "https://www.python.org/dev/peps/pep-0657/>`\n            # error locations in Python 3.11+, or single-caret markers\n            # for syntax errors before that.\n            (r",
      "https://python.org",
      "https://cython.org",
      "https://numpy.org/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\python.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/ionrock/cachecontrol/issues/63\n        hashed = self.encode(name)\n        parts = list(hashed[:5]) + [hashed]\n        return os.path.join(self.directory, *parts)\n\n    def get(self, key: str) -> bytes | None:\n        name = self._fn(key)\n        try:\n            with open(name, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\file_cache.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/7696 kicks in\n            assert self._session is not None\n        return self._session\n\n    def _build_session(\n        self,\n        options: Values,\n        retries: Optional[int] = None,\n        timeout: Optional[int] = None,\n    ) -> "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\cli\\index_command.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pip.pypa.io/en/stable/user_guide/#using-pip-from-your-program.\n# That document also provides suggestions that should work for nearly\n# all users that are considering importing and using main() directly.\n\n# However, we know that certain users will still want to invoke pip\n# in-process. If you understand and accept the implications of using pip\n# in an unsupported manner, the best approach is to use runpy to avoid\n# depending on the exact location of this entry point.\n\n# The following example shows how to use runpy to invoke pip in that\n# case:\n#\n#     sys.argv = ["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\cli\\main.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/3418\n    elif not file.isatty() or logger.getEffectiveLevel() > logging.INFO:\n        yield\n    else:\n        file.write(HIDE_CURSOR)\n        try:\n            yield\n        finally:\n            file.write(SHOW_CURSOR)\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\cli\\spinners.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0427/\n        pattern = pattern + ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\commands\\cache.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.org/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\commands\\configuration.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/new",
      "https://pip.pypa.io/warnings/enable-long-paths\\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\commands\\install.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://wheel.readthedocs.io/en/latest/\n\n    ",
      "https://pip.pypa.io/en/stable/reference/build-system/\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\commands\\wheel.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/8761 for the original discussion and\n# rationale for why this is done within pip.\ntry:\n    __import__(",
      "https://docs.python.org/3/install/index.html#alternate-installation\n\n    :param dist_name: the name of the package to retrieve the scheme for, used\n        in the headers scheme path\n    :param user: indicates to use the "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\locations\\_distutils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/10647\n\n    This is a function for testability, but should be constant during any one\n    run.\n    ",
      "https://bugs.python.org/issue44860>.\n    ",
      "https://github.com/pypa/pip/issues/10151",
      "https://github.com/python/cpython/blob/8c21941ddaf/Lib/sysconfig.py#L178-L194\n        skip_cpython_build = (\n            sysconfig.is_python_build(check_home=True)\n            and not WINDOWS\n            and k in (",
      "https://github.com/Homebrew/homebrew-core/issues/76621"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/10243)\n                return self.location\n        return None\n\n    @property\n    def installed_location(self) -> Optional[str]:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pfmoore/pkg_metadata\n\nfrom email.header import Header, decode_header, make_header\nfrom email.message import Message\nfrom typing import Any, Dict, List, Union, cast\n\nMETADATA_FIELDS = [\n    # Name, Multiple-Use\n    ("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\metadata\\_json.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/",
      "https://test.pypi.org/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\models\\index.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0376/#requested\n            ",
      "https://www.python.org/dev/peps/pep-0566/#json-compatible-metadata\n            ",
      "https://peps.python.org/pep-0508/#environment-markers\n            # TODO: currently, the resolver uses the default environment to evaluate\n            # environment markers, so that is what we report here. In the future, it\n            # should also take into account options such as --python-version or\n            # --platform, perhaps under the form of an environment_override field?\n            # https://github.com/pypa/pip/issues/11198\n            "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\models\\installation_report.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/install/index.html#alternate-installation.\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\models\\scheme.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/jaraco/keyring/blob/97689324abcf01bd1793d49063e7ca01e03d7d07/keyring/backend.py#L134-L139\n        if username is not None:\n            password = self._get_password(url, username)\n            if password is not None:\n                return username, password\n        return None\n\n    def save_auth_info(self, url: str, username: str, password: str) -> None:\n        return self._set_password(url, username, password)\n\n    def _get_password(self, service_name: str, username: str) -> Optional[str]:\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/psf/cachecontrol/issues/324).  We therefore have\n    additional logic that makes sure that both files to be present before\n    returning an entry; this fixes the read side of the race condition.\n\n    For the write side, we assume that the server will only ever return the\n    same data for the same URL, which ought to be the case for files pip is\n    downloading.  PyPI does not have a mechanism to swap out a wheel for\n    another wheel, for example.  If this assumption is not true, the\n    CacheControl issue will need to be fixed.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\network\\cache.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bit.ly/1qrySKC)\n    (",
      "http:// URLs.\n        # If caching is disabled, we will also use it for\n        # https:// hosts that we"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\network\\session.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/5499\nCI_ENVIRONMENT_VARIABLES = (\n    # Azure Pipelines\n    ",
      "https:// hosts that we"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\network\\session.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\network\\session.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/11943\n            if (\n                isinstance(req.download_info.info, ArchiveInfo)\n                and not req.download_info.info.hashes\n                and local_file\n            ):\n                hash = hash_file(local_file.path)[0].hexdigest()\n                # We populate info.hash for backward compatibility.\n                # This will automatically populate info.hashes.\n                req.download_info.info.hash = f"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\operations\\prepare.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://blahblah@rev#egg=Foobar[baz]&subdirectory=version_subdir\n        .[some_extra]\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\req\\constructors.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://peps.python.org/pep-0508/#complete-grammar\n        r"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\req\\constructors.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://pubs.opengroup.org/onlinepubs/9699919799/>`_ and are limited\n    to uppercase letter, digits and the `_` (underscore).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\req\\req_file.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/2427\n    parser.exit = parser_exit  # type: ignore\n\n    return parser\n\n\ndef join_lines(lines_enum: ReqFileLines) -> ReqFileLines:\n    ",
      "https://github.com/pypa/pip/pull/3514>`_.\n\n    Valid characters in variable names follow the `POSIX standard\n    <http://pubs.opengroup.org/onlinepubs/9699919799/>`_ and are limited\n    to uppercase letter, digits and the `_` (underscore).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\req\\req_file.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://packaging.python.org/specifications/recording-installed-packages/\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\req\\req_uninstall.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/1733>\ndef site_config_dirs(appname: str) -> List[str]:\n    if sys.platform == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\appdirs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/pull/935#discussion_r5307003\n\n    Placed this function in compat due to differences on AIX and\n    Jython, that should eventually go away.\n\n    :raises OSError: When path is a symlink or can"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python.org/dev/peps/pep-0599/#backwards-compatibility-with-manylinux2010-wheels\n        if arch_suffix in {",
      "https://www.python.org/dev/peps/pep-0571/#backwards-compatibility-with-manylinux1-wheels\n        arches.append("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\compatibility_tags.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/{}"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\deprecation.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/setuptools/issues/4167).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\egg_link.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/5599 for advice on "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\entrypoints.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue2528\n    # and we can",
      "http://bugs.python.org/issue22107\n    basename = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\filesystem.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/blob/fcf1d003bf4f0100c9d0921ff3d70e1127ca1b71/Lib/platform.py#L175-L183\n    if sys.platform == "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\glibc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue19612\n    # https://bugs.python.org/issue30418\n    if not WINDOWS:\n        return False\n\n    return isinstance(exc, OSError) and exc.errno in (errno.EINVAL, errno.EPIPE)\n\n\n@contextlib.contextmanager\ndef indent_log(num: int = 2) -> Generator[None, None, None]:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py"
  },
  {
    "pattern": "password\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "password = \":****\""
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3.12/whatsnew/3.12.html#shutil.\n        shutil.rmtree(dir, onexc=handler)  # type: ignore\n    else:\n        shutil.rmtree(dir, onerror=handler)  # type: ignore\n\n\ndef _onerror_ignore(*_args: Any) -> None:\n    pass\n\n\ndef _onerror_reraise(*_args: Any) -> None:\n    raise  # noqa: PLE0704 - Bare exception used to reraise existing exception\n\n\ndef rmtree_errorhandler(\n    func: FunctionType,\n    path: Path,\n    exc_info: Union[ExcInfo, BaseException],\n    *,\n    onexc: OnExc = _onerror_reraise,\n) -> None:\n    ",
      "https://github.com/pypa/pip/issues/1299 for more discussion\n    should_show_use_python_msg = (\n        modifying_pip and WINDOWS and os.path.basename(sys.argv[0]) in pip_names\n    )\n\n    if should_show_use_python_msg:\n        new_command = [sys.executable, ",
      "https://mypy.readthedocs.io/en/stable/common_issues.html\n    if sys.platform == ",
      "https://pip.pypa.io/warnings/venv. "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "pass@example.com",
      "accesstoken@example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\\\Users",
      "C:\\Users"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\setuptools_build.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/issues/107845)\n                            # Ignore the error there, but do use the\n                            # more lax `tar_filter`\n                            member = tarfile.tar_filter(member, location)\n                        else:\n                            raise\n                except tarfile.TarError as exc:\n                    message = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\unpacking.py"
  },
  {
    "pattern": "/Users/[^\"\\']+",
    "matches": [
      "/Users/foo"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\urls.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com/foo#bar",
      "http://example.com/foo#bar"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\_jaraco_text.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/1130\n    unset_environ = (",
      "https://git-scm.com/docs/partial-clone\n            # Speeds up cloning by functioning without a complete copy of repository\n            self.run_command(\n                make_command(\n                    ",
      "https://article.gmane.org/gmane.comp.version-control.git/146500)\n        scheme, netloc, path, query, fragment = urlsplit(url)\n        if scheme.endswith("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "C:\\foo\\bar"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "git@example.com",
      "git@example.com",
      "git@example.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://myrepo/svn/MyApp#egg=MyApp"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/mypy/issues/1174\n            prompt = (",
      "https://pip.pypa.io/en/latest/reference/pip_freeze/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py"
  },
  {
    "pattern": "C:\\\\[^\"\\']+",
    "matches": [
      "c:\\\\folder)\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/11745#issuecomment-1402805842\n            logger.critical(\n                ",
      "https://pip.pypa.io/en/latest/topics/dependency-resolution/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\factory.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pip.pypa.io/warnings/backtracking for "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\reporter.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/10557\n    # We will loop until we explicitly break the loop.\n    while True:\n        leaves = set()\n        for key in graph:\n            if key is None:\n                continue\n            for _child in graph.iter_children(key):\n                # This means we have at least one child\n                break\n            else:\n                # No child.\n                leaves.add(key)\n        if not leaves:\n            # We are done simplifying.\n            break\n        # Calculate the weight for the leaves.\n        weight = len(graph) - 1\n        for leaf in leaves:\n            if leaf not in requirement_keys:\n                continue\n            weights[leaf] = weight\n        # Remove the leaves from the graph, making it simpler.\n        for leaf in leaves:\n            graph.remove(leaf)\n\n    # Visit the remaining graph.\n    # `None` is guaranteed to be the root node by resolvelib.\n    visit(None)\n\n    # Sanity check: all requirement keys should be in the weights,\n    # and no other keys should be in the weights.\n    difference = set(weights.keys()).difference(requirement_keys)\n    assert not difference, difference\n\n    return weights\n\n\ndef _req_set_item_sorter(\n    item: Tuple[str, InstallRequirement],\n    weights: Dict[Optional[str], int],\n) -> Tuple[int, str]:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\resolver.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/pypa/pip/issues/5868\n    return sorted(\n        (record_path, hash_, str(size)) for record_path, hash_, size in outrows\n    )\n\n\ndef _record_to_fs_path(record_path: RecordPath, lib_dir: str) -> str:\n    return os.path.join(lib_dir, record_path)\n\n\ndef _fs_to_record_path(path: str, lib_dir: str) -> RecordPath:\n    # On Windows, do not handle relative paths if they belong to different\n    # logical disks\n    if os.path.splitdrive(path)[0].lower() == os.path.splitdrive(lib_dir)[0].lower():\n        path = os.path.relpath(path, lib_dir)\n\n    path = path.replace(os.path.sep, ",
      "https://packaging.python.org/",
      "https://github.com/pypa/pip/issues/1800\n    maker.clobber = True\n\n    # Ensure we don",
      "https://bitbucket.org/pypa/distlib/issue/35/\n    maker.variants = {",
      "https://bitbucket.org/pypa/distlib/issue/32/\n    maker.set_mode = True\n\n    # Generate the console and GUI entry points specified in the wheel\n    scripts_to_generate = get_console_script_specs(console)\n\n    gui_scripts_to_generate = list(starmap("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\pip\\_internal\\operations\\install\\wheel.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://learn.microsoft.com/en-us/azure/ai-services/openai/reference#rest-api-versioning",
      "https://endpoint.openai.azure.com",
      "https://www.microsoft.com/en-us/security/business/identity-access/microsoft-entra-id"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\cli\\_cli.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example-resource.azure.openai.com/`\n\n            azure_ad_token: Your Azure Active Directory token, https://www.microsoft.com/en-us/security/business/identity-access/microsoft-entra-id\n\n            azure_ad_token_provider: A function that returns an Azure Active Directory token, will be invoked on every request.\n\n            azure_deployment: A model deployment, if given sets the base client URL to include `/deployments/{azure_deployment}`.\n                Note: this means you won",
      "https://example-resource.azure.openai.com/`\n\n            azure_ad_token: Your Azure Active Directory token, https://www.microsoft.com/en-us/security/business/identity-access/microsoft-entra-id\n\n            azure_ad_token_provider: A function that returns an Azure Active Directory token, will be invoked on every request.\n\n            azure_deployment: A model deployment, if given sets the base client URL to include `/deployments/{azure_deployment}`.\n                Note: this means you won"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\lib\\azure.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/openai/openai-python for the API.\n\nYou can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. \n\nAlternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`\n\nA detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\lib\\_old_api.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/fine-tuning/preparing-your-dataset for more detail and examples. If you intend to do open-ended generation, then you should leave the prompts empty",
      "https://platform.openai.com/docs/guides/fine-tuning/preparing-your-dataset for more detail and examples.",
      "https://platform.openai.com/docs/guides/fine-tuning/preparing-your-dataset for more details",
      "https://platform.openai.com/docs/guides/fine-tuning/preparing-your-dataset for more details"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\lib\\_validators.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files/create)\n              for how to upload a file.\n\n              Your input file must be formatted as a\n              [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input),\n              and must be uploaded with the purpose `batch`. The file can contain up to 50,000\n              requests, and can be up to 100 MB in size.\n\n          metadata: Optional custom metadata for the batch.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/files/create)\n              for how to upload a file.\n\n              Your input file must be formatted as a\n              [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input),\n              and must be uploaded with the purpose `batch`. The file can contain up to 50,000\n              requests, and can be up to 100 MB in size.\n\n          metadata: Optional custom metadata for the batch.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\batches.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          prompt: The prompt(s) to generate completions for, encoded as a string, array of\n              strings, array of tokens, or array of token arrays.\n\n              Note that <|endoftext|> is the document separator that the model sees during\n              training, so if a prompt is not specified the model will generate as if from the\n              beginning of a new document.\n\n          best_of: Generates `best_of` completions server-side and returns the ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          logit_bias: Modify the likelihood of specified tokens appearing in the completion.\n\n              Accepts a JSON object that maps tokens (specified by their token ID in the GPT\n              tokenizer) to an associated bias value from -100 to 100. You can use this\n              [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs.\n              Mathematically, the bias is added to the logits generated by the model prior to\n              sampling. The exact effect will vary per model, but values between -1 and 1\n              should decrease or increase likelihood of selection; values like -100 or 100\n              should result in a ban or exclusive selection of the relevant token.\n\n              As an example, you can pass `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many completions to generate for each prompt.\n\n              **Note:** Because this parameter generates many completions, it can quickly\n              consume your token quota. Use carefully and ensure that you have reasonable\n              settings for `max_tokens` and `stop`.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          seed: If specified, our system will make a best effort to sample deterministically,\n              such that repeated requests with the same `seed` and parameters should return\n              the same result.\n\n              Determinism is not guaranteed, and you should refer to the `system_fingerprint`\n              response parameter to monitor changes in the backend.\n\n          stop: Up to 4 sequences where the API will stop generating further tokens. The\n              returned text will not contain the stop sequence.\n\n          stream: Whether to stream back partial progress. If set, tokens will be sent as\n              data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          stream_options: Options for streaming response. Only set this when you set `stream: true`.\n\n          suffix: The suffix that comes after a completion of inserted text.\n\n              This parameter is only supported for `gpt-3.5-turbo-instruct`.\n\n          temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n              make the output more random, while lower values like 0.2 will make it more\n              focused and deterministic.\n\n              We generally recommend altering this or `top_p` but not both.\n\n          top_p: An alternative to sampling with temperature, called nucleus sampling, where the\n              model considers the results of the tokens with top_p probability mass. So 0.1\n              means only the tokens comprising the top 10% probability mass are considered.\n\n              We generally recommend altering this or `temperature` but not both.\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          prompt: The prompt(s) to generate completions for, encoded as a string, array of\n              strings, array of tokens, or array of token arrays.\n\n              Note that <|endoftext|> is the document separator that the model sees during\n              training, so if a prompt is not specified the model will generate as if from the\n              beginning of a new document.\n\n          stream: Whether to stream back partial progress. If set, tokens will be sent as\n              data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          best_of: Generates `best_of` completions server-side and returns the ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          logit_bias: Modify the likelihood of specified tokens appearing in the completion.\n\n              Accepts a JSON object that maps tokens (specified by their token ID in the GPT\n              tokenizer) to an associated bias value from -100 to 100. You can use this\n              [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs.\n              Mathematically, the bias is added to the logits generated by the model prior to\n              sampling. The exact effect will vary per model, but values between -1 and 1\n              should decrease or increase likelihood of selection; values like -100 or 100\n              should result in a ban or exclusive selection of the relevant token.\n\n              As an example, you can pass `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many completions to generate for each prompt.\n\n              **Note:** Because this parameter generates many completions, it can quickly\n              consume your token quota. Use carefully and ensure that you have reasonable\n              settings for `max_tokens` and `stop`.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          seed: If specified, our system will make a best effort to sample deterministically,\n              such that repeated requests with the same `seed` and parameters should return\n              the same result.\n\n              Determinism is not guaranteed, and you should refer to the `system_fingerprint`\n              response parameter to monitor changes in the backend.\n\n          stop: Up to 4 sequences where the API will stop generating further tokens. The\n              returned text will not contain the stop sequence.\n\n          stream_options: Options for streaming response. Only set this when you set `stream: true`.\n\n          suffix: The suffix that comes after a completion of inserted text.\n\n              This parameter is only supported for `gpt-3.5-turbo-instruct`.\n\n          temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n              make the output more random, while lower values like 0.2 will make it more\n              focused and deterministic.\n\n              We generally recommend altering this or `top_p` but not both.\n\n          top_p: An alternative to sampling with temperature, called nucleus sampling, where the\n              model considers the results of the tokens with top_p probability mass. So 0.1\n              means only the tokens comprising the top 10% probability mass are considered.\n\n              We generally recommend altering this or `temperature` but not both.\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          prompt: The prompt(s) to generate completions for, encoded as a string, array of\n              strings, array of tokens, or array of token arrays.\n\n              Note that <|endoftext|> is the document separator that the model sees during\n              training, so if a prompt is not specified the model will generate as if from the\n              beginning of a new document.\n\n          stream: Whether to stream back partial progress. If set, tokens will be sent as\n              data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          best_of: Generates `best_of` completions server-side and returns the ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          logit_bias: Modify the likelihood of specified tokens appearing in the completion.\n\n              Accepts a JSON object that maps tokens (specified by their token ID in the GPT\n              tokenizer) to an associated bias value from -100 to 100. You can use this\n              [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs.\n              Mathematically, the bias is added to the logits generated by the model prior to\n              sampling. The exact effect will vary per model, but values between -1 and 1\n              should decrease or increase likelihood of selection; values like -100 or 100\n              should result in a ban or exclusive selection of the relevant token.\n\n              As an example, you can pass `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many completions to generate for each prompt.\n\n              **Note:** Because this parameter generates many completions, it can quickly\n              consume your token quota. Use carefully and ensure that you have reasonable\n              settings for `max_tokens` and `stop`.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          seed: If specified, our system will make a best effort to sample deterministically,\n              such that repeated requests with the same `seed` and parameters should return\n              the same result.\n\n              Determinism is not guaranteed, and you should refer to the `system_fingerprint`\n              response parameter to monitor changes in the backend.\n\n          stop: Up to 4 sequences where the API will stop generating further tokens. The\n              returned text will not contain the stop sequence.\n\n          stream_options: Options for streaming response. Only set this when you set `stream: true`.\n\n          suffix: The suffix that comes after a completion of inserted text.\n\n              This parameter is only supported for `gpt-3.5-turbo-instruct`.\n\n          temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n              make the output more random, while lower values like 0.2 will make it more\n              focused and deterministic.\n\n              We generally recommend altering this or `top_p` but not both.\n\n          top_p: An alternative to sampling with temperature, called nucleus sampling, where the\n              model considers the results of the tokens with top_p probability mass. So 0.1\n              means only the tokens comprising the top 10% probability mass are considered.\n\n              We generally recommend altering this or `temperature` but not both.\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          prompt: The prompt(s) to generate completions for, encoded as a string, array of\n              strings, array of tokens, or array of token arrays.\n\n              Note that <|endoftext|> is the document separator that the model sees during\n              training, so if a prompt is not specified the model will generate as if from the\n              beginning of a new document.\n\n          best_of: Generates `best_of` completions server-side and returns the ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          logit_bias: Modify the likelihood of specified tokens appearing in the completion.\n\n              Accepts a JSON object that maps tokens (specified by their token ID in the GPT\n              tokenizer) to an associated bias value from -100 to 100. You can use this\n              [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs.\n              Mathematically, the bias is added to the logits generated by the model prior to\n              sampling. The exact effect will vary per model, but values between -1 and 1\n              should decrease or increase likelihood of selection; values like -100 or 100\n              should result in a ban or exclusive selection of the relevant token.\n\n              As an example, you can pass `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many completions to generate for each prompt.\n\n              **Note:** Because this parameter generates many completions, it can quickly\n              consume your token quota. Use carefully and ensure that you have reasonable\n              settings for `max_tokens` and `stop`.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          seed: If specified, our system will make a best effort to sample deterministically,\n              such that repeated requests with the same `seed` and parameters should return\n              the same result.\n\n              Determinism is not guaranteed, and you should refer to the `system_fingerprint`\n              response parameter to monitor changes in the backend.\n\n          stop: Up to 4 sequences where the API will stop generating further tokens. The\n              returned text will not contain the stop sequence.\n\n          stream: Whether to stream back partial progress. If set, tokens will be sent as\n              data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          stream_options: Options for streaming response. Only set this when you set `stream: true`.\n\n          suffix: The suffix that comes after a completion of inserted text.\n\n              This parameter is only supported for `gpt-3.5-turbo-instruct`.\n\n          temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n              make the output more random, while lower values like 0.2 will make it more\n              focused and deterministic.\n\n              We generally recommend altering this or `top_p` but not both.\n\n          top_p: An alternative to sampling with temperature, called nucleus sampling, where the\n              model considers the results of the tokens with top_p probability mass. So 0.1\n              means only the tokens comprising the top 10% probability mass are considered.\n\n              We generally recommend altering this or `temperature` but not both.\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          prompt: The prompt(s) to generate completions for, encoded as a string, array of\n              strings, array of tokens, or array of token arrays.\n\n              Note that <|endoftext|> is the document separator that the model sees during\n              training, so if a prompt is not specified the model will generate as if from the\n              beginning of a new document.\n\n          stream: Whether to stream back partial progress. If set, tokens will be sent as\n              data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          best_of: Generates `best_of` completions server-side and returns the ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          logit_bias: Modify the likelihood of specified tokens appearing in the completion.\n\n              Accepts a JSON object that maps tokens (specified by their token ID in the GPT\n              tokenizer) to an associated bias value from -100 to 100. You can use this\n              [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs.\n              Mathematically, the bias is added to the logits generated by the model prior to\n              sampling. The exact effect will vary per model, but values between -1 and 1\n              should decrease or increase likelihood of selection; values like -100 or 100\n              should result in a ban or exclusive selection of the relevant token.\n\n              As an example, you can pass `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many completions to generate for each prompt.\n\n              **Note:** Because this parameter generates many completions, it can quickly\n              consume your token quota. Use carefully and ensure that you have reasonable\n              settings for `max_tokens` and `stop`.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          seed: If specified, our system will make a best effort to sample deterministically,\n              such that repeated requests with the same `seed` and parameters should return\n              the same result.\n\n              Determinism is not guaranteed, and you should refer to the `system_fingerprint`\n              response parameter to monitor changes in the backend.\n\n          stop: Up to 4 sequences where the API will stop generating further tokens. The\n              returned text will not contain the stop sequence.\n\n          stream_options: Options for streaming response. Only set this when you set `stream: true`.\n\n          suffix: The suffix that comes after a completion of inserted text.\n\n              This parameter is only supported for `gpt-3.5-turbo-instruct`.\n\n          temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n              make the output more random, while lower values like 0.2 will make it more\n              focused and deterministic.\n\n              We generally recommend altering this or `top_p` but not both.\n\n          top_p: An alternative to sampling with temperature, called nucleus sampling, where the\n              model considers the results of the tokens with top_p probability mass. So 0.1\n              means only the tokens comprising the top 10% probability mass are considered.\n\n              We generally recommend altering this or `temperature` but not both.\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          prompt: The prompt(s) to generate completions for, encoded as a string, array of\n              strings, array of tokens, or array of token arrays.\n\n              Note that <|endoftext|> is the document separator that the model sees during\n              training, so if a prompt is not specified the model will generate as if from the\n              beginning of a new document.\n\n          stream: Whether to stream back partial progress. If set, tokens will be sent as\n              data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          best_of: Generates `best_of` completions server-side and returns the ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          logit_bias: Modify the likelihood of specified tokens appearing in the completion.\n\n              Accepts a JSON object that maps tokens (specified by their token ID in the GPT\n              tokenizer) to an associated bias value from -100 to 100. You can use this\n              [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs.\n              Mathematically, the bias is added to the logits generated by the model prior to\n              sampling. The exact effect will vary per model, but values between -1 and 1\n              should decrease or increase likelihood of selection; values like -100 or 100\n              should result in a ban or exclusive selection of the relevant token.\n\n              As an example, you can pass `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many completions to generate for each prompt.\n\n              **Note:** Because this parameter generates many completions, it can quickly\n              consume your token quota. Use carefully and ensure that you have reasonable\n              settings for `max_tokens` and `stop`.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          seed: If specified, our system will make a best effort to sample deterministically,\n              such that repeated requests with the same `seed` and parameters should return\n              the same result.\n\n              Determinism is not guaranteed, and you should refer to the `system_fingerprint`\n              response parameter to monitor changes in the backend.\n\n          stop: Up to 4 sequences where the API will stop generating further tokens. The\n              returned text will not contain the stop sequence.\n\n          stream_options: Options for streaming response. Only set this when you set `stream: true`.\n\n          suffix: The suffix that comes after a completion of inserted text.\n\n              This parameter is only supported for `gpt-3.5-turbo-instruct`.\n\n          temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n              make the output more random, while lower values like 0.2 will make it more\n              focused and deterministic.\n\n              We generally recommend altering this or `top_p` but not both.\n\n          top_p: An alternative to sampling with temperature, called nucleus sampling, where the\n              model considers the results of the tokens with top_p probability mass. So 0.1\n              means only the tokens comprising the top 10% probability mass are considered.\n\n              We generally recommend altering this or `temperature` but not both.\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\completions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          model: ID of the model to use. You can use the\n              [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          dimensions: The number of dimensions the resulting output embeddings should have. Only\n              supported in `text-embedding-3` and later models.\n\n          encoding_format: The format to return the embeddings in. Can be either `float` or\n              [`base64`](https://pypi.org/project/pybase64/).\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          model: ID of the model to use. You can use the\n              [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          dimensions: The number of dimensions the resulting output embeddings should have. Only\n              supported in `text-embedding-3` and later models.\n\n          encoding_format: The format to return the embeddings in. Can be either `float` or\n              [`base64`](https://pypi.org/project/pybase64/).\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\embeddings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/assistants/tools) for\n        details.\n\n        The Fine-tuning API only supports `.jsonl` files. The input also has certain\n        required formats for fine-tuning\n        [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n        [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n        models.\n\n        The Batch API only supports `.jsonl` files up to 100 MB in size. The input also\n        has a specific required\n        [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n\n        Please [contact us](https://help.openai.com/) if you need to increase these\n        storage limits.\n\n        Args:\n          file: The File object (not file name) to be uploaded.\n\n          purpose: The intended purpose of the uploaded file.\n\n              Use ",
      "https://platform.openai.com/docs/api-reference/assistants) and\n              [Message](https://platform.openai.com/docs/api-reference/messages) files,\n              ",
      "https://platform.openai.com/docs/guides/batch), and ",
      "https://platform.openai.com/docs/api-reference/fine-tuning).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/assistants/tools) for\n        details.\n\n        The Fine-tuning API only supports `.jsonl` files. The input also has certain\n        required formats for fine-tuning\n        [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n        [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n        models.\n\n        The Batch API only supports `.jsonl` files up to 100 MB in size. The input also\n        has a specific required\n        [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n\n        Please [contact us](https://help.openai.com/) if you need to increase these\n        storage limits.\n\n        Args:\n          file: The File object (not file name) to be uploaded.\n\n          purpose: The intended purpose of the uploaded file.\n\n              Use ",
      "https://platform.openai.com/docs/api-reference/assistants) and\n              [Message](https://platform.openai.com/docs/api-reference/messages) files,\n              ",
      "https://platform.openai.com/docs/guides/batch), and ",
      "https://platform.openai.com/docs/api-reference/fine-tuning).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\files.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\images.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files/create)\n    for how to upload a file.\n\n    Your input file must be formatted as a\n    [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input),\n    and must be uploaded with the purpose `batch`. The file can contain up to 50,000\n    requests, and can be up to 100 MB in size.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\batch_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/models/list) API to\n    see all of your available models, or see our\n    [Model overview](https://platform.openai.com/docs/models/overview) for\n    descriptions of them.\n    ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n    ",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n    for counting tokens.\n    ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n    ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n    ",
      "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n    as they become available, with the stream terminated by a `data: [DONE]`\n    message.\n    [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n    ",
      "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n    as they become available, with the stream terminated by a `data: [DONE]`\n    message.\n    [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\completion_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/embeddings).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\embedding.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n    for counting tokens.\n    ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n    see all of your available models, or see our\n    [Model overview](https://platform.openai.com/docs/models/overview) for\n    descriptions of them.\n    ",
      "https://pypi.org/project/pybase64/).\n    ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\embedding_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/assistants) and\n    [Message](https://platform.openai.com/docs/api-reference/messages) files,\n    ",
      "https://platform.openai.com/docs/guides/batch), and ",
      "https://platform.openai.com/docs/api-reference/fine-tuning).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\file_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\image_create_variation_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\image_edit_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\image_generate_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files/object#files/object-purpose)\n    for acceptable values.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\upload.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\upload_create_params.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:4010"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_utils\\_logs.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:4010/foo/bar "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_utils\\_logs.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_utils\\_logs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tiangolo/asyncer\ndef asyncify(\n    function: Callable[T_ParamSpec, T_Retval],\n    *,\n    cancellable: bool = False,\n    limiter: anyio.CapacityLimiter | None = None,\n) -> Callable[T_ParamSpec, Awaitable[T_Retval]]:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_utils\\_sync.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/Rapptz/RoboDanny\ndef human_join(seq: Sequence[str], *, delim: str = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\_utils\\_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/models/tts):\n    `tts-1` or `tts-1-hd`\n    ",
      "https://platform.openai.com/docs/guides/text-to-speech/voice-options).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\audio\\speech_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n    improve accuracy and latency.\n    ",
      "https://platform.openai.com/docs/guides/speech-to-text/prompting)\n    should match the audio language.\n    ",
      "https://en.wikipedia.org/wiki/Log_probability) to\n    automatically increase the temperature until certain thresholds are hit.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\audio\\transcription_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/speech-to-text/prompting)\n    should be in English.\n    ",
      "https://en.wikipedia.org/wiki/Log_probability) to\n    automatically increase the temperature until certain thresholds are hit.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\audio\\translation_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) IDs made\n    available to the `code_interpreter`` tool. There can be a maximum of 20 files\n    associated with the tool.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    attached to this assistant. There can be a maximum of 1 vector store attached to\n    the assistant.\n    ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n    see all of your available models, or see our\n    [Model overview](https://platform.openai.com/docs/models/overview) for\n    descriptions of them.\n    ",
      "https://platform.openai.com/docs/models/gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\assistant.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/models/list) API to\n    see all of your available models, or see our\n    [Model overview](https://platform.openai.com/docs/models/overview) for\n    descriptions of them.\n    ",
      "https://platform.openai.com/docs/models/gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/files) IDs made\n    available to the `code_interpreter` tool. There can be a maximum of 20 files\n    associated with the tool.\n    ",
      "https://platform.openai.com/docs/api-reference/files) IDs to\n    add to the vector store. There can be a maximum of 10000 files in a vector\n    store.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    attached to this assistant. There can be a maximum of 1 vector store attached to\n    the assistant.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    with file_ids and attach it to this assistant. There can be a maximum of 1\n    vector store attached to the assistant.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\assistant_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/messages).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    ",
      "https://platform.openai.com/docs/api-reference/threads).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\assistant_stream_event.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/models/list) API to\n    see all of your available models, or see our\n    [Model overview](https://platform.openai.com/docs/models/overview) for\n    descriptions of them.\n    ",
      "https://platform.openai.com/docs/models/gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/files) IDs made available\n    to the `code_interpreter` tool. There can be a maximum of 20 files associated\n    with the tool.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    attached to this assistant. There can be a maximum of 1 vector store attached to\n    the assistant.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\assistant_update_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/assistants/tools/file-search/number-of-chunks-returned)\n    for more information.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\file_search_tool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/assistants/tools/file-search/number-of-chunks-returned)\n    for more information.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\file_search_tool_param.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) IDs made\n    available to the `code_interpreter` tool. There can be a maximum of 20 files\n    associated with the tool.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    attached to this thread. There can be a maximum of 1 vector store attached to\n    the thread.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\thread.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n    execute this run.\n    ",
      "https://platform.openai.com/docs/api-reference/models) to\n    be used to execute this run. If a value is provided here, it will override the\n    model associated with the assistant. If not, the model associated with the\n    assistant will be used.\n    ",
      "https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n    during tool use.\n    ",
      "https://platform.openai.com/docs/models/gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/files) IDs made\n    available to the `code_interpreter` tool. There can be a maximum of 20 files\n    associated with the tool.\n    ",
      "https://platform.openai.com/docs/api-reference/files) IDs to\n    add to the vector store. There can be a maximum of 10000 files in a vector\n    store.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    attached to this thread. There can be a maximum of 1 vector store attached to\n    the thread.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    with file_ids and attach it to this thread. There can be a maximum of 1 vector\n    store attached to the thread.\n    ",
      "https://platform.openai.com/docs/api-reference/messages) to\n    start the thread with.\n    ",
      "https://platform.openai.com/docs/api-reference/files) IDs made\n    available to the `code_interpreter` tool. There can be a maximum of 20 files\n    associated with the tool.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    attached to this assistant. There can be a maximum of 1 vector store attached to\n    the assistant.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\thread_create_and_run_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/messages) to\n    start the thread with.\n    ",
      "https://platform.openai.com/docs/api-reference/files) IDs made\n    available to the `code_interpreter` tool. There can be a maximum of 20 files\n    associated with the tool.\n    ",
      "https://platform.openai.com/docs/api-reference/files) IDs to\n    add to the vector store. There can be a maximum of 10000 files in a vector\n    store.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    attached to this thread. There can be a maximum of 1 vector store attached to\n    the thread.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    with file_ids and attach it to this thread. There can be a maximum of 1 vector\n    store attached to the thread.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\thread_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) IDs made\n    available to the `code_interpreter` tool. There can be a maximum of 20 files\n    associated with the tool.\n    ",
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    attached to this thread. There can be a maximum of 1 vector store attached to\n    the thread.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\thread_update_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) IDs that\n    the vector store should use. Useful for tools like `file_search` that can access\n    files.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\vector_store_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\chat\\chat_completion_content_part_image_param.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n    ",
      "https://platform.openai.com/docs/models/model-endpoint-compatibility)\n    table for details on which models work with the Chat API.\n    ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n    ",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n    for counting tokens.\n    ",
      "https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n    during tool use.\n    ",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n    ",
      "https://platform.openai.com/docs/models/gpt-4o),\n    [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n    all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n    ",
      "https://platform.openai.com/docs/guides/function-calling) for\n    examples, and the\n    [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n    documentation about the format.\n\n    Omitting `parameters` defines a function with an empty parameter list.\n    ",
      "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n    as they become available, with the stream terminated by a `data: [DONE]`\n    message.\n    [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n    ",
      "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n    as they become available, with the stream terminated by a `data: [DONE]`\n    message.\n    [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\chat\\completion_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/fine-tuning)\n    for more details.\n    ",
      "https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n    ",
      "https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n    ",
      "https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\fine_tuning\\fine_tuning_job.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/fine-tuning/which-models-can-be-fine-tuned).\n    ",
      "https://platform.openai.com/docs/api-reference/files/create)\n    for how to upload a file.\n\n    Your dataset must be formatted as a JSONL file. Additionally, you must upload\n    your file with the purpose `fine-tune`.\n\n    The contents of the file should differ depending on if the model uses the\n    [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n    [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n    format.\n\n    See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n    for more details.\n    ",
      "https://platform.openai.com/docs/guides/fine-tuning)\n    for more details.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\fine_tuning\\job_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/function-calling) for\n    examples, and the\n    [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n    documentation about the format.\n\n    Omitting `parameters` defines a function with an empty parameter list.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\shared\\function_definition.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/structured-outputs).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\shared\\response_format_json_schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/function-calling) for\n    examples, and the\n    [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n    documentation about the format.\n\n    Omitting `parameters` defines a function with an empty parameter list.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\shared_params\\function_definition.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/structured-outputs).\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\shared_params\\response_format_json_schema.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) ID of the image\n    in the message content. Set `purpose="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\image_file.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) ID of the image\n    in the message content. Set `purpose="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\image_file_delta.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) ID of the image\n    in the message content. Set `purpose="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\image_file_param.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/assistants) that\n    authored this message.\n    ",
      "https://platform.openai.com/docs/api-reference/runs)\n    associated with the creation of this message. Value is `null` when messages are\n    created manually using the create message or create thread endpoints.\n    ",
      "https://platform.openai.com/docs/api-reference/threads) ID that\n    this message belongs to.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\message.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n    endpoint.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\required_action_function_tool_call.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/assistants) used for\n    execution of this run.\n    ",
      "https://platform.openai.com/docs/api-reference/assistants) used for\n    this run.\n    ",
      "https://platform.openai.com/docs/api-reference/assistants) used for\n    this run.\n    ",
      "https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n    during tool use.\n    ",
      "https://platform.openai.com/docs/models/gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/threads)\n    that was executed on as a part of this run.\n    ",
      "https://platform.openai.com/docs/api-reference/assistants) used for\n    this run.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\run.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n    execute this run.\n    ",
      "https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n    of the assistant. This is useful for modifying the behavior on a per-run basis.\n    ",
      "https://platform.openai.com/docs/api-reference/models) to\n    be used to execute this run. If a value is provided here, it will override the\n    model associated with the assistant. If not, the model associated with the\n    assistant will be used.\n    ",
      "https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n    during tool use.\n    ",
      "https://platform.openai.com/docs/models/gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\run_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) IDs that\n    the vector store should use. Useful for tools like `file_search` that can access\n    files.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\vector_stores\\file_batch_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) ID that the\n    vector store should use. Useful for tools like `file_search` that can access\n    files.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\vector_stores\\file_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    that the [File](https://platform.openai.com/docs/api-reference/files) is\n    attached to.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\vector_stores\\vector_store_file.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/vector-stores/object)\n    that the [File](https://platform.openai.com/docs/api-reference/files) is\n    attached to.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\vector_stores\\vector_store_file_batch.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) ID of the\n    image.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\runs\\code_interpreter_output_image.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) ID of the\n    image.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\runs\\code_interpreter_tool_call.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n    yet.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\runs\\function_tool_call.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n    yet.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\runs\\function_tool_call_delta.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/assistants)\n    associated with the run step.\n    ",
      "https://platform.openai.com/docs/api-reference/runs) that\n    this run step is a part of.\n    ",
      "https://platform.openai.com/docs/api-reference/threads)\n    that was run.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\types\\beta\\threads\\runs\\run_step.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/models/tts):\n              `tts-1` or `tts-1-hd`\n\n          voice: The voice to use when generating the audio. Supported voices are `alloy`,\n              `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are\n              available in the\n              [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech/voice-options).\n\n          response_format: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`,\n              `wav`, and `pcm`.\n\n          speed: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is\n              the default.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/models/tts):\n              `tts-1` or `tts-1-hd`\n\n          voice: The voice to use when generating the audio. Supported voices are `alloy`,\n              `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are\n              available in the\n              [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech/voice-options).\n\n          response_format: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`,\n              `wav`, and `pcm`.\n\n          speed: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is\n              the default.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\audio\\speech.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n              improve accuracy and latency.\n\n          prompt: An optional text to guide the model",
      "https://platform.openai.com/docs/guides/speech-to-text/prompting)\n              should match the audio language.\n\n          response_format: The format of the transcript output, in one of these options: `json`, `text`,\n              `srt`, `verbose_json`, or `vtt`.\n\n          temperature: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          timestamp_granularities: The timestamp granularities to populate for this transcription.\n              `response_format` must be set `verbose_json` to use timestamp granularities.\n              Either or both of these options are supported: `word`, or `segment`. Note: There\n              is no additional latency for segment timestamps, but generating word timestamps\n              incurs additional latency.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n              improve accuracy and latency.\n\n          prompt: An optional text to guide the model",
      "https://platform.openai.com/docs/guides/speech-to-text/prompting)\n              should match the audio language.\n\n          response_format: The format of the transcript output, in one of these options: `json`, `text`,\n              `srt`, `verbose_json`, or `vtt`.\n\n          temperature: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          timestamp_granularities: The timestamp granularities to populate for this transcription.\n              `response_format` must be set `verbose_json` to use timestamp granularities.\n              Either or both of these options are supported: `word`, or `segment`. Note: There\n              is no additional latency for segment timestamps, but generating word timestamps\n              incurs additional latency.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\audio\\transcriptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/speech-to-text/prompting)\n              should be in English.\n\n          response_format: The format of the transcript output, in one of these options: `json`, `text`,\n              `srt`, `verbose_json`, or `vtt`.\n\n          temperature: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/speech-to-text/prompting)\n              should be in English.\n\n          response_format: The format of the transcript output, in one of these options: `json`, `text`,\n              `srt`, `verbose_json`, or `vtt`.\n\n          temperature: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\audio\\translations.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          description: The description of the assistant. The maximum length is 512 characters.\n\n          instructions: The system instructions that the assistant uses. The maximum length is 256,000\n              characters.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          name: The name of the assistant. The maximum length is 256 characters.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          name: The name of the assistant. The maximum length is 256 characters.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          description: The description of the assistant. The maximum length is 512 characters.\n\n          instructions: The system instructions that the assistant uses. The maximum length is 256,000\n              characters.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          name: The name of the assistant. The maximum length is 256 characters.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models/overview) for\n              descriptions of them.\n\n          name: The name of the assistant. The maximum length is 256 characters.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\beta\\assistants.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n\n          model: ID of the model to use. See the\n              [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n              table for details on which models work with the Chat API.\n\n          frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n              existing frequency in the text so far, decreasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          function_call: Deprecated in favor of `tool_choice`.\n\n              Controls which (if any) function is called by the model. `none` means the model\n              will not call a function and instead generates a message. `auto` means the model\n              can pick between generating a message or calling a function. Specifying a\n              particular function via `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many chat completion choices to generate for each input message. Note that\n              you will be charged based on the number of generated tokens across all of the\n              choices. Keep `n` as `1` to minimize costs.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          response_format: An object specifying the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n              all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          stream_options: Options for streaming response. Only set this when you set `stream: true`.\n\n          temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n              make the output more random, while lower values like 0.2 will make it more\n              focused and deterministic.\n\n              We generally recommend altering this or `top_p` but not both.\n\n          tool_choice: Controls which (if any) tool is called by the model. `none` means the model will\n              not call any tool and instead generates a message. `auto` means the model can\n              pick between generating a message or calling one or more tools. `required` means\n              the model must call one or more tools. Specifying a particular tool via\n              `{",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n\n          model: ID of the model to use. See the\n              [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n              table for details on which models work with the Chat API.\n\n          stream: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n              sent as data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n              existing frequency in the text so far, decreasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          function_call: Deprecated in favor of `tool_choice`.\n\n              Controls which (if any) function is called by the model. `none` means the model\n              will not call a function and instead generates a message. `auto` means the model\n              can pick between generating a message or calling a function. Specifying a\n              particular function via `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many chat completion choices to generate for each input message. Note that\n              you will be charged based on the number of generated tokens across all of the\n              choices. Keep `n` as `1` to minimize costs.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          response_format: An object specifying the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n              all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n\n          model: ID of the model to use. See the\n              [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n              table for details on which models work with the Chat API.\n\n          stream: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n              sent as data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n              existing frequency in the text so far, decreasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          function_call: Deprecated in favor of `tool_choice`.\n\n              Controls which (if any) function is called by the model. `none` means the model\n              will not call a function and instead generates a message. `auto` means the model\n              can pick between generating a message or calling a function. Specifying a\n              particular function via `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many chat completion choices to generate for each input message. Note that\n              you will be charged based on the number of generated tokens across all of the\n              choices. Keep `n` as `1` to minimize costs.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          response_format: An object specifying the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n              all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n\n          model: ID of the model to use. See the\n              [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n              table for details on which models work with the Chat API.\n\n          frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n              existing frequency in the text so far, decreasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          function_call: Deprecated in favor of `tool_choice`.\n\n              Controls which (if any) function is called by the model. `none` means the model\n              will not call a function and instead generates a message. `auto` means the model\n              can pick between generating a message or calling a function. Specifying a\n              particular function via `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many chat completion choices to generate for each input message. Note that\n              you will be charged based on the number of generated tokens across all of the\n              choices. Keep `n` as `1` to minimize costs.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          response_format: An object specifying the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n              all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          stream_options: Options for streaming response. Only set this when you set `stream: true`.\n\n          temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n              make the output more random, while lower values like 0.2 will make it more\n              focused and deterministic.\n\n              We generally recommend altering this or `top_p` but not both.\n\n          tool_choice: Controls which (if any) tool is called by the model. `none` means the model will\n              not call any tool and instead generates a message. `auto` means the model can\n              pick between generating a message or calling one or more tools. `required` means\n              the model must call one or more tools. Specifying a particular tool via\n              `{",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n\n          model: ID of the model to use. See the\n              [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n              table for details on which models work with the Chat API.\n\n          stream: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n              sent as data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n              existing frequency in the text so far, decreasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          function_call: Deprecated in favor of `tool_choice`.\n\n              Controls which (if any) function is called by the model. `none` means the model\n              will not call a function and instead generates a message. `auto` means the model\n              can pick between generating a message or calling a function. Specifying a\n              particular function via `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many chat completion choices to generate for each input message. Note that\n              you will be charged based on the number of generated tokens across all of the\n              choices. Keep `n` as `1` to minimize costs.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          response_format: An object specifying the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n              all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n\n          model: ID of the model to use. See the\n              [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n              table for details on which models work with the Chat API.\n\n          stream: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n              sent as data-only\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n              as they become available, with the stream terminated by a `data: [DONE]`\n              message.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n          frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n              existing frequency in the text so far, decreasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          function_call: Deprecated in favor of `tool_choice`.\n\n              Controls which (if any) function is called by the model. `none` means the model\n              will not call a function and instead generates a message. `auto` means the model\n              can pick between generating a message or calling a function. Specifying a\n              particular function via `{",
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens.\n\n          n: How many chat completion choices to generate for each input message. Note that\n              you will be charged based on the number of generated tokens across all of the\n              choices. Keep `n` as `1` to minimize costs.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n              whether they appear in the text so far, increasing the model",
      "https://platform.openai.com/docs/guides/text-generation/parameter-details)\n\n          response_format: An object specifying the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n              all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\chat\\completions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n        [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n        A Part represents a chunk of bytes from the file you are trying to upload.\n\n        Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n        maximum of 8 GB.\n\n        It is possible to add multiple Parts in parallel. You can decide the intended\n        order of the Parts when you\n        [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n\n        Args:\n          data: The chunk of bytes for this Part.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n        [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n        A Part represents a chunk of bytes from the file you are trying to upload.\n\n        Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n        maximum of 8 GB.\n\n        It is possible to add multiple Parts in parallel. You can decide the intended\n        order of the Parts when you\n        [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n\n        Args:\n          data: The chunk of bytes for this Part.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\uploads\\parts.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/uploads/object) object\n        that you can add\n        [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n        Currently, an Upload can accept at most 8 GB in total and expires after an hour\n        after you create it.\n\n        Once you complete the Upload, we will create a\n        [File](https://platform.openai.com/docs/api-reference/files/object) object that\n        contains all the parts you uploaded. This File is usable in the rest of our\n        platform as a regular File object.\n\n        For certain `purpose`s, the correct `mime_type` must be specified. Please refer\n        to documentation for the supported MIME types for your use case:\n\n        - [Assistants](https://platform.openai.com/docs/assistants/tools/file-search/supported-files)\n\n        For guidance on the proper filename extensions for each purpose, please follow\n        the documentation on\n        [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n\n        Args:\n          bytes: The number of bytes in the file you are uploading.\n\n          filename: The name of the file to upload.\n\n          mime_type: The MIME type of the file.\n\n              This must fall within the supported MIME types for your file purpose. See the\n              supported MIME types for assistants and vision.\n\n          purpose: The intended purpose of the uploaded file.\n\n              See the\n              [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/uploads/object).\n\n        Within the returned Upload object, there is a nested\n        [File](https://platform.openai.com/docs/api-reference/files/object) object that\n        is ready to use in the rest of the platform.\n\n        You can specify the order of the Parts by passing in an ordered list of the Part\n        IDs.\n\n        The number of bytes uploaded upon completion must match the number of bytes\n        initially specified when creating the Upload object. No Parts may be added after\n        an Upload is completed.\n\n        Args:\n          part_ids: The ordered list of Part IDs.\n\n          md5: The optional md5 checksum for the file contents to verify if the bytes uploaded\n              matches what you expect.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/uploads/object) object\n        that you can add\n        [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n        Currently, an Upload can accept at most 8 GB in total and expires after an hour\n        after you create it.\n\n        Once you complete the Upload, we will create a\n        [File](https://platform.openai.com/docs/api-reference/files/object) object that\n        contains all the parts you uploaded. This File is usable in the rest of our\n        platform as a regular File object.\n\n        For certain `purpose`s, the correct `mime_type` must be specified. Please refer\n        to documentation for the supported MIME types for your use case:\n\n        - [Assistants](https://platform.openai.com/docs/assistants/tools/file-search/supported-files)\n\n        For guidance on the proper filename extensions for each purpose, please follow\n        the documentation on\n        [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n\n        Args:\n          bytes: The number of bytes in the file you are uploading.\n\n          filename: The name of the file to upload.\n\n          mime_type: The MIME type of the file.\n\n              This must fall within the supported MIME types for your file purpose. See the\n              supported MIME types for assistants and vision.\n\n          purpose: The intended purpose of the uploaded file.\n\n              See the\n              [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/uploads/object).\n\n        Within the returned Upload object, there is a nested\n        [File](https://platform.openai.com/docs/api-reference/files/object) object that\n        is ready to use in the rest of the platform.\n\n        You can specify the order of the Parts by passing in an ordered list of the Part\n        IDs.\n\n        The number of bytes uploaded upon completion must match the number of bytes\n        initially specified when creating the Upload object. No Parts may be added after\n        an Upload is completed.\n\n        Args:\n          part_ids: The ordered list of Part IDs.\n\n          md5: The optional md5 checksum for the file contents to verify if the bytes uploaded\n              matches what you expect.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\uploads\\uploads.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/guides/fine-tuning)\n\n        Args:\n          model: The name of the model to fine-tune. You can select one of the\n              [supported models](https://platform.openai.com/docs/guides/fine-tuning/which-models-can-be-fine-tuned).\n\n          training_file: The ID of an uploaded file that contains training data.\n\n              See [upload file](https://platform.openai.com/docs/api-reference/files/create)\n              for how to upload a file.\n\n              Your dataset must be formatted as a JSONL file. Additionally, you must upload\n              your file with the purpose `fine-tune`.\n\n              The contents of the file should differ depending on if the model uses the\n              [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n              [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n              format.\n\n              See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n              for more details.\n\n          hyperparameters: The hyperparameters used for the fine-tuning job.\n\n          integrations: A list of integrations to enable for your fine-tuning job.\n\n          seed: The seed controls the reproducibility of the job. Passing in the same seed and\n              job parameters should produce the same results, but may differ in rare cases. If\n              a seed is not specified, one will be generated for you.\n\n          suffix: A string of up to 18 characters that will be added to your fine-tuned model\n              name.\n\n              For example, a `suffix` of ",
      "https://platform.openai.com/docs/guides/fine-tuning)\n              for more details.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/fine-tuning)\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/fine-tuning)\n\n        Args:\n          model: The name of the model to fine-tune. You can select one of the\n              [supported models](https://platform.openai.com/docs/guides/fine-tuning/which-models-can-be-fine-tuned).\n\n          training_file: The ID of an uploaded file that contains training data.\n\n              See [upload file](https://platform.openai.com/docs/api-reference/files/create)\n              for how to upload a file.\n\n              Your dataset must be formatted as a JSONL file. Additionally, you must upload\n              your file with the purpose `fine-tune`.\n\n              The contents of the file should differ depending on if the model uses the\n              [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n              [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n              format.\n\n              See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n              for more details.\n\n          hyperparameters: The hyperparameters used for the fine-tuning job.\n\n          integrations: A list of integrations to enable for your fine-tuning job.\n\n          seed: The seed controls the reproducibility of the job. Passing in the same seed and\n              job parameters should produce the same results, but may differ in rare cases. If\n              a seed is not specified, one will be generated for you.\n\n          suffix: A string of up to 18 characters that will be added to your fine-tuned model\n              name.\n\n              For example, a `suffix` of ",
      "https://platform.openai.com/docs/guides/fine-tuning)\n              for more details.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/guides/fine-tuning)\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\fine_tuning\\jobs\\jobs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/openai/openai-python/blob/main/helpers.md#chat-completions-events).\n\n        When the context manager exits, the response will be closed, however the `stream` instance is still available outside\n        the context manager.\n        ",
      "https://github.com/openai/openai-python/blob/main/helpers.md#chat-completions-events).\n\n        When the context manager exits, the response will be closed, however the `stream` instance is still available outside\n        the context manager.\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\beta\\chat\\completions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/messages) to\n              start the thread with.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          tool_resources: A set of resources that are made available to the assistant",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          instructions: Override the default system message of the assistant. This is useful for\n              modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          stream: If `true`, returns a stream of events that happen during the Run as server-sent\n              events, terminating when the Run enters a terminal state with a `data: [DONE]`\n              message.\n\n          instructions: Override the default system message of the assistant. This is useful for\n              modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          stream: If `true`, returns a stream of events that happen during the Run as server-sent\n              events, terminating when the Run enters a terminal state with a `data: [DONE]`\n              message.\n\n          instructions: Override the default system message of the assistant. This is useful for\n              modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/api-reference/messages) to\n              start the thread with.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          tool_resources: A set of resources that are made available to the assistant",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          instructions: Override the default system message of the assistant. This is useful for\n              modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          stream: If `true`, returns a stream of events that happen during the Run as server-sent\n              events, terminating when the Run enters a terminal state with a `data: [DONE]`\n              message.\n\n          instructions: Override the default system message of the assistant. This is useful for\n              modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          stream: If `true`, returns a stream of events that happen during the Run as server-sent\n              events, terminating when the Run enters a terminal state with a `data: [DONE]`\n              message.\n\n          instructions: Override the default system message of the assistant. This is useful for\n              modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\beta\\threads\\threads.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) to a\n        [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n\n        Args:\n          file_id: A [File](https://platform.openai.com/docs/api-reference/files) ID that the\n              vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          chunking_strategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n              strategy.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/files/delete)\n        endpoint.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/files) to a\n        [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n\n        Args:\n          file_id: A [File](https://platform.openai.com/docs/api-reference/files) ID that the\n              vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          chunking_strategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n              strategy.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/files/delete)\n        endpoint.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\beta\\vector_stores\\files.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) IDs that\n              the vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          chunking_strategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n              strategy.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/files) IDs that\n              the vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          chunking_strategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n              strategy.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\beta\\vector_stores\\file_batches.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/files) IDs that\n              the vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          name: The name of the vector store.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://platform.openai.com/docs/api-reference/files) IDs that\n              the vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          name: The name of the vector store.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\beta\\vector_stores\\vector_stores.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          additional_instructions: Appends additional instructions at the end of the instructions for the run. This\n              is useful for modifying the behavior on a per-run basis without overriding other\n              instructions.\n\n          additional_messages: Adds additional messages to the thread before creating the run.\n\n          instructions: Overrides the\n              [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n              of the assistant. This is useful for modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          stream: If `true`, returns a stream of events that happen during the Run as server-sent\n              events, terminating when the Run enters a terminal state with a `data: [DONE]`\n              message.\n\n          additional_instructions: Appends additional instructions at the end of the instructions for the run. This\n              is useful for modifying the behavior on a per-run basis without overriding other\n              instructions.\n\n          additional_messages: Adds additional messages to the thread before creating the run.\n\n          instructions: Overrides the\n              [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n              of the assistant. This is useful for modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          stream: If `true`, returns a stream of events that happen during the Run as server-sent\n              events, terminating when the Run enters a terminal state with a `data: [DONE]`\n              message.\n\n          additional_instructions: Appends additional instructions at the end of the instructions for the run. This\n              is useful for modifying the behavior on a per-run basis without overriding other\n              instructions.\n\n          additional_messages: Adds additional messages to the thread before creating the run.\n\n          instructions: Overrides the\n              [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n              of the assistant. This is useful for modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          additional_instructions: Appends additional instructions at the end of the instructions for the run. This\n              is useful for modifying the behavior on a per-run basis without overriding other\n              instructions.\n\n          additional_messages: Adds additional messages to the thread before creating the run.\n\n          instructions: Overrides the\n              [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n              of the assistant. This is useful for modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          stream: If `true`, returns a stream of events that happen during the Run as server-sent\n              events, terminating when the Run enters a terminal state with a `data: [DONE]`\n              message.\n\n          additional_instructions: Appends additional instructions at the end of the instructions for the run. This\n              is useful for modifying the behavior on a per-run basis without overriding other\n              instructions.\n\n          additional_messages: Adds additional messages to the thread before creating the run.\n\n          instructions: Overrides the\n              [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n              of the assistant. This is useful for modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/api-reference/assistants) to use to\n              execute this run.\n\n          stream: If `true`, returns a stream of events that happen during the Run as server-sent\n              events, terminating when the Run enters a terminal state with a `data: [DONE]`\n              message.\n\n          additional_instructions: Appends additional instructions at the end of the instructions for the run. This\n              is useful for modifying the behavior on a per-run basis without overriding other\n              instructions.\n\n          additional_messages: Adds additional messages to the thread before creating the run.\n\n          instructions: Overrides the\n              [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n              of the assistant. This is useful for modifying the behavior on a per-run basis.\n\n          max_completion_tokens: The maximum number of completion tokens that may be used over the course of the\n              run. The run will make a best effort to use only the number of completion tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              completion tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run.\n              The run will make a best effort to use only the number of prompt tokens\n              specified, across multiple turns of the run. If the run exceeds the number of\n              prompt tokens specified, the run will end with status `incomplete`. See\n              `incomplete_details` for more info.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format. Keys\n              can be a maximum of 64 characters long and values can be a maxium of 512\n              characters long.\n\n          model: The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n              be used to execute this run. If a value is provided here, it will override the\n              model associated with the assistant. If not, the model associated with the\n              assistant will be used.\n\n          parallel_tool_calls: Whether to enable\n              [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)\n              during tool use.\n\n          response_format: Specifies the format that the model must output. Compatible with\n              [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n              [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n              and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/guides/structured-outputs).\n\n              Setting to `{ ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        ",
      "https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\resources\\beta\\threads\\runs\\runs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/streaming\n    ",
      "https://platform.openai.com/docs/api-reference/streaming\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\lib\\streaming\\chat\\_completions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://platform.openai.com/docs/api-reference/ for purposes)"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\cli\\_api\\files.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://api.keygen.sh/v1/accounts/{KEYGEN_ACCOUNT}/artifacts/{file_name}"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\openai\\cli\\_tools\\migrate.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\autohandler.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\babelplugin.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://pypi.org/project/Babel/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\babelplugin.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\beaker_cache.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nfrom io import BytesIO\nfrom io import StringIO\nimport re\n\nfrom mako import lexer\nfrom mako import parsetree\n\n\nclass MessageExtractor:\n    use_bytes = True\n\n    def process_file(self, fileobj):\n        template_node = lexer.Lexer(\n            fileobj.read(), input_encoding=self.config["
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\extract.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nimport contextlib\nimport io\n\nfrom lingua.extractors import Extractor\nfrom lingua.extractors import get_extractor\nfrom lingua.extractors import Message\n\nfrom mako.ext.extract import MessageExtractor\n\n\nclass LinguaMakoExtractor(Extractor, MessageExtractor):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\linguaplugin.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\preprocessors.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nfrom pygments import highlight\nfrom pygments.formatters.html import HtmlFormatter\nfrom pygments.lexer import bygroups\nfrom pygments.lexer import DelegatingLexer\nfrom pygments.lexer import include\nfrom pygments.lexer import RegexLexer\nfrom pygments.lexer import using\nfrom pygments.lexers.agile import Python3Lexer\nfrom pygments.lexers.agile import PythonLexer\nfrom pygments.lexers.web import CssLexer\nfrom pygments.lexers.web import HtmlLexer\nfrom pygments.lexers.web import JavascriptLexer\nfrom pygments.lexers.web import XmlLexer\nfrom pygments.token import Comment\nfrom pygments.token import Keyword\nfrom pygments.token import Name\nfrom pygments.token import Operator\nfrom pygments.token import Other\nfrom pygments.token import String\nfrom pygments.token import Text\n\n\nclass MakoLexer(RegexLexer):\n    name = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\pygmentplugin.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\nfrom mako import compat\nfrom mako.lookup import TemplateLookup\nfrom mako.template import Template\n\n\nclass TGPlugin:\n\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\ext\\turbogears.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-greenlet/greenlet/issues/242\n    del ec\n\n    # assert outside the block so it works for AssertionError too !\n    assert success, "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\mako\\testing\\assertions.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.2.3.4",
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_transports\\asgi.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "1.2.3.4",
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpx\\_transports\\wsgi.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com:80"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com:443",
      "https://example.com:443"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7540#section-6.9\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\http2.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\http_proxy.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:8080/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\http_proxy.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1",
      "0.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\http_proxy.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\socks_proxy.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:8080/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\socks_proxy.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1",
      "0.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_async\\socks_proxy.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-trio/trio/issues/542\n            return self._stream._ssl_object  # type: ignore[attr-defined]\n        if info == ",
      "https://trio.readthedocs.io/en/stable/reference-io.html#trio.SocketStream\n        if socket_options is None:\n            socket_options = []  # pragma: no cover\n        timeout_or_inf = float("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_backends\\trio.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.com:80"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\connection_pool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com:443",
      "https://example.com:443"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\connection_pool.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\connection_pool.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://tools.ietf.org/html/rfc7540#section-6.9\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\http2.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\http_proxy.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:8080/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\http_proxy.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1",
      "0.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\http_proxy.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:8080"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\socks_proxy.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:8080/"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\socks_proxy.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1",
      "0.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\httpcore\\_sync\\socks_proxy.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://{}:{}/some-path"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\tests\\test_against_stdlib_http.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\tests\\test_against_stdlib_http.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-hyper/h11/issues/72\n\n    r = Response(status_code=HTTPStatus.OK, headers=[], http_version="
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\tests\\test_events.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-hyper/wsproto/pull/54#issuecomment-377709478\n        for name, value in getattr(got, ",
      "https://github.com/python-hyper/h11/issues/57\ndef test_allow_some_garbage_in_cookies() -> None:\n    tr(\n        READERS[CLIENT, IDLE],\n        b"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\h11\\tests\\test_io.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:4010"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_utils\\_logs.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:4010/foo/bar "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_utils\\_logs.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_utils\\_logs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tiangolo/asyncer\ndef asyncify(\n    function: Callable[T_ParamSpec, T_Retval],\n    *,\n    cancellable: bool = False,\n    limiter: anyio.CapacityLimiter | None = None,\n) -> Callable[T_ParamSpec, Awaitable[T_Retval]]:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_utils\\_sync.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/Rapptz/RoboDanny\ndef human_join(seq: Sequence[str], *, delim: str = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\_utils\\_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n    improve accuracy and latency.\n    ",
      "https://en.wikipedia.org/wiki/Log_probability) to\n    automatically increase the temperature until certain thresholds are hit.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\types\\audio\\transcription_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Log_probability) to\n    automatically increase the temperature until certain thresholds are hit.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\types\\audio\\translation_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n              improve accuracy and latency.\n\n          prompt: An optional text to guide the model",
      "https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          timestamp_granularities: The timestamp granularities to populate for this transcription.\n              `response_format` must be set `verbose_json` to use timestamp granularities.\n              Either or both of these options are supported: `word`, or `segment`. Note: There\n              is no additional latency for segment timestamps, but generating word timestamps\n              incurs additional latency.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n              improve accuracy and latency.\n\n          prompt: An optional text to guide the model",
      "https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          timestamp_granularities: The timestamp granularities to populate for this transcription.\n              `response_format` must be set `verbose_json` to use timestamp granularities.\n              Either or both of these options are supported: `word`, or `segment`. Note: There\n              is no additional latency for segment timestamps, but generating word timestamps\n              incurs additional latency.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\resources\\audio\\transcriptions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\groq\\resources\\audio\\translations.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-greenlet/greenlet/issues/245\n        # Before the fix, this crashed pretty reliably on\n        # Python 3.10, at least on macOS; but much less reliably on other\n        # interpreters (memory layout must have changed).\n        # The threaded test crashed more reliably on more interpreters.\n        from greenlet import getcurrent\n        from greenlet import GreenletExit\n\n        class Greenlet(RawGreenlet):\n            pass\n\n        initial_refs = sys.getrefcount(Greenlet)\n        # This has to be an instance variable because\n        # Python 2 raises a SyntaxError if we delete a local\n        # variable referenced in an inner scope.\n        self.glets = [] # pylint:disable=attribute-defined-outside-init\n\n        def greenlet_main():\n            try:\n                getcurrent().parent.switch()\n            except GreenletExit:\n                self.glets.append(getcurrent())\n\n        # Before the\n        for _ in range(10):\n            Greenlet(greenlet_main).switch()\n\n        del self.glets\n        self.assertEqual(sys.getrefcount(Greenlet), initial_refs)\n\n    @unittest.skipIf(\n        PY313 and RUNNING_ON_MANYLINUX,\n        ",
      "https://github.com/python-greenlet/greenlet/issues/245\n        from threading import Thread\n        from threading import Event\n\n        from greenlet import getcurrent\n\n        class MyGreenlet(RawGreenlet):\n            pass\n\n        glets = []\n        ref_cleared = Event()\n\n        def greenlet_main():\n            getcurrent().parent.switch()\n\n        def thread_main(greenlet_running_event):\n            mine = MyGreenlet(greenlet_main)\n            glets.append(mine)\n            # The greenlets being deleted must be active\n            mine.switch()\n            # Don",
      "https://github.com/python-greenlet/greenlet/issues/388\n        main = greenlet.getcurrent()\n\n        def outer():\n            inner(sys._getframe(0))\n\n        def inner(frame):\n            main.switch(frame)\n\n        gr = RawGreenlet(outer)\n        frame = gr.switch()\n\n        # Do something else to clobber the part of the C stack used by `gr`,\n        # so we can",
      "https://github.com/python-greenlet/greenlet/issues/218\n        # %s formatting on Python 2 was producing unicode, not str.\n\n        g_dead = RawGreenlet(lambda: None)\n        g_not_started = RawGreenlet(lambda: None)\n        g_cur = greenlet.getcurrent()\n\n        for g in g_dead, g_not_started, g_cur:\n\n            self.assertIsInstance(\n                "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/gevent/gevent/issues/1909\n\nThis test is fragile and relies on details of the CPython\nimplementation (like most of the rest of this package):\n\n    - We enter the trashcan and deferred deallocation after\n      ``_PyTrash_UNWIND_LEVEL`` calls. This constant, defined in\n      CPython"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet_trash.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-greenlet/greenlet/issues/251\n        # Killing a greenlet (probably not the main one)\n        # in one thread from another thread would\n        # result in leaking a list (the ts_delkey list).\n        # We no longer use lists to hold that stuff, though.\n\n        # For the test to be valid, even empty lists have to be tracked by the\n        # GC\n\n        assert gc.is_tracked([])\n        HasFinalizerTracksInstances.reset()\n        greenlet.getcurrent()\n        greenlets_before = self.count_objects(greenlet.greenlet, exact_kind=False)\n\n        background_glet_running = threading.Event()\n        background_glet_killed = threading.Event()\n        background_greenlets = []\n\n        # XXX: Switching this to a greenlet subclass that overrides\n        # run results in all callers failing the leaktest; that\n        # greenlet instance is leaked. There",
      "https://github.com/gevent/gevent/issues/1924\n        # and https://github.com/python-greenlet/greenlet/issues/328\n        self._only_test_some_versions()\n        def f():\n            return 1\n\n        ITER = 10000\n        def run_it():\n            for _ in range(ITER):\n                greenlet.greenlet(f).switch()\n\n        # Establish baseline\n        for _ in range(3):\n            run_it()\n\n        # uss: (Linux, macOS, Windows): aka "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\greenlet\\tests\\test_leaks.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://discuss.python.org/t/cpython-3-12-greenlet-and-tracing-profiling-how-to-not-crash-and-get-correct-results/33144/2\nDEBUG_BUILD_PY312 = (\n    PY312 and hasattr(sys, ",
      "https://github.com/python-greenlet/greenlet/issues/332\n        # Our logic in asserting that the tracefunction should\n        # gain a reference was incorrect if the same tracefunction was set\n        # twice.\n        tracer = GreenletTracer()\n        with tracer:\n            greenlet.settrace(tracer)\n\n\nclass PythonTracer(object):\n    oldtrace = None\n\n    def __init__(self):\n        self.actions = []\n\n    def __call__(self, frame, event, arg):\n        # Record the co_name so we have an idea what function we"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\greenlet\\tests\\test_tracing.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://devblogs.microsoft.com/oldnewthing/20110519-00/?p=10623\n        # and\n        # https://docs.microsoft.com/en-us/previous-versions/k089yyh0(v=vs.140)?redirectedfrom=MSDN\n        # and\n        # https://devblogs.microsoft.com/oldnewthing/20190108-00/?p=100655\n        expected_exit = (\n            -signal.SIGABRT,\n            # But beginning on Python 3.11, the faulthandler\n            # that prints the C backtraces sometimes segfaults after\n            # reporting the exception but before printing the stack.\n            # This has only been seen on linux/gcc.\n            -signal.SIGSEGV,\n        ) if not WIN else (\n            3,\n            0xc0000409,\n            0xc0000005,\n        )\n        return expected_exit\n\n    def get_process_uss(self):\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\greenlet\\tests\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://stackoverflow.com/questions/3041986/apt-command-line-interface-like-yes-no-input\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\charset_normalizer\\cli\\__main__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.python.org/3/library/codecs.html#codec-objects\n    ",
      "https://docs.python.org/3/library/codecs.html#codec-objects\n    ",
      "https://docs.python.org/3/library/codecs.html#codec-objects\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anyio\\streams\\text.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python/cpython/issues/108668). Trio does not have this\n            # issue because it works around the CPython bug.\n            logging.getLogger(__name__).exception(\n                "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anyio\\streams\\tls.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue37771\n        raise Exception(f",
      "https://github.com/python/typeshed/pull/5545\n                    self._raw_socket.sendmsg(\n                        [message], [(socket.SOL_SOCKET, socket.SCM_RIGHTS, fdarray)]\n                    )\n                    break\n                except BlockingIOError:\n                    await self._wait_until_writable(loop)\n                except OSError as exc:\n                    if self._closing:\n                        raise ClosedResourceError from None\n                    else:\n                        raise BrokenResourceError from exc\n\n\nclass TCPSocketListener(abc.SocketListener):\n    _accept_scope: CancelScope | None = None\n    _closed = False\n\n    def __init__(self, raw_socket: socket.socket):\n        self.__raw_socket = raw_socket\n        self._loop = cast(asyncio.BaseEventLoop, get_running_loop())\n        self._accept_guard = ResourceGuard(",
      "https://bugs.python.org/issue41317\n                    try:\n                        self._loop.remove_reader(self._raw_socket)\n                    except (ValueError, NotImplementedError):\n                        pass\n\n                    if self._closed:\n                        raise ClosedResourceError from None\n\n                    raise\n                finally:\n                    self._accept_scope = None\n\n        client_sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n        transport, protocol = await self._loop.connect_accepted_socket(\n            StreamProtocol, client_sock\n        )\n        return SocketStream(transport, protocol)\n\n    async def aclose(self) -> None:\n        if self._closed:\n            return\n\n        self._closed = True\n        if self._accept_scope:\n            # Workaround for https://bugs.python.org/issue41317\n            try:\n                self._loop.remove_reader(self._raw_socket)\n            except (ValueError, NotImplementedError):\n                pass\n\n            self._accept_scope.cancel()\n            await sleep(0)\n\n        self._raw_socket.close()\n\n\nclass UNIXSocketListener(abc.SocketListener):\n    def __init__(self, raw_socket: socket.socket):\n        self.__raw_socket = raw_socket\n        self._loop = get_running_loop()\n        self._accept_guard = ResourceGuard("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anyio\\_backends\\_asyncio.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/python-trio/trio-typing/pull/79\n        return self.__original.__exit__(exc_type, exc_val, exc_tb)\n\n    def cancel(self) -> None:\n        self.__original.cancel()\n\n    @property\n    def deadline(self) -> float:\n        return self.__original.deadline\n\n    @deadline.setter\n    def deadline(self, value: float) -> None:\n        self.__original.deadline = value\n\n    @property\n    def cancel_called(self) -> bool:\n        return self.__original.cancel_called\n\n    @property\n    def cancelled_caught(self) -> bool:\n        return self.__original.cancelled_caught\n\n    @property\n    def shield(self) -> bool:\n        return self.__original.shield\n\n    @shield.setter\n    def shield(self, value: bool) -> None:\n        self.__original.shield = value\n\n\n#\n# Task groups\n#\n\n\nclass TaskGroup(abc.TaskGroup):\n    def __init__(self) -> None:\n        self._active = False\n        self._nursery_manager = trio.open_nursery(strict_exception_groups=True)\n        self.cancel_scope = None  # type: ignore[assignment]\n\n    async def __aenter__(self) -> TaskGroup:\n        self._active = True\n        self._nursery = await self._nursery_manager.__aenter__()\n        self.cancel_scope = CancelScope(self._nursery.cancel_scope)\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> bool | None:\n        try:\n            return await self._nursery_manager.__aexit__(exc_type, exc_val, exc_tb)\n        except BaseExceptionGroup as exc:\n            if not exc.split(trio.Cancelled)[1]:\n                raise trio.Cancelled._create() from exc\n\n            raise\n        finally:\n            del exc_val, exc_tb\n            self._active = False\n\n    def start_soon(\n        self,\n        func: Callable[[Unpack[PosArgsT]], Awaitable[Any]],\n        *args: Unpack[PosArgsT],\n        name: object = None,\n    ) -> None:\n        if not self._active:\n            raise RuntimeError(\n                "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anyio\\_backends\\_trio.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bugs.python.org/issue29515\n\nAnyIPAddressFamily = Literal[\n    AddressFamily.AF_UNSPEC, AddressFamily.AF_INET, AddressFamily.AF_INET6\n]\nIPAddressFamily = Literal[AddressFamily.AF_INET, AddressFamily.AF_INET6]\n\n\n# tls_hostname given\n@overload\nasync def connect_tcp(\n    remote_host: IPAddressType,\n    remote_port: int,\n    *,\n    local_host: IPAddressType | None = ...,\n    ssl_context: ssl.SSLContext | None = ...,\n    tls_standard_compatible: bool = ...,\n    tls_hostname: str,\n    happy_eyeballs_delay: float = ...,\n) -> TLSStream: ...\n\n\n# ssl_context given\n@overload\nasync def connect_tcp(\n    remote_host: IPAddressType,\n    remote_port: int,\n    *,\n    local_host: IPAddressType | None = ...,\n    ssl_context: ssl.SSLContext,\n    tls_standard_compatible: bool = ...,\n    tls_hostname: str | None = ...,\n    happy_eyeballs_delay: float = ...,\n) -> TLSStream: ...\n\n\n# tls=True\n@overload\nasync def connect_tcp(\n    remote_host: IPAddressType,\n    remote_port: int,\n    *,\n    local_host: IPAddressType | None = ...,\n    tls: Literal[True],\n    ssl_context: ssl.SSLContext | None = ...,\n    tls_standard_compatible: bool = ...,\n    tls_hostname: str | None = ...,\n    happy_eyeballs_delay: float = ...,\n) -> TLSStream: ...\n\n\n# tls=False\n@overload\nasync def connect_tcp(\n    remote_host: IPAddressType,\n    remote_port: int,\n    *,\n    local_host: IPAddressType | None = ...,\n    tls: Literal[False],\n    ssl_context: ssl.SSLContext | None = ...,\n    tls_standard_compatible: bool = ...,\n    tls_hostname: str | None = ...,\n    happy_eyeballs_delay: float = ...,\n) -> SocketStream: ...\n\n\n# No TLS arguments\n@overload\nasync def connect_tcp(\n    remote_host: IPAddressType,\n    remote_port: int,\n    *,\n    local_host: IPAddressType | None = ...,\n    happy_eyeballs_delay: float = ...,\n) -> SocketStream: ...\n\n\nasync def connect_tcp(\n    remote_host: IPAddressType,\n    remote_port: int,\n    *,\n    local_host: IPAddressType | None = None,\n    tls: bool = False,\n    ssl_context: ssl.SSLContext | None = None,\n    tls_standard_compatible: bool = True,\n    tls_hostname: str | None = None,\n    happy_eyeballs_delay: float = 0.25,\n) -> SocketStream | TLSStream:\n    ",
      "https://github.com/python/mypy/issues/7057\n    connected_stream: SocketStream | None = None\n\n    async def try_connect(remote_host: str, event: Event) -> None:\n        nonlocal connected_stream\n        try:\n            stream = await asynclib.connect_tcp(remote_host, remote_port, local_address)\n        except OSError as exc:\n            oserrors.append(exc)\n            return\n        else:\n            if connected_stream is None:\n                connected_stream = stream\n                tg.cancel_scope.cancel()\n            else:\n                await stream.aclose()\n        finally:\n            event.set()\n\n    asynclib = get_async_backend()\n    local_address: IPSockAddrType | None = None\n    family = socket.AF_UNSPEC\n    if local_host:\n        gai_res = await getaddrinfo(str(local_host), None)\n        family, *_, local_address = gai_res[0]\n\n    target_host = str(remote_host)\n    try:\n        addr_obj = ip_address(remote_host)\n    except ValueError:\n        addr_obj = None\n\n    if addr_obj is not None:\n        if isinstance(addr_obj, IPv6Address):\n            target_addrs = [(socket.AF_INET6, addr_obj.compressed)]\n        else:\n            target_addrs = [(socket.AF_INET, addr_obj.compressed)]\n    else:\n        # getaddrinfo() will raise an exception if name resolution fails\n        gai_res = await getaddrinfo(\n            target_host, remote_port, family=family, type=socket.SOCK_STREAM\n        )\n\n        # Organize the list so that the first address is an IPv6 address (if available)\n        # and the second one is an IPv4 addresses. The rest can be in whatever order.\n        v6_found = v4_found = False\n        target_addrs = []\n        for af, *rest, sa in gai_res:\n            if af == socket.AF_INET6 and not v6_found:\n                v6_found = True\n                target_addrs.insert(0, (af, sa[0]))\n            elif af == socket.AF_INET and not v4_found and v6_found:\n                v4_found = True\n                target_addrs.insert(1, (af, sa[0]))\n            else:\n                target_addrs.append((af, sa[0]))\n\n    oserrors: list[OSError] = []\n    async with create_task_group() as tg:\n        for i, (af, addr) in enumerate(target_addrs):\n            event = Event()\n            tg.start_soon(try_connect, addr, event)\n            with move_on_after(happy_eyeballs_delay):\n                await event.wait()\n\n    if connected_stream is None:\n        cause = (\n            oserrors[0]\n            if len(oserrors) == 1\n            else ExceptionGroup(",
      "https://sourceware.org/bugzilla/show_bug.cgi?id=14969\n        sockaddr: tuple[str, int] | tuple[str, int, int, int]\n        for fam, kind, *_, sockaddr in sorted(set(gai_res)):\n            # Workaround for an uvloop bug where we don",
      "https://github.com/MagicStack/uvloop/issues/539\n            if sys.platform != ",
      "https://foss.heptapod.net/pypy/pypy/-/issues/3938)\n            host = host.split("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anyio\\_core\\_sockets.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "0.0.0.0",
      "0.0.0.0"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anyio\\_core\\_sockets.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://docs.anthropic.com/en/api/messages) going forward.\n\n        Future models and features will not be compatible with Text Completions. See our\n        [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages)\n        for guidance in migrating from Text Completions to Messages.\n\n        Args:\n          max_tokens_to_sample: The maximum number of tokens to generate before stopping.\n\n              Note that our models may stop _before_ reaching this maximum. This parameter\n              only specifies the absolute maximum number of tokens to generate.\n\n          model: The model that will complete your prompt.\\n\\nSee\n              [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          prompt: The prompt that you want Claude to complete.\n\n              For proper response generation you will need to format your prompt using\n              alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n              ```\n              ",
      "https://docs.anthropic.com/en/api/prompt-validation) and\n              our guide to\n              [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Sequences that will cause the model to stop generating.\n\n              Our models stop on `",
      "https://docs.anthropic.com/en/api/streaming) for details.\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/api/messages) going forward.\n\n        Future models and features will not be compatible with Text Completions. See our\n        [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages)\n        for guidance in migrating from Text Completions to Messages.\n\n        Args:\n          max_tokens_to_sample: The maximum number of tokens to generate before stopping.\n\n              Note that our models may stop _before_ reaching this maximum. This parameter\n              only specifies the absolute maximum number of tokens to generate.\n\n          model: The model that will complete your prompt.\\n\\nSee\n              [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          prompt: The prompt that you want Claude to complete.\n\n              For proper response generation you will need to format your prompt using\n              alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n              ```\n              ",
      "https://docs.anthropic.com/en/api/prompt-validation) and\n              our guide to\n              [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more\n              details.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/streaming) for details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Sequences that will cause the model to stop generating.\n\n              Our models stop on `",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/api/messages) going forward.\n\n        Future models and features will not be compatible with Text Completions. See our\n        [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages)\n        for guidance in migrating from Text Completions to Messages.\n\n        Args:\n          max_tokens_to_sample: The maximum number of tokens to generate before stopping.\n\n              Note that our models may stop _before_ reaching this maximum. This parameter\n              only specifies the absolute maximum number of tokens to generate.\n\n          model: The model that will complete your prompt.\\n\\nSee\n              [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          prompt: The prompt that you want Claude to complete.\n\n              For proper response generation you will need to format your prompt using\n              alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n              ```\n              ",
      "https://docs.anthropic.com/en/api/prompt-validation) and\n              our guide to\n              [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more\n              details.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/streaming) for details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Sequences that will cause the model to stop generating.\n\n              Our models stop on `",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://docs.anthropic.com/en/api/messages) going forward.\n\n        Future models and features will not be compatible with Text Completions. See our\n        [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages)\n        for guidance in migrating from Text Completions to Messages.\n\n        Args:\n          max_tokens_to_sample: The maximum number of tokens to generate before stopping.\n\n              Note that our models may stop _before_ reaching this maximum. This parameter\n              only specifies the absolute maximum number of tokens to generate.\n\n          model: The model that will complete your prompt.\\n\\nSee\n              [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          prompt: The prompt that you want Claude to complete.\n\n              For proper response generation you will need to format your prompt using\n              alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n              ```\n              ",
      "https://docs.anthropic.com/en/api/prompt-validation) and\n              our guide to\n              [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Sequences that will cause the model to stop generating.\n\n              Our models stop on `",
      "https://docs.anthropic.com/en/api/streaming) for details.\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/api/messages) going forward.\n\n        Future models and features will not be compatible with Text Completions. See our\n        [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages)\n        for guidance in migrating from Text Completions to Messages.\n\n        Args:\n          max_tokens_to_sample: The maximum number of tokens to generate before stopping.\n\n              Note that our models may stop _before_ reaching this maximum. This parameter\n              only specifies the absolute maximum number of tokens to generate.\n\n          model: The model that will complete your prompt.\\n\\nSee\n              [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          prompt: The prompt that you want Claude to complete.\n\n              For proper response generation you will need to format your prompt using\n              alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n              ```\n              ",
      "https://docs.anthropic.com/en/api/prompt-validation) and\n              our guide to\n              [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more\n              details.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/streaming) for details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Sequences that will cause the model to stop generating.\n\n              Our models stop on `",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/api/messages) going forward.\n\n        Future models and features will not be compatible with Text Completions. See our\n        [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages)\n        for guidance in migrating from Text Completions to Messages.\n\n        Args:\n          max_tokens_to_sample: The maximum number of tokens to generate before stopping.\n\n              Note that our models may stop _before_ reaching this maximum. This parameter\n              only specifies the absolute maximum number of tokens to generate.\n\n          model: The model that will complete your prompt.\\n\\nSee\n              [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          prompt: The prompt that you want Claude to complete.\n\n              For proper response generation you will need to format your prompt using\n              alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n              ```\n              ",
      "https://docs.anthropic.com/en/api/prompt-validation) and\n              our guide to\n              [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more\n              details.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/streaming) for details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Sequences that will cause the model to stop generating.\n\n              Our models stop on `",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\resources\\completions.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          system: System prompt.\n\n              A system prompt is a way of providing context and instructions to Claude, such\n              as specifying a particular goal or role. See our\n              [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.",
      "https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          system: System prompt.\n\n              A system prompt is a way of providing context and instructions to Claude, such\n              as specifying a particular goal or role. See our\n              [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.",
      "https://docs.anthropic.com/en/docs/resources/model-deprecations for more information."
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\resources\\messages.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\completion.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    ",
      "https://docs.anthropic.com/en/api/prompt-validation) and\n    our guide to\n    [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more\n    details.\n    ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n    Recommended for advanced use cases only. You usually only need to use\n    `temperature`.\n    ",
      "https://docs.anthropic.com/en/api/streaming) for details.\n    ",
      "https://docs.anthropic.com/en/api/streaming) for details.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\completion_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\message.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n    ",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n    more input examples.\n\n    Note that if you want to include a\n    [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n    the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    ",
      "https://docs.anthropic.com/en/docs/system-prompts).\n    ",
      "https://json-schema.org/) for the tool `input`\n      shape that the model will produce in `tool_use` output content blocks.\n\n    For example, if you defined `tools` as:\n\n    ```json\n    [\n      {\n        ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n    ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n    Recommended for advanced use cases only. You usually only need to use\n    `temperature`.\n    ",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n    details.\n    ",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n    details.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\message_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://json-schema.org/) for this tool"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\tool_param.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://jsonlines.org) format.\n\n    This class provides an iterator over a byte-iterator that parses each JSON Line\n    into a given type.\n    ",
      "https://jsonlines.org) format.\n\n    This class provides an async iterator over a byte-iterator that parses each JSON Line\n    into a given type.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_decoders\\jsonl.py"
  },
  {
    "pattern": "127\\.0\\.0\\.1:\\d+",
    "matches": [
      "127.0.0.1:4010"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_utils\\_logs.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://127.0.0.1:4010/foo/bar "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_utils\\_logs.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_utils\\_logs.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/tiangolo/asyncer\ndef asyncify(\n    function: Callable[T_ParamSpec, T_Retval],\n    *,\n    cancellable: bool = False,\n    limiter: anyio.CapacityLimiter | None = None,\n) -> Callable[T_ParamSpec, Awaitable[T_Retval]]:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_utils\\_sync.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/Rapptz/RoboDanny\ndef human_join(seq: Sequence[str], *, delim: str = "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\_utils\\_utils.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\beta\\beta_message.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://json-schema.org/) for this tool"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\beta\\beta_tool_param.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n    more input examples.\n\n    Note that if you want to include a\n    [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n    the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    ",
      "https://docs.anthropic.com/en/docs/system-prompts).\n    ",
      "https://json-schema.org/) for the tool `input`\n      shape that the model will produce in `tool_use` output content blocks.\n\n    For example, if you defined `tools` as:\n\n    ```json\n    [\n      {\n        ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\beta\\message_count_tokens_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n    ",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n    more input examples.\n\n    Note that if you want to include a\n    [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n    the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    ",
      "https://docs.anthropic.com/en/docs/system-prompts).\n    ",
      "https://json-schema.org/) for the tool `input`\n      shape that the model will produce in `tool_use` output content blocks.\n\n    For example, if you defined `tools` as:\n\n    ```json\n    [\n      {\n        ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n    ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n    Recommended for advanced use cases only. You usually only need to use\n    `temperature`.\n    ",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n    details.\n    ",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n    details.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\beta\\message_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n    ",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n    more input examples.\n\n    Note that if you want to include a\n    [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n    the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    ",
      "https://docs.anthropic.com/en/docs/system-prompts).\n    ",
      "https://json-schema.org/) for the tool `input`\n      shape that the model will produce in `tool_use` output content blocks.\n\n    For example, if you defined `tools` as:\n\n    ```json\n    [\n      {\n        ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n    ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n    Recommended for advanced use cases only. You usually only need to use\n    `temperature`.\n    ",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n    details.\n    ",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n    details.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\beta\\prompt_caching\\message_create_params.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n    details and options.\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\beta\\prompt_caching\\prompt_caching_beta_message.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://json-schema.org/) for this tool"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\types\\beta\\prompt_caching\\prompt_caching_beta_tool_param.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\resources\\beta\\beta.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\resources\\beta\\messages\\batches.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          system: System prompt.\n\n              A system prompt is a way of providing context and instructions to Claude, such\n              as specifying a particular goal or role. See our\n              [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          system: System prompt.\n\n              A system prompt is a way of providing context and instructions to Claude, such\n              as specifying a particular goal or role. See our\n              [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          system: System prompt.\n\n              A system prompt is a way of providing context and instructions to Claude, such\n              as specifying a particular goal or role. See our\n              [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          system: System prompt.\n\n              A system prompt is a way of providing context and instructions to Claude, such\n              as specifying a particular goal or role. See our\n              [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\resources\\beta\\messages\\messages.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          system: System prompt.\n\n              A system prompt is a way of providing context and instructions to Claude, such\n              as specifying a particular goal or role. See our\n              [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          system: System prompt.\n\n              A system prompt is a way of providing context and instructions to Claude, such\n              as specifying a particular goal or role. See our\n              [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        ",
      "https://docs.anthropic.com/en/docs/models-overview) for details.\n\n          messages: Input messages.\n\n              Our models are trained to operate on alternating `user` and `assistant`\n              conversational turns. When creating a new `Message`, you specify the prior\n              conversational turns with the `messages` parameter, and the model then generates\n              the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n              in your request will be combined into a single turn.\n\n              Each input message must be an object with a `role` and `content`. You can\n              specify a single `user`-role message, or you can include multiple `user` and\n              `assistant` messages.\n\n              If the final message uses the `assistant` role, the response content will\n              continue immediately from the content in that message. This can be used to\n              constrain part of the model",
      "https://docs.anthropic.com/en/api/messages-examples#vision) for\n              more input examples.\n\n              Note that if you want to include a\n              [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n              the top-level `system` parameter \u2014 there is no `",
      "https://docs.anthropic.com/en/docs/models-overview) for additional\n              details and options.\n\n          stream: Whether to incrementally stream the response using server-sent events.\n\n              See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n              details.\n\n          metadata: An object describing metadata about the request.\n\n          stop_sequences: Custom text sequences that will cause the model to stop generating.\n\n              Our models will normally stop when they have naturally completed their turn,\n              which will result in a response `stop_reason` of `",
      "https://docs.anthropic.com/en/docs/system-prompts).\n\n          temperature: Amount of randomness injected into the response.\n\n              Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n              for analytical / multiple choice, and closer to `1.0` for creative and\n              generative tasks.\n\n              Note that even with `temperature` of `0.0`, the results will not be fully\n              deterministic.\n\n          tool_choice: How the model should use the provided tools. The model can use a specific tool,\n              any available tool, or decide by itself.\n\n          tools: Definitions of tools that the model may use.\n\n              If you include `tools` in your API request, the model may return `tool_use`\n              content blocks that represent the model",
      "https://json-schema.org/) for the tool `input`\n                shape that the model will produce in `tool_use` output content blocks.\n\n              For example, if you defined `tools` as:\n\n              ```json\n              [\n                {\n                  ",
      "https://docs.anthropic.com/en/docs/tool-use) for more details.\n\n          top_k: Only sample from the top K options for each subsequent token.\n\n              Used to remove ",
      "https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          top_p: Use nucleus sampling.\n\n              In nucleus sampling, we compute the cumulative distribution over all the options\n              for each subsequent token in decreasing probability order and cut it off once it\n              reaches a particular probability specified by `top_p`. You should either alter\n              `temperature` or `top_p`, but not both.\n\n              Recommended for advanced use cases only. You usually only need to use\n              `temperature`.\n\n          betas: Optional header to specify the beta version(s) you want to use.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\resources\\beta\\prompt_caching\\messages.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\resources\\beta\\prompt_caching\\prompt_caching.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\lib\\bedrock\\_beta.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\lib\\bedrock\\_beta_messages.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python-httpx.org/api/#client) for more details.\n        http_client: httpx.Client | None = None,\n        # Enable or disable schema validation for data returned by the API.\n        # When enabled an error APIResponseValidationError is raised\n        # if the API responds with invalid data for the expected schema.\n        #\n        # This parameter may be removed or changed in the future.\n        # If you rely on this feature, please open a GitHub issue\n        # outlining your use-case to help us decide if it should be\n        # part of our public interface in the future.\n        _strict_response_validation: bool = False,\n    ) -> None:\n        self.aws_secret_key = aws_secret_key\n\n        self.aws_access_key = aws_access_key\n\n        if aws_region is None:\n            aws_region = os.environ.get(",
      "https://bedrock-runtime.{self.aws_region}.amazonaws.com",
      "https://www.python-httpx.org/api/#client) for more details.\n        http_client: httpx.AsyncClient | None = None,\n        # Enable or disable schema validation for data returned by the API.\n        # When enabled an error APIResponseValidationError is raised\n        # if the API responds with invalid data for the expected schema.\n        #\n        # This parameter may be removed or changed in the future.\n        # If you rely on this feature, please open a GitHub issue\n        # outlining your use-case to help us decide if it should be\n        # part of our public interface in the future.\n        _strict_response_validation: bool = False,\n    ) -> None:\n        self.aws_secret_key = aws_secret_key\n\n        self.aws_access_key = aws_access_key\n\n        if aws_region is None:\n            aws_region = os.environ.get(",
      "https://bedrock-runtime.{self.aws_region}.amazonaws.com"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\lib\\bedrock\\_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.googleapis.com/auth/cloud-platform"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\lib\\vertex\\_auth.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\lib\\vertex\\_beta.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#accessing-raw-response-data-eg-headers\n        ",
      "https://www.github.com/anthropics/anthropic-sdk-python#with_streaming_response\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\lib\\vertex\\_beta_messages.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://www.python-httpx.org/api/#client) for more details.\n        http_client: httpx.Client | None = None,\n        # See httpx documentation for [custom transports](https://www.python-httpx.org/advanced/#custom-transports)\n        transport: Transport | None = None,\n        # See httpx documentation for [proxies](https://www.python-httpx.org/advanced/#http-proxying)\n        proxies: ProxiesTypes | None = None,\n        # See httpx documentation for [limits](https://www.python-httpx.org/advanced/#pool-limit-configuration)\n        connection_pool_limits: httpx.Limits | None = None,\n        _strict_response_validation: bool = False,\n    ) -> None:\n        if not is_given(region):\n            region = os.environ.get(",
      "https://{region}-aiplatform.googleapis.com/v1",
      "https://www.python-httpx.org/api/#client) for more details.\n        http_client: httpx.AsyncClient | None = None,\n        # See httpx documentation for [custom transports](https://www.python-httpx.org/advanced/#custom-transports)\n        transport: AsyncTransport | None = None,\n        # See httpx documentation for [proxies](https://www.python-httpx.org/advanced/#http-proxying)\n        proxies: ProxiesTypes | None = None,\n        # See httpx documentation for [limits](https://www.python-httpx.org/advanced/#pool-limit-configuration)\n        connection_pool_limits: httpx.Limits | None = None,\n        _strict_response_validation: bool = False,\n    ) -> None:\n        if not is_given(region):\n            region = os.environ.get(",
      "https://{region}-aiplatform.googleapis.com/v1"
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\anthropic\\lib\\vertex\\_client.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.mssqltips.com/sqlservertip/1425/\\\n    # working-with-default-constraints-in-sql-server/\n    return "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\alembic\\ddl\\mssql.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.sqlalchemy.org/en/latest/dialects/postgresql.html#operator-classes",
      "https://github.com/sqlalchemy/sqlalchemy/blob/\n        # 82fa95cfce070fab401d020c6e6e4a6a96cc2578/\n        # lib/sqlalchemy/dialects/postgresql/base.py#L2261\n        if is_index and not isinstance(expr, ColumnClause):\n            expr = expr.self_group()\n\n        return super().render_ddl_sql_expr(\n            expr, is_server_default=is_server_default, is_index=is_index, **kw\n        )\n\n    def render_type(\n        self, type_: TypeEngine, autogen_context: AutogenContext\n    ) -> Union[str, Literal[False]]:\n        mod = type(type_).__module__\n        if not mod.startswith("
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\alembic\\ddl\\postgresql.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://bugs.python.org/issue10740\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\alembic\\ddl\\sqlite.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\nfrom __future__ import annotations\n\nimport types\nfrom typing import Union\n\nfrom sqlalchemy.util import inspect_getfullargspec\n\nfrom ..util import sqla_2\n\n\ndef flag_combinations(*combinations):\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\alembic\\testing\\util.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://www.opensource.org/licenses/mit-license.php\n\n\nimport warnings\n\nfrom sqlalchemy import exc as sa_exc\n\nfrom ..util import sqla_14\n\n\ndef setup_filters():\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\alembic\\testing\\warnings.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://importlib-resources.readthedocs.io/en/latest/migration.html#pkg-resources-resource-filename  # noqa E501\n\n        file_manager = ExitStack()\n        atexit.register(file_manager.close)\n\n        ref = compat.importlib_resources.files(tokens[0])\n        for tok in tokens[1:]:\n            ref = ref / tok\n        fname = file_manager.enter_context(  # type: ignore[assignment]\n            compat.importlib_resources.as_file(ref)\n        )\n    return fname\n\n\ndef pyc_file_from_path(path: str) -> Optional[str]:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\alembic\\util\\pyfiles.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.sqlalchemy.org/en/latest/changelog/changelog_14.html#change-0c6e0cc67dfe6fac5164720e57ef307d\nsqla_14_18 = _vers >= (1, 4, 18)\nsqla_14_26 = _vers >= (1, 4, 26)\nsqla_2 = _vers >= (2,)\nsqlalchemy_version = __version__\n\ntry:\n    from sqlalchemy.sql.naming import _NONE_NAME as _NONE_NAME  # type: ignore[attr-defined]  # noqa: E501\nexcept ImportError:\n    from sqlalchemy.sql.elements import _NONE_NAME as _NONE_NAME  # type: ignore  # noqa: E501\n\n\nclass _Unsupported:\n    "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\alembic\\util\\sqla_compat.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://sqlite.org/deterministic.html\n        "
    ],
    "file": "pythagora-core\\venv\\Lib\\site-packages\\aiosqlite\\tests\\smoke.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://api.openai.com",
      "https://api.openai.com",
      "https://example.com",
      "https://example.com",
      "https://test.openai.com",
      "https://test.openai.com"
    ],
    "file": "pythagora-core\\tests\\cli\\test_cli.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://api.openai.com/v1",
      "https://api.anthropic.com",
      "https://api.openai.com/v1",
      "https://api.anthropic.com",
      "https://api.openai.com/v1"
    ],
    "file": "pythagora-core\\tests\\config\\test_config.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://example.openai.com/v1/chat/completions",
      "http://example.openai.com/v1/",
      "http://openai.azure.com/v1/chat/completions",
      "http://openai.azure.com/v1/"
    ],
    "file": "pythagora-core\\tests\\config\\test_env_importer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://openrouter.ai/api/v1/chat/completions",
      "https://openrouter.ai/api/v1/"
    ],
    "file": "pythagora-core\\tests\\config\\test_env_importer.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "user@example.com"
    ],
    "file": "pythagora-core\\tests\\telemetry\\test_telemetry.py"
  },
  {
    "pattern": "\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b",
    "matches": [
      "127.0.0.1"
    ],
    "file": "pythagora-core\\tests\\ui\\test_ipc_client.py"
  },
  {
    "pattern": "api_key\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "api_key=\"sk-incorrect\""
    ],
    "file": "pythagora-core\\tests\\integration\\llm\\test_anthropic.py"
  },
  {
    "pattern": "api_key\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "api_key=\"sk-incorrect\""
    ],
    "file": "pythagora-core\\tests\\integration\\llm\\test_groq.py"
  },
  {
    "pattern": "api_key\\s*=\\s*[\"\\'][^\"\\']+[\"\\']",
    "matches": [
      "api_key=\"sk-incorrect\""
    ],
    "file": "pythagora-core\\tests\\integration\\llm\\test_openai.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://github.com/Pythagora-io/gpt-pilot/wiki/Using-GPT-Pilot-with-frontend-frameworks"
    ],
    "file": "pythagora-core\\core\\agents\\architect.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5173",
      "localhost:5173",
      "localhost:5173"
    ],
    "file": "pythagora-core\\core\\agents\\frontend.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5173/",
      "http://localhost:5173",
      "http://localhost:5173"
    ],
    "file": "pythagora-core\\core\\agents\\frontend.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://s3.us-east-1.amazonaws.com/assets.pythagora.ai/scripts/utils.js",
      "https://s3.us-east-1.amazonaws.com/assets.pythagora.ai/logos/favicon.ico"
    ],
    "file": "pythagora-core\\core\\agents\\orchestrator.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://example.com"
    ],
    "file": "pythagora-core\\core\\agents\\spec_writer.py"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5173",
      "localhost:5173"
    ],
    "file": "pythagora-core\\core\\agents\\tech_lead.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5173/register",
      "http://localhost:5173/login"
    ],
    "file": "pythagora-core\\core\\agents\\tech_lead.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://4101633bc5560bae67d6eab013ba9686@o4508731634221056.ingest.us.sentry.io/4508732401909760"
    ],
    "file": "pythagora-core\\core\\cli\\helpers.py"
  },
  {
    "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "matches": [
      "4101633bc5560bae67d6eab013ba9686@o4508731634221056.ingest.us.sentry.io"
    ],
    "file": "pythagora-core\\core\\cli\\helpers.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://openrouter.ai/api/v1/chat/completions"
    ],
    "file": "pythagora-core\\core\\config\\env_importer.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://api.pythagora.io/telemetry"
    ],
    "file": "pythagora-core\\core\\config\\user_settings.py"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://docs-pythagora-io-439719575.us-east-1.elb.amazonaws.com"
    ],
    "file": "pythagora-core\\core\\config\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://api.pythagora.io"
    ],
    "file": "pythagora-core\\core\\config\\__init__.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://docs.anthropic.com/en/api/rate-limits#response-headers\n        Limit reset times are in RFC 3339 format.\n\n        "
    ],
    "file": "pythagora-core\\core\\llm\\anthropic_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://bit.ly/faq-token-limit-error"
    ],
    "file": "pythagora-core\\core\\llm\\base.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken\n            prompt_tokens = sum(3 + len(tokenizer.encode(msg[",
      "https://console.groq.com/docs/rate-limits\n\n        Groq includes `retry-after` header when 429 RateLimitError is\n        thrown, so we use that instead of calculating our own backoff time.\n        "
    ],
    "file": "pythagora-core\\core\\llm\\groq_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken\n            prompt_tokens = sum(3 + len(tokenizer.encode(msg[",
      "https://platform.openai.com/docs/guides/rate-limits/error-mitigation\n        Limit reset times are in "
    ],
    "file": "pythagora-core\\core\\llm\\openai_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://api.pythagora.io/v1/relace/merge"
    ],
    "file": "pythagora-core\\core\\llm\\relace_client.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\n- State Management: Directly in the React component\n    - make sure to initialize the state from the local storage as default (... = useState(JSON.parse(localStorage.getItem("
    ],
    "file": "pythagora-core\\core\\templates\\example_project.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js]"
    ],
    "file": "pythagora-core\\core\\templates\\node_express_mongoose.py"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://code.jquery.com/jquery-3.6.0.min.js",
      "https://code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css",
      "https://code.jquery.com/ui/1.12.1/jquery-ui.js"
    ],
    "file": "recipe_search.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css",
      "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css",
      "https://code.jquery.com/jquery-3.6.0.min.js",
      "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js",
      "https://code.jquery.com/ui/1.13.2/themes/ui-lightness/jquery-ui.css",
      "https://code.jquery.com/ui/1.13.2/jquery-ui.min.js",
      "https://cdn.datatables.net/1.10.24/css/dataTables.bootstrap4.min.css",
      "https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css",
      "https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css",
      "https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js",
      "https://cdn.datatables.net/1.10.24/js/dataTables.bootstrap4.min.js",
      "https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js",
      "https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"
    ],
    "file": "templates\\admin_master.html"
  },
  {
    "pattern": "german",
    "matches": [
      "German",
      "German",
      "German"
    ],
    "file": "templates\\admin_master.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css",
      "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css",
      "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css",
      "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js",
      "https://code.jquery.com/jquery-3.6.0.min.js",
      "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js",
      "https://code.jquery.com/ui/1.13.2/themes/ui-lightness/jquery-ui.css",
      "https://code.jquery.com/ui/1.13.2/jquery-ui.min.js",
      "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    ],
    "file": "templates\\index.html"
  },
  {
    "pattern": "german",
    "matches": [
      "German",
      "German",
      "German"
    ],
    "file": "templates\\index.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css",
      "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css",
      "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    ],
    "file": "templates\\auth\\change_password.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css",
      "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css",
      "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    ],
    "file": "templates\\auth\\login.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css",
      "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css",
      "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    ],
    "file": "templates\\auth\\register.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://code.jquery.com/jquery-3.6.0.min.js"
    ],
    "file": "templates\\ingredients\\list.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css",
      "https://cdn.jsdelivr.net/npm/flatpickr"
    ],
    "file": "templates\\packing\\create.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css",
      "https://cdn.jsdelivr.net/npm/flatpickr"
    ],
    "file": "templates\\production\\edit.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://code.jquery.com/jquery-3.6.0.min.js"
    ],
    "file": "templates\\production\\list.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://code.jquery.com/jquery-3.6.0.min.js",
      "https://code.jquery.com/ui/1.12.1/jquery-ui.min.js",
      "https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"
    ],
    "file": "templates\\soh\\create.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://code.jquery.com/jquery-3.6.0.min.js",
      "https://code.jquery.com/ui/1.12.1/jquery-ui.min.js",
      "https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"
    ],
    "file": "templates\\soh\\edit.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://code.jquery.com/jquery-3.6.0.min.js"
    ],
    "file": "templates\\soh\\list.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://s3.us-east-1.amazonaws.com/assets.pythagora.ai/scripts/utils.js",
      "https://s3.us-east-1.amazonaws.com/assets.pythagora.ai/logos/favicon.ico"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\vite_react_swagger\\client\\index.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://s3.us-east-1.amazonaws.com/assets.pythagora.ai/scripts/utils.js",
      "https://s3.us-east-1.amazonaws.com/assets.pythagora.ai/logos/favicon.ico"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\vite_react\\client\\index.html"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n})\n"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\javascript_react\\vite.config.js"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:${port}`);\n});\n"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\node_express_mongoose\\server.js"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:${port}/`);\n  await server.listen(port);\n};\n\nmain();\n"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\react_express\\server.js"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:3000"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\react_express\\vite.config.js"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:3000"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\react_express\\vite.config.js"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      "
    ],
    "file": "pythagora-core\\core\\templates\\tree\\react_express\\vite.config.js"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:${port}`);\n});\n"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\vite_react\\server\\server.js"
  },
  {
    "pattern": "localhost:\\d+",
    "matches": [
      "localhost:5173"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\react_express\\api\\app.js"
  },
  {
    "pattern": "http://[^\"\\']+",
    "matches": [
      "http://localhost:5173"
    ],
    "file": "pythagora-core\\core\\templates\\tree\\react_express\\api\\app.js"
  },
  {
    "pattern": "https://[^\"\\']+",
    "matches": [
      "https://nodemailer.com/smtp/ for all options\n *\n * Send mail with:\n *\n *   import transport from ",
      "https://nodemailer.com/message/\n */\nimport nodemailer from "
    ],
    "file": "pythagora-core\\core\\templates\\tree\\react_express\\api\\utils\\mail.js"
  }
]